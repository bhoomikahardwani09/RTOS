
001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007610  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080077b0  080077b0  000087b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007950  08007950  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007950  08007950  00008950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007958  08007958  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007958  08007958  00008958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800795c  0800795c  0000895c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007960  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047e8  20000068  080079c8  00009068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004850  080079c8  00009850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015273  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d3  00000000  00000000  0001e30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  000213e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f4a  00000000  00000000  000227b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a34c  00000000  00000000  00023702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015124  00000000  00000000  0003da4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac31b  00000000  00000000  00052b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fee8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005870  00000000  00000000  000feed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  00104740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007798 	.word	0x08007798

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007798 	.word	0x08007798

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20003130 	.word	0x20003130
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000334:	f000 b988 	b.w	8000648 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	468e      	mov	lr, r1
 8000358:	4604      	mov	r4, r0
 800035a:	4688      	mov	r8, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d962      	bls.n	800042c <__udivmoddi4+0xdc>
 8000366:	fab2 f682 	clz	r6, r2
 800036a:	b14e      	cbz	r6, 8000380 <__udivmoddi4+0x30>
 800036c:	f1c6 0320 	rsb	r3, r6, #32
 8000370:	fa01 f806 	lsl.w	r8, r1, r6
 8000374:	fa20 f303 	lsr.w	r3, r0, r3
 8000378:	40b7      	lsls	r7, r6
 800037a:	ea43 0808 	orr.w	r8, r3, r8
 800037e:	40b4      	lsls	r4, r6
 8000380:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	fbb8 f1fe 	udiv	r1, r8, lr
 800038c:	0c23      	lsrs	r3, r4, #16
 800038e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000392:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000396:	fb01 f20c 	mul.w	r2, r1, ip
 800039a:	429a      	cmp	r2, r3
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0x62>
 800039e:	18fb      	adds	r3, r7, r3
 80003a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80003a4:	f080 80ea 	bcs.w	800057c <__udivmoddi4+0x22c>
 80003a8:	429a      	cmp	r2, r3
 80003aa:	f240 80e7 	bls.w	800057c <__udivmoddi4+0x22c>
 80003ae:	3902      	subs	r1, #2
 80003b0:	443b      	add	r3, r7
 80003b2:	1a9a      	subs	r2, r3, r2
 80003b4:	b2a3      	uxth	r3, r4
 80003b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80003be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003c6:	459c      	cmp	ip, r3
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x8e>
 80003ca:	18fb      	adds	r3, r7, r3
 80003cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003d0:	f080 80d6 	bcs.w	8000580 <__udivmoddi4+0x230>
 80003d4:	459c      	cmp	ip, r3
 80003d6:	f240 80d3 	bls.w	8000580 <__udivmoddi4+0x230>
 80003da:	443b      	add	r3, r7
 80003dc:	3802      	subs	r0, #2
 80003de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e2:	eba3 030c 	sub.w	r3, r3, ip
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11d      	cbz	r5, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40f3      	lsrs	r3, r6
 80003ec:	2200      	movs	r2, #0
 80003ee:	e9c5 3200 	strd	r3, r2, [r5]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d905      	bls.n	8000406 <__udivmoddi4+0xb6>
 80003fa:	b10d      	cbz	r5, 8000400 <__udivmoddi4+0xb0>
 80003fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	4608      	mov	r0, r1
 8000404:	e7f5      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000406:	fab3 f183 	clz	r1, r3
 800040a:	2900      	cmp	r1, #0
 800040c:	d146      	bne.n	800049c <__udivmoddi4+0x14c>
 800040e:	4573      	cmp	r3, lr
 8000410:	d302      	bcc.n	8000418 <__udivmoddi4+0xc8>
 8000412:	4282      	cmp	r2, r0
 8000414:	f200 8105 	bhi.w	8000622 <__udivmoddi4+0x2d2>
 8000418:	1a84      	subs	r4, r0, r2
 800041a:	eb6e 0203 	sbc.w	r2, lr, r3
 800041e:	2001      	movs	r0, #1
 8000420:	4690      	mov	r8, r2
 8000422:	2d00      	cmp	r5, #0
 8000424:	d0e5      	beq.n	80003f2 <__udivmoddi4+0xa2>
 8000426:	e9c5 4800 	strd	r4, r8, [r5]
 800042a:	e7e2      	b.n	80003f2 <__udivmoddi4+0xa2>
 800042c:	2a00      	cmp	r2, #0
 800042e:	f000 8090 	beq.w	8000552 <__udivmoddi4+0x202>
 8000432:	fab2 f682 	clz	r6, r2
 8000436:	2e00      	cmp	r6, #0
 8000438:	f040 80a4 	bne.w	8000584 <__udivmoddi4+0x234>
 800043c:	1a8a      	subs	r2, r1, r2
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	b280      	uxth	r0, r0
 8000446:	b2bc      	uxth	r4, r7
 8000448:	2101      	movs	r1, #1
 800044a:	fbb2 fcfe 	udiv	ip, r2, lr
 800044e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000456:	fb04 f20c 	mul.w	r2, r4, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x11e>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x11c>
 8000466:	429a      	cmp	r2, r3
 8000468:	f200 80e0 	bhi.w	800062c <__udivmoddi4+0x2dc>
 800046c:	46c4      	mov	ip, r8
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	fbb3 f2fe 	udiv	r2, r3, lr
 8000474:	fb0e 3312 	mls	r3, lr, r2, r3
 8000478:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800047c:	fb02 f404 	mul.w	r4, r2, r4
 8000480:	429c      	cmp	r4, r3
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x144>
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x142>
 800048c:	429c      	cmp	r4, r3
 800048e:	f200 80ca 	bhi.w	8000626 <__udivmoddi4+0x2d6>
 8000492:	4602      	mov	r2, r0
 8000494:	1b1b      	subs	r3, r3, r4
 8000496:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800049a:	e7a5      	b.n	80003e8 <__udivmoddi4+0x98>
 800049c:	f1c1 0620 	rsb	r6, r1, #32
 80004a0:	408b      	lsls	r3, r1
 80004a2:	fa22 f706 	lsr.w	r7, r2, r6
 80004a6:	431f      	orrs	r7, r3
 80004a8:	fa0e f401 	lsl.w	r4, lr, r1
 80004ac:	fa20 f306 	lsr.w	r3, r0, r6
 80004b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004b8:	4323      	orrs	r3, r4
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	fa1f fc87 	uxth.w	ip, r7
 80004c2:	fbbe f0f9 	udiv	r0, lr, r9
 80004c6:	0c1c      	lsrs	r4, r3, #16
 80004c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	fa02 f201 	lsl.w	r2, r2, r1
 80004da:	d909      	bls.n	80004f0 <__udivmoddi4+0x1a0>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004e2:	f080 809c 	bcs.w	800061e <__udivmoddi4+0x2ce>
 80004e6:	45a6      	cmp	lr, r4
 80004e8:	f240 8099 	bls.w	800061e <__udivmoddi4+0x2ce>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	eba4 040e 	sub.w	r4, r4, lr
 80004f4:	fa1f fe83 	uxth.w	lr, r3
 80004f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000500:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000504:	fb03 fc0c 	mul.w	ip, r3, ip
 8000508:	45a4      	cmp	ip, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1ce>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000512:	f080 8082 	bcs.w	800061a <__udivmoddi4+0x2ca>
 8000516:	45a4      	cmp	ip, r4
 8000518:	d97f      	bls.n	800061a <__udivmoddi4+0x2ca>
 800051a:	3b02      	subs	r3, #2
 800051c:	443c      	add	r4, r7
 800051e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000522:	eba4 040c 	sub.w	r4, r4, ip
 8000526:	fba0 ec02 	umull	lr, ip, r0, r2
 800052a:	4564      	cmp	r4, ip
 800052c:	4673      	mov	r3, lr
 800052e:	46e1      	mov	r9, ip
 8000530:	d362      	bcc.n	80005f8 <__udivmoddi4+0x2a8>
 8000532:	d05f      	beq.n	80005f4 <__udivmoddi4+0x2a4>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x1fe>
 8000536:	ebb8 0203 	subs.w	r2, r8, r3
 800053a:	eb64 0409 	sbc.w	r4, r4, r9
 800053e:	fa04 f606 	lsl.w	r6, r4, r6
 8000542:	fa22 f301 	lsr.w	r3, r2, r1
 8000546:	431e      	orrs	r6, r3
 8000548:	40cc      	lsrs	r4, r1
 800054a:	e9c5 6400 	strd	r6, r4, [r5]
 800054e:	2100      	movs	r1, #0
 8000550:	e74f      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000552:	fbb1 fcf2 	udiv	ip, r1, r2
 8000556:	0c01      	lsrs	r1, r0, #16
 8000558:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800055c:	b280      	uxth	r0, r0
 800055e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000562:	463b      	mov	r3, r7
 8000564:	4638      	mov	r0, r7
 8000566:	463c      	mov	r4, r7
 8000568:	46b8      	mov	r8, r7
 800056a:	46be      	mov	lr, r7
 800056c:	2620      	movs	r6, #32
 800056e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000572:	eba2 0208 	sub.w	r2, r2, r8
 8000576:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800057a:	e766      	b.n	800044a <__udivmoddi4+0xfa>
 800057c:	4601      	mov	r1, r0
 800057e:	e718      	b.n	80003b2 <__udivmoddi4+0x62>
 8000580:	4610      	mov	r0, r2
 8000582:	e72c      	b.n	80003de <__udivmoddi4+0x8e>
 8000584:	f1c6 0220 	rsb	r2, r6, #32
 8000588:	fa2e f302 	lsr.w	r3, lr, r2
 800058c:	40b7      	lsls	r7, r6
 800058e:	40b1      	lsls	r1, r6
 8000590:	fa20 f202 	lsr.w	r2, r0, r2
 8000594:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000598:	430a      	orrs	r2, r1
 800059a:	fbb3 f8fe 	udiv	r8, r3, lr
 800059e:	b2bc      	uxth	r4, r7
 80005a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005a4:	0c11      	lsrs	r1, r2, #16
 80005a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005aa:	fb08 f904 	mul.w	r9, r8, r4
 80005ae:	40b0      	lsls	r0, r6
 80005b0:	4589      	cmp	r9, r1
 80005b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005b6:	b280      	uxth	r0, r0
 80005b8:	d93e      	bls.n	8000638 <__udivmoddi4+0x2e8>
 80005ba:	1879      	adds	r1, r7, r1
 80005bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005c0:	d201      	bcs.n	80005c6 <__udivmoddi4+0x276>
 80005c2:	4589      	cmp	r9, r1
 80005c4:	d81f      	bhi.n	8000606 <__udivmoddi4+0x2b6>
 80005c6:	eba1 0109 	sub.w	r1, r1, r9
 80005ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ce:	fb09 f804 	mul.w	r8, r9, r4
 80005d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005d6:	b292      	uxth	r2, r2
 80005d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005dc:	4542      	cmp	r2, r8
 80005de:	d229      	bcs.n	8000634 <__udivmoddi4+0x2e4>
 80005e0:	18ba      	adds	r2, r7, r2
 80005e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005e6:	d2c4      	bcs.n	8000572 <__udivmoddi4+0x222>
 80005e8:	4542      	cmp	r2, r8
 80005ea:	d2c2      	bcs.n	8000572 <__udivmoddi4+0x222>
 80005ec:	f1a9 0102 	sub.w	r1, r9, #2
 80005f0:	443a      	add	r2, r7
 80005f2:	e7be      	b.n	8000572 <__udivmoddi4+0x222>
 80005f4:	45f0      	cmp	r8, lr
 80005f6:	d29d      	bcs.n	8000534 <__udivmoddi4+0x1e4>
 80005f8:	ebbe 0302 	subs.w	r3, lr, r2
 80005fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000600:	3801      	subs	r0, #1
 8000602:	46e1      	mov	r9, ip
 8000604:	e796      	b.n	8000534 <__udivmoddi4+0x1e4>
 8000606:	eba7 0909 	sub.w	r9, r7, r9
 800060a:	4449      	add	r1, r9
 800060c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000610:	fbb1 f9fe 	udiv	r9, r1, lr
 8000614:	fb09 f804 	mul.w	r8, r9, r4
 8000618:	e7db      	b.n	80005d2 <__udivmoddi4+0x282>
 800061a:	4673      	mov	r3, lr
 800061c:	e77f      	b.n	800051e <__udivmoddi4+0x1ce>
 800061e:	4650      	mov	r0, sl
 8000620:	e766      	b.n	80004f0 <__udivmoddi4+0x1a0>
 8000622:	4608      	mov	r0, r1
 8000624:	e6fd      	b.n	8000422 <__udivmoddi4+0xd2>
 8000626:	443b      	add	r3, r7
 8000628:	3a02      	subs	r2, #2
 800062a:	e733      	b.n	8000494 <__udivmoddi4+0x144>
 800062c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000630:	443b      	add	r3, r7
 8000632:	e71c      	b.n	800046e <__udivmoddi4+0x11e>
 8000634:	4649      	mov	r1, r9
 8000636:	e79c      	b.n	8000572 <__udivmoddi4+0x222>
 8000638:	eba1 0109 	sub.w	r1, r1, r9
 800063c:	46c4      	mov	ip, r8
 800063e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000642:	fb09 f804 	mul.w	r8, r9, r4
 8000646:	e7c4      	b.n	80005d2 <__udivmoddi4+0x282>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fa1f 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f855 	bl	8000704 <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  //enable the cycle count//
  DWT_CTRL |= (1 << 0);
 800065a:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <main+0x9c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a22      	ldr	r2, [pc, #136]	@ (80006e8 <main+0x9c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(50000);
 8000666:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800066a:	f004 f9d9 	bl	8004a20 <SEGGER_UART_init>

  //calling the APIs to start recording
  SEGGER_SYSVIEW_Conf();
 800066e:	f003 ffe7 	bl	8004640 <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", configMINIMAL_STACK_SIZE * 2, "hello world from Task-1", 2, &task1_handle);
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	2302      	movs	r3, #2
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <main+0xa0>)
 800067e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000682:	491b      	ldr	r1, [pc, #108]	@ (80006f0 <main+0xa4>)
 8000684:	481b      	ldr	r0, [pc, #108]	@ (80006f4 <main+0xa8>)
 8000686:	f001 fe45 	bl	8002314 <xTaskCreate>
 800068a:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d00b      	beq.n	80006aa <main+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	e7fd      	b.n	80006a6 <main+0x5a>

  status = xTaskCreate(task2_handler, "Task-2", configMINIMAL_STACK_SIZE * 2, "hello world from Task-2", 2, &task2_handle);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2302      	movs	r3, #2
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <main+0xac>)
 80006b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006b8:	4910      	ldr	r1, [pc, #64]	@ (80006fc <main+0xb0>)
 80006ba:	4811      	ldr	r0, [pc, #68]	@ (8000700 <main+0xb4>)
 80006bc:	f001 fe2a 	bl	8002314 <xTaskCreate>
 80006c0:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d00b      	beq.n	80006e0 <main+0x94>
    __asm volatile
 80006c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006cc:	f383 8811 	msr	BASEPRI, r3
 80006d0:	f3bf 8f6f 	isb	sy
 80006d4:	f3bf 8f4f 	dsb	sy
 80006d8:	60fb      	str	r3, [r7, #12]
}
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <main+0x90>

  //starting the FreeRTOS scheduler//
  vTaskStartScheduler();
 80006e0:	f001 ffdc 	bl	800269c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <main+0x98>
 80006e8:	e0001000 	.word	0xe0001000
 80006ec:	080077b0 	.word	0x080077b0
 80006f0:	080077c8 	.word	0x080077c8
 80006f4:	080007d9 	.word	0x080007d9
 80006f8:	080077d0 	.word	0x080077d0
 80006fc:	080077e8 	.word	0x080077e8
 8000700:	08000815 	.word	0x08000815

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	@ 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 fbba 	bl	8006e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a27      	ldr	r2, [pc, #156]	@ (80007d0 <SystemClock_Config+0xcc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <SystemClock_Config+0xd0>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000778:	2364      	movs	r3, #100	@ 0x64
 800077a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f000 faa7 	bl	8000cdc <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000794:	f000 f86b 	bl	800086e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2103      	movs	r1, #3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fd08 	bl	80011cc <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c2:	f000 f854 	bl	800086e <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	@ 0x70
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
//		printf("%s\n", (char*) parameters);
		snprintf(msg, 100, "%s\n", (char*) parameters);
 80007e0:	f107 000c 	add.w	r0, r7, #12
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a09      	ldr	r2, [pc, #36]	@ (800080c <task1_handler+0x34>)
 80007e8:	2164      	movs	r1, #100	@ 0x64
 80007ea:	f006 fb09 	bl	8006e00 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4618      	mov	r0, r3
 80007f4:	f006 fa66 	bl	8006cc4 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD(); //Macro for forcing a context switch.
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <task1_handler+0x38>)
 80007fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	f3bf 8f4f 	dsb	sy
 8000804:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000808:	bf00      	nop
 800080a:	e7e9      	b.n	80007e0 <task1_handler+0x8>
 800080c:	080077f0 	.word	0x080077f0
 8000810:	e000ed04 	.word	0xe000ed04

08000814 <task2_handler>:
	}

}
static void task2_handler(void* parameters)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09c      	sub	sp, #112	@ 0x70
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
//		printf("%s\n", (char*) parameters);
		snprintf(msg, 100, "%s\n", (char*) parameters);
 800081c:	f107 000c 	add.w	r0, r7, #12
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a09      	ldr	r2, [pc, #36]	@ (8000848 <task2_handler+0x34>)
 8000824:	2164      	movs	r1, #100	@ 0x64
 8000826:	f006 faeb 	bl	8006e00 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4618      	mov	r0, r3
 8000830:	f006 fa48 	bl	8006cc4 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD(); //Macro for forcing a context switch.
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <task2_handler+0x38>)
 8000836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	f3bf 8f4f 	dsb	sy
 8000840:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*) parameters);
 8000844:	bf00      	nop
 8000846:	e7e9      	b.n	800081c <task2_handler+0x8>
 8000848:	080077f0 	.word	0x080077f0
 800084c:	e000ed04 	.word	0xe000ed04

08000850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000860:	d101      	bne.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000862:	f000 f939 	bl	8000ad8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000872:	b672      	cpsid	i
}
 8000874:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000890:	6453      	str	r3, [r2, #68]	@ 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80008ba:	f003 fab3 	bl	8003e24 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	@ 0x38
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4b34      	ldr	r3, [pc, #208]	@ (80009b4 <HAL_InitTick+0xe8>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	4a33      	ldr	r2, [pc, #204]	@ (80009b4 <HAL_InitTick+0xe8>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ec:	4b31      	ldr	r3, [pc, #196]	@ (80009b4 <HAL_InitTick+0xe8>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f8:	f107 0210 	add.w	r2, r7, #16
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fe2e 	bl	8001564 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800090c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090e:	2b00      	cmp	r3, #0
 8000910:	d103      	bne.n	800091a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000912:	f000 fe13 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 8000916:	6378      	str	r0, [r7, #52]	@ 0x34
 8000918:	e004      	b.n	8000924 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800091a:	f000 fe0f 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 800091e:	4603      	mov	r3, r0
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000926:	4a24      	ldr	r2, [pc, #144]	@ (80009b8 <HAL_InitTick+0xec>)
 8000928:	fba2 2303 	umull	r2, r3, r2, r3
 800092c:	0c9b      	lsrs	r3, r3, #18
 800092e:	3b01      	subs	r3, #1
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000932:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <HAL_InitTick+0xf0>)
 8000934:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000938:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800093a:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <HAL_InitTick+0xf0>)
 800093c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000940:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000942:	4a1e      	ldr	r2, [pc, #120]	@ (80009bc <HAL_InitTick+0xf0>)
 8000944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000946:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000948:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <HAL_InitTick+0xf0>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <HAL_InitTick+0xf0>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000954:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <HAL_InitTick+0xf0>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800095a:	4818      	ldr	r0, [pc, #96]	@ (80009bc <HAL_InitTick+0xf0>)
 800095c:	f000 fe34 	bl	80015c8 <HAL_TIM_Base_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000966:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800096a:	2b00      	cmp	r3, #0
 800096c:	d11b      	bne.n	80009a6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800096e:	4813      	ldr	r0, [pc, #76]	@ (80009bc <HAL_InitTick+0xf0>)
 8000970:	f000 fe84 	bl	800167c <HAL_TIM_Base_Start_IT>
 8000974:	4603      	mov	r3, r0
 8000976:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800097a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800097e:	2b00      	cmp	r3, #0
 8000980:	d111      	bne.n	80009a6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000982:	201c      	movs	r0, #28
 8000984:	f000 f99c 	bl	8000cc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b0f      	cmp	r3, #15
 800098c:	d808      	bhi.n	80009a0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800098e:	2200      	movs	r2, #0
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	201c      	movs	r0, #28
 8000994:	f000 f978 	bl	8000c88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000998:	4a09      	ldr	r2, [pc, #36]	@ (80009c0 <HAL_InitTick+0xf4>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
 800099e:	e002      	b.n	80009a6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3738      	adds	r7, #56	@ 0x38
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	431bde83 	.word	0x431bde83
 80009bc:	20000084 	.word	0x20000084
 80009c0:	20000004 	.word	0x20000004

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <MemManage_Handler+0x4>

080009dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <TIM2_IRQHandler+0x10>)
 8000a0e:	f000 fe97 	bl	8001740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000084 	.word	0x20000084

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a44:	f7ff ffea 	bl	8000a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	@ (8000a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	@ (8000a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f006 fa15 	bl	8006e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a72:	f7ff fdeb 	bl	800064c <main>
  bx  lr    
 8000a76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a84:	08007960 	.word	0x08007960
  ldr r2, =_sbss
 8000a88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a8c:	20004850 	.word	0x20004850

08000a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <HAL_Init+0x40>)
 8000a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <HAL_Init+0x40>)
 8000aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <HAL_Init+0x40>)
 8000ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f8d8 	bl	8000c72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f7ff ff02 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fed8 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023c00 	.word	0x40023c00

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	200000cc 	.word	0x200000cc

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200000cc 	.word	0x200000cc

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	@ (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	@ (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	@ (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	@ 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ff4c 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9a:	f7ff ff61 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000c9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	68b9      	ldr	r1, [r7, #8]
 8000ca4:	6978      	ldr	r0, [r7, #20]
 8000ca6:	f7ff ffb1 	bl	8000c0c <NVIC_EncodePriority>
 8000caa:	4602      	mov	r2, r0
 8000cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff80 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cb8:	bf00      	nop
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff54 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e267      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d075      	beq.n	8000de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000cfa:	4b88      	ldr	r3, [pc, #544]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d00c      	beq.n	8000d20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d06:	4b85      	ldr	r3, [pc, #532]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d112      	bne.n	8000d38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d12:	4b82      	ldr	r3, [pc, #520]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000d1e:	d10b      	bne.n	8000d38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d20:	4b7e      	ldr	r3, [pc, #504]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d05b      	beq.n	8000de4 <HAL_RCC_OscConfig+0x108>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d157      	bne.n	8000de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e242      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d40:	d106      	bne.n	8000d50 <HAL_RCC_OscConfig+0x74>
 8000d42:	4b76      	ldr	r3, [pc, #472]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a75      	ldr	r2, [pc, #468]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e01d      	b.n	8000d8c <HAL_RCC_OscConfig+0xb0>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d58:	d10c      	bne.n	8000d74 <HAL_RCC_OscConfig+0x98>
 8000d5a:	4b70      	ldr	r3, [pc, #448]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a6f      	ldr	r2, [pc, #444]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4b6d      	ldr	r3, [pc, #436]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a6c      	ldr	r2, [pc, #432]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e00b      	b.n	8000d8c <HAL_RCC_OscConfig+0xb0>
 8000d74:	4b69      	ldr	r3, [pc, #420]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a68      	ldr	r2, [pc, #416]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b66      	ldr	r3, [pc, #408]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a65      	ldr	r2, [pc, #404]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d013      	beq.n	8000dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff feb4 	bl	8000b00 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d9c:	f7ff feb0 	bl	8000b00 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b64      	cmp	r3, #100	@ 0x64
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e207      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dae:	4b5b      	ldr	r3, [pc, #364]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0xc0>
 8000dba:	e014      	b.n	8000de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fea0 	bl	8000b00 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fe9c 	bl	8000b00 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	@ 0x64
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e1f3      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	4b51      	ldr	r3, [pc, #324]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0xe8>
 8000de2:	e000      	b.n	8000de6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d063      	beq.n	8000eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000df2:	4b4a      	ldr	r3, [pc, #296]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00b      	beq.n	8000e16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dfe:	4b47      	ldr	r3, [pc, #284]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000e06:	2b08      	cmp	r3, #8
 8000e08:	d11c      	bne.n	8000e44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e0a:	4b44      	ldr	r3, [pc, #272]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d116      	bne.n	8000e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e16:	4b41      	ldr	r3, [pc, #260]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d005      	beq.n	8000e2e <HAL_RCC_OscConfig+0x152>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d001      	beq.n	8000e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e1c7      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	4937      	ldr	r1, [pc, #220]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e42:	e03a      	b.n	8000eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d020      	beq.n	8000e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e4c:	4b34      	ldr	r3, [pc, #208]	@ (8000f20 <HAL_RCC_OscConfig+0x244>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e52:	f7ff fe55 	bl	8000b00 <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fe51 	bl	8000b00 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e1a8      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e78:	4b28      	ldr	r3, [pc, #160]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4925      	ldr	r1, [pc, #148]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
 8000e8c:	e015      	b.n	8000eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e8e:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <HAL_RCC_OscConfig+0x244>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e94:	f7ff fe34 	bl	8000b00 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fe30 	bl	8000b00 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e187      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eae:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d036      	beq.n	8000f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d016      	beq.n	8000efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_RCC_OscConfig+0x248>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ed4:	f7ff fe14 	bl	8000b00 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000edc:	f7ff fe10 	bl	8000b00 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e167      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <HAL_RCC_OscConfig+0x240>)
 8000ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0x200>
 8000efa:	e01b      	b.n	8000f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <HAL_RCC_OscConfig+0x248>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fdfd 	bl	8000b00 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f08:	e00e      	b.n	8000f28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fdf9 	bl	8000b00 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d907      	bls.n	8000f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e150      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	42470000 	.word	0x42470000
 8000f24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f28:	4b88      	ldr	r3, [pc, #544]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1ea      	bne.n	8000f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 8097 	beq.w	8001070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f46:	4b81      	ldr	r3, [pc, #516]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10f      	bne.n	8000f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b7d      	ldr	r3, [pc, #500]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	4a7c      	ldr	r2, [pc, #496]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f62:	4b7a      	ldr	r3, [pc, #488]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f72:	4b77      	ldr	r3, [pc, #476]	@ (8001150 <HAL_RCC_OscConfig+0x474>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d118      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f7e:	4b74      	ldr	r3, [pc, #464]	@ (8001150 <HAL_RCC_OscConfig+0x474>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a73      	ldr	r2, [pc, #460]	@ (8001150 <HAL_RCC_OscConfig+0x474>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fdb9 	bl	8000b00 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f92:	f7ff fdb5 	bl	8000b00 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e10c      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8001150 <HAL_RCC_OscConfig+0x474>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f0      	beq.n	8000f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d106      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x2ea>
 8000fb8:	4b64      	ldr	r3, [pc, #400]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fbc:	4a63      	ldr	r2, [pc, #396]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fc4:	e01c      	b.n	8001000 <HAL_RCC_OscConfig+0x324>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x30c>
 8000fce:	4b5f      	ldr	r3, [pc, #380]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fda:	4b5c      	ldr	r3, [pc, #368]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fde:	4a5b      	ldr	r2, [pc, #364]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fe6:	e00b      	b.n	8001000 <HAL_RCC_OscConfig+0x324>
 8000fe8:	4b58      	ldr	r3, [pc, #352]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fec:	4a57      	ldr	r2, [pc, #348]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000fee:	f023 0301 	bic.w	r3, r3, #1
 8000ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ff4:	4b55      	ldr	r3, [pc, #340]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ff8:	4a54      	ldr	r2, [pc, #336]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8000ffa:	f023 0304 	bic.w	r3, r3, #4
 8000ffe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d015      	beq.n	8001034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001008:	f7ff fd7a 	bl	8000b00 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800100e:	e00a      	b.n	8001026 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001010:	f7ff fd76 	bl	8000b00 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800101e:	4293      	cmp	r3, r2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e0cb      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001026:	4b49      	ldr	r3, [pc, #292]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8001028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0ee      	beq.n	8001010 <HAL_RCC_OscConfig+0x334>
 8001032:	e014      	b.n	800105e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001034:	f7ff fd64 	bl	8000b00 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800103a:	e00a      	b.n	8001052 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103c:	f7ff fd60 	bl	8000b00 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800104a:	4293      	cmp	r3, r2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e0b5      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001052:	4b3e      	ldr	r3, [pc, #248]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8001054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1ee      	bne.n	800103c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d105      	bne.n	8001070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001064:	4b39      	ldr	r3, [pc, #228]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	4a38      	ldr	r2, [pc, #224]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 800106a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 80a1 	beq.w	80011bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800107a:	4b34      	ldr	r3, [pc, #208]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b08      	cmp	r3, #8
 8001084:	d05c      	beq.n	8001140 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d141      	bne.n	8001112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800108e:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <HAL_RCC_OscConfig+0x478>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fd34 	bl	8000b00 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109c:	f7ff fd30 	bl	8000b00 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e087      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ae:	4b27      	ldr	r3, [pc, #156]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69da      	ldr	r2, [r3, #28]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c8:	019b      	lsls	r3, r3, #6
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d0:	085b      	lsrs	r3, r3, #1
 80010d2:	3b01      	subs	r3, #1
 80010d4:	041b      	lsls	r3, r3, #16
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010dc:	061b      	lsls	r3, r3, #24
 80010de:	491b      	ldr	r1, [pc, #108]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <HAL_RCC_OscConfig+0x478>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fd09 	bl	8000b00 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff fd05 	bl	8000b00 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e05c      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x416>
 8001110:	e054      	b.n	80011bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_RCC_OscConfig+0x478>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fcf2 	bl	8000b00 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001120:	f7ff fcee 	bl	8000b00 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e045      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_RCC_OscConfig+0x470>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x444>
 800113e:	e03d      	b.n	80011bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d107      	bne.n	8001158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e038      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000
 8001154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <HAL_RCC_OscConfig+0x4ec>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d028      	beq.n	80011b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001170:	429a      	cmp	r2, r3
 8001172:	d121      	bne.n	80011b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800117e:	429a      	cmp	r2, r3
 8001180:	d11a      	bne.n	80011b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001188:	4013      	ands	r3, r2
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800118e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001190:	4293      	cmp	r3, r2
 8001192:	d111      	bne.n	80011b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800119e:	085b      	lsrs	r3, r3, #1
 80011a0:	3b01      	subs	r3, #1
 80011a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d107      	bne.n	80011b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e0cc      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e0:	4b68      	ldr	r3, [pc, #416]	@ (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d90c      	bls.n	8001208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b65      	ldr	r3, [pc, #404]	@ (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b63      	ldr	r3, [pc, #396]	@ (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0b8      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001220:	4b59      	ldr	r3, [pc, #356]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4a58      	ldr	r2, [pc, #352]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800122a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001238:	4b53      	ldr	r3, [pc, #332]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a52      	ldr	r2, [pc, #328]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001244:	4b50      	ldr	r3, [pc, #320]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	494d      	ldr	r1, [pc, #308]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	4313      	orrs	r3, r2
 8001254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d044      	beq.n	80012ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d119      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e07f      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d003      	beq.n	800128a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001286:	2b03      	cmp	r3, #3
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128a:	4b3f      	ldr	r3, [pc, #252]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e06f      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e067      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012aa:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f023 0203 	bic.w	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4934      	ldr	r1, [pc, #208]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012bc:	f7ff fc20 	bl	8000b00 <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	e00a      	b.n	80012da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f7ff fc1c 	bl	8000b00 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e04f      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	4b2b      	ldr	r3, [pc, #172]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 020c 	and.w	r2, r3, #12
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d1eb      	bne.n	80012c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012ec:	4b25      	ldr	r3, [pc, #148]	@ (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d20c      	bcs.n	8001314 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001302:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d001      	beq.n	8001314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e032      	b.n	800137a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4916      	ldr	r1, [pc, #88]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800132e:	4313      	orrs	r3, r2
 8001330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	490e      	ldr	r1, [pc, #56]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	4313      	orrs	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001352:	f000 f821 	bl	8001398 <HAL_RCC_GetSysClockFreq>
 8001356:	4602      	mov	r2, r0
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	490a      	ldr	r1, [pc, #40]	@ (800138c <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	5ccb      	ldrb	r3, [r1, r3]
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_RCC_ClockConfig+0x1c8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff faaa 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00
 8001388:	40023800 	.word	0x40023800
 800138c:	080078c4 	.word	0x080078c4
 8001390:	20000000 	.word	0x20000000
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800139c:	b090      	sub	sp, #64	@ 0x40
 800139e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013b0:	4b59      	ldr	r3, [pc, #356]	@ (8001518 <HAL_RCC_GetSysClockFreq+0x180>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d00d      	beq.n	80013d8 <HAL_RCC_GetSysClockFreq+0x40>
 80013bc:	2b08      	cmp	r3, #8
 80013be:	f200 80a1 	bhi.w	8001504 <HAL_RCC_GetSysClockFreq+0x16c>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <HAL_RCC_GetSysClockFreq+0x34>
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d003      	beq.n	80013d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80013ca:	e09b      	b.n	8001504 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013cc:	4b53      	ldr	r3, [pc, #332]	@ (800151c <HAL_RCC_GetSysClockFreq+0x184>)
 80013ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013d0:	e09b      	b.n	800150a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013d2:	4b53      	ldr	r3, [pc, #332]	@ (8001520 <HAL_RCC_GetSysClockFreq+0x188>)
 80013d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013d6:	e098      	b.n	800150a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001518 <HAL_RCC_GetSysClockFreq+0x180>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001518 <HAL_RCC_GetSysClockFreq+0x180>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d028      	beq.n	8001440 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001518 <HAL_RCC_GetSysClockFreq+0x180>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	099b      	lsrs	r3, r3, #6
 80013f4:	2200      	movs	r2, #0
 80013f6:	623b      	str	r3, [r7, #32]
 80013f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001400:	2100      	movs	r1, #0
 8001402:	4b47      	ldr	r3, [pc, #284]	@ (8001520 <HAL_RCC_GetSysClockFreq+0x188>)
 8001404:	fb03 f201 	mul.w	r2, r3, r1
 8001408:	2300      	movs	r3, #0
 800140a:	fb00 f303 	mul.w	r3, r0, r3
 800140e:	4413      	add	r3, r2
 8001410:	4a43      	ldr	r2, [pc, #268]	@ (8001520 <HAL_RCC_GetSysClockFreq+0x188>)
 8001412:	fba0 1202 	umull	r1, r2, r0, r2
 8001416:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001418:	460a      	mov	r2, r1
 800141a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800141c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800141e:	4413      	add	r3, r2
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001424:	2200      	movs	r2, #0
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	61fa      	str	r2, [r7, #28]
 800142a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800142e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001432:	f7fe ff75 	bl	8000320 <__aeabi_uldivmod>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4613      	mov	r3, r2
 800143c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800143e:	e053      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001440:	4b35      	ldr	r3, [pc, #212]	@ (8001518 <HAL_RCC_GetSysClockFreq+0x180>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	2200      	movs	r2, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	617a      	str	r2, [r7, #20]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001452:	f04f 0b00 	mov.w	fp, #0
 8001456:	4652      	mov	r2, sl
 8001458:	465b      	mov	r3, fp
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	0159      	lsls	r1, r3, #5
 8001464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001468:	0150      	lsls	r0, r2, #5
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	ebb2 080a 	subs.w	r8, r2, sl
 8001472:	eb63 090b 	sbc.w	r9, r3, fp
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001482:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001486:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800148a:	ebb2 0408 	subs.w	r4, r2, r8
 800148e:	eb63 0509 	sbc.w	r5, r3, r9
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	00eb      	lsls	r3, r5, #3
 800149c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014a0:	00e2      	lsls	r2, r4, #3
 80014a2:	4614      	mov	r4, r2
 80014a4:	461d      	mov	r5, r3
 80014a6:	eb14 030a 	adds.w	r3, r4, sl
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	eb45 030b 	adc.w	r3, r5, fp
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014be:	4629      	mov	r1, r5
 80014c0:	028b      	lsls	r3, r1, #10
 80014c2:	4621      	mov	r1, r4
 80014c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014c8:	4621      	mov	r1, r4
 80014ca:	028a      	lsls	r2, r1, #10
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014d2:	2200      	movs	r2, #0
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	60fa      	str	r2, [r7, #12]
 80014d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014dc:	f7fe ff20 	bl	8000320 <__aeabi_uldivmod>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4613      	mov	r3, r2
 80014e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <HAL_RCC_GetSysClockFreq+0x180>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	0c1b      	lsrs	r3, r3, #16
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	3301      	adds	r3, #1
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80014f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001500:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001502:	e002      	b.n	800150a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <HAL_RCC_GetSysClockFreq+0x184>)
 8001506:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800150a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800150c:	4618      	mov	r0, r3
 800150e:	3740      	adds	r7, #64	@ 0x40
 8001510:	46bd      	mov	sp, r7
 8001512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	00f42400 	.word	0x00f42400
 8001520:	017d7840 	.word	0x017d7840

08001524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <HAL_RCC_GetHCLKFreq+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000000 	.word	0x20000000

0800153c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001540:	f7ff fff0 	bl	8001524 <HAL_RCC_GetHCLKFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b05      	ldr	r3, [pc, #20]	@ (800155c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	0a9b      	lsrs	r3, r3, #10
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	4903      	ldr	r1, [pc, #12]	@ (8001560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800
 8001560:	080078d4 	.word	0x080078d4

08001564 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	220f      	movs	r2, #15
 8001572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001598:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015a6:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <HAL_RCC_GetClockConfig+0x60>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0207 	and.w	r2, r3, #7
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e041      	b.n	800165e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f839 	bl	8001666 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2202      	movs	r2, #2
 80015f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3304      	adds	r3, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f000 f9b2 	bl	8001970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b01      	cmp	r3, #1
 800168e:	d001      	beq.n	8001694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e044      	b.n	800171e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1e      	ldr	r2, [pc, #120]	@ (800172c <HAL_TIM_Base_Start_IT+0xb0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d018      	beq.n	80016e8 <HAL_TIM_Base_Start_IT+0x6c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016be:	d013      	beq.n	80016e8 <HAL_TIM_Base_Start_IT+0x6c>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001730 <HAL_TIM_Base_Start_IT+0xb4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00e      	beq.n	80016e8 <HAL_TIM_Base_Start_IT+0x6c>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a19      	ldr	r2, [pc, #100]	@ (8001734 <HAL_TIM_Base_Start_IT+0xb8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d009      	beq.n	80016e8 <HAL_TIM_Base_Start_IT+0x6c>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <HAL_TIM_Base_Start_IT+0xbc>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d004      	beq.n	80016e8 <HAL_TIM_Base_Start_IT+0x6c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a16      	ldr	r2, [pc, #88]	@ (800173c <HAL_TIM_Base_Start_IT+0xc0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d111      	bne.n	800170c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d010      	beq.n	800171c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0201 	orr.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800170a:	e007      	b.n	800171c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0201 	orr.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40010000 	.word	0x40010000
 8001730:	40000400 	.word	0x40000400
 8001734:	40000800 	.word	0x40000800
 8001738:	40000c00 	.word	0x40000c00
 800173c:	40014000 	.word	0x40014000

08001740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d020      	beq.n	80017a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01b      	beq.n	80017a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0202 	mvn.w	r2, #2
 8001774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f8d2 	bl	8001934 <HAL_TIM_IC_CaptureCallback>
 8001790:	e005      	b.n	800179e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f8c4 	bl	8001920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f8d5 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d020      	beq.n	80017f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01b      	beq.n	80017f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f06f 0204 	mvn.w	r2, #4
 80017c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2202      	movs	r2, #2
 80017c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f8ac 	bl	8001934 <HAL_TIM_IC_CaptureCallback>
 80017dc:	e005      	b.n	80017ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f89e 	bl	8001920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f8af 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d020      	beq.n	800183c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0208 	mvn.w	r2, #8
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f886 	bl	8001934 <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f878 	bl	8001920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f889 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d020      	beq.n	8001888 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01b      	beq.n	8001888 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0210 	mvn.w	r2, #16
 8001858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2208      	movs	r2, #8
 800185e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f860 	bl	8001934 <HAL_TIM_IC_CaptureCallback>
 8001874:	e005      	b.n	8001882 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f852 	bl	8001920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f863 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0201 	mvn.w	r2, #1
 80018a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe ffd2 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00c      	beq.n	80018d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80018c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f8e0 	bl	8001a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d007      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80018ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f834 	bl	800195c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00c      	beq.n	8001918 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f06f 0220 	mvn.w	r2, #32
 8001910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f8b2 	bl	8001a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a37      	ldr	r2, [pc, #220]	@ (8001a60 <TIM_Base_SetConfig+0xf0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00f      	beq.n	80019a8 <TIM_Base_SetConfig+0x38>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800198e:	d00b      	beq.n	80019a8 <TIM_Base_SetConfig+0x38>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a34      	ldr	r2, [pc, #208]	@ (8001a64 <TIM_Base_SetConfig+0xf4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d007      	beq.n	80019a8 <TIM_Base_SetConfig+0x38>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a33      	ldr	r2, [pc, #204]	@ (8001a68 <TIM_Base_SetConfig+0xf8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d003      	beq.n	80019a8 <TIM_Base_SetConfig+0x38>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a32      	ldr	r2, [pc, #200]	@ (8001a6c <TIM_Base_SetConfig+0xfc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d108      	bne.n	80019ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a28      	ldr	r2, [pc, #160]	@ (8001a60 <TIM_Base_SetConfig+0xf0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d01b      	beq.n	80019fa <TIM_Base_SetConfig+0x8a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019c8:	d017      	beq.n	80019fa <TIM_Base_SetConfig+0x8a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a25      	ldr	r2, [pc, #148]	@ (8001a64 <TIM_Base_SetConfig+0xf4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <TIM_Base_SetConfig+0x8a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a24      	ldr	r2, [pc, #144]	@ (8001a68 <TIM_Base_SetConfig+0xf8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00f      	beq.n	80019fa <TIM_Base_SetConfig+0x8a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a23      	ldr	r2, [pc, #140]	@ (8001a6c <TIM_Base_SetConfig+0xfc>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00b      	beq.n	80019fa <TIM_Base_SetConfig+0x8a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a22      	ldr	r2, [pc, #136]	@ (8001a70 <TIM_Base_SetConfig+0x100>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d007      	beq.n	80019fa <TIM_Base_SetConfig+0x8a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a21      	ldr	r2, [pc, #132]	@ (8001a74 <TIM_Base_SetConfig+0x104>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d003      	beq.n	80019fa <TIM_Base_SetConfig+0x8a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a20      	ldr	r2, [pc, #128]	@ (8001a78 <TIM_Base_SetConfig+0x108>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d108      	bne.n	8001a0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a60 <TIM_Base_SetConfig+0xf0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d103      	bne.n	8001a3a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f043 0204 	orr.w	r2, r3, #4
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	601a      	str	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40000400 	.word	0x40000400
 8001a68:	40000800 	.word	0x40000800
 8001a6c:	40000c00 	.word	0x40000c00
 8001a70:	40014000 	.word	0x40014000
 8001a74:	40014400 	.word	0x40014400
 8001a78:	40014800 	.word	0x40014800

08001a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f103 0208 	add.w	r2, r3, #8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac0:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f103 0208 	add.w	r2, r3, #8
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	611a      	str	r2, [r3, #16]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f103 0208 	add.w	r2, r3, #8
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	615a      	str	r2, [r3, #20]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8001ade:	f240 1019 	movw	r0, #281	@ 0x119
 8001ae2:	f004 fe23 	bl	800672c <SEGGER_SYSVIEW_RecordEndCall>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8001afc:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001b00:	f004 fe14 	bl	800672c <SEGGER_SYSVIEW_RecordEndCall>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b28:	bf08      	it	eq
 8001b2a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8001b2e:	d103      	bne.n	8001b38 <vListInsert+0x2c>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e010      	b.n	8001b5a <vListInsert+0x4e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	e002      	b.n	8001b46 <vListInsert+0x3a>
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b52:	4290      	cmp	r0, r2
 8001b54:	eb71 0303 	sbcs.w	r3, r1, r3
 8001b58:	d2f2      	bcs.n	8001b40 <vListInsert+0x34>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	60da      	str	r2, [r3, #12]
    pxNewListItem->pxPrevious = pxIterator;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	60da      	str	r2, [r3, #12]
    pxIterator->pxNext = pxNewListItem;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	615a      	str	r2, [r3, #20]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8001b86:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8001b8a:	f004 fdcf 	bl	800672c <SEGGER_SYSVIEW_RecordEndCall>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	68d2      	ldr	r2, [r2, #12]
 8001bac:	60da      	str	r2, [r3, #12]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6892      	ldr	r2, [r2, #8]
 8001bb6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d103      	bne.n	8001bca <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	1e5a      	subs	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	f240 101d 	movw	r0, #285	@ 0x11d
 8001be4:	f004 fdde 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10b      	bne.n	8001c24 <xQueueGenericReset+0x30>
    __asm volatile
 8001c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c10:	f383 8811 	msr	BASEPRI, r3
 8001c14:	f3bf 8f6f 	isb	sy
 8001c18:	f3bf 8f4f 	dsb	sy
 8001c1c:	60fb      	str	r3, [r7, #12]
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d052      	beq.n	8001cd0 <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    if( ( pxQueue != NULL ) &&
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d04e      	beq.n	8001cd0 <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d000      	beq.n	8001c46 <xQueueGenericReset+0x52>
 8001c44:	2101      	movs	r1, #1
 8001c46:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d141      	bne.n	8001cd0 <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 8001c4c:	f002 f958 	bl	8003f00 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c58:	6939      	ldr	r1, [r7, #16]
 8001c5a:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	441a      	add	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	641a      	str	r2, [r3, #64]	@ 0x40
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	6939      	ldr	r1, [r7, #16]
 8001c80:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	441a      	add	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	22ff      	movs	r2, #255	@ 0xff
 8001c90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxQueue->cTxLock = queueUNLOCKED;
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	22ff      	movs	r2, #255	@ 0xff
 8001c98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

            if( xNewQueue == pdFALSE )
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00f      	beq.n	8001cca <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	3310      	adds	r3, #16
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 f8ba 	bl	8002e28 <xTaskRemoveFromEventList>
 8001cb4:	e009      	b.n	8001cca <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	3310      	adds	r3, #16
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fef2 	bl	8001aa4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	3328      	adds	r3, #40	@ 0x28
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff feed 	bl	8001aa4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001cca:	f002 f94b 	bl	8003f64 <vPortExitCritical>
 8001cce:	e001      	b.n	8001cd4 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10b      	bne.n	8001cf2 <xQueueGenericReset+0xfe>
    __asm volatile
 8001cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cde:	f383 8811 	msr	BASEPRI, r3
 8001ce2:	f3bf 8f6f 	isb	sy
 8001ce6:	f3bf 8f4f 	dsb	sy
 8001cea:	60bb      	str	r3, [r7, #8]
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	e7fd      	b.n	8001cee <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	2096      	movs	r0, #150	@ 0x96
 8001cf8:	f004 fd54 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8001cfc:	697b      	ldr	r3, [r7, #20]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b08c      	sub	sp, #48	@ 0x30
 8001d0a:	af02      	add	r7, sp, #8
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10b      	bne.n	8001d36 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 8001d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d22:	f383 8811 	msr	BASEPRI, r3
 8001d26:	f3bf 8f6f 	isb	sy
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	623b      	str	r3, [r7, #32]
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	e7fd      	b.n	8001d32 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d031      	beq.n	8001da0 <xQueueGenericCreateStatic+0x9a>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d02e      	beq.n	8001da0 <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d028      	beq.n	8001da0 <xQueueGenericCreateStatic+0x9a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d122      	bne.n	8001da0 <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8001d5a:	2350      	movs	r3, #80	@ 0x50
 8001d5c:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b50      	cmp	r3, #80	@ 0x50
 8001d62:	d00b      	beq.n	8001d7c <xQueueGenericCreateStatic+0x76>
    __asm volatile
 8001d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d68:	f383 8811 	msr	BASEPRI, r3
 8001d6c:	f3bf 8f6f 	isb	sy
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	61fb      	str	r3, [r7, #28]
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 8001d7c:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d8a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	4613      	mov	r3, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	68b9      	ldr	r1, [r7, #8]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f81e 	bl	8001dda <prvInitialiseNewQueue>
 8001d9e:	e00e      	b.n	8001dbe <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10b      	bne.n	8001dbe <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 8001da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001daa:	f383 8811 	msr	BASEPRI, r3
 8001dae:	f3bf 8f6f 	isb	sy
 8001db2:	f3bf 8f4f 	dsb	sy
 8001db6:	61bb      	str	r3, [r7, #24]
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	e7fd      	b.n	8001dba <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 fe89 	bl	8006ad8 <SEGGER_SYSVIEW_ShrinkId>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	2097      	movs	r0, #151	@ 0x97
 8001dcc:	f004 fcea 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3728      	adds	r7, #40	@ 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e002      	b.n	8001dfc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	645a      	str	r2, [r3, #68]	@ 0x44
    pxNewQueue->uxItemSize = uxItemSize;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	649a      	str	r2, [r3, #72]	@ 0x48
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e08:	2101      	movs	r1, #1
 8001e0a:	69b8      	ldr	r0, [r7, #24]
 8001e0c:	f7ff fef2 	bl	8001bf4 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08e      	sub	sp, #56	@ 0x38
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	e9c7 2300 	strd	r2, r3, [r7]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10b      	bne.n	8001e4c <xQueueReceive+0x34>
    __asm volatile
 8001e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e38:	f383 8811 	msr	BASEPRI, r3
 8001e3c:	f3bf 8f6f 	isb	sy
 8001e40:	f3bf 8f4f 	dsb	sy
 8001e44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <xQueueReceive+0x30>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <xQueueReceive+0x42>
 8001e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <xQueueReceive+0x46>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <xQueueReceive+0x48>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10b      	bne.n	8001e7c <xQueueReceive+0x64>
    __asm volatile
 8001e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e68:	f383 8811 	msr	BASEPRI, r3
 8001e6c:	f3bf 8f6f 	isb	sy
 8001e70:	f3bf 8f4f 	dsb	sy
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <xQueueReceive+0x60>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e7c:	f001 fa3c 	bl	80032f8 <xTaskGetSchedulerState>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <xQueueReceive+0x76>
 8001e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <xQueueReceive+0x7a>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <xQueueReceive+0x7c>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10b      	bne.n	8001eb0 <xQueueReceive+0x98>
    __asm volatile
 8001e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9c:	f383 8811 	msr	BASEPRI, r3
 8001ea0:	f3bf 8f6f 	isb	sy
 8001ea4:	f3bf 8f4f 	dsb	sy
 8001ea8:	623b      	str	r3, [r7, #32]
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <xQueueReceive+0x94>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001eb0:	f002 f826 	bl	8003f00 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d018      	beq.n	8001ef2 <xQueueReceive+0xda>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ec4:	f000 f890 	bl	8001fe8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eca:	1e5a      	subs	r2, r3, #1
 8001ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ece:	641a      	str	r2, [r3, #64]	@ 0x40

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <xQueueReceive+0xca>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eda:	3310      	adds	r3, #16
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 ffa3 	bl	8002e28 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001ee2:	f002 f83f 	bl	8003f64 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	20a4      	movs	r0, #164	@ 0xa4
 8001eea:	f004 fc5b 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e073      	b.n	8001fda <xQueueReceive+0x1c2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	d107      	bne.n	8001f0a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001efa:	f002 f833 	bl	8003f64 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8001efe:	2100      	movs	r1, #0
 8001f00:	20a4      	movs	r0, #164	@ 0xa4
 8001f02:	f004 fc4f 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e067      	b.n	8001fda <xQueueReceive+0x1c2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d106      	bne.n	8001f1e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	4618      	mov	r0, r3
 8001f16:	f001 f869 	bl	8002fec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f1e:	f002 f821 	bl	8003f64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f22:	f000 fc1b 	bl	800275c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f26:	f001 ffeb 	bl	8003f00 <vPortEnterCritical>
 8001f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f2c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f36:	d103      	bne.n	8001f40 <xQueueReceive+0x128>
 8001f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8001f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f42:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001f46:	b25b      	sxtb	r3, r3
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f4c:	d103      	bne.n	8001f56 <xQueueReceive+0x13e>
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8001f56:	f002 f805 	bl	8003f64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f5a:	463a      	mov	r2, r7
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f001 f85c 	bl	8003020 <xTaskCheckForTimeOut>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d124      	bne.n	8001fb8 <xQueueReceive+0x1a0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f70:	f000 f8b2 	bl	80020d8 <prvIsQueueEmpty>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d018      	beq.n	8001fac <xQueueReceive+0x194>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8001f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f84:	4608      	mov	r0, r1
 8001f86:	f000 fed7 	bl	8002d38 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001f8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f8c:	f000 f852 	bl	8002034 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001f90:	f000 fbf2 	bl	8002778 <xTaskResumeAll>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d18a      	bne.n	8001eb0 <xQueueReceive+0x98>
                {
                    taskYIELD_WITHIN_API();
 8001f9a:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <xQueueReceive+0x1cc>)
 8001f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f3bf 8f4f 	dsb	sy
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	e781      	b.n	8001eb0 <xQueueReceive+0x98>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fae:	f000 f841 	bl	8002034 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001fb2:	f000 fbe1 	bl	8002778 <xTaskResumeAll>
 8001fb6:	e77b      	b.n	8001eb0 <xQueueReceive+0x98>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001fb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fba:	f000 f83b 	bl	8002034 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001fbe:	f000 fbdb 	bl	8002778 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fc4:	f000 f888 	bl	80020d8 <prvIsQueueEmpty>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f43f af70 	beq.w	8001eb0 <xQueueReceive+0x98>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	20a4      	movs	r0, #164	@ 0xa4
 8001fd4:	f004 fbe6 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8001fd8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3738      	adds	r7, #56	@ 0x38
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000ed04 	.word	0xe000ed04

08001fe8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d018      	beq.n	800202c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002002:	441a      	add	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	429a      	cmp	r2, r3
 8002012:	d303      	bcc.n	800201c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68d9      	ldr	r1, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002024:	461a      	mov	r2, r3
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	f004 ff5e 	bl	8006ee8 <memcpy>
    }
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800203c:	f001 ff60 	bl	8003f00 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002046:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002048:	e011      	b.n	800206e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204e:	2b00      	cmp	r3, #0
 8002050:	d012      	beq.n	8002078 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3328      	adds	r3, #40	@ 0x28
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fee6 	bl	8002e28 <xTaskRemoveFromEventList>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002062:	f001 f86d 	bl	8003140 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	3b01      	subs	r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	2b00      	cmp	r3, #0
 8002074:	dce9      	bgt.n	800204a <prvUnlockQueue+0x16>
 8002076:	e000      	b.n	800207a <prvUnlockQueue+0x46>
                    break;
 8002078:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	22ff      	movs	r2, #255	@ 0xff
 800207e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    }
    taskEXIT_CRITICAL();
 8002082:	f001 ff6f 	bl	8003f64 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002086:	f001 ff3b 	bl	8003f00 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002090:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002092:	e011      	b.n	80020b8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d012      	beq.n	80020c2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3310      	adds	r3, #16
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fec1 	bl	8002e28 <xTaskRemoveFromEventList>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80020ac:	f001 f848 	bl	8003140 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80020b0:	7bbb      	ldrb	r3, [r7, #14]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80020b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	dce9      	bgt.n	8002094 <prvUnlockQueue+0x60>
 80020c0:	e000      	b.n	80020c4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80020c2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	22ff      	movs	r2, #255	@ 0xff
 80020c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    }
    taskEXIT_CRITICAL();
 80020cc:	f001 ff4a 	bl	8003f64 <vPortExitCritical>
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80020e0:	f001 ff0e 	bl	8003f00 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80020ec:	2301      	movs	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e001      	b.n	80020f6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80020f6:	f001 ff35 	bl	8003f64 <vPortExitCritical>

    return xReturn;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	e9c7 2300 	strd	r2, r3, [r7]
        Queue_t * const pxQueue = xQueue;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002114:	f001 fef4 	bl	8003f00 <vPortEnterCritical>
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800211e:	b25b      	sxtb	r3, r3
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002124:	d103      	bne.n	800212e <vQueueWaitForMessageRestricted+0x2a>
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002134:	b25b      	sxtb	r3, r3
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800213a:	d103      	bne.n	8002144 <vQueueWaitForMessageRestricted+0x40>
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8002144:	f001 ff0e 	bl	8003f64 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <vQueueWaitForMessageRestricted+0x60>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800215e:	4608      	mov	r0, r1
 8002160:	f000 fe14 	bl	8002d8c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002164:	6978      	ldr	r0, [r7, #20]
 8002166:	f7ff ff65 	bl	8002034 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 800216a:	20b9      	movs	r0, #185	@ 0xb9
 800216c:	f004 fade 	bl	800672c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002170:	bf00      	nop
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8002178:	b580      	push	{r7, lr}
 800217a:	b08e      	sub	sp, #56	@ 0x38
 800217c:	af04      	add	r7, sp, #16
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8002186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10b      	bne.n	80021a4 <prvCreateStaticTask+0x2c>
    __asm volatile
 800218c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002190:	f383 8811 	msr	BASEPRI, r3
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	623b      	str	r3, [r7, #32]
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80021a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10b      	bne.n	80021c2 <prvCreateStaticTask+0x4a>
    __asm volatile
 80021aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ae:	f383 8811 	msr	BASEPRI, r3
 80021b2:	f3bf 8f6f 	isb	sy
 80021b6:	f3bf 8f4f 	dsb	sy
 80021ba:	61fb      	str	r3, [r7, #28]
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	e7fd      	b.n	80021be <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80021c2:	2360      	movs	r3, #96	@ 0x60
 80021c4:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b60      	cmp	r3, #96	@ 0x60
 80021ca:	d00b      	beq.n	80021e4 <prvCreateStaticTask+0x6c>
    __asm volatile
 80021cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	61bb      	str	r3, [r7, #24]
}
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 80021e4:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80021e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01f      	beq.n	800222c <prvCreateStaticTask+0xb4>
 80021ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01c      	beq.n	800222c <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 80021f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80021f6:	2260      	movs	r2, #96	@ 0x60
 80021f8:	2100      	movs	r1, #0
 80021fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021fc:	f004 fe46 	bl	8006e8c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002204:	63da      	str	r2, [r3, #60]	@ 0x3c

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	2202      	movs	r2, #2
 800220a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800220e:	2300      	movs	r3, #0
 8002210:	9303      	str	r3, [sp, #12]
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f89d 	bl	8002364 <prvInitialiseNewTask>
 800222a:	e001      	b.n	8002230 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8002230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002232:	4618      	mov	r0, r3
 8002234:	3728      	adds	r7, #40	@ 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800223a:	b580      	push	{r7, lr}
 800223c:	b08a      	sub	sp, #40	@ 0x28
 800223e:	af04      	add	r7, sp, #16
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	9303      	str	r3, [sp, #12]
 8002252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002254:	9302      	str	r3, [sp, #8]
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f7ff ff87 	bl	8002178 <prvCreateStaticTask>
 800226a:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f000 f908 	bl	8002488 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4618      	mov	r0, r3
 800227c:	f004 fc2c 	bl	8006ad8 <SEGGER_SYSVIEW_ShrinkId>
 8002280:	4603      	mov	r3, r0
 8002282:	4619      	mov	r1, r3
 8002284:	20bf      	movs	r0, #191	@ 0xbf
 8002286:	f004 fa8d 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800228a:	693b      	ldr	r3, [r7, #16]
    }
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	@ 0x28
 8002298:	af04      	add	r7, sp, #16
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 ff30 	bl	800410c <pvPortMalloc>
 80022ac:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80022b4:	2060      	movs	r0, #96	@ 0x60
 80022b6:	f001 ff29 	bl	800410c <pvPortMalloc>
 80022ba:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022c2:	2260      	movs	r2, #96	@ 0x60
 80022c4:	2100      	movs	r1, #0
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f004 fde0 	bl	8006e8c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022d2:	e005      	b.n	80022e0 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80022d4:	6938      	ldr	r0, [r7, #16]
 80022d6:	f002 f84b 	bl	8004370 <vPortFree>
 80022da:	e001      	b.n	80022e0 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d011      	beq.n	800230a <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022ee:	2300      	movs	r3, #0
 80022f0:	9303      	str	r3, [sp, #12]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	9302      	str	r3, [sp, #8]
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f82d 	bl	8002364 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800230a:	697b      	ldr	r3, [r7, #20]
    }
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f7ff ffaf 	bl	8002294 <prvCreateTask>
 8002336:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800233e:	6938      	ldr	r0, [r7, #16]
 8002340:	f000 f8a2 	bl	8002488 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002344:	2301      	movs	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e002      	b.n	8002350 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800234e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	4619      	mov	r1, r3
 8002354:	20c2      	movs	r0, #194	@ 0xc2
 8002356:	f004 fa25 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800235a:	697b      	ldr	r3, [r7, #20]
    }
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002368:	b088      	sub	sp, #32
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800237e:	3b01      	subs	r3, #1
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f023 0307 	bic.w	r3, r3, #7
 800238c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <prvInitialiseNewTask+0x4c>
    __asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	617b      	str	r3, [r7, #20]
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <prvInitialiseNewTask+0x48>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01e      	beq.n	80023f4 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e012      	b.n	80023e2 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	7819      	ldrb	r1, [r3, #0]
 80023c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	4413      	add	r3, r2
 80023ca:	3340      	adds	r3, #64	@ 0x40
 80023cc:	460a      	mov	r2, r1
 80023ce:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	3301      	adds	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d9e9      	bls.n	80023bc <prvInitialiseNewTask+0x58>
 80023e8:	e000      	b.n	80023ec <prvInitialiseNewTask+0x88>
            {
                break;
 80023ea:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80023ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80023f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d90b      	bls.n	8002412 <prvInitialiseNewTask+0xae>
    __asm volatile
 80023fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023fe:	f383 8811 	msr	BASEPRI, r3
 8002402:	f3bf 8f6f 	isb	sy
 8002406:	f3bf 8f4f 	dsb	sy
 800240a:	613b      	str	r3, [r7, #16]
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	e7fd      	b.n	800240e <prvInitialiseNewTask+0xaa>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002414:	2b04      	cmp	r3, #4
 8002416:	d901      	bls.n	800241c <prvInitialiseNewTask+0xb8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002418:	2304      	movs	r3, #4
 800241a:	63bb      	str	r3, [r7, #56]	@ 0x38
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800241c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800241e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002420:	639a      	str	r2, [r3, #56]	@ 0x38
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002426:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800242a:	3308      	adds	r3, #8
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fb5e 	bl	8001aee <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002434:	3320      	adds	r3, #32
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fb59 	bl	8001aee <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800243c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800243e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002440:	619a      	str	r2, [r3, #24]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002444:	2200      	movs	r2, #0
 8002446:	461c      	mov	r4, r3
 8002448:	4615      	mov	r5, r2
 800244a:	2300      	movs	r3, #0
 800244c:	f1d4 0805 	rsbs	r8, r4, #5
 8002450:	eb63 0905 	sbc.w	r9, r3, r5
 8002454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002456:	e9c3 8908 	strd	r8, r9, [r3, #32]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800245a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800245c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800245e:	631a      	str	r2, [r3, #48]	@ 0x30
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	68f9      	ldr	r1, [r7, #12]
 8002464:	69b8      	ldr	r0, [r7, #24]
 8002466:	f001 fb5f 	bl	8003b28 <pxPortInitialiseStack>
 800246a:	4602      	mov	r2, r0
 800246c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800246e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800247a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002488 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af02      	add	r7, sp, #8
 800248e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002490:	f001 fd36 	bl	8003f00 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002494:	4b47      	ldr	r3, [pc, #284]	@ (80025b4 <prvAddNewTaskToReadyList+0x12c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	4a46      	ldr	r2, [pc, #280]	@ (80025b4 <prvAddNewTaskToReadyList+0x12c>)
 800249c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800249e:	4b46      	ldr	r3, [pc, #280]	@ (80025b8 <prvAddNewTaskToReadyList+0x130>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80024a6:	4a44      	ldr	r2, [pc, #272]	@ (80025b8 <prvAddNewTaskToReadyList+0x130>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024ac:	4b41      	ldr	r3, [pc, #260]	@ (80025b4 <prvAddNewTaskToReadyList+0x12c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d110      	bne.n	80024d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80024b4:	f000 fe62 	bl	800317c <prvInitialiseTaskLists>
 80024b8:	e00d      	b.n	80024d6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80024ba:	4b40      	ldr	r3, [pc, #256]	@ (80025bc <prvAddNewTaskToReadyList+0x134>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024c2:	4b3d      	ldr	r3, [pc, #244]	@ (80025b8 <prvAddNewTaskToReadyList+0x130>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d802      	bhi.n	80024d6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80024d0:	4a39      	ldr	r2, [pc, #228]	@ (80025b8 <prvAddNewTaskToReadyList+0x130>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80024d6:	4b3a      	ldr	r3, [pc, #232]	@ (80025c0 <prvAddNewTaskToReadyList+0x138>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3301      	adds	r3, #1
 80024dc:	4a38      	ldr	r2, [pc, #224]	@ (80025c0 <prvAddNewTaskToReadyList+0x138>)
 80024de:	6013      	str	r3, [r2, #0]
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <prvAddNewTaskToReadyList+0x8c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f004 f9cf 	bl	800688c <SEGGER_SYSVIEW_OnTaskCreate>
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fe:	461d      	mov	r5, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	461c      	mov	r4, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250a:	1ae3      	subs	r3, r4, r3
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	462b      	mov	r3, r5
 8002510:	f002 f952 	bl	80047b8 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	f004 fa3c 	bl	8006994 <SEGGER_SYSVIEW_OnTaskStartReady>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002520:	4b28      	ldr	r3, [pc, #160]	@ (80025c4 <prvAddNewTaskToReadyList+0x13c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d903      	bls.n	8002530 <prvAddNewTaskToReadyList+0xa8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252c:	4a25      	ldr	r2, [pc, #148]	@ (80025c4 <prvAddNewTaskToReadyList+0x13c>)
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002534:	4924      	ldr	r1, [pc, #144]	@ (80025c8 <prvAddNewTaskToReadyList+0x140>)
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	3304      	adds	r3, #4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	611a      	str	r2, [r3, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	615a      	str	r2, [r3, #20]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f103 0208 	add.w	r2, r3, #8
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800256c:	4613      	mov	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4a14      	ldr	r2, [pc, #80]	@ (80025c8 <prvAddNewTaskToReadyList+0x140>)
 8002576:	441a      	add	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	61da      	str	r2, [r3, #28]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002580:	4911      	ldr	r1, [pc, #68]	@ (80025c8 <prvAddNewTaskToReadyList+0x140>)
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002592:	1c59      	adds	r1, r3, #1
 8002594:	480c      	ldr	r0, [pc, #48]	@ (80025c8 <prvAddNewTaskToReadyList+0x140>)
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4403      	add	r3, r0
 80025a0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80025a2:	f001 fcdf 	bl	8003f64 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80025a6:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <prvAddNewTaskToReadyList+0x134>)
 80025a8:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bdb0      	pop	{r4, r5, r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200001d8 	.word	0x200001d8
 80025b8:	200000d0 	.word	0x200000d0
 80025bc:	200001ec 	.word	0x200001ec
 80025c0:	20000200 	.word	0x20000200
 80025c4:	200001e8 	.word	0x200001e8
 80025c8:	200000d8 	.word	0x200000d8

080025cc <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b090      	sub	sp, #64	@ 0x40
 80025d0:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 80025d2:	2301      	movs	r3, #1
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025de:	e013      	b.n	8002608 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80025e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002690 <prvCreateIdleTasks+0xc4>)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	4413      	add	r3, r2
 80025e6:	7819      	ldrb	r1, [r3, #0]
 80025e8:	f107 0210 	add.w	r2, r7, #16
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	4413      	add	r3, r2
 80025f0:	460a      	mov	r2, r1
 80025f2:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80025f4:	f107 0210 	add.w	r2, r7, #16
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	4413      	add	r3, r2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	3301      	adds	r3, #1
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	2b0f      	cmp	r3, #15
 800260c:	dde8      	ble.n	80025e0 <prvCreateIdleTasks+0x14>
 800260e:	e000      	b.n	8002612 <prvCreateIdleTasks+0x46>
        {
            break;
 8002610:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002612:	2300      	movs	r3, #0
 8002614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002616:	e031      	b.n	800267c <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002618:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <prvCreateIdleTasks+0xc8>)
 800261a:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8002624:	1d3a      	adds	r2, r7, #4
 8002626:	f107 0108 	add.w	r1, r7, #8
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	4618      	mov	r0, r3
 8002630:	f000 ff1a 	bl	8003468 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	f107 0110 	add.w	r1, r7, #16
 800263e:	9202      	str	r2, [sp, #8]
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2300      	movs	r3, #0
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	4602      	mov	r2, r0
 800264a:	6a38      	ldr	r0, [r7, #32]
 800264c:	f7ff fdf5 	bl	800223a <xTaskCreateStatic>
 8002650:	4602      	mov	r2, r0
 8002652:	4911      	ldr	r1, [pc, #68]	@ (8002698 <prvCreateIdleTasks+0xcc>)
 8002654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 800265a:	4a0f      	ldr	r2, [pc, #60]	@ (8002698 <prvCreateIdleTasks+0xcc>)
 800265c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 8002666:	2301      	movs	r3, #1
 8002668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800266a:	e001      	b.n	8002670 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002678:	3301      	adds	r3, #1
 800267a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800267c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267e:	2b00      	cmp	r3, #0
 8002680:	ddca      	ble.n	8002618 <prvCreateIdleTasks+0x4c>
 8002682:	e000      	b.n	8002686 <prvCreateIdleTasks+0xba>
        {
            break;
 8002684:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002688:	4618      	mov	r0, r3
 800268a:	3730      	adds	r7, #48	@ 0x30
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	080077f4 	.word	0x080077f4
 8002694:	08003159 	.word	0x08003159
 8002698:	20000210 	.word	0x20000210

0800269c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80026a2:	f7ff ff93 	bl	80025cc <prvCreateIdleTasks>
 80026a6:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d102      	bne.n	80026b4 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80026ae:	f000 ff0f 	bl	80034d0 <xTimerCreateTimerTask>
 80026b2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d12b      	bne.n	8002712 <vTaskStartScheduler+0x76>
    __asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	60bb      	str	r3, [r7, #8]
}
 80026cc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80026ce:	491d      	ldr	r1, [pc, #116]	@ (8002744 <vTaskStartScheduler+0xa8>)
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026d8:	e9c1 2300 	strd	r2, r3, [r1]
        xSchedulerRunning = pdTRUE;
 80026dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002748 <vTaskStartScheduler+0xac>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026e2:	491a      	ldr	r1, [pc, #104]	@ (800274c <vTaskStartScheduler+0xb0>)
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	e9c1 2300 	strd	r2, r3, [r1]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80026f0:	4b17      	ldr	r3, [pc, #92]	@ (8002750 <vTaskStartScheduler+0xb4>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <vTaskStartScheduler+0xb8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d102      	bne.n	8002702 <vTaskStartScheduler+0x66>
 80026fc:	f004 f8aa 	bl	8006854 <SEGGER_SYSVIEW_OnIdle>
 8002700:	e004      	b.n	800270c <vTaskStartScheduler+0x70>
 8002702:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <vTaskStartScheduler+0xb8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f004 f902 	bl	8006910 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800270c:	f001 fa9a 	bl	8003c44 <xPortStartScheduler>
 8002710:	e00f      	b.n	8002732 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002718:	d10b      	bne.n	8002732 <vTaskStartScheduler+0x96>
    __asm volatile
 800271a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	607b      	str	r3, [r7, #4]
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	e7fd      	b.n	800272e <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <vTaskStartScheduler+0xbc>)
 8002734:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002736:	20cd      	movs	r0, #205	@ 0xcd
 8002738:	f003 fff8 	bl	800672c <SEGGER_SYSVIEW_RecordEndCall>
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000208 	.word	0x20000208
 8002748:	200001ec 	.word	0x200001ec
 800274c:	200001e0 	.word	0x200001e0
 8002750:	20000210 	.word	0x20000210
 8002754:	200000d0 	.word	0x200000d0
 8002758:	080078dc 	.word	0x080078dc

0800275c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <vTaskSuspendAll+0x18>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	4a03      	ldr	r2, [pc, #12]	@ (8002774 <vTaskSuspendAll+0x18>)
 8002768:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800276a:	20cf      	movs	r0, #207	@ 0xcf
 800276c:	f003 ffde 	bl	800672c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000214 	.word	0x20000214

08002778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002778:	b5b0      	push	{r4, r5, r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xAlreadyYielded = pdFALSE;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002786:	f001 fbbb 	bl	8003f00 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800278e:	4b7a      	ldr	r3, [pc, #488]	@ (8002978 <xTaskResumeAll+0x200>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <xTaskResumeAll+0x36>
    __asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	603b      	str	r3, [r7, #0]
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	e7fd      	b.n	80027aa <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80027ae:	4b72      	ldr	r3, [pc, #456]	@ (8002978 <xTaskResumeAll+0x200>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	4a70      	ldr	r2, [pc, #448]	@ (8002978 <xTaskResumeAll+0x200>)
 80027b6:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80027b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002978 <xTaskResumeAll+0x200>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 80ce 	bne.w	800295e <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027c2:	4b6e      	ldr	r3, [pc, #440]	@ (800297c <xTaskResumeAll+0x204>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80c9 	beq.w	800295e <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027cc:	e094      	b.n	80028f8 <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80027ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002980 <xTaskResumeAll+0x208>)
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	3320      	adds	r3, #32
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d103      	bne.n	8002804 <xTaskResumeAll+0x8c>
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	2200      	movs	r2, #0
 8002808:	635a      	str	r2, [r3, #52]	@ 0x34
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	1e5a      	subs	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002820:	6952      	ldr	r2, [r2, #20]
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282a:	6912      	ldr	r2, [r2, #16]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	3308      	adds	r3, #8
 8002836:	429a      	cmp	r2, r3
 8002838:	d103      	bne.n	8002842 <xTaskResumeAll+0xca>
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	2200      	movs	r2, #0
 8002846:	61da      	str	r2, [r3, #28]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	1e5a      	subs	r2, r3, #1
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	4618      	mov	r0, r3
 8002856:	f004 f89d 	bl	8006994 <SEGGER_SYSVIEW_OnTaskStartReady>
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800285e:	4b49      	ldr	r3, [pc, #292]	@ (8002984 <xTaskResumeAll+0x20c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d903      	bls.n	800286e <xTaskResumeAll+0xf6>
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286a:	4a46      	ldr	r2, [pc, #280]	@ (8002984 <xTaskResumeAll+0x20c>)
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002872:	4945      	ldr	r1, [pc, #276]	@ (8002988 <xTaskResumeAll+0x210>)
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	3304      	adds	r3, #4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	615a      	str	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002898:	3208      	adds	r2, #8
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	f103 0208 	add.w	r2, r3, #8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4a35      	ldr	r2, [pc, #212]	@ (8002988 <xTaskResumeAll+0x210>)
 80028b4:	441a      	add	r2, r3
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	61da      	str	r2, [r3, #28]
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028be:	4932      	ldr	r1, [pc, #200]	@ (8002988 <xTaskResumeAll+0x210>)
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028d0:	1c59      	adds	r1, r3, #1
 80028d2:	482d      	ldr	r0, [pc, #180]	@ (8002988 <xTaskResumeAll+0x210>)
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4403      	add	r3, r0
 80028de:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028e4:	4b29      	ldr	r3, [pc, #164]	@ (800298c <xTaskResumeAll+0x214>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d904      	bls.n	80028f8 <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80028ee:	4a28      	ldr	r2, [pc, #160]	@ (8002990 <xTaskResumeAll+0x218>)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2101      	movs	r1, #1
 80028f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028f8:	4b21      	ldr	r3, [pc, #132]	@ (8002980 <xTaskResumeAll+0x208>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f47f af66 	bne.w	80027ce <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002908:	f000 fcd6 	bl	80032b8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800290c:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <xTaskResumeAll+0x21c>)
 800290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002912:	e9c7 2306 	strd	r2, r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002916:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	d01b      	beq.n	8002956 <xTaskResumeAll+0x1de>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800291e:	f000 f881 	bl	8002a24 <xTaskIncrementTick>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <xTaskResumeAll+0x1ba>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002928:	4a19      	ldr	r2, [pc, #100]	@ (8002990 <xTaskResumeAll+0x218>)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2101      	movs	r1, #1
 800292e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002932:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002936:	1e54      	subs	r4, r2, #1
 8002938:	f143 35ff 	adc.w	r5, r3, #4294967295	@ 0xffffffff
 800293c:	e9c7 4506 	strd	r4, r5, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	d1ea      	bne.n	800291e <xTaskResumeAll+0x1a6>

                            xPendedTicks = 0;
 8002948:	4912      	ldr	r1, [pc, #72]	@ (8002994 <xTaskResumeAll+0x21c>)
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	e9c1 2300 	strd	r2, r3, [r1]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002956:	4a0e      	ldr	r2, [pc, #56]	@ (8002990 <xTaskResumeAll+0x218>)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800295e:	f001 fb01 	bl	8003f64 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	4619      	mov	r1, r3
 8002966:	20d0      	movs	r0, #208	@ 0xd0
 8002968:	f003 ff1c 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 800296c:	697b      	ldr	r3, [r7, #20]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3728      	adds	r7, #40	@ 0x28
 8002972:	46bd      	mov	sp, r7
 8002974:	bdb0      	pop	{r4, r5, r7, pc}
 8002976:	bf00      	nop
 8002978:	20000214 	.word	0x20000214
 800297c:	200001d8 	.word	0x200001d8
 8002980:	20000188 	.word	0x20000188
 8002984:	200001e8 	.word	0x200001e8
 8002988:	200000d8 	.word	0x200000d8
 800298c:	200000d0 	.word	0x200000d0
 8002990:	200001f8 	.word	0x200001f8
 8002994:	200001f0 	.word	0x200001f0

08002998 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
 800299e:	f001 faaf 	bl	8003f00 <vPortEnterCritical>
    {
        xTicks = xTickCount;
 80029a2:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <xTaskGetTickCount+0x30>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	e9c7 2300 	strd	r2, r3, [r7]
    }
    portTICK_TYPE_EXIT_CRITICAL();
 80029ac:	f001 fada 	bl	8003f64 <vPortExitCritical>

    traceRETURN_xTaskGetTickCount( xTicks );
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4619      	mov	r1, r3
 80029b4:	20d1      	movs	r0, #209	@ 0xd1
 80029b6:	f003 fef5 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80029ba:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200001e0 	.word	0x200001e0

080029cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029d2:	f001 fb59 	bl	8004088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 80029d6:	f3ef 8211 	mrs	r2, BASEPRI
 80029da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	60ba      	str	r2, [r7, #8]
 80029ec:	607b      	str	r3, [r7, #4]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 80029ee:	68bb      	ldr	r3, [r7, #8]

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80029f0:	61fb      	str	r3, [r7, #28]
    {
        xReturn = xTickCount;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <xTaskGetTickCountFromISR+0x54>)
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002a06:	bf00      	nop
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	20d2      	movs	r0, #210	@ 0xd2
 8002a0e:	f003 fec9 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002a12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	3720      	adds	r7, #32
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	200001e0 	.word	0x200001e0

08002a24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a24:	b5b0      	push	{r4, r5, r7, lr}
 8002a26:	b08c      	sub	sp, #48	@ 0x30
 8002a28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002a2e:	4b82      	ldr	r3, [pc, #520]	@ (8002c38 <xTaskIncrementTick+0x214>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 80ec 	bne.w	8002c10 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a38:	4b80      	ldr	r3, [pc, #512]	@ (8002c3c <xTaskIncrementTick+0x218>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	1c54      	adds	r4, r2, #1
 8002a40:	f143 0500 	adc.w	r5, r3, #0
 8002a44:	e9c7 4508 	strd	r4, r5, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a48:	497c      	ldr	r1, [pc, #496]	@ (8002c3c <xTaskIncrementTick+0x218>)
 8002a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a4e:	e9c1 2300 	strd	r2, r3, [r1]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	d121      	bne.n	8002a9e <xTaskIncrementTick+0x7a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a5a:	4b79      	ldr	r3, [pc, #484]	@ (8002c40 <xTaskIncrementTick+0x21c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <xTaskIncrementTick+0x58>
    __asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	603b      	str	r3, [r7, #0]
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <xTaskIncrementTick+0x54>
 8002a7c:	4b70      	ldr	r3, [pc, #448]	@ (8002c40 <xTaskIncrementTick+0x21c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	4b70      	ldr	r3, [pc, #448]	@ (8002c44 <xTaskIncrementTick+0x220>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6e      	ldr	r2, [pc, #440]	@ (8002c40 <xTaskIncrementTick+0x21c>)
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c44 <xTaskIncrementTick+0x220>)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b6d      	ldr	r3, [pc, #436]	@ (8002c48 <xTaskIncrementTick+0x224>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	4a6c      	ldr	r2, [pc, #432]	@ (8002c48 <xTaskIncrementTick+0x224>)
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	f000 fc0d 	bl	80032b8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8002c4c <xTaskIncrementTick+0x228>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002aa8:	4290      	cmp	r0, r2
 8002aaa:	eb71 0303 	sbcs.w	r3, r1, r3
 8002aae:	f0c0 80b8 	bcc.w	8002c22 <xTaskIncrementTick+0x1fe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ab2:	4b63      	ldr	r3, [pc, #396]	@ (8002c40 <xTaskIncrementTick+0x21c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <xTaskIncrementTick+0xa8>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002abc:	4963      	ldr	r1, [pc, #396]	@ (8002c4c <xTaskIncrementTick+0x228>)
 8002abe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ac6:	e9c1 2300 	strd	r2, r3, [r1]
                    break;
 8002aca:	e0aa      	b.n	8002c22 <xTaskIncrementTick+0x1fe>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002acc:	4b5c      	ldr	r3, [pc, #368]	@ (8002c40 <xTaskIncrementTick+0x21c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002adc:	e9c7 2304 	strd	r2, r3, [r7, #16]

                    if( xConstTickCount < xItemValue )
 8002ae0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ae4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ae8:	4290      	cmp	r0, r2
 8002aea:	eb71 0303 	sbcs.w	r3, r1, r3
 8002aee:	d205      	bcs.n	8002afc <xTaskIncrementTick+0xd8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002af0:	4956      	ldr	r1, [pc, #344]	@ (8002c4c <xTaskIncrementTick+0x228>)
 8002af2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002af6:	e9c1 2300 	strd	r2, r3, [r1]
                        break;
 8002afa:	e092      	b.n	8002c22 <xTaskIncrementTick+0x1fe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	6952      	ldr	r2, [r2, #20]
 8002b0a:	60da      	str	r2, [r3, #12]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	6912      	ldr	r2, [r2, #16]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d103      	bne.n	8002b2a <xTaskIncrementTick+0x106>
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	61da      	str	r2, [r3, #28]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	1e5a      	subs	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01e      	beq.n	8002b80 <xTaskIncrementTick+0x15c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	3320      	adds	r3, #32
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d103      	bne.n	8002b70 <xTaskIncrementTick+0x14c>
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2200      	movs	r2, #0
 8002b74:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1e5a      	subs	r2, r3, #1
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 ff06 	bl	8006994 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b8c:	4b30      	ldr	r3, [pc, #192]	@ (8002c50 <xTaskIncrementTick+0x22c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d903      	bls.n	8002b9c <xTaskIncrementTick+0x178>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b98:	4a2d      	ldr	r2, [pc, #180]	@ (8002c50 <xTaskIncrementTick+0x22c>)
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ba0:	492c      	ldr	r1, [pc, #176]	@ (8002c54 <xTaskIncrementTick+0x230>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3304      	adds	r3, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	611a      	str	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	615a      	str	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f103 0208 	add.w	r2, r3, #8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c54 <xTaskIncrementTick+0x230>)
 8002be2:	441a      	add	r2, r3
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	61da      	str	r2, [r3, #28]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bec:	4919      	ldr	r1, [pc, #100]	@ (8002c54 <xTaskIncrementTick+0x230>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bfe:	1c59      	adds	r1, r3, #1
 8002c00:	4814      	ldr	r0, [pc, #80]	@ (8002c54 <xTaskIncrementTick+0x230>)
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4403      	add	r3, r0
 8002c0c:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c0e:	e750      	b.n	8002ab2 <xTaskIncrementTick+0x8e>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <xTaskIncrementTick+0x234>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	1c50      	adds	r0, r2, #1
 8002c18:	f143 0100 	adc.w	r1, r3, #0
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <xTaskIncrementTick+0x234>)
 8002c1e:	e9c3 0100 	strd	r0, r1, [r3]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c24:	4619      	mov	r1, r3
 8002c26:	20db      	movs	r0, #219	@ 0xdb
 8002c28:	f003 fdbc 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3730      	adds	r7, #48	@ 0x30
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bdb0      	pop	{r4, r5, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000214 	.word	0x20000214
 8002c3c:	200001e0 	.word	0x200001e0
 8002c40:	20000180 	.word	0x20000180
 8002c44:	20000184 	.word	0x20000184
 8002c48:	200001fc 	.word	0x200001fc
 8002c4c:	20000208 	.word	0x20000208
 8002c50:	200001e8 	.word	0x200001e8
 8002c54:	200000d8 	.word	0x200000d8
 8002c58:	200001f0 	.word	0x200001f0

08002c5c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002c62:	4b2f      	ldr	r3, [pc, #188]	@ (8002d20 <vTaskSwitchContext+0xc4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002d24 <vTaskSwitchContext+0xc8>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002c70:	e051      	b.n	8002d16 <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 8002c72:	4b2c      	ldr	r3, [pc, #176]	@ (8002d24 <vTaskSwitchContext+0xc8>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c78:	4b2b      	ldr	r3, [pc, #172]	@ (8002d28 <vTaskSwitchContext+0xcc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e011      	b.n	8002ca4 <vTaskSwitchContext+0x48>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <vTaskSwitchContext+0x42>
    __asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	607b      	str	r3, [r7, #4]
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	e7fd      	b.n	8002c9a <vTaskSwitchContext+0x3e>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	4921      	ldr	r1, [pc, #132]	@ (8002d2c <vTaskSwitchContext+0xd0>)
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0e3      	beq.n	8002c80 <vTaskSwitchContext+0x24>
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d2c <vTaskSwitchContext+0xd0>)
 8002cc4:	4413      	add	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	3308      	adds	r3, #8
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d103      	bne.n	8002ce6 <vTaskSwitchContext+0x8a>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	4a10      	ldr	r2, [pc, #64]	@ (8002d30 <vTaskSwitchContext+0xd4>)
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d28 <vTaskSwitchContext+0xcc>)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <vTaskSwitchContext+0xd8>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002d30 <vTaskSwitchContext+0xd4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d102      	bne.n	8002d08 <vTaskSwitchContext+0xac>
 8002d02:	f003 fda7 	bl	8006854 <SEGGER_SYSVIEW_OnIdle>
 8002d06:	e004      	b.n	8002d12 <vTaskSwitchContext+0xb6>
 8002d08:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <vTaskSwitchContext+0xd4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 fdff 	bl	8006910 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002d12:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <vTaskSwitchContext+0xd4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
    }
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000214 	.word	0x20000214
 8002d24:	200001f8 	.word	0x200001f8
 8002d28:	200001e8 	.word	0x200001e8
 8002d2c:	200000d8 	.word	0x200000d8
 8002d30:	200000d0 	.word	0x200000d0
 8002d34:	20000210 	.word	0x20000210

08002d38 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	e9c7 2300 	strd	r2, r3, [r7]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10b      	bne.n	8002d62 <vTaskPlaceOnEventList+0x2a>
    __asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	617b      	str	r3, [r7, #20]
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	e7fd      	b.n	8002d5e <vTaskPlaceOnEventList+0x26>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <vTaskPlaceOnEventList+0x50>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3320      	adds	r3, #32
 8002d68:	4619      	mov	r1, r3
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7fe fece 	bl	8001b0c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d70:	2201      	movs	r2, #1
 8002d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d76:	f000 fae1 	bl	800333c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8002d7a:	20e1      	movs	r0, #225	@ 0xe1
 8002d7c:	f003 fcd6 	bl	800672c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002d80:	bf00      	nop
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	200000d0 	.word	0x200000d0

08002d8c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	e9c7 2300 	strd	r2, r3, [r7]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	613b      	str	r3, [r7, #16]
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	e7fd      	b.n	8002db2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	4b19      	ldr	r3, [pc, #100]	@ (8002e24 <vTaskPlaceOnEventListRestricted+0x98>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dc4:	4b17      	ldr	r3, [pc, #92]	@ (8002e24 <vTaskPlaceOnEventListRestricted+0x98>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	68d2      	ldr	r2, [r2, #12]
 8002dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002dce:	4b15      	ldr	r3, [pc, #84]	@ (8002e24 <vTaskPlaceOnEventListRestricted+0x98>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	3220      	adds	r2, #32
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <vTaskPlaceOnEventListRestricted+0x98>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f103 0220 	add.w	r2, r3, #32
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e24 <vTaskPlaceOnEventListRestricted+0x98>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <vTaskPlaceOnEventListRestricted+0x7e>
        {
            xTicksToWait = portMAX_DELAY;
 8002dfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e06:	e9c7 2300 	strd	r2, r3, [r7]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e0a:	6a3a      	ldr	r2, [r7, #32]
 8002e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e10:	f000 fa94 	bl	800333c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8002e14:	20e3      	movs	r0, #227	@ 0xe3
 8002e16:	f003 fc89 	bl	800672c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200000d0 	.word	0x200000d0

08002e28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	@ 0x28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10b      	bne.n	8002e56 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8002e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	60fb      	str	r3, [r7, #12]
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	e7fd      	b.n	8002e52 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	6a3a      	ldr	r2, [r7, #32]
 8002e6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	3320      	adds	r3, #32
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d103      	bne.n	8002e84 <xTaskRemoveFromEventList+0x5c>
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	2200      	movs	r2, #0
 8002e88:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	1e5a      	subs	r2, r3, #1
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002e94:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd4 <xTaskRemoveFromEventList+0x1ac>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d166      	bne.n	8002f6a <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	6a3a      	ldr	r2, [r7, #32]
 8002ea8:	6952      	ldr	r2, [r2, #20]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	6912      	ldr	r2, [r2, #16]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	3308      	adds	r3, #8
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d103      	bne.n	8002eca <xTaskRemoveFromEventList+0xa2>
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61da      	str	r2, [r3, #28]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	1e5a      	subs	r2, r3, #1
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 fd59 	bl	8006994 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd8 <xTaskRemoveFromEventList+0x1b0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d903      	bls.n	8002ef6 <xTaskRemoveFromEventList+0xce>
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef2:	4a39      	ldr	r2, [pc, #228]	@ (8002fd8 <xTaskRemoveFromEventList+0x1b0>)
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002efa:	4938      	ldr	r1, [pc, #224]	@ (8002fdc <xTaskRemoveFromEventList+0x1b4>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	3304      	adds	r3, #4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	611a      	str	r2, [r3, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	615a      	str	r2, [r3, #20]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	6a3a      	ldr	r2, [r7, #32]
 8002f20:	3208      	adds	r2, #8
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	f103 0208 	add.w	r2, r3, #8
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4a28      	ldr	r2, [pc, #160]	@ (8002fdc <xTaskRemoveFromEventList+0x1b4>)
 8002f3c:	441a      	add	r2, r3
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	61da      	str	r2, [r3, #28]
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f46:	4925      	ldr	r1, [pc, #148]	@ (8002fdc <xTaskRemoveFromEventList+0x1b4>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	440b      	add	r3, r1
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f58:	1c59      	adds	r1, r3, #1
 8002f5a:	4820      	ldr	r0, [pc, #128]	@ (8002fdc <xTaskRemoveFromEventList+0x1b4>)
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4403      	add	r3, r0
 8002f66:	6019      	str	r1, [r3, #0]
 8002f68:	e01b      	b.n	8002fa2 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <xTaskRemoveFromEventList+0x1b8>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	6a3a      	ldr	r2, [r7, #32]
 8002f84:	3220      	adds	r2, #32
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	f103 0220 	add.w	r2, r3, #32
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	4a12      	ldr	r2, [pc, #72]	@ (8002fe0 <xTaskRemoveFromEventList+0x1b8>)
 8002f96:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f98:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <xTaskRemoveFromEventList+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <xTaskRemoveFromEventList+0x1b8>)
 8002fa0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe4 <xTaskRemoveFromEventList+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d905      	bls.n	8002fbc <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe8 <xTaskRemoveFromEventList+0x1c0>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e001      	b.n	8002fc0 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	20e4      	movs	r0, #228	@ 0xe4
 8002fc6:	f003 fbed 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3728      	adds	r7, #40	@ 0x28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000214 	.word	0x20000214
 8002fd8:	200001e8 	.word	0x200001e8
 8002fdc:	200000d8 	.word	0x200000d8
 8002fe0:	20000188 	.word	0x20000188
 8002fe4:	200000d0 	.word	0x200000d0
 8002fe8:	200001f8 	.word	0x200001f8

08002fec <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ff4:	4b08      	ldr	r3, [pc, #32]	@ (8003018 <vTaskInternalSetTimeOutState+0x2c>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002ffc:	4b07      	ldr	r3, [pc, #28]	@ (800301c <vTaskInternalSetTimeOutState+0x30>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	e9c1 2302 	strd	r2, r3, [r1, #8]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003008:	20e7      	movs	r0, #231	@ 0xe7
 800300a:	f003 fb8f 	bl	800672c <SEGGER_SYSVIEW_RecordEndCall>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200001fc 	.word	0x200001fc
 800301c:	200001e0 	.word	0x200001e0

08003020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003020:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003024:	b08a      	sub	sp, #40	@ 0x28
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <xTaskCheckForTimeOut+0x2a>
    __asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	60fb      	str	r3, [r7, #12]
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	e7fd      	b.n	8003046 <xTaskCheckForTimeOut+0x26>
    configASSERT( pxTicksToWait );
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <xTaskCheckForTimeOut+0x48>
    __asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	60bb      	str	r3, [r7, #8]
}
 8003062:	bf00      	nop
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <xTaskCheckForTimeOut+0x44>

    taskENTER_CRITICAL();
 8003068:	f000 ff4a 	bl	8003f00 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800306c:	4b32      	ldr	r3, [pc, #200]	@ (8003138 <xTaskCheckForTimeOut+0x118>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	e9c7 2306 	strd	r2, r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800307c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003080:	ebb0 0802 	subs.w	r8, r0, r2
 8003084:	eb61 0903 	sbc.w	r9, r1, r3
 8003088:	e9c7 8904 	strd	r8, r9, [r7, #16]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003096:	bf08      	it	eq
 8003098:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 800309c:	d102      	bne.n	80030a4 <xTaskCheckForTimeOut+0x84>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a2:	e03b      	b.n	800311c <xTaskCheckForTimeOut+0xfc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b24      	ldr	r3, [pc, #144]	@ (800313c <xTaskCheckForTimeOut+0x11c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d012      	beq.n	80030d6 <xTaskCheckForTimeOut+0xb6>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030ba:	4290      	cmp	r0, r2
 80030bc:	eb71 0303 	sbcs.w	r3, r1, r3
 80030c0:	d309      	bcc.n	80030d6 <xTaskCheckForTimeOut+0xb6>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
            *pxTicksToWait = ( TickType_t ) 0;
 80030c6:	6839      	ldr	r1, [r7, #0]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9c1 2300 	strd	r2, r3, [r1]
 80030d4:	e022      	b.n	800311c <xTaskCheckForTimeOut+0xfc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030e0:	4290      	cmp	r0, r2
 80030e2:	eb71 0303 	sbcs.w	r3, r1, r3
 80030e6:	d210      	bcs.n	800310a <xTaskCheckForTimeOut+0xea>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030f2:	1a84      	subs	r4, r0, r2
 80030f4:	eb61 0503 	sbc.w	r5, r1, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	e9c3 4500 	strd	r4, r5, [r3]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ff74 	bl	8002fec <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
 8003108:	e008      	b.n	800311c <xTaskCheckForTimeOut+0xfc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800310a:	6839      	ldr	r1, [r7, #0]
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	e9c1 2300 	strd	r2, r3, [r1]
            xReturn = pdTRUE;
 8003118:	2301      	movs	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    taskEXIT_CRITICAL();
 800311c:	f000 ff22 	bl	8003f64 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	4619      	mov	r1, r3
 8003124:	20e8      	movs	r0, #232	@ 0xe8
 8003126:	f003 fb3d 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800312c:	4618      	mov	r0, r3
 800312e:	3728      	adds	r7, #40	@ 0x28
 8003130:	46bd      	mov	sp, r7
 8003132:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003136:	bf00      	nop
 8003138:	200001e0 	.word	0x200001e0
 800313c:	200001fc 	.word	0x200001fc

08003140 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003144:	4b03      	ldr	r3, [pc, #12]	@ (8003154 <vTaskMissedYield+0x14>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800314a:	20e9      	movs	r0, #233	@ 0xe9
 800314c:	f003 faee 	bl	800672c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}
 8003154:	200001f8 	.word	0x200001f8

08003158 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003160:	f000 f84c 	bl	80031fc <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003164:	4b04      	ldr	r3, [pc, #16]	@ (8003178 <prvIdleTask+0x20>)
 8003166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003174:	bf00      	nop
 8003176:	e7f3      	b.n	8003160 <prvIdleTask+0x8>
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003182:	2300      	movs	r3, #0
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	e00c      	b.n	80031a2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4a12      	ldr	r2, [pc, #72]	@ (80031dc <prvInitialiseTaskLists+0x60>)
 8003194:	4413      	add	r3, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fc84 	bl	8001aa4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3301      	adds	r3, #1
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d9ef      	bls.n	8003188 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80031a8:	480d      	ldr	r0, [pc, #52]	@ (80031e0 <prvInitialiseTaskLists+0x64>)
 80031aa:	f7fe fc7b 	bl	8001aa4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80031ae:	480d      	ldr	r0, [pc, #52]	@ (80031e4 <prvInitialiseTaskLists+0x68>)
 80031b0:	f7fe fc78 	bl	8001aa4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80031b4:	480c      	ldr	r0, [pc, #48]	@ (80031e8 <prvInitialiseTaskLists+0x6c>)
 80031b6:	f7fe fc75 	bl	8001aa4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80031ba:	480c      	ldr	r0, [pc, #48]	@ (80031ec <prvInitialiseTaskLists+0x70>)
 80031bc:	f7fe fc72 	bl	8001aa4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80031c0:	480b      	ldr	r0, [pc, #44]	@ (80031f0 <prvInitialiseTaskLists+0x74>)
 80031c2:	f7fe fc6f 	bl	8001aa4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80031c6:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <prvInitialiseTaskLists+0x78>)
 80031c8:	4a05      	ldr	r2, [pc, #20]	@ (80031e0 <prvInitialiseTaskLists+0x64>)
 80031ca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031cc:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <prvInitialiseTaskLists+0x7c>)
 80031ce:	4a05      	ldr	r2, [pc, #20]	@ (80031e4 <prvInitialiseTaskLists+0x68>)
 80031d0:	601a      	str	r2, [r3, #0]
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200000d8 	.word	0x200000d8
 80031e0:	20000150 	.word	0x20000150
 80031e4:	20000168 	.word	0x20000168
 80031e8:	20000188 	.word	0x20000188
 80031ec:	200001a0 	.word	0x200001a0
 80031f0:	200001c0 	.word	0x200001c0
 80031f4:	20000180 	.word	0x20000180
 80031f8:	20000184 	.word	0x20000184

080031fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003202:	e019      	b.n	8003238 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003204:	f000 fe7c 	bl	8003f00 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003208:	4b10      	ldr	r3, [pc, #64]	@ (800324c <prvCheckTasksWaitingTermination+0x50>)
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3308      	adds	r3, #8
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe fcbe 	bl	8001b96 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <prvCheckTasksWaitingTermination+0x54>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3b01      	subs	r3, #1
 8003220:	4a0b      	ldr	r2, [pc, #44]	@ (8003250 <prvCheckTasksWaitingTermination+0x54>)
 8003222:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003224:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <prvCheckTasksWaitingTermination+0x58>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3b01      	subs	r3, #1
 800322a:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <prvCheckTasksWaitingTermination+0x58>)
 800322c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800322e:	f000 fe99 	bl	8003f64 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f810 	bl	8003258 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <prvCheckTasksWaitingTermination+0x58>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e1      	bne.n	8003204 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200001a0 	.word	0x200001a0
 8003250:	200001d8 	.word	0x200001d8
 8003254:	200001b8 	.word	0x200001b8

08003258 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003266:	2b00      	cmp	r3, #0
 8003268:	d108      	bne.n	800327c <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326e:	4618      	mov	r0, r3
 8003270:	f001 f87e 	bl	8004370 <vPortFree>
                vPortFree( pxTCB );
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f001 f87b 	bl	8004370 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800327a:	e019      	b.n	80032b0 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003282:	2b01      	cmp	r3, #1
 8003284:	d103      	bne.n	800328e <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f001 f872 	bl	8004370 <vPortFree>
    }
 800328c:	e010      	b.n	80032b0 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003294:	2b02      	cmp	r3, #2
 8003296:	d00b      	beq.n	80032b0 <prvDeleteTCB+0x58>
    __asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	60fb      	str	r3, [r7, #12]
}
 80032aa:	bf00      	nop
 80032ac:	bf00      	nop
 80032ae:	e7fd      	b.n	80032ac <prvDeleteTCB+0x54>
    }
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <prvResetNextTaskUnblockTime+0x38>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <prvResetNextTaskUnblockTime+0x1e>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80032c6:	490b      	ldr	r1, [pc, #44]	@ (80032f4 <prvResetNextTaskUnblockTime+0x3c>)
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032d0:	e9c1 2300 	strd	r2, r3, [r1]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80032d4:	e007      	b.n	80032e6 <prvResetNextTaskUnblockTime+0x2e>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032d6:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <prvResetNextTaskUnblockTime+0x38>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	4904      	ldr	r1, [pc, #16]	@ (80032f4 <prvResetNextTaskUnblockTime+0x3c>)
 80032e2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	20000180 	.word	0x20000180
 80032f4:	20000208 	.word	0x20000208

080032f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80032fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003334 <xTaskGetSchedulerState+0x3c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003306:	2301      	movs	r3, #1
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	e008      	b.n	800331e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800330c:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <xTaskGetSchedulerState+0x40>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003314:	2302      	movs	r3, #2
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	e001      	b.n	800331e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800331a:	2300      	movs	r3, #0
 800331c:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4619      	mov	r1, r3
 8003322:	20f5      	movs	r0, #245	@ 0xf5
 8003324:	f003 fa3e 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003328:	687b      	ldr	r3, [r7, #4]
    }
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	200001ec 	.word	0x200001ec
 8003338:	20000214 	.word	0x20000214

0800333c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800333c:	b5b0      	push	{r4, r5, r7, lr}
 800333e:	b08c      	sub	sp, #48	@ 0x30
 8003340:	af00      	add	r7, sp, #0
 8003342:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003348:	4b41      	ldr	r3, [pc, #260]	@ (8003450 <prvAddCurrentTaskToDelayedList+0x114>)
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003352:	4b40      	ldr	r3, [pc, #256]	@ (8003454 <prvAddCurrentTaskToDelayedList+0x118>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003358:	4b3f      	ldr	r3, [pc, #252]	@ (8003458 <prvAddCurrentTaskToDelayedList+0x11c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	623b      	str	r3, [r7, #32]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800335e:	4b3f      	ldr	r3, [pc, #252]	@ (800345c <prvAddCurrentTaskToDelayedList+0x120>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3308      	adds	r3, #8
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fc16 	bl	8001b96 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800336a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003372:	bf08      	it	eq
 8003374:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8003378:	d125      	bne.n	80033c6 <prvAddCurrentTaskToDelayedList+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d022      	beq.n	80033c6 <prvAddCurrentTaskToDelayedList+0x8a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003380:	4b37      	ldr	r3, [pc, #220]	@ (8003460 <prvAddCurrentTaskToDelayedList+0x124>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	4b35      	ldr	r3, [pc, #212]	@ (800345c <prvAddCurrentTaskToDelayedList+0x120>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	611a      	str	r2, [r3, #16]
 800338e:	4b33      	ldr	r3, [pc, #204]	@ (800345c <prvAddCurrentTaskToDelayedList+0x120>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	68d2      	ldr	r2, [r2, #12]
 8003396:	615a      	str	r2, [r3, #20]
 8003398:	4b30      	ldr	r3, [pc, #192]	@ (800345c <prvAddCurrentTaskToDelayedList+0x120>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	3208      	adds	r2, #8
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	4b2d      	ldr	r3, [pc, #180]	@ (800345c <prvAddCurrentTaskToDelayedList+0x120>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f103 0208 	add.w	r2, r3, #8
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	4b2a      	ldr	r3, [pc, #168]	@ (800345c <prvAddCurrentTaskToDelayedList+0x120>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003460 <prvAddCurrentTaskToDelayedList+0x124>)
 80033b6:	61da      	str	r2, [r3, #28]
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <prvAddCurrentTaskToDelayedList+0x124>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	4a28      	ldr	r2, [pc, #160]	@ (8003460 <prvAddCurrentTaskToDelayedList+0x124>)
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80033c4:	e03f      	b.n	8003446 <prvAddCurrentTaskToDelayedList+0x10a>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80033c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80033ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ce:	1884      	adds	r4, r0, r2
 80033d0:	eb41 0503 	adc.w	r5, r1, r3
 80033d4:	e9c7 4504 	strd	r4, r5, [r7, #16]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033d8:	4b20      	ldr	r3, [pc, #128]	@ (800345c <prvAddCurrentTaskToDelayedList+0x120>)
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
            if( xTimeToWake < xConstTickCount )
 80033e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033ec:	4290      	cmp	r0, r2
 80033ee:	eb71 0303 	sbcs.w	r3, r1, r3
 80033f2:	d20d      	bcs.n	8003410 <prvAddCurrentTaskToDelayedList+0xd4>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80033f4:	4b19      	ldr	r3, [pc, #100]	@ (800345c <prvAddCurrentTaskToDelayedList+0x120>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2104      	movs	r1, #4
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 fb0c 	bl	8006a18 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003400:	4b16      	ldr	r3, [pc, #88]	@ (800345c <prvAddCurrentTaskToDelayedList+0x120>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3308      	adds	r3, #8
 8003406:	4619      	mov	r1, r3
 8003408:	6a38      	ldr	r0, [r7, #32]
 800340a:	f7fe fb7f 	bl	8001b0c <vListInsert>
}
 800340e:	e01a      	b.n	8003446 <prvAddCurrentTaskToDelayedList+0x10a>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003410:	4b12      	ldr	r3, [pc, #72]	@ (800345c <prvAddCurrentTaskToDelayedList+0x120>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2104      	movs	r1, #4
 8003416:	4618      	mov	r0, r3
 8003418:	f003 fafe 	bl	8006a18 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800341c:	4b0f      	ldr	r3, [pc, #60]	@ (800345c <prvAddCurrentTaskToDelayedList+0x120>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3308      	adds	r3, #8
 8003422:	4619      	mov	r1, r3
 8003424:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003426:	f7fe fb71 	bl	8001b0c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800342a:	4b0e      	ldr	r3, [pc, #56]	@ (8003464 <prvAddCurrentTaskToDelayedList+0x128>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003434:	4290      	cmp	r0, r2
 8003436:	eb71 0303 	sbcs.w	r3, r1, r3
 800343a:	d204      	bcs.n	8003446 <prvAddCurrentTaskToDelayedList+0x10a>
                    xNextTaskUnblockTime = xTimeToWake;
 800343c:	4909      	ldr	r1, [pc, #36]	@ (8003464 <prvAddCurrentTaskToDelayedList+0x128>)
 800343e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003442:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003446:	bf00      	nop
 8003448:	3730      	adds	r7, #48	@ 0x30
 800344a:	46bd      	mov	sp, r7
 800344c:	bdb0      	pop	{r4, r5, r7, pc}
 800344e:	bf00      	nop
 8003450:	200001e0 	.word	0x200001e0
 8003454:	20000180 	.word	0x20000180
 8003458:	20000184 	.word	0x20000184
 800345c:	200000d0 	.word	0x200000d0
 8003460:	200001c0 	.word	0x200001c0
 8003464:	20000208 	.word	0x20000208

08003468 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a07      	ldr	r2, [pc, #28]	@ (8003494 <vApplicationGetIdleTaskMemory+0x2c>)
 8003478:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4a06      	ldr	r2, [pc, #24]	@ (8003498 <vApplicationGetIdleTaskMemory+0x30>)
 800347e:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2280      	movs	r2, #128	@ 0x80
 8003484:	601a      	str	r2, [r3, #0]
    }
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000218 	.word	0x20000218
 8003498:	20000278 	.word	0x20000278

0800349c <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4a07      	ldr	r2, [pc, #28]	@ (80034c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80034ac:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4a06      	ldr	r2, [pc, #24]	@ (80034cc <vApplicationGetTimerTaskMemory+0x30>)
 80034b2:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2280      	movs	r2, #128	@ 0x80
 80034b8:	601a      	str	r2, [r3, #0]
    }
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000478 	.word	0x20000478
 80034cc:	200004d8 	.word	0x200004d8

080034d0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	@ 0x28
 80034d4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80034da:	f000 faf1 	bl	8003ac0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80034de:	4b20      	ldr	r3, [pc, #128]	@ (8003560 <xTimerCreateTimerTask+0x90>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d021      	beq.n	800352a <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 80034ee:	1d3a      	adds	r2, r7, #4
 80034f0:	f107 0108 	add.w	r1, r7, #8
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ffcf 	bl	800349c <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	9202      	str	r2, [sp, #8]
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	2304      	movs	r3, #4
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2300      	movs	r3, #0
 800350e:	460a      	mov	r2, r1
 8003510:	4914      	ldr	r1, [pc, #80]	@ (8003564 <xTimerCreateTimerTask+0x94>)
 8003512:	4815      	ldr	r0, [pc, #84]	@ (8003568 <xTimerCreateTimerTask+0x98>)
 8003514:	f7fe fe91 	bl	800223a <xTaskCreateStatic>
 8003518:	4603      	mov	r3, r0
 800351a:	4a14      	ldr	r2, [pc, #80]	@ (800356c <xTimerCreateTimerTask+0x9c>)
 800351c:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800351e:	4b13      	ldr	r3, [pc, #76]	@ (800356c <xTimerCreateTimerTask+0x9c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8003526:	2301      	movs	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <xTimerCreateTimerTask+0x78>
    __asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	613b      	str	r3, [r7, #16]
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	4619      	mov	r1, r3
 800354c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003550:	f003 f928 	bl	80067a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003554:	697b      	ldr	r3, [r7, #20]
    }
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000710 	.word	0x20000710
 8003564:	080077fc 	.word	0x080077fc
 8003568:	08003649 	.word	0x08003649
 800356c:	20000714 	.word	0x20000714

08003570 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003570:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003574:	b088      	sub	sp, #32
 8003576:	af04      	add	r7, sp, #16
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	e9c7 2300 	strd	r2, r3, [r7]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800357e:	e00d      	b.n	800359c <prvReloadTimer+0x2c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800358a:	1884      	adds	r4, r0, r2
 800358c:	eb41 0503 	adc.w	r5, r1, r3
 8003590:	e9c7 4500 	strd	r4, r5, [r7]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80035a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035a6:	eb10 0802 	adds.w	r8, r0, r2
 80035aa:	eb41 0903 	adc.w	r9, r1, r3
 80035ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035ba:	e9cd 2300 	strd	r2, r3, [sp]
 80035be:	4642      	mov	r2, r8
 80035c0:	464b      	mov	r3, r9
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f906 	bl	80037d4 <prvInsertTimerInActiveList>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1d8      	bne.n	8003580 <prvReloadTimer+0x10>
        }
    }
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080035dc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80035e6:	e9c7 2300 	strd	r2, r3, [r7]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035ea:	4b16      	ldr	r3, [pc, #88]	@ (8003644 <prvProcessExpiredTimer+0x68>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3308      	adds	r3, #8
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe facc 	bl	8001b96 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <prvProcessExpiredTimer+0x44>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800360c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003610:	e9cd 2300 	strd	r2, r3, [sp]
 8003614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003618:	6978      	ldr	r0, [r7, #20]
 800361a:	f7ff ffa9 	bl	8003570 <prvReloadTimer>
 800361e:	e008      	b.n	8003632 <prvProcessExpiredTimer+0x56>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	b2da      	uxtb	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	6978      	ldr	r0, [r7, #20]
 8003638:	4798      	blx	r3
    }
 800363a:	bf00      	nop
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000708 	.word	0x20000708

08003648 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003650:	f107 030c 	add.w	r3, r7, #12
 8003654:	4618      	mov	r0, r3
 8003656:	f000 f869 	bl	800372c <prvGetNextExpireTime>
 800365a:	e9c7 0104 	strd	r0, r1, [r7, #16]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	461a      	mov	r2, r3
 8003662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003666:	f000 f805 	bl	8003674 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800366a:	f000 f909 	bl	8003880 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800366e:	bf00      	nop
 8003670:	e7ee      	b.n	8003650 <prvTimerTask+0x8>
	...

08003674 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003676:	b08b      	sub	sp, #44	@ 0x2c
 8003678:	af02      	add	r7, sp, #8
 800367a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003680:	f7ff f86c 	bl	800275c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003684:	f107 0314 	add.w	r3, r7, #20
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f87b 	bl	8003784 <prvSampleTimeNow>
 800368e:	e9c7 0106 	strd	r0, r1, [r7, #24]

            if( xTimerListsWereSwitched == pdFALSE )
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d13d      	bne.n	8003714 <prvProcessTimerOrBlockTask+0xa0>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d110      	bne.n	80036c0 <prvProcessTimerOrBlockTask+0x4c>
 800369e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036a6:	4290      	cmp	r0, r2
 80036a8:	eb71 0303 	sbcs.w	r3, r1, r3
 80036ac:	d308      	bcc.n	80036c0 <prvProcessTimerOrBlockTask+0x4c>
                {
                    ( void ) xTaskResumeAll();
 80036ae:	f7ff f863 	bl	8002778 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80036b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036ba:	f7ff ff8f 	bl	80035dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80036be:	e02b      	b.n	8003718 <prvProcessTimerOrBlockTask+0xa4>
                    if( xListWasEmpty != pdFALSE )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <prvProcessTimerOrBlockTask+0x64>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80036c6:	4b16      	ldr	r3, [pc, #88]	@ (8003720 <prvProcessTimerOrBlockTask+0xac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <prvProcessTimerOrBlockTask+0x60>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <prvProcessTimerOrBlockTask+0x62>
 80036d4:	2300      	movs	r3, #0
 80036d6:	607b      	str	r3, [r7, #4]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80036d8:	4b12      	ldr	r3, [pc, #72]	@ (8003724 <prvProcessTimerOrBlockTask+0xb0>)
 80036da:	681e      	ldr	r6, [r3, #0]
 80036dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e4:	1a84      	subs	r4, r0, r2
 80036e6:	eb61 0503 	sbc.w	r5, r1, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	4622      	mov	r2, r4
 80036f0:	462b      	mov	r3, r5
 80036f2:	4630      	mov	r0, r6
 80036f4:	f7fe fd06 	bl	8002104 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80036f8:	f7ff f83e 	bl	8002778 <xTaskResumeAll>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <prvProcessTimerOrBlockTask+0xa4>
                        taskYIELD_WITHIN_API();
 8003702:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <prvProcessTimerOrBlockTask+0xb4>)
 8003704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	f3bf 8f6f 	isb	sy
    }
 8003712:	e001      	b.n	8003718 <prvProcessTimerOrBlockTask+0xa4>
                ( void ) xTaskResumeAll();
 8003714:	f7ff f830 	bl	8002778 <xTaskResumeAll>
    }
 8003718:	bf00      	nop
 800371a:	3724      	adds	r7, #36	@ 0x24
 800371c:	46bd      	mov	sp, r7
 800371e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003720:	2000070c 	.word	0x2000070c
 8003724:	20000710 	.word	0x20000710
 8003728:	e000ed04 	.word	0xe000ed04

0800372c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003734:	4b12      	ldr	r3, [pc, #72]	@ (8003780 <prvGetNextExpireTime+0x54>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <prvGetNextExpireTime+0x16>
 800373e:	2201      	movs	r2, #1
 8003740:	e000      	b.n	8003744 <prvGetNextExpireTime+0x18>
 8003742:	2200      	movs	r2, #0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <prvGetNextExpireTime+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003750:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <prvGetNextExpireTime+0x54>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800375e:	e005      	b.n	800376c <prvGetNextExpireTime+0x40>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9c7 2302 	strd	r2, r3, [r7, #8]
        }

        return xNextExpireTime;
 800376c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000708 	.word	0x20000708

08003784 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800378c:	f7ff f904 	bl	8002998 <xTaskGetTickCount>
 8003790:	e9c7 0102 	strd	r0, r1, [r7, #8]

        if( xTimeNow < xLastTime )
 8003794:	4b0e      	ldr	r3, [pc, #56]	@ (80037d0 <prvSampleTimeNow+0x4c>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800379e:	4290      	cmp	r0, r2
 80037a0:	eb71 0303 	sbcs.w	r3, r1, r3
 80037a4:	d205      	bcs.n	80037b2 <prvSampleTimeNow+0x2e>
        {
            prvSwitchTimerLists();
 80037a6:	f000 f961 	bl	8003a6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e002      	b.n	80037b8 <prvSampleTimeNow+0x34>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80037b8:	4905      	ldr	r1, [pc, #20]	@ (80037d0 <prvSampleTimeNow+0x4c>)
 80037ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037be:	e9c1 2300 	strd	r2, r3, [r1]

        return xTimeNow;
 80037c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 80037c6:	4610      	mov	r0, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000718 	.word	0x20000718

080037d4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80037d4:	b5b0      	push	{r4, r5, r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	e9c7 2300 	strd	r2, r3, [r7]
        BaseType_t xProcessTimerNow = pdFALSE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80037e4:	68f9      	ldr	r1, [r7, #12]
 80037e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	619a      	str	r2, [r3, #24]

        if( xNextExpiryTime <= xTimeNow )
 80037f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80037fc:	4290      	cmp	r0, r2
 80037fe:	eb71 0303 	sbcs.w	r3, r1, r3
 8003802:	d319      	bcc.n	8003838 <prvInsertTimerInActiveList+0x64>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003804:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003808:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800380c:	1a84      	subs	r4, r0, r2
 800380e:	eb61 0503 	sbc.w	r5, r1, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003818:	4294      	cmp	r4, r2
 800381a:	eb75 0303 	sbcs.w	r3, r5, r3
 800381e:	d302      	bcc.n	8003826 <prvInsertTimerInActiveList+0x52>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003820:	2301      	movs	r3, #1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e023      	b.n	800386e <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003826:	4b14      	ldr	r3, [pc, #80]	@ (8003878 <prvInsertTimerInActiveList+0xa4>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3308      	adds	r3, #8
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f7fe f96b 	bl	8001b0c <vListInsert>
 8003836:	e01a      	b.n	800386e <prvInsertTimerInActiveList+0x9a>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003838:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800383c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003840:	4290      	cmp	r0, r2
 8003842:	eb71 0303 	sbcs.w	r3, r1, r3
 8003846:	d20a      	bcs.n	800385e <prvInsertTimerInActiveList+0x8a>
 8003848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800384c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003850:	4290      	cmp	r0, r2
 8003852:	eb71 0303 	sbcs.w	r3, r1, r3
 8003856:	d302      	bcc.n	800385e <prvInsertTimerInActiveList+0x8a>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	e007      	b.n	800386e <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800385e:	4b07      	ldr	r3, [pc, #28]	@ (800387c <prvInsertTimerInActiveList+0xa8>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3308      	adds	r3, #8
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f7fe f94f 	bl	8001b0c <vListInsert>
            }
        }

        return xProcessTimerNow;
 800386e:	697b      	ldr	r3, [r7, #20]
    }
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bdb0      	pop	{r4, r5, r7, pc}
 8003878:	2000070c 	.word	0x2000070c
 800387c:	20000708 	.word	0x20000708

08003880 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003884:	b092      	sub	sp, #72	@ 0x48
 8003886:	af04      	add	r7, sp, #16
        DaemonTaskMessage_t xMessage = { 0 };
 8003888:	f107 0308 	add.w	r3, r7, #8
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]
 8003898:	615a      	str	r2, [r3, #20]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800389a:	e0d0      	b.n	8003a3e <prvProcessReceivedCommands+0x1be>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f2c0 80cd 	blt.w	8003a3e <prvProcessReceivedCommands+0x1be>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	637b      	str	r3, [r7, #52]	@ 0x34

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80038a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d004      	beq.n	80038ba <prvProcessReceivedCommands+0x3a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b2:	3308      	adds	r3, #8
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe f96e 	bl	8001b96 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff61 	bl	8003784 <prvSampleTimeNow>
 80038c2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

                switch( xMessage.xMessageID )
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	f200 80b4 	bhi.w	8003a38 <prvProcessReceivedCommands+0x1b8>
 80038d0:	a201      	add	r2, pc, #4	@ (adr r2, 80038d8 <prvProcessReceivedCommands+0x58>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038fd 	.word	0x080038fd
 80038dc:	080038fd 	.word	0x080038fd
 80038e0:	0800398f 	.word	0x0800398f
 80038e4:	080039a3 	.word	0x080039a3
 80038e8:	08003a0f 	.word	0x08003a0f
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	080038fd 	.word	0x080038fd
 80038f4:	0800398f 	.word	0x0800398f
 80038f8:	080039a3 	.word	0x080039a3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80038fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800390e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003918:	1884      	adds	r4, r0, r2
 800391a:	eb41 0503 	adc.w	r5, r1, r3
 800391e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003922:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800392a:	e9cd 2300 	strd	r2, r3, [sp]
 800392e:	4622      	mov	r2, r4
 8003930:	462b      	mov	r3, r5
 8003932:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003934:	f7ff ff4e 	bl	80037d4 <prvInsertTimerInActiveList>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d07e      	beq.n	8003a3c <prvProcessReceivedCommands+0x1bc>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800393e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003940:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d012      	beq.n	8003972 <prvProcessReceivedCommands+0xf2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800394c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003952:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003956:	eb10 0802 	adds.w	r8, r0, r2
 800395a:	eb41 0903 	adc.w	r9, r1, r3
 800395e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003962:	e9cd 2300 	strd	r2, r3, [sp]
 8003966:	4642      	mov	r2, r8
 8003968:	464b      	mov	r3, r9
 800396a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800396c:	f7ff fe00 	bl	8003570 <prvReloadTimer>
 8003970:	e008      	b.n	8003984 <prvProcessReceivedCommands+0x104>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003974:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	b2da      	uxtb	r2, r3
 800397e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003980:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800398a:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800398c:	e056      	b.n	8003a3c <prvProcessReceivedCommands+0x1bc>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003990:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	b2da      	uxtb	r2, r3
 800399a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800399c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 80039a0:	e04d      	b.n	8003a3e <prvProcessReceivedCommands+0x1be>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80039a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039b8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80039ba:	e9c1 2308 	strd	r2, r3, [r1, #32]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	d10b      	bne.n	80039e0 <prvProcessReceivedCommands+0x160>
    __asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	e7fd      	b.n	80039dc <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80039e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039ea:	eb10 0a02 	adds.w	sl, r0, r2
 80039ee:	eb41 0b03 	adc.w	fp, r1, r3
 80039f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039fe:	e9cd 2300 	strd	r2, r3, [sp]
 8003a02:	4652      	mov	r2, sl
 8003a04:	465b      	mov	r3, fp
 8003a06:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003a08:	f7ff fee4 	bl	80037d4 <prvInsertTimerInActiveList>
                        break;
 8003a0c:	e017      	b.n	8003a3e <prvProcessReceivedCommands+0x1be>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d103      	bne.n	8003a24 <prvProcessReceivedCommands+0x1a4>
                            {
                                vPortFree( pxTimer );
 8003a1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003a1e:	f000 fca7 	bl	8004370 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a22:	e00c      	b.n	8003a3e <prvProcessReceivedCommands+0x1be>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 8003a36:	e002      	b.n	8003a3e <prvProcessReceivedCommands+0x1be>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <prvProcessReceivedCommands+0x1be>
                        break;
 8003a3c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <prvProcessReceivedCommands+0x1e8>)
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	f107 0108 	add.w	r1, r7, #8
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	f7fe f9e3 	bl	8001e18 <xQueueReceive>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f47f af21 	bne.w	800389c <prvProcessReceivedCommands+0x1c>
                }
            }
        }
    }
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
 8003a5e:	3738      	adds	r7, #56	@ 0x38
 8003a60:	46bd      	mov	sp, r7
 8003a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a66:	bf00      	nop
 8003a68:	20000710 	.word	0x20000710

08003a6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a72:	e00e      	b.n	8003a92 <prvSwitchTimerLists+0x26>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a74:	4b10      	ldr	r3, [pc, #64]	@ (8003ab8 <prvSwitchTimerLists+0x4c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	e9c7 2300 	strd	r2, r3, [r7]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a8e:	f7ff fda5 	bl	80035dc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a92:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <prvSwitchTimerLists+0x4c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1eb      	bne.n	8003a74 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <prvSwitchTimerLists+0x4c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]
        pxCurrentTimerList = pxOverflowTimerList;
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <prvSwitchTimerLists+0x50>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a04      	ldr	r2, [pc, #16]	@ (8003ab8 <prvSwitchTimerLists+0x4c>)
 8003aa8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003aaa:	4a04      	ldr	r2, [pc, #16]	@ (8003abc <prvSwitchTimerLists+0x50>)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6013      	str	r3, [r2, #0]
    }
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000708 	.word	0x20000708
 8003abc:	2000070c 	.word	0x2000070c

08003ac0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ac6:	f000 fa1b 	bl	8003f00 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003aca:	4b10      	ldr	r3, [pc, #64]	@ (8003b0c <prvCheckForValidListAndQueue+0x4c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d116      	bne.n	8003b00 <prvCheckForValidListAndQueue+0x40>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ad2:	480f      	ldr	r0, [pc, #60]	@ (8003b10 <prvCheckForValidListAndQueue+0x50>)
 8003ad4:	f7fd ffe6 	bl	8001aa4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ad8:	480e      	ldr	r0, [pc, #56]	@ (8003b14 <prvCheckForValidListAndQueue+0x54>)
 8003ada:	f7fd ffe3 	bl	8001aa4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003ade:	4b0e      	ldr	r3, [pc, #56]	@ (8003b18 <prvCheckForValidListAndQueue+0x58>)
 8003ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8003b10 <prvCheckForValidListAndQueue+0x50>)
 8003ae2:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b1c <prvCheckForValidListAndQueue+0x5c>)
 8003ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8003b14 <prvCheckForValidListAndQueue+0x54>)
 8003ae8:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003aea:	2300      	movs	r3, #0
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <prvCheckForValidListAndQueue+0x60>)
 8003af0:	4a0c      	ldr	r2, [pc, #48]	@ (8003b24 <prvCheckForValidListAndQueue+0x64>)
 8003af2:	2118      	movs	r1, #24
 8003af4:	200a      	movs	r0, #10
 8003af6:	f7fe f906 	bl	8001d06 <xQueueGenericCreateStatic>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4a03      	ldr	r2, [pc, #12]	@ (8003b0c <prvCheckForValidListAndQueue+0x4c>)
 8003afe:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b00:	f000 fa30 	bl	8003f64 <vPortExitCritical>
    }
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000710 	.word	0x20000710
 8003b10:	200006d8 	.word	0x200006d8
 8003b14:	200006f0 	.word	0x200006f0
 8003b18:	20000708 	.word	0x20000708
 8003b1c:	2000070c 	.word	0x2000070c
 8003b20:	20000810 	.word	0x20000810
 8003b24:	20000720 	.word	0x20000720

08003b28 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3b04      	subs	r3, #4
 8003b38:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3b04      	subs	r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f023 0201 	bic.w	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3b04      	subs	r3, #4
 8003b56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b58:	4a0c      	ldr	r2, [pc, #48]	@ (8003b8c <pxPortInitialiseStack+0x64>)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3b14      	subs	r3, #20
 8003b62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3b04      	subs	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f06f 0202 	mvn.w	r2, #2
 8003b76:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3b20      	subs	r3, #32
 8003b7c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	08003b91 	.word	0x08003b91

08003b90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b9a:	4b13      	ldr	r3, [pc, #76]	@ (8003be8 <prvTaskExitError+0x58>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ba2:	d00b      	beq.n	8003bbc <prvTaskExitError+0x2c>
    __asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	60fb      	str	r3, [r7, #12]
}
 8003bb6:	bf00      	nop
 8003bb8:	bf00      	nop
 8003bba:	e7fd      	b.n	8003bb8 <prvTaskExitError+0x28>
    __asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	60bb      	str	r3, [r7, #8]
}
 8003bce:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003bd0:	bf00      	nop
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0fc      	beq.n	8003bd2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	2000000c 	.word	0x2000000c
 8003bec:	00000000 	.word	0x00000000

08003bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003bf0:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <pxCurrentTCBConst2>)
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	6808      	ldr	r0, [r1, #0]
 8003bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bfa:	f380 8809 	msr	PSP, r0
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f04f 0000 	mov.w	r0, #0
 8003c06:	f380 8811 	msr	BASEPRI, r0
 8003c0a:	4770      	bx	lr
 8003c0c:	f3af 8000 	nop.w

08003c10 <pxCurrentTCBConst2>:
 8003c10:	200000d0 	.word	0x200000d0
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop

08003c18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003c18:	4808      	ldr	r0, [pc, #32]	@ (8003c3c <prvPortStartFirstTask+0x24>)
 8003c1a:	6800      	ldr	r0, [r0, #0]
 8003c1c:	6800      	ldr	r0, [r0, #0]
 8003c1e:	f380 8808 	msr	MSP, r0
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f380 8814 	msr	CONTROL, r0
 8003c2a:	b662      	cpsie	i
 8003c2c:	b661      	cpsie	f
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	df00      	svc	0
 8003c38:	bf00      	nop
 8003c3a:	0000      	.short	0x0000
 8003c3c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop

08003c44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08c      	sub	sp, #48	@ 0x30
 8003c48:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c4a:	4b69      	ldr	r3, [pc, #420]	@ (8003df0 <xPortStartScheduler+0x1ac>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a69      	ldr	r2, [pc, #420]	@ (8003df4 <xPortStartScheduler+0x1b0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d10b      	bne.n	8003c6c <xPortStartScheduler+0x28>
    __asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	623b      	str	r3, [r7, #32]
}
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
 8003c6a:	e7fd      	b.n	8003c68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c6c:	4b60      	ldr	r3, [pc, #384]	@ (8003df0 <xPortStartScheduler+0x1ac>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a61      	ldr	r2, [pc, #388]	@ (8003df8 <xPortStartScheduler+0x1b4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d10b      	bne.n	8003c8e <xPortStartScheduler+0x4a>
    __asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	e7fd      	b.n	8003c8a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8003c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dfc <xPortStartScheduler+0x1b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c96:	332c      	adds	r3, #44	@ 0x2c
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a59      	ldr	r2, [pc, #356]	@ (8003e00 <xPortStartScheduler+0x1bc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <xPortStartScheduler+0x74>
    __asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	61fb      	str	r3, [r7, #28]
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cba:	3338      	adds	r3, #56	@ 0x38
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a51      	ldr	r2, [pc, #324]	@ (8003e04 <xPortStartScheduler+0x1c0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00b      	beq.n	8003cdc <xPortStartScheduler+0x98>
    __asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	61bb      	str	r3, [r7, #24]
}
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ce0:	4b49      	ldr	r3, [pc, #292]	@ (8003e08 <xPortStartScheduler+0x1c4>)
 8003ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cee:	22ff      	movs	r2, #255	@ 0xff
 8003cf0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	4b41      	ldr	r3, [pc, #260]	@ (8003e0c <xPortStartScheduler+0x1c8>)
 8003d06:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003d08:	4b40      	ldr	r3, [pc, #256]	@ (8003e0c <xPortStartScheduler+0x1c8>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <xPortStartScheduler+0xe4>
    __asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	617b      	str	r3, [r7, #20]
}
 8003d22:	bf00      	nop
 8003d24:	bf00      	nop
 8003d26:	e7fd      	b.n	8003d24 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d013      	beq.n	8003d5e <xPortStartScheduler+0x11a>
    __asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	613b      	str	r3, [r7, #16]
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	e7fd      	b.n	8003d4a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	3301      	adds	r3, #1
 8003d52:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d66:	2b80      	cmp	r3, #128	@ 0x80
 8003d68:	d0f1      	beq.n	8003d4e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d103      	bne.n	8003d78 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003d70:	4b27      	ldr	r3, [pc, #156]	@ (8003e10 <xPortStartScheduler+0x1cc>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e004      	b.n	8003d82 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f1c3 0307 	rsb	r3, r3, #7
 8003d7e:	4a24      	ldr	r2, [pc, #144]	@ (8003e10 <xPortStartScheduler+0x1cc>)
 8003d80:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d82:	4b23      	ldr	r3, [pc, #140]	@ (8003e10 <xPortStartScheduler+0x1cc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	4a21      	ldr	r2, [pc, #132]	@ (8003e10 <xPortStartScheduler+0x1cc>)
 8003d8a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d8c:	4b20      	ldr	r3, [pc, #128]	@ (8003e10 <xPortStartScheduler+0x1cc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d94:	4a1e      	ldr	r2, [pc, #120]	@ (8003e10 <xPortStartScheduler+0x1cc>)
 8003d96:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003da0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e14 <xPortStartScheduler+0x1d0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <xPortStartScheduler+0x1d0>)
 8003da6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003daa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003dac:	4b19      	ldr	r3, [pc, #100]	@ (8003e14 <xPortStartScheduler+0x1d0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a18      	ldr	r2, [pc, #96]	@ (8003e14 <xPortStartScheduler+0x1d0>)
 8003db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003db6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003db8:	4b17      	ldr	r3, [pc, #92]	@ (8003e18 <xPortStartScheduler+0x1d4>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003dbe:	f000 f933 	bl	8004028 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003dc2:	4b16      	ldr	r3, [pc, #88]	@ (8003e1c <xPortStartScheduler+0x1d8>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003dc8:	f000 f952 	bl	8004070 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003dcc:	4b14      	ldr	r3, [pc, #80]	@ (8003e20 <xPortStartScheduler+0x1dc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <xPortStartScheduler+0x1dc>)
 8003dd2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003dd6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003dd8:	f7ff ff1e 	bl	8003c18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ddc:	f7fe ff3e 	bl	8002c5c <vTaskSwitchContext>
    prvTaskExitError();
 8003de0:	f7ff fed6 	bl	8003b90 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3730      	adds	r7, #48	@ 0x30
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	e000ed00 	.word	0xe000ed00
 8003df4:	410fc271 	.word	0x410fc271
 8003df8:	410fc270 	.word	0x410fc270
 8003dfc:	e000ed08 	.word	0xe000ed08
 8003e00:	08003bf1 	.word	0x08003bf1
 8003e04:	08003fc1 	.word	0x08003fc1
 8003e08:	e000e400 	.word	0xe000e400
 8003e0c:	20000860 	.word	0x20000860
 8003e10:	20000864 	.word	0x20000864
 8003e14:	e000ed20 	.word	0xe000ed20
 8003e18:	e000ed1c 	.word	0xe000ed1c
 8003e1c:	2000000c 	.word	0x2000000c
 8003e20:	e000ef34 	.word	0xe000ef34

08003e24 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee8 <vInitPrioGroupValue+0xc4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003eec <vInitPrioGroupValue+0xc8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d10b      	bne.n	8003e4c <vInitPrioGroupValue+0x28>
    __asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	60fb      	str	r3, [r7, #12]
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e4c:	4b26      	ldr	r3, [pc, #152]	@ (8003ee8 <vInitPrioGroupValue+0xc4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a27      	ldr	r2, [pc, #156]	@ (8003ef0 <vInitPrioGroupValue+0xcc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d10b      	bne.n	8003e6e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	613b      	str	r3, [r7, #16]
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	e7fd      	b.n	8003e6a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e6e:	4b21      	ldr	r3, [pc, #132]	@ (8003ef4 <vInitPrioGroupValue+0xd0>)
 8003e70:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	22ff      	movs	r2, #255	@ 0xff
 8003e7e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b19      	ldr	r3, [pc, #100]	@ (8003ef8 <vInitPrioGroupValue+0xd4>)
 8003e94:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e96:	4b19      	ldr	r3, [pc, #100]	@ (8003efc <vInitPrioGroupValue+0xd8>)
 8003e98:	2207      	movs	r2, #7
 8003e9a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e9c:	e009      	b.n	8003eb2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003e9e:	4b17      	ldr	r3, [pc, #92]	@ (8003efc <vInitPrioGroupValue+0xd8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	4a15      	ldr	r2, [pc, #84]	@ (8003efc <vInitPrioGroupValue+0xd8>)
 8003ea6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eba:	2b80      	cmp	r3, #128	@ 0x80
 8003ebc:	d0ef      	beq.n	8003e9e <vInitPrioGroupValue+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8003efc <vInitPrioGroupValue+0xd8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8003efc <vInitPrioGroupValue+0xd8>)
 8003ec6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <vInitPrioGroupValue+0xd8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8003efc <vInitPrioGroupValue+0xd8>)
 8003ed2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000ed00 	.word	0xe000ed00
 8003eec:	410fc271 	.word	0x410fc271
 8003ef0:	410fc270 	.word	0x410fc270
 8003ef4:	e000e400 	.word	0xe000e400
 8003ef8:	20000860 	.word	0x20000860
 8003efc:	20000864 	.word	0x20000864

08003f00 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
    __asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	607b      	str	r3, [r7, #4]
}
 8003f18:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003f1a:	4b10      	ldr	r3, [pc, #64]	@ (8003f5c <vPortEnterCritical+0x5c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	4a0e      	ldr	r2, [pc, #56]	@ (8003f5c <vPortEnterCritical+0x5c>)
 8003f22:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003f24:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <vPortEnterCritical+0x5c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d110      	bne.n	8003f4e <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <vPortEnterCritical+0x60>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <vPortEnterCritical+0x4e>
    __asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	603b      	str	r3, [r7, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	e7fd      	b.n	8003f4a <vPortEnterCritical+0x4a>
    }
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	2000000c 	.word	0x2000000c
 8003f60:	e000ed04 	.word	0xe000ed04

08003f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003f6a:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <vPortExitCritical+0x50>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10b      	bne.n	8003f8a <vPortExitCritical+0x26>
    __asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	607b      	str	r3, [r7, #4]
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	e7fd      	b.n	8003f86 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb4 <vPortExitCritical+0x50>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	4a08      	ldr	r2, [pc, #32]	@ (8003fb4 <vPortExitCritical+0x50>)
 8003f92:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003f94:	4b07      	ldr	r3, [pc, #28]	@ (8003fb4 <vPortExitCritical+0x50>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <vPortExitCritical+0x44>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	f383 8811 	msr	BASEPRI, r3
}
 8003fa6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	2000000c 	.word	0x2000000c
	...

08003fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003fc0:	f3ef 8009 	mrs	r0, PSP
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <pxCurrentTCBConst>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	f01e 0f10 	tst.w	lr, #16
 8003fd0:	bf08      	it	eq
 8003fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fda:	6010      	str	r0, [r2, #0]
 8003fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003fe4:	f380 8811 	msr	BASEPRI, r0
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f7fe fe34 	bl	8002c5c <vTaskSwitchContext>
 8003ff4:	f04f 0000 	mov.w	r0, #0
 8003ff8:	f380 8811 	msr	BASEPRI, r0
 8003ffc:	bc09      	pop	{r0, r3}
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	6808      	ldr	r0, [r1, #0]
 8004002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004006:	f01e 0f10 	tst.w	lr, #16
 800400a:	bf08      	it	eq
 800400c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004010:	f380 8809 	msr	PSP, r0
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	f3af 8000 	nop.w

08004020 <pxCurrentTCBConst>:
 8004020:	200000d0 	.word	0x200000d0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop

08004028 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800402c:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <vPortSetupTimerInterrupt+0x34>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004032:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <vPortSetupTimerInterrupt+0x38>)
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004038:	4b0a      	ldr	r3, [pc, #40]	@ (8004064 <vPortSetupTimerInterrupt+0x3c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0a      	ldr	r2, [pc, #40]	@ (8004068 <vPortSetupTimerInterrupt+0x40>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	4a09      	ldr	r2, [pc, #36]	@ (800406c <vPortSetupTimerInterrupt+0x44>)
 8004046:	3b01      	subs	r3, #1
 8004048:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800404a:	4b04      	ldr	r3, [pc, #16]	@ (800405c <vPortSetupTimerInterrupt+0x34>)
 800404c:	2207      	movs	r2, #7
 800404e:	601a      	str	r2, [r3, #0]
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	e000e010 	.word	0xe000e010
 8004060:	e000e018 	.word	0xe000e018
 8004064:	20000000 	.word	0x20000000
 8004068:	51eb851f 	.word	0x51eb851f
 800406c:	e000e014 	.word	0xe000e014

08004070 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004070:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004080 <vPortEnableVFP+0x10>
 8004074:	6801      	ldr	r1, [r0, #0]
 8004076:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800407a:	6001      	str	r1, [r0, #0]
 800407c:	4770      	bx	lr
 800407e:	0000      	.short	0x0000
 8004080:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop

08004088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800408e:	f3ef 8305 	mrs	r3, IPSR
 8004092:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b0f      	cmp	r3, #15
 8004098:	d915      	bls.n	80040c6 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800409a:	4a18      	ldr	r2, [pc, #96]	@ (80040fc <vPortValidateInterruptPriority+0x74>)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040a4:	4b16      	ldr	r3, [pc, #88]	@ (8004100 <vPortValidateInterruptPriority+0x78>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	7afa      	ldrb	r2, [r7, #11]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d20b      	bcs.n	80040c6 <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	607b      	str	r3, [r7, #4]
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	e7fd      	b.n	80040c2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80040c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004104 <vPortValidateInterruptPriority+0x7c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004108 <vPortValidateInterruptPriority+0x80>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d90b      	bls.n	80040ee <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	603b      	str	r3, [r7, #0]
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	e7fd      	b.n	80040ea <vPortValidateInterruptPriority+0x62>
    }
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	e000e3f0 	.word	0xe000e3f0
 8004100:	20000860 	.word	0x20000860
 8004104:	e000ed0c 	.word	0xe000ed0c
 8004108:	20000864 	.word	0x20000864

0800410c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08e      	sub	sp, #56	@ 0x38
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004114:	2300      	movs	r3, #0
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d022      	beq.n	8004164 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800411e:	2308      	movs	r3, #8
 8004120:	43db      	mvns	r3, r3
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d81b      	bhi.n	8004160 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8004128:	2208      	movs	r2, #8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	2b00      	cmp	r3, #0
 8004138:	d014      	beq.n	8004164 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	f1c3 0308 	rsb	r3, r3, #8
 8004144:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	43db      	mvns	r3, r3
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	429a      	cmp	r2, r3
 800414e:	d804      	bhi.n	800415a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004154:	4413      	add	r3, r2
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	e004      	b.n	8004164 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	e001      	b.n	8004164 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004164:	f7fe fafa 	bl	800275c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004168:	4b7a      	ldr	r3, [pc, #488]	@ (8004354 <pvPortMalloc+0x248>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004170:	f000 f984 	bl	800447c <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	f2c0 80d3 	blt.w	8004322 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80cf 	beq.w	8004322 <pvPortMalloc+0x216>
 8004184:	4b74      	ldr	r3, [pc, #464]	@ (8004358 <pvPortMalloc+0x24c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	f200 80c9 	bhi.w	8004322 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004190:	4b72      	ldr	r3, [pc, #456]	@ (800435c <pvPortMalloc+0x250>)
 8004192:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004194:	4b71      	ldr	r3, [pc, #452]	@ (800435c <pvPortMalloc+0x250>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800419a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419c:	4a70      	ldr	r2, [pc, #448]	@ (8004360 <pvPortMalloc+0x254>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d305      	bcc.n	80041ae <pvPortMalloc+0xa2>
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	4a6f      	ldr	r2, [pc, #444]	@ (8004364 <pvPortMalloc+0x258>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d801      	bhi.n	80041ae <pvPortMalloc+0xa2>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <pvPortMalloc+0xa4>
 80041ae:	2300      	movs	r3, #0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d129      	bne.n	8004208 <pvPortMalloc+0xfc>
    __asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	623b      	str	r3, [r7, #32]
}
 80041c6:	bf00      	nop
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80041cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ce:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80041d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80041d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d8:	4a61      	ldr	r2, [pc, #388]	@ (8004360 <pvPortMalloc+0x254>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d305      	bcc.n	80041ea <pvPortMalloc+0xde>
 80041de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e0:	4a60      	ldr	r2, [pc, #384]	@ (8004364 <pvPortMalloc+0x258>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d801      	bhi.n	80041ea <pvPortMalloc+0xde>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <pvPortMalloc+0xe0>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <pvPortMalloc+0xfc>
    __asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	61fb      	str	r3, [r7, #28]
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d903      	bls.n	800421a <pvPortMalloc+0x10e>
 8004212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1d8      	bne.n	80041cc <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800421a:	4b4e      	ldr	r3, [pc, #312]	@ (8004354 <pvPortMalloc+0x248>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004220:	429a      	cmp	r2, r3
 8004222:	d07e      	beq.n	8004322 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2208      	movs	r2, #8
 800422a:	4413      	add	r3, r2
 800422c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800422e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004230:	4a4b      	ldr	r2, [pc, #300]	@ (8004360 <pvPortMalloc+0x254>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d305      	bcc.n	8004242 <pvPortMalloc+0x136>
 8004236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004238:	4a4a      	ldr	r2, [pc, #296]	@ (8004364 <pvPortMalloc+0x258>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d801      	bhi.n	8004242 <pvPortMalloc+0x136>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <pvPortMalloc+0x138>
 8004242:	2300      	movs	r3, #0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <pvPortMalloc+0x154>
    __asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	61bb      	str	r3, [r7, #24]
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8004268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	429a      	cmp	r2, r3
 8004270:	d90b      	bls.n	800428a <pvPortMalloc+0x17e>
    __asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	617b      	str	r3, [r7, #20]
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	e7fd      	b.n	8004286 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800428a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	1ad2      	subs	r2, r2, r3
 8004292:	2308      	movs	r3, #8
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	429a      	cmp	r2, r3
 8004298:	d924      	bls.n	80042e4 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800429a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <pvPortMalloc+0x1b8>
    __asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	613b      	str	r3, [r7, #16]
}
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	e7fd      	b.n	80042c0 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	1ad2      	subs	r2, r2, r3
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80042d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e2:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004358 <pvPortMalloc+0x24c>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004358 <pvPortMalloc+0x24c>)
 80042f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042f2:	4b19      	ldr	r3, [pc, #100]	@ (8004358 <pvPortMalloc+0x24c>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004368 <pvPortMalloc+0x25c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d203      	bcs.n	8004306 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042fe:	4b16      	ldr	r3, [pc, #88]	@ (8004358 <pvPortMalloc+0x24c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a19      	ldr	r2, [pc, #100]	@ (8004368 <pvPortMalloc+0x25c>)
 8004304:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800430e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004310:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004318:	4b14      	ldr	r3, [pc, #80]	@ (800436c <pvPortMalloc+0x260>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	4a13      	ldr	r2, [pc, #76]	@ (800436c <pvPortMalloc+0x260>)
 8004320:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004322:	f7fe fa29 	bl	8002778 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <pvPortMalloc+0x23c>
    __asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	60fb      	str	r3, [r7, #12]
}
 8004342:	bf00      	nop
 8004344:	bf00      	nop
 8004346:	e7fd      	b.n	8004344 <pvPortMalloc+0x238>
    return pvReturn;
 8004348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800434a:	4618      	mov	r0, r3
 800434c:	3738      	adds	r7, #56	@ 0x38
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20003070 	.word	0x20003070
 8004358:	20003074 	.word	0x20003074
 800435c:	20003068 	.word	0x20003068
 8004360:	20000868 	.word	0x20000868
 8004364:	20003067 	.word	0x20003067
 8004368:	20003078 	.word	0x20003078
 800436c:	2000307c 	.word	0x2000307c

08004370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d070      	beq.n	8004464 <vPortFree+0xf4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004382:	2308      	movs	r3, #8
 8004384:	425b      	negs	r3, r3
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	4a36      	ldr	r2, [pc, #216]	@ (800446c <vPortFree+0xfc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d305      	bcc.n	80043a4 <vPortFree+0x34>
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	4a35      	ldr	r2, [pc, #212]	@ (8004470 <vPortFree+0x100>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d801      	bhi.n	80043a4 <vPortFree+0x34>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <vPortFree+0x36>
 80043a4:	2300      	movs	r3, #0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10b      	bne.n	80043c2 <vPortFree+0x52>
    __asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	617b      	str	r3, [r7, #20]
}
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	e7fd      	b.n	80043be <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	db0b      	blt.n	80043e2 <vPortFree+0x72>
    __asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	613b      	str	r3, [r7, #16]
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	e7fd      	b.n	80043de <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <vPortFree+0x92>
    __asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	60fb      	str	r3, [r7, #12]
}
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	e7fd      	b.n	80043fe <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	da2c      	bge.n	8004464 <vPortFree+0xf4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d128      	bne.n	8004464 <vPortFree+0xf4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	605a      	str	r2, [r3, #4]
                #if ( configHEAP_CLEAR_MEMORY_ON_FREE == 1 )
                {
                    /* Check for underflow as this can occur if xBlockSize is
                     * overwritten in a heap block. */
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2208      	movs	r2, #8
 8004424:	4293      	cmp	r3, r2
 8004426:	d30a      	bcc.n	800443e <vPortFree+0xce>
                    {
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
 8004428:	2208      	movs	r2, #8
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	1898      	adds	r0, r3, r2
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2208      	movs	r2, #8
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	461a      	mov	r2, r3
 8004438:	2100      	movs	r1, #0
 800443a:	f002 fd27 	bl	8006e8c <memset>
                    }
                }
                #endif

                vTaskSuspendAll();
 800443e:	f7fe f98d 	bl	800275c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <vPortFree+0x104>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4413      	add	r3, r2
 800444c:	4a09      	ldr	r2, [pc, #36]	@ (8004474 <vPortFree+0x104>)
 800444e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004450:	69b8      	ldr	r0, [r7, #24]
 8004452:	f000 f86d 	bl	8004530 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004456:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <vPortFree+0x108>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3301      	adds	r3, #1
 800445c:	4a06      	ldr	r2, [pc, #24]	@ (8004478 <vPortFree+0x108>)
 800445e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004460:	f7fe f98a 	bl	8002778 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004464:	bf00      	nop
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000868 	.word	0x20000868
 8004470:	20003067 	.word	0x20003067
 8004474:	20003074 	.word	0x20003074
 8004478:	20003080 	.word	0x20003080

0800447c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004482:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004486:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004488:	4b24      	ldr	r3, [pc, #144]	@ (800451c <prvHeapInit+0xa0>)
 800448a:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00c      	beq.n	80044b0 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3307      	adds	r3, #7
 800449a:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0307 	bic.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	4a1c      	ldr	r2, [pc, #112]	@ (800451c <prvHeapInit+0xa0>)
 80044ac:	4413      	add	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004520 <prvHeapInit+0xa4>)
 80044b4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80044b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004520 <prvHeapInit+0xa4>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4413      	add	r3, r2
 80044c2:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80044c4:	2208      	movs	r2, #8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f023 0307 	bic.w	r3, r3, #7
 80044d2:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a13      	ldr	r2, [pc, #76]	@ (8004524 <prvHeapInit+0xa8>)
 80044d8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80044da:	4b12      	ldr	r3, [pc, #72]	@ (8004524 <prvHeapInit+0xa8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2200      	movs	r2, #0
 80044e0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80044e2:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <prvHeapInit+0xa8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	1ad2      	subs	r2, r2, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80044f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004524 <prvHeapInit+0xa8>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4a08      	ldr	r2, [pc, #32]	@ (8004528 <prvHeapInit+0xac>)
 8004506:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4a07      	ldr	r2, [pc, #28]	@ (800452c <prvHeapInit+0xb0>)
 800450e:	6013      	str	r3, [r2, #0]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	20000868 	.word	0x20000868
 8004520:	20003068 	.word	0x20003068
 8004524:	20003070 	.word	0x20003070
 8004528:	20003078 	.word	0x20003078
 800452c:	20003074 	.word	0x20003074

08004530 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004538:	4b36      	ldr	r3, [pc, #216]	@ (8004614 <prvInsertBlockIntoFreeList+0xe4>)
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	e002      	b.n	8004544 <prvInsertBlockIntoFreeList+0x14>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d8f7      	bhi.n	800453e <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	4a30      	ldr	r2, [pc, #192]	@ (8004614 <prvInsertBlockIntoFreeList+0xe4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	4a2f      	ldr	r2, [pc, #188]	@ (8004618 <prvInsertBlockIntoFreeList+0xe8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d305      	bcc.n	800456a <prvInsertBlockIntoFreeList+0x3a>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	4a2e      	ldr	r2, [pc, #184]	@ (800461c <prvInsertBlockIntoFreeList+0xec>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d801      	bhi.n	800456a <prvInsertBlockIntoFreeList+0x3a>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <prvInsertBlockIntoFreeList+0x3c>
 800456a:	2300      	movs	r3, #0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	60fb      	str	r3, [r7, #12]
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	429a      	cmp	r2, r3
 8004598:	d108      	bne.n	80045ac <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	441a      	add	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	441a      	add	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d118      	bne.n	80045f2 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b16      	ldr	r3, [pc, #88]	@ (8004620 <prvInsertBlockIntoFreeList+0xf0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d00d      	beq.n	80045e8 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	441a      	add	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	e008      	b.n	80045fa <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80045e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <prvInsertBlockIntoFreeList+0xf0>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e003      	b.n	80045fa <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d002      	beq.n	8004608 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	20003068 	.word	0x20003068
 8004618:	20000868 	.word	0x20000868
 800461c:	20003067 	.word	0x20003067
 8004620:	20003070 	.word	0x20003070

08004624 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004628:	4803      	ldr	r0, [pc, #12]	@ (8004638 <_cbSendSystemDesc+0x14>)
 800462a:	f002 f829 	bl	8006680 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800462e:	4803      	ldr	r0, [pc, #12]	@ (800463c <_cbSendSystemDesc+0x18>)
 8004630:	f002 f826 	bl	8006680 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}
 8004638:	08007804 	.word	0x08007804
 800463c:	08007840 	.word	0x08007840

08004640 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004644:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <SEGGER_SYSVIEW_Conf+0x20>)
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <SEGGER_SYSVIEW_Conf+0x20>)
 800464a:	6819      	ldr	r1, [r3, #0]
 800464c:	4b05      	ldr	r3, [pc, #20]	@ (8004664 <SEGGER_SYSVIEW_Conf+0x24>)
 800464e:	4a06      	ldr	r2, [pc, #24]	@ (8004668 <SEGGER_SYSVIEW_Conf+0x28>)
 8004650:	f001 fc9a 	bl	8005f88 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004654:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004658:	f001 fcda 	bl	8006010 <SEGGER_SYSVIEW_SetRAMBase>
}
 800465c:	bf00      	nop
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000000 	.word	0x20000000
 8004664:	08004625 	.word	0x08004625
 8004668:	080078e0 	.word	0x080078e0

0800466c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	b085      	sub	sp, #20
 8004670:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004672:	2300      	movs	r3, #0
 8004674:	607b      	str	r3, [r7, #4]
 8004676:	e033      	b.n	80046e0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004678:	491e      	ldr	r1, [pc, #120]	@ (80046f4 <_cbSendTaskList+0x88>)
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	491a      	ldr	r1, [pc, #104]	@ (80046f4 <_cbSendTaskList+0x88>)
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	3304      	adds	r3, #4
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	4c16      	ldr	r4, [pc, #88]	@ (80046f4 <_cbSendTaskList+0x88>)
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4423      	add	r3, r4
 80046a8:	3308      	adds	r3, #8
 80046aa:	681c      	ldr	r4, [r3, #0]
 80046ac:	4d11      	ldr	r5, [pc, #68]	@ (80046f4 <_cbSendTaskList+0x88>)
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	442b      	add	r3, r5
 80046ba:	330c      	adds	r3, #12
 80046bc:	681d      	ldr	r5, [r3, #0]
 80046be:	4e0d      	ldr	r6, [pc, #52]	@ (80046f4 <_cbSendTaskList+0x88>)
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4433      	add	r3, r6
 80046cc:	3310      	adds	r3, #16
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	462b      	mov	r3, r5
 80046d4:	4622      	mov	r2, r4
 80046d6:	f000 f8d7 	bl	8004888 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3301      	adds	r3, #1
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <_cbSendTaskList+0x8c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d3c6      	bcc.n	8004678 <_cbSendTaskList+0xc>
  }
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f4:	20003084 	.word	0x20003084
 80046f8:	20003124 	.word	0x20003124

080046fc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80046fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004704:	f7fe f962 	bl	80029cc <xTaskGetTickCountFromISR>
 8004708:	e9c7 0104 	strd	r0, r1, [r7, #16]
  Time *= portTICK_PERIOD_MS;
 800470c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004710:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004714:	f04f 0000 	mov.w	r0, #0
 8004718:	f04f 0100 	mov.w	r1, #0
 800471c:	0099      	lsls	r1, r3, #2
 800471e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004722:	0090      	lsls	r0, r2, #2
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	eb12 0801 	adds.w	r8, r2, r1
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	eb43 0901 	adc.w	r9, r3, r1
 8004734:	eb18 0308 	adds.w	r3, r8, r8
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	eb49 0309 	adc.w	r3, r9, r9
 800473e:	607b      	str	r3, [r7, #4]
 8004740:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004744:	e9c7 8904 	strd	r8, r9, [r7, #16]
  Time *= 1000;
 8004748:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	f04f 0800 	mov.w	r8, #0
 8004754:	f04f 0900 	mov.w	r9, #0
 8004758:	ea4f 1943 	mov.w	r9, r3, lsl #5
 800475c:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8004760:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8004764:	4642      	mov	r2, r8
 8004766:	464b      	mov	r3, r9
 8004768:	1a14      	subs	r4, r2, r0
 800476a:	eb63 0501 	sbc.w	r5, r3, r1
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	00ab      	lsls	r3, r5, #2
 8004778:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800477c:	00a2      	lsls	r2, r4, #2
 800477e:	4614      	mov	r4, r2
 8004780:	461d      	mov	r5, r3
 8004782:	eb14 0a00 	adds.w	sl, r4, r0
 8004786:	eb45 0b01 	adc.w	fp, r5, r1
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004796:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800479a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800479e:	4692      	mov	sl, r2
 80047a0:	469b      	mov	fp, r3
 80047a2:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  return Time;
 80047a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080047b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af02      	add	r7, sp, #8
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80047c6:	2205      	movs	r2, #5
 80047c8:	492b      	ldr	r1, [pc, #172]	@ (8004878 <SYSVIEW_AddTask+0xc0>)
 80047ca:	68b8      	ldr	r0, [r7, #8]
 80047cc:	f002 fb4e 	bl	8006e6c <memcmp>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d04b      	beq.n	800486e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80047d6:	4b29      	ldr	r3, [pc, #164]	@ (800487c <SYSVIEW_AddTask+0xc4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b07      	cmp	r3, #7
 80047dc:	d903      	bls.n	80047e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80047de:	4828      	ldr	r0, [pc, #160]	@ (8004880 <SYSVIEW_AddTask+0xc8>)
 80047e0:	f002 fa84 	bl	8006cec <SEGGER_SYSVIEW_Warn>
    return;
 80047e4:	e044      	b.n	8004870 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80047e6:	4b25      	ldr	r3, [pc, #148]	@ (800487c <SYSVIEW_AddTask+0xc4>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4926      	ldr	r1, [pc, #152]	@ (8004884 <SYSVIEW_AddTask+0xcc>)
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80047fa:	4b20      	ldr	r3, [pc, #128]	@ (800487c <SYSVIEW_AddTask+0xc4>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4921      	ldr	r1, [pc, #132]	@ (8004884 <SYSVIEW_AddTask+0xcc>)
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	3304      	adds	r3, #4
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004810:	4b1a      	ldr	r3, [pc, #104]	@ (800487c <SYSVIEW_AddTask+0xc4>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	491b      	ldr	r1, [pc, #108]	@ (8004884 <SYSVIEW_AddTask+0xcc>)
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	3308      	adds	r3, #8
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004826:	4b15      	ldr	r3, [pc, #84]	@ (800487c <SYSVIEW_AddTask+0xc4>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4916      	ldr	r1, [pc, #88]	@ (8004884 <SYSVIEW_AddTask+0xcc>)
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	330c      	adds	r3, #12
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800483c:	4b0f      	ldr	r3, [pc, #60]	@ (800487c <SYSVIEW_AddTask+0xc4>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4910      	ldr	r1, [pc, #64]	@ (8004884 <SYSVIEW_AddTask+0xcc>)
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	3310      	adds	r3, #16
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004852:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <SYSVIEW_AddTask+0xc4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3301      	adds	r3, #1
 8004858:	4a08      	ldr	r2, [pc, #32]	@ (800487c <SYSVIEW_AddTask+0xc4>)
 800485a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f80e 	bl	8004888 <SYSVIEW_SendTaskInfo>
 800486c:	e000      	b.n	8004870 <SYSVIEW_AddTask+0xb8>
    return;
 800486e:	bf00      	nop

}
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	08007850 	.word	0x08007850
 800487c:	20003124 	.word	0x20003124
 8004880:	08007858 	.word	0x08007858
 8004884:	20003084 	.word	0x20003084

08004888 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	@ 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004896:	f107 0310 	add.w	r3, r7, #16
 800489a:	2218      	movs	r2, #24
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f002 faf4 	bl	8006e8c <memset>
  TaskInfo.TaskID     = TaskID;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80048b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80048b8:	f107 0310 	add.w	r3, r7, #16
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 fde7 	bl	8006490 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80048c2:	bf00      	nop
 80048c4:	3728      	adds	r7, #40	@ 0x28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <__NVIC_EnableIRQ>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	db0b      	blt.n	80048f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	f003 021f 	and.w	r2, r3, #31
 80048e4:	4907      	ldr	r1, [pc, #28]	@ (8004904 <__NVIC_EnableIRQ+0x38>)
 80048e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	2001      	movs	r0, #1
 80048ee:	fa00 f202 	lsl.w	r2, r0, r2
 80048f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	e000e100 	.word	0xe000e100

08004908 <__NVIC_SetPriority>:
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	6039      	str	r1, [r7, #0]
 8004912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004918:	2b00      	cmp	r3, #0
 800491a:	db0a      	blt.n	8004932 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	b2da      	uxtb	r2, r3
 8004920:	490c      	ldr	r1, [pc, #48]	@ (8004954 <__NVIC_SetPriority+0x4c>)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	0112      	lsls	r2, r2, #4
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	440b      	add	r3, r1
 800492c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004930:	e00a      	b.n	8004948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4908      	ldr	r1, [pc, #32]	@ (8004958 <__NVIC_SetPriority+0x50>)
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	3b04      	subs	r3, #4
 8004940:	0112      	lsls	r2, r2, #4
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	440b      	add	r3, r1
 8004946:	761a      	strb	r2, [r3, #24]
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	e000e100 	.word	0xe000e100
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004962:	f002 fa1f 	bl	8006da4 <SEGGER_SYSVIEW_IsStarted>
 8004966:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800496e:	f001 fc13 	bl	8006198 <SEGGER_SYSVIEW_Start>
  }
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004986:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <_cbOnUARTRx+0x3c>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b03      	cmp	r3, #3
 800498c:	d806      	bhi.n	800499c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800498e:	4b0a      	ldr	r3, [pc, #40]	@ (80049b8 <_cbOnUARTRx+0x3c>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	3301      	adds	r3, #1
 8004994:	b2da      	uxtb	r2, r3
 8004996:	4b08      	ldr	r3, [pc, #32]	@ (80049b8 <_cbOnUARTRx+0x3c>)
 8004998:	701a      	strb	r2, [r3, #0]
    goto Done;
 800499a:	e009      	b.n	80049b0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800499c:	f7ff ffde 	bl	800495c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80049a0:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <_cbOnUARTRx+0x3c>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4618      	mov	r0, r3
 80049a6:	1dfb      	adds	r3, r7, #7
 80049a8:	2201      	movs	r2, #1
 80049aa:	4619      	mov	r1, r3
 80049ac:	f000 fb9c 	bl	80050e8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80049b0:	bf00      	nop
}
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000010 	.word	0x20000010

080049bc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80049c4:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <_cbOnUARTTx+0x5c>)
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d80f      	bhi.n	80049ec <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80049cc:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <_cbOnUARTTx+0x5c>)
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	461a      	mov	r2, r3
 80049d2:	4b12      	ldr	r3, [pc, #72]	@ (8004a1c <_cbOnUARTTx+0x60>)
 80049d4:	5c9a      	ldrb	r2, [r3, r2]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80049da:	4b0f      	ldr	r3, [pc, #60]	@ (8004a18 <_cbOnUARTTx+0x5c>)
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	3301      	adds	r3, #1
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <_cbOnUARTTx+0x5c>)
 80049e4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80049e6:	2301      	movs	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80049ea:	e00f      	b.n	8004a0c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80049ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <_cbOnUARTTx+0x5c>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fa1b 	bl	8004e30 <SEGGER_RTT_ReadUpBufferNoLock>
 80049fa:	4603      	mov	r3, r0
 80049fc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da02      	bge.n	8004a0a <_cbOnUARTTx+0x4e>
    r = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e000      	b.n	8004a0c <_cbOnUARTTx+0x50>
  }
Done:
 8004a0a:	bf00      	nop
  return r;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000010 	.word	0x20000010
 8004a1c:	080078e8 	.word	0x080078e8

08004a20 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004a28:	4a04      	ldr	r2, [pc, #16]	@ (8004a3c <SEGGER_UART_init+0x1c>)
 8004a2a:	4905      	ldr	r1, [pc, #20]	@ (8004a40 <SEGGER_UART_init+0x20>)
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f863 	bl	8004af8 <HIF_UART_Init>
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	0800497d 	.word	0x0800497d
 8004a40:	080049bd 	.word	0x080049bd

08004a44 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac4 <USART2_IRQHandler+0x80>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d011      	beq.n	8004a7e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac8 <USART2_IRQHandler+0x84>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 030b 	and.w	r3, r3, #11
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d108      	bne.n	8004a7e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004a6c:	4b17      	ldr	r3, [pc, #92]	@ (8004acc <USART2_IRQHandler+0x88>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004a74:	4b15      	ldr	r3, [pc, #84]	@ (8004acc <USART2_IRQHandler+0x88>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	79fa      	ldrb	r2, [r7, #7]
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01a      	beq.n	8004abe <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004a88:	4b11      	ldr	r3, [pc, #68]	@ (8004ad0 <USART2_IRQHandler+0x8c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d015      	beq.n	8004abc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004a90:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad0 <USART2_IRQHandler+0x8c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	1dfa      	adds	r2, r7, #7
 8004a96:	4610      	mov	r0, r2
 8004a98:	4798      	blx	r3
 8004a9a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <USART2_IRQHandler+0x90>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8004ad4 <USART2_IRQHandler+0x90>)
 8004aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	e006      	b.n	8004abe <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004ab0:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <USART2_IRQHandler+0x80>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004ab4:	79fa      	ldrb	r2, [r7, #7]
 8004ab6:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <USART2_IRQHandler+0x84>)
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e000      	b.n	8004abe <USART2_IRQHandler+0x7a>
      return;
 8004abc:	bf00      	nop
    }
  }
}
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40004400 	.word	0x40004400
 8004ac8:	40004404 	.word	0x40004404
 8004acc:	20003128 	.word	0x20003128
 8004ad0:	2000312c 	.word	0x2000312c
 8004ad4:	4000440c 	.word	0x4000440c

08004ad8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004adc:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a04      	ldr	r2, [pc, #16]	@ (8004af4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae6:	6013      	str	r3, [r2, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	4000440c 	.word	0x4000440c

08004af8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004b04:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc0 <HIF_UART_Init+0xc8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc0 <HIF_UART_Init+0xc8>)
 8004b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b0e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004b10:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc4 <HIF_UART_Init+0xcc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc4 <HIF_UART_Init+0xcc>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc8 <HIF_UART_Init+0xd0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b28:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8004b30:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004b32:	4a25      	ldr	r2, [pc, #148]	@ (8004bc8 <HIF_UART_Init+0xd0>)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004b38:	4b24      	ldr	r3, [pc, #144]	@ (8004bcc <HIF_UART_Init+0xd4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b44:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004b4c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bcc <HIF_UART_Init+0xd4>)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004b54:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd0 <HIF_UART_Init+0xd8>)
 8004b56:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8004b5a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <HIF_UART_Init+0xdc>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004b62:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd8 <HIF_UART_Init+0xe0>)
 8004b64:	2280      	movs	r2, #128	@ 0x80
 8004b66:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bdc <HIF_UART_Init+0xe4>)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	3301      	adds	r3, #1
 8004b78:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b86:	d302      	bcc.n	8004b8e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004b88:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004b8c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d004      	beq.n	8004b9e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	4a11      	ldr	r2, [pc, #68]	@ (8004be0 <HIF_UART_Init+0xe8>)
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004b9e:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <HIF_UART_Init+0xec>)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004ba4:	4a10      	ldr	r2, [pc, #64]	@ (8004be8 <HIF_UART_Init+0xf0>)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004baa:	2106      	movs	r1, #6
 8004bac:	2026      	movs	r0, #38	@ 0x26
 8004bae:	f7ff feab 	bl	8004908 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004bb2:	2026      	movs	r0, #38	@ 0x26
 8004bb4:	f7ff fe8a 	bl	80048cc <__NVIC_EnableIRQ>
}
 8004bb8:	bf00      	nop
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023840 	.word	0x40023840
 8004bc4:	40023830 	.word	0x40023830
 8004bc8:	40020020 	.word	0x40020020
 8004bcc:	40020000 	.word	0x40020000
 8004bd0:	4000440c 	.word	0x4000440c
 8004bd4:	40004410 	.word	0x40004410
 8004bd8:	40004414 	.word	0x40004414
 8004bdc:	02faf080 	.word	0x02faf080
 8004be0:	40004408 	.word	0x40004408
 8004be4:	20003128 	.word	0x20003128
 8004be8:	2000312c 	.word	0x2000312c

08004bec <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004bf2:	4b26      	ldr	r3, [pc, #152]	@ (8004c8c <_DoInit+0xa0>)
 8004bf4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004bf6:	22a8      	movs	r2, #168	@ 0xa8
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	6838      	ldr	r0, [r7, #0]
 8004bfc:	f002 f946 	bl	8006e8c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2203      	movs	r2, #3
 8004c04:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	4a20      	ldr	r2, [pc, #128]	@ (8004c90 <_DoInit+0xa4>)
 8004c10:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	4a1f      	ldr	r2, [pc, #124]	@ (8004c94 <_DoInit+0xa8>)
 8004c16:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c1e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	4a16      	ldr	r2, [pc, #88]	@ (8004c90 <_DoInit+0xa4>)
 8004c36:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	4a17      	ldr	r2, [pc, #92]	@ (8004c98 <_DoInit+0xac>)
 8004c3c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2210      	movs	r2, #16
 8004c42:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004c56:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
 8004c5e:	e00c      	b.n	8004c7a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f1c3 030f 	rsb	r3, r3, #15
 8004c66:	4a0d      	ldr	r2, [pc, #52]	@ (8004c9c <_DoInit+0xb0>)
 8004c68:	5cd1      	ldrb	r1, [r2, r3]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4413      	add	r3, r2
 8004c70:	460a      	mov	r2, r1
 8004c72:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3301      	adds	r3, #1
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d9ef      	bls.n	8004c60 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004c80:	f3bf 8f5f 	dmb	sy
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20003130 	.word	0x20003130
 8004c90:	080078a8 	.word	0x080078a8
 8004c94:	200031d8 	.word	0x200031d8
 8004c98:	200035d8 	.word	0x200035d8
 8004c9c:	080078ec 	.word	0x080078ec

08004ca0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	@ 0x28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004cac:	2300      	movs	r3, #0
 8004cae:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d905      	bls.n	8004cd0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cce:	e007      	b.n	8004ce0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	69b9      	ldr	r1, [r7, #24]
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	1acb      	subs	r3, r1, r3
 8004cda:	4413      	add	r3, r2
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cea:	4293      	cmp	r3, r2
 8004cec:	bf28      	it	cs
 8004cee:	4613      	movcs	r3, r2
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	bf28      	it	cs
 8004cfa:	4613      	movcs	r3, r2
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	4413      	add	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	6978      	ldr	r0, [r7, #20]
 8004d0e:	f002 f8eb 	bl	8006ee8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d12:	6a3a      	ldr	r2, [r7, #32]
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	4413      	add	r3, r2
 8004d18:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	4413      	add	r3, r2
 8004d20:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2e:	4413      	add	r3, r2
 8004d30:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d101      	bne.n	8004d40 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d40:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1b2      	bne.n	8004cb6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004d50:	6a3b      	ldr	r3, [r7, #32]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3728      	adds	r7, #40	@ 0x28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b088      	sub	sp, #32
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d911      	bls.n	8004da2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	6938      	ldr	r0, [r7, #16]
 8004d8e:	f002 f8ab 	bl	8006ee8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d92:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004da0:	e01f      	b.n	8004de2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	6938      	ldr	r0, [r7, #16]
 8004db6:	f002 f897 	bl	8006ee8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	4413      	add	r3, r2
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6938      	ldr	r0, [r7, #16]
 8004dd4:	f002 f888 	bl	8006ee8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dd8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	60da      	str	r2, [r3, #12]
}
 8004de2:	bf00      	nop
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004dea:	b480      	push	{r7}
 8004dec:	b087      	sub	sp, #28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d808      	bhi.n	8004e18 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad2      	subs	r2, r2, r3
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	3b01      	subs	r3, #1
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e004      	b.n	8004e22 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e22:	697b      	ldr	r3, [r7, #20]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08c      	sub	sp, #48	@ 0x30
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f38 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b53      	cmp	r3, #83	@ 0x53
 8004e48:	d001      	beq.n	8004e4e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004e4a:	f7ff fecf 	bl	8004bec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	4613      	mov	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4a37      	ldr	r2, [pc, #220]	@ (8004f38 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004e5c:	4413      	add	r3, r2
 8004e5e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e70:	2300      	movs	r3, #0
 8004e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d92b      	bls.n	8004ed4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	bf28      	it	cs
 8004e8e:	4613      	movcs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e98:	4413      	add	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	6939      	ldr	r1, [r7, #16]
 8004ea0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ea2:	f002 f821 	bl	8006ee8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	4413      	add	r3, r2
 8004eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ebe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d101      	bne.n	8004ed4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	bf28      	it	cs
 8004ee4:	4613      	movcs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d019      	beq.n	8004f22 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef4:	4413      	add	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	6939      	ldr	r1, [r7, #16]
 8004efc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004efe:	f001 fff3 	bl	8006ee8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4413      	add	r3, r2
 8004f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4413      	add	r3, r2
 8004f10:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f2c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3730      	adds	r7, #48	@ 0x30
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20003130 	.word	0x20003130

08004f3c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	@ 0x30
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004f48:	4b3e      	ldr	r3, [pc, #248]	@ (8005044 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f4a:	623b      	str	r3, [r7, #32]
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b53      	cmp	r3, #83	@ 0x53
 8004f54:	d001      	beq.n	8004f5a <SEGGER_RTT_ReadNoLock+0x1e>
 8004f56:	f7ff fe49 	bl	8004bec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	3360      	adds	r3, #96	@ 0x60
 8004f66:	4a37      	ldr	r2, [pc, #220]	@ (8005044 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f68:	4413      	add	r3, r2
 8004f6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d92b      	bls.n	8004fe0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4293      	cmp	r3, r2
 8004f98:	bf28      	it	cs
 8004f9a:	4613      	movcs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa4:	4413      	add	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	6939      	ldr	r1, [r7, #16]
 8004fac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fae:	f001 ff9b 	bl	8006ee8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	4413      	add	r3, r2
 8004fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d101      	bne.n	8004fe0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4293      	cmp	r3, r2
 8004fee:	bf28      	it	cs
 8004ff0:	4613      	movcs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d019      	beq.n	800502e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005000:	4413      	add	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	6939      	ldr	r1, [r7, #16]
 8005008:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800500a:	f001 ff6d 	bl	8006ee8 <memcpy>
    NumBytesRead += NumBytesRem;
 800500e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800502e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005038:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800503a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800503c:	4618      	mov	r0, r3
 800503e:	3730      	adds	r7, #48	@ 0x30
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20003130 	.word	0x20003130

08005048 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4613      	mov	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	3360      	adds	r3, #96	@ 0x60
 8005064:	4a1f      	ldr	r2, [pc, #124]	@ (80050e4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005066:	4413      	add	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d029      	beq.n	80050c6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005072:	2b02      	cmp	r3, #2
 8005074:	d82e      	bhi.n	80050d4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800507a:	2b01      	cmp	r3, #1
 800507c:	d013      	beq.n	80050a6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800507e:	e029      	b.n	80050d4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005080:	6978      	ldr	r0, [r7, #20]
 8005082:	f7ff feb2 	bl	8004dea <_GetAvailWriteSpace>
 8005086:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	d202      	bcs.n	8005096 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005090:	2300      	movs	r3, #0
 8005092:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005094:	e021      	b.n	80050da <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	69b9      	ldr	r1, [r7, #24]
 800509e:	6978      	ldr	r0, [r7, #20]
 80050a0:	f7ff fe5b 	bl	8004d5a <_WriteNoCheck>
    break;
 80050a4:	e019      	b.n	80050da <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80050a6:	6978      	ldr	r0, [r7, #20]
 80050a8:	f7ff fe9f 	bl	8004dea <_GetAvailWriteSpace>
 80050ac:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4293      	cmp	r3, r2
 80050b4:	bf28      	it	cs
 80050b6:	4613      	movcs	r3, r2
 80050b8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	69b9      	ldr	r1, [r7, #24]
 80050be:	6978      	ldr	r0, [r7, #20]
 80050c0:	f7ff fe4b 	bl	8004d5a <_WriteNoCheck>
    break;
 80050c4:	e009      	b.n	80050da <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	69b9      	ldr	r1, [r7, #24]
 80050ca:	6978      	ldr	r0, [r7, #20]
 80050cc:	f7ff fde8 	bl	8004ca0 <_WriteBlocking>
 80050d0:	61f8      	str	r0, [r7, #28]
    break;
 80050d2:	e002      	b.n	80050da <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61fb      	str	r3, [r7, #28]
    break;
 80050d8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80050da:	69fb      	ldr	r3, [r7, #28]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20003130 	.word	0x20003130

080050e8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80050f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005130 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b53      	cmp	r3, #83	@ 0x53
 8005100:	d001      	beq.n	8005106 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005102:	f7ff fd73 	bl	8004bec <_DoInit>
  SEGGER_RTT_LOCK();
 8005106:	f3ef 8311 	mrs	r3, BASEPRI
 800510a:	f04f 0120 	mov.w	r1, #32
 800510e:	f381 8811 	msr	BASEPRI, r1
 8005112:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff ff95 	bl	8005048 <SEGGER_RTT_WriteDownBufferNoLock>
 800511e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005126:	697b      	ldr	r3, [r7, #20]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20003130 	.word	0x20003130

08005134 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005142:	4b3d      	ldr	r3, [pc, #244]	@ (8005238 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b53      	cmp	r3, #83	@ 0x53
 800514e:	d001      	beq.n	8005154 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005150:	f7ff fd4c 	bl	8004bec <_DoInit>
  SEGGER_RTT_LOCK();
 8005154:	f3ef 8311 	mrs	r3, BASEPRI
 8005158:	f04f 0120 	mov.w	r1, #32
 800515c:	f381 8811 	msr	BASEPRI, r1
 8005160:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005162:	4b35      	ldr	r3, [pc, #212]	@ (8005238 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005164:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800516a:	6939      	ldr	r1, [r7, #16]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	4613      	mov	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	440b      	add	r3, r1
 800517a:	3304      	adds	r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3301      	adds	r3, #1
 8005186:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	429a      	cmp	r2, r3
 8005190:	dbeb      	blt.n	800516a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005192:	e000      	b.n	8005196 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005194:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	429a      	cmp	r2, r3
 800519e:	da3f      	bge.n	8005220 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80051a0:	6939      	ldr	r1, [r7, #16]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	440b      	add	r3, r1
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80051b4:	6939      	ldr	r1, [r7, #16]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	4613      	mov	r3, r2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	440b      	add	r3, r1
 80051c4:	3304      	adds	r3, #4
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80051ca:	6939      	ldr	r1, [r7, #16]
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	4613      	mov	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	4413      	add	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	440b      	add	r3, r1
 80051d8:	3320      	adds	r3, #32
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80051de:	6939      	ldr	r1, [r7, #16]
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	3328      	adds	r3, #40	@ 0x28
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80051f2:	6939      	ldr	r1, [r7, #16]
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	4613      	mov	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4413      	add	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	440b      	add	r3, r1
 8005200:	3324      	adds	r3, #36	@ 0x24
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005206:	6939      	ldr	r1, [r7, #16]
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	4613      	mov	r3, r2
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	4413      	add	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	440b      	add	r3, r1
 8005214:	332c      	adds	r3, #44	@ 0x2c
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800521a:	f3bf 8f5f 	dmb	sy
 800521e:	e002      	b.n	8005226 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005220:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005224:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800522c:	69fb      	ldr	r3, [r7, #28]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20003130 	.word	0x20003130

0800523c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	@ 0x28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800524a:	4b21      	ldr	r3, [pc, #132]	@ (80052d0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800524c:	623b      	str	r3, [r7, #32]
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b53      	cmp	r3, #83	@ 0x53
 8005256:	d001      	beq.n	800525c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005258:	f7ff fcc8 	bl	8004bec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800525c:	4b1c      	ldr	r3, [pc, #112]	@ (80052d0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800525e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d82c      	bhi.n	80052c0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005266:	f3ef 8311 	mrs	r3, BASEPRI
 800526a:	f04f 0120 	mov.w	r1, #32
 800526e:	f381 8811 	msr	BASEPRI, r1
 8005272:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4613      	mov	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	3360      	adds	r3, #96	@ 0x60
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00e      	beq.n	80052aa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2200      	movs	r2, #0
 80052a8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ae:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052b0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80052be:	e002      	b.n	80052c6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80052c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3728      	adds	r7, #40	@ 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20003130 	.word	0x20003130

080052d4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d105      	bne.n	80052f2 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	60fa      	str	r2, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	e022      	b.n	8005338 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	60fa      	str	r2, [r7, #12]
 80052fc:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b80      	cmp	r3, #128	@ 0x80
 8005302:	d90a      	bls.n	800531a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005304:	2380      	movs	r3, #128	@ 0x80
 8005306:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005308:	e007      	b.n	800531a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	1c53      	adds	r3, r2, #1
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1c59      	adds	r1, r3, #1
 8005314:	60f9      	str	r1, [r7, #12]
 8005316:	7812      	ldrb	r2, [r2, #0]
 8005318:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	1e5a      	subs	r2, r3, #1
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <_EncodeStr+0x58>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1ee      	bne.n	800530a <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	b2da      	uxtb	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005338:	68fb      	ldr	r3, [r7, #12]
}
 800533a:	4618      	mov	r0, r3
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3307      	adds	r3, #7
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005366:	4b34      	ldr	r3, [pc, #208]	@ (8005438 <_HandleIncomingPacket+0xd8>)
 8005368:	7e1b      	ldrb	r3, [r3, #24]
 800536a:	4618      	mov	r0, r3
 800536c:	1cfb      	adds	r3, r7, #3
 800536e:	2201      	movs	r2, #1
 8005370:	4619      	mov	r1, r3
 8005372:	f7ff fde3 	bl	8004f3c <SEGGER_RTT_ReadNoLock>
 8005376:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d057      	beq.n	800542e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	2b80      	cmp	r3, #128	@ 0x80
 8005382:	d031      	beq.n	80053e8 <_HandleIncomingPacket+0x88>
 8005384:	2b80      	cmp	r3, #128	@ 0x80
 8005386:	dc40      	bgt.n	800540a <_HandleIncomingPacket+0xaa>
 8005388:	2b07      	cmp	r3, #7
 800538a:	dc15      	bgt.n	80053b8 <_HandleIncomingPacket+0x58>
 800538c:	2b00      	cmp	r3, #0
 800538e:	dd3c      	ble.n	800540a <_HandleIncomingPacket+0xaa>
 8005390:	3b01      	subs	r3, #1
 8005392:	2b06      	cmp	r3, #6
 8005394:	d839      	bhi.n	800540a <_HandleIncomingPacket+0xaa>
 8005396:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <_HandleIncomingPacket+0x3c>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053bf 	.word	0x080053bf
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053cb 	.word	0x080053cb
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d7 	.word	0x080053d7
 80053b0:	080053dd 	.word	0x080053dd
 80053b4:	080053e3 	.word	0x080053e3
 80053b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80053ba:	d033      	beq.n	8005424 <_HandleIncomingPacket+0xc4>
 80053bc:	e025      	b.n	800540a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80053be:	f000 feeb 	bl	8006198 <SEGGER_SYSVIEW_Start>
      break;
 80053c2:	e034      	b.n	800542e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80053c4:	f000 ffa4 	bl	8006310 <SEGGER_SYSVIEW_Stop>
      break;
 80053c8:	e031      	b.n	800542e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80053ca:	f001 f97d 	bl	80066c8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80053ce:	e02e      	b.n	800542e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80053d0:	f001 f942 	bl	8006658 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80053d4:	e02b      	b.n	800542e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80053d6:	f000 ffc1 	bl	800635c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80053da:	e028      	b.n	800542e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80053dc:	f001 fc34 	bl	8006c48 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80053e0:	e025      	b.n	800542e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80053e2:	f001 fc13 	bl	8006c0c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80053e6:	e022      	b.n	800542e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053e8:	4b13      	ldr	r3, [pc, #76]	@ (8005438 <_HandleIncomingPacket+0xd8>)
 80053ea:	7e1b      	ldrb	r3, [r3, #24]
 80053ec:	4618      	mov	r0, r3
 80053ee:	1cfb      	adds	r3, r7, #3
 80053f0:	2201      	movs	r2, #1
 80053f2:	4619      	mov	r1, r3
 80053f4:	f7ff fda2 	bl	8004f3c <SEGGER_RTT_ReadNoLock>
 80053f8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	4618      	mov	r0, r3
 8005404:	f001 fb78 	bl	8006af8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005408:	e00e      	b.n	8005428 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	b25b      	sxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	da0c      	bge.n	800542c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005412:	4b09      	ldr	r3, [pc, #36]	@ (8005438 <_HandleIncomingPacket+0xd8>)
 8005414:	7e1b      	ldrb	r3, [r3, #24]
 8005416:	4618      	mov	r0, r3
 8005418:	1cfb      	adds	r3, r7, #3
 800541a:	2201      	movs	r2, #1
 800541c:	4619      	mov	r1, r3
 800541e:	f7ff fd8d 	bl	8004f3c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005422:	e003      	b.n	800542c <_HandleIncomingPacket+0xcc>
      break;
 8005424:	bf00      	nop
 8005426:	e002      	b.n	800542e <_HandleIncomingPacket+0xce>
      break;
 8005428:	bf00      	nop
 800542a:	e000      	b.n	800542e <_HandleIncomingPacket+0xce>
      break;
 800542c:	bf00      	nop
    }
  }
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	200045f0 	.word	0x200045f0

0800543c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	@ 0x30
 8005440:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005442:	2301      	movs	r3, #1
 8005444:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005446:	1d3b      	adds	r3, r7, #4
 8005448:	3301      	adds	r3, #1
 800544a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005450:	4b32      	ldr	r3, [pc, #200]	@ (800551c <_TrySendOverflowPacket+0xe0>)
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005456:	e00b      	b.n	8005470 <_TrySendOverflowPacket+0x34>
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	b2da      	uxtb	r2, r3
 800545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545e:	1c59      	adds	r1, r3, #1
 8005460:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005462:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546c:	09db      	lsrs	r3, r3, #7
 800546e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005472:	2b7f      	cmp	r3, #127	@ 0x7f
 8005474:	d8f0      	bhi.n	8005458 <_TrySendOverflowPacket+0x1c>
 8005476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800547c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005484:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005486:	4b26      	ldr	r3, [pc, #152]	@ (8005520 <_TrySendOverflowPacket+0xe4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 800548c:	4b23      	ldr	r3, [pc, #140]	@ (800551c <_TrySendOverflowPacket+0xe0>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	e00b      	b.n	80054b8 <_TrySendOverflowPacket+0x7c>
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	1c59      	adds	r1, r3, #1
 80054a8:	6279      	str	r1, [r7, #36]	@ 0x24
 80054aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	09db      	lsrs	r3, r3, #7
 80054b6:	623b      	str	r3, [r7, #32]
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80054bc:	d8f0      	bhi.n	80054a0 <_TrySendOverflowPacket+0x64>
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80054ce:	4b13      	ldr	r3, [pc, #76]	@ (800551c <_TrySendOverflowPacket+0xe0>)
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	4618      	mov	r0, r3
 80054d4:	1d3b      	adds	r3, r7, #4
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	1d3b      	adds	r3, r7, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	f7fa fe7e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054e4:	4603      	mov	r3, r0
 80054e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80054e8:	f7ff faf6 	bl	8004ad8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054f2:	4a0a      	ldr	r2, [pc, #40]	@ (800551c <_TrySendOverflowPacket+0xe0>)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80054f8:	4b08      	ldr	r3, [pc, #32]	@ (800551c <_TrySendOverflowPacket+0xe0>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <_TrySendOverflowPacket+0xe0>)
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	e004      	b.n	8005510 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005506:	4b05      	ldr	r3, [pc, #20]	@ (800551c <_TrySendOverflowPacket+0xe0>)
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	3301      	adds	r3, #1
 800550c:	4a03      	ldr	r2, [pc, #12]	@ (800551c <_TrySendOverflowPacket+0xe0>)
 800550e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005510:	693b      	ldr	r3, [r7, #16]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3730      	adds	r7, #48	@ 0x30
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	200045f0 	.word	0x200045f0
 8005520:	e0001004 	.word	0xe0001004

08005524 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	@ 0x28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005530:	4b96      	ldr	r3, [pc, #600]	@ (800578c <_SendPacket+0x268>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d010      	beq.n	800555a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005538:	4b94      	ldr	r3, [pc, #592]	@ (800578c <_SendPacket+0x268>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8130 	beq.w	80057a2 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005542:	4b92      	ldr	r3, [pc, #584]	@ (800578c <_SendPacket+0x268>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d109      	bne.n	800555e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800554a:	f7ff ff77 	bl	800543c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800554e:	4b8f      	ldr	r3, [pc, #572]	@ (800578c <_SendPacket+0x268>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b01      	cmp	r3, #1
 8005554:	f040 8127 	bne.w	80057a6 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005558:	e001      	b.n	800555e <_SendPacket+0x3a>
    goto Send;
 800555a:	bf00      	nop
 800555c:	e000      	b.n	8005560 <_SendPacket+0x3c>
Send:
 800555e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b1f      	cmp	r3, #31
 8005564:	d809      	bhi.n	800557a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005566:	4b89      	ldr	r3, [pc, #548]	@ (800578c <_SendPacket+0x268>)
 8005568:	69da      	ldr	r2, [r3, #28]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	f040 8118 	bne.w	80057aa <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b17      	cmp	r3, #23
 800557e:	d807      	bhi.n	8005590 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3b01      	subs	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	e0c4      	b.n	800571a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b7f      	cmp	r3, #127	@ 0x7f
 800559c:	d912      	bls.n	80055c4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	09da      	lsrs	r2, r3, #7
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	3a01      	subs	r2, #1
 80055b6:	60fa      	str	r2, [r7, #12]
 80055b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	e006      	b.n	80055d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b7e      	cmp	r3, #126	@ 0x7e
 80055d6:	d807      	bhi.n	80055e8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3b01      	subs	r3, #1
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	e098      	b.n	800571a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055ee:	d212      	bcs.n	8005616 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	09da      	lsrs	r2, r3, #7
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	3a01      	subs	r2, #1
 8005608:	60fa      	str	r2, [r7, #12]
 800560a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800560e:	b2da      	uxtb	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	e081      	b.n	800571a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800561c:	d21d      	bcs.n	800565a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0b9a      	lsrs	r2, r3, #14
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3b01      	subs	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	09db      	lsrs	r3, r3, #7
 8005632:	b2db      	uxtb	r3, r3
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	3a01      	subs	r2, #1
 8005638:	60fa      	str	r2, [r7, #12]
 800563a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800563e:	b2da      	uxtb	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	3a01      	subs	r2, #1
 800564c:	60fa      	str	r2, [r7, #12]
 800564e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005652:	b2da      	uxtb	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	e05f      	b.n	800571a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005660:	d228      	bcs.n	80056b4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	0d5a      	lsrs	r2, r3, #21
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3b01      	subs	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	0b9b      	lsrs	r3, r3, #14
 8005676:	b2db      	uxtb	r3, r3
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	3a01      	subs	r2, #1
 800567c:	60fa      	str	r2, [r7, #12]
 800567e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005682:	b2da      	uxtb	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	09db      	lsrs	r3, r3, #7
 800568c:	b2db      	uxtb	r3, r3
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	3a01      	subs	r2, #1
 8005692:	60fa      	str	r2, [r7, #12]
 8005694:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	3a01      	subs	r2, #1
 80056a6:	60fa      	str	r2, [r7, #12]
 80056a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e032      	b.n	800571a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	0f1a      	lsrs	r2, r3, #28
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0d5b      	lsrs	r3, r3, #21
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	3a01      	subs	r2, #1
 80056ce:	60fa      	str	r2, [r7, #12]
 80056d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0b9b      	lsrs	r3, r3, #14
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	3a01      	subs	r2, #1
 80056e4:	60fa      	str	r2, [r7, #12]
 80056e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	09db      	lsrs	r3, r3, #7
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	3a01      	subs	r2, #1
 80056fa:	60fa      	str	r2, [r7, #12]
 80056fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	3a01      	subs	r2, #1
 800570e:	60fa      	str	r2, [r7, #12]
 8005710:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005714:	b2da      	uxtb	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800571a:	4b1d      	ldr	r3, [pc, #116]	@ (8005790 <_SendPacket+0x26c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005720:	4b1a      	ldr	r3, [pc, #104]	@ (800578c <_SendPacket+0x268>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	623b      	str	r3, [r7, #32]
 8005732:	e00b      	b.n	800574c <_SendPacket+0x228>
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	1c59      	adds	r1, r3, #1
 800573c:	6279      	str	r1, [r7, #36]	@ 0x24
 800573e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	09db      	lsrs	r3, r3, #7
 800574a:	623b      	str	r3, [r7, #32]
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005750:	d8f0      	bhi.n	8005734 <_SendPacket+0x210>
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	627a      	str	r2, [r7, #36]	@ 0x24
 8005758:	6a3a      	ldr	r2, [r7, #32]
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005762:	4b0a      	ldr	r3, [pc, #40]	@ (800578c <_SendPacket+0x268>)
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	4618      	mov	r0, r3
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	461a      	mov	r2, r3
 8005770:	68f9      	ldr	r1, [r7, #12]
 8005772:	f7fa fd35 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005776:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005778:	f7ff f9ae 	bl	8004ad8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005782:	4a02      	ldr	r2, [pc, #8]	@ (800578c <_SendPacket+0x268>)
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	60d3      	str	r3, [r2, #12]
 8005788:	e010      	b.n	80057ac <_SendPacket+0x288>
 800578a:	bf00      	nop
 800578c:	200045f0 	.word	0x200045f0
 8005790:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005794:	4b19      	ldr	r3, [pc, #100]	@ (80057fc <_SendPacket+0x2d8>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	b2da      	uxtb	r2, r3
 800579c:	4b17      	ldr	r3, [pc, #92]	@ (80057fc <_SendPacket+0x2d8>)
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e004      	b.n	80057ac <_SendPacket+0x288>
    goto SendDone;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <_SendPacket+0x288>
      goto SendDone;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <_SendPacket+0x288>
      goto SendDone;
 80057aa:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80057ac:	4b13      	ldr	r3, [pc, #76]	@ (80057fc <_SendPacket+0x2d8>)
 80057ae:	7e1b      	ldrb	r3, [r3, #24]
 80057b0:	4619      	mov	r1, r3
 80057b2:	4a13      	ldr	r2, [pc, #76]	@ (8005800 <_SendPacket+0x2dc>)
 80057b4:	460b      	mov	r3, r1
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	440b      	add	r3, r1
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	4413      	add	r3, r2
 80057be:	336c      	adds	r3, #108	@ 0x6c
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b0e      	ldr	r3, [pc, #56]	@ (80057fc <_SendPacket+0x2d8>)
 80057c4:	7e1b      	ldrb	r3, [r3, #24]
 80057c6:	4618      	mov	r0, r3
 80057c8:	490d      	ldr	r1, [pc, #52]	@ (8005800 <_SendPacket+0x2dc>)
 80057ca:	4603      	mov	r3, r0
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	4403      	add	r3, r0
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	440b      	add	r3, r1
 80057d4:	3370      	adds	r3, #112	@ 0x70
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d00b      	beq.n	80057f4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80057dc:	4b07      	ldr	r3, [pc, #28]	@ (80057fc <_SendPacket+0x2d8>)
 80057de:	789b      	ldrb	r3, [r3, #2]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d107      	bne.n	80057f4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80057e4:	4b05      	ldr	r3, [pc, #20]	@ (80057fc <_SendPacket+0x2d8>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80057ea:	f7ff fdb9 	bl	8005360 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80057ee:	4b03      	ldr	r3, [pc, #12]	@ (80057fc <_SendPacket+0x2d8>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80057f4:	bf00      	nop
 80057f6:	3728      	adds	r7, #40	@ 0x28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	200045f0 	.word	0x200045f0
 8005800:	20003130 	.word	0x20003130

08005804 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005804:	b580      	push	{r7, lr}
 8005806:	b08a      	sub	sp, #40	@ 0x28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	3301      	adds	r3, #1
 800581a:	2b80      	cmp	r3, #128	@ 0x80
 800581c:	d80a      	bhi.n	8005834 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	1c59      	adds	r1, r3, #1
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6051      	str	r1, [r2, #4]
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b80      	cmp	r3, #128	@ 0x80
 800583a:	d15a      	bne.n	80058f2 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	623b      	str	r3, [r7, #32]
 800585c:	e00b      	b.n	8005876 <_StoreChar+0x72>
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	1c59      	adds	r1, r3, #1
 8005866:	6279      	str	r1, [r7, #36]	@ 0x24
 8005868:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	09db      	lsrs	r3, r3, #7
 8005874:	623b      	str	r3, [r7, #32]
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	2b7f      	cmp	r3, #127	@ 0x7f
 800587a:	d8f0      	bhi.n	800585e <_StoreChar+0x5a>
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	627a      	str	r2, [r7, #36]	@ 0x24
 8005882:	6a3a      	ldr	r2, [r7, #32]
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	2300      	movs	r3, #0
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	e00b      	b.n	80058ae <_StoreChar+0xaa>
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	1c59      	adds	r1, r3, #1
 800589e:	61f9      	str	r1, [r7, #28]
 80058a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	09db      	lsrs	r3, r3, #7
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80058b2:	d8f0      	bhi.n	8005896 <_StoreChar+0x92>
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	61fa      	str	r2, [r7, #28]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	221a      	movs	r2, #26
 80058ca:	6939      	ldr	r1, [r7, #16]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff fe29 	bl	8005524 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fd35 	bl	8005346 <_PreparePacket>
 80058dc:	4602      	mov	r2, r0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	611a      	str	r2, [r3, #16]
  }
}
 80058f2:	bf00      	nop
 80058f4:	3728      	adds	r7, #40	@ 0x28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	@ 0x28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800590e:	2301      	movs	r3, #1
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005912:	2301      	movs	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005916:	e007      	b.n	8005928 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	623b      	str	r3, [r7, #32]
    Width++;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	3301      	adds	r3, #1
 8005926:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	429a      	cmp	r2, r3
 800592e:	d2f3      	bcs.n	8005918 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	429a      	cmp	r2, r3
 8005936:	d901      	bls.n	800593c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800593c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d000      	beq.n	8005948 <_PrintUnsigned+0x4c>
 8005946:	e01f      	b.n	8005988 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01c      	beq.n	8005988 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800594e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <_PrintUnsigned+0x68>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <_PrintUnsigned+0x68>
        c = '0';
 800595e:	2330      	movs	r3, #48	@ 0x30
 8005960:	76fb      	strb	r3, [r7, #27]
 8005962:	e001      	b.n	8005968 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005964:	2320      	movs	r3, #32
 8005966:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005968:	e007      	b.n	800597a <_PrintUnsigned+0x7e>
        FieldWidth--;
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	3b01      	subs	r3, #1
 800596e:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005970:	7efb      	ldrb	r3, [r7, #27]
 8005972:	4619      	mov	r1, r3
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff ff45 	bl	8005804 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <_PrintUnsigned+0x8c>
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	429a      	cmp	r2, r3
 8005986:	d3f0      	bcc.n	800596a <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d903      	bls.n	8005996 <_PrintUnsigned+0x9a>
      NumDigits--;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	3b01      	subs	r3, #1
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	e009      	b.n	80059aa <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	fbb2 f3f3 	udiv	r3, r2, r3
 800599e:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d200      	bcs.n	80059aa <_PrintUnsigned+0xae>
        break;
 80059a8:	e005      	b.n	80059b6 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059b4:	e7e8      	b.n	8005988 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c4:	fb02 f303 	mul.w	r3, r2, r3
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80059ce:	4a15      	ldr	r2, [pc, #84]	@ (8005a24 <_PrintUnsigned+0x128>)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	4413      	add	r3, r2
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	4619      	mov	r1, r3
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff ff13 	bl	8005804 <_StoreChar>
    Digit /= Base;
 80059de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e3      	bne.n	80059b6 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80059ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d011      	beq.n	8005a1c <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80059f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00e      	beq.n	8005a1c <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059fe:	e006      	b.n	8005a0e <_PrintUnsigned+0x112>
        FieldWidth--;
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	3b01      	subs	r3, #1
 8005a04:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005a06:	2120      	movs	r1, #32
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff fefb 	bl	8005804 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <_PrintUnsigned+0x120>
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d3f1      	bcc.n	8005a00 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005a1c:	bf00      	nop
 8005a1e:	3728      	adds	r7, #40	@ 0x28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	0800790c 	.word	0x0800790c

08005a28 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	bfb8      	it	lt
 8005a3c:	425b      	neglt	r3, r3
 8005a3e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005a40:	2301      	movs	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a44:	e007      	b.n	8005a56 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a4e:	613b      	str	r3, [r7, #16]
    Width++;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	3301      	adds	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	daf3      	bge.n	8005a46 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d901      	bls.n	8005a6a <_PrintInt+0x42>
    Width = NumDigits;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <_PrintInt+0x5e>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	db04      	blt.n	8005a80 <_PrintInt+0x58>
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <_PrintInt+0x5e>
    FieldWidth--;
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <_PrintInt+0x6e>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d016      	beq.n	8005ac4 <_PrintInt+0x9c>
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d111      	bne.n	8005ac4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00e      	beq.n	8005ac4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aa6:	e006      	b.n	8005ab6 <_PrintInt+0x8e>
        FieldWidth--;
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005aae:	2120      	movs	r1, #32
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff fea7 	bl	8005804 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <_PrintInt+0x9c>
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d3f1      	bcc.n	8005aa8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	da07      	bge.n	8005ada <_PrintInt+0xb2>
    v = -v;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	425b      	negs	r3, r3
 8005ace:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005ad0:	212d      	movs	r1, #45	@ 0x2d
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff fe96 	bl	8005804 <_StoreChar>
 8005ad8:	e008      	b.n	8005aec <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005ae4:	212b      	movs	r1, #43	@ 0x2b
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff fe8c 	bl	8005804 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d019      	beq.n	8005b2a <_PrintInt+0x102>
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d114      	bne.n	8005b2a <_PrintInt+0x102>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d111      	bne.n	8005b2a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00e      	beq.n	8005b2a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b0c:	e006      	b.n	8005b1c <_PrintInt+0xf4>
        FieldWidth--;
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005b14:	2130      	movs	r1, #48	@ 0x30
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7ff fe74 	bl	8005804 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <_PrintInt+0x102>
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d3f1      	bcc.n	8005b0e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	9301      	str	r3, [sp, #4]
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff fedf 	bl	80058fc <_PrintUnsigned>
}
 8005b3e:	bf00      	nop
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b098      	sub	sp, #96	@ 0x60
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b54:	f3ef 8311 	mrs	r3, BASEPRI
 8005b58:	f04f 0120 	mov.w	r1, #32
 8005b5c:	f381 8811 	msr	BASEPRI, r1
 8005b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b62:	48b7      	ldr	r0, [pc, #732]	@ (8005e40 <_VPrintTarget+0x2f8>)
 8005b64:	f7ff fbef 	bl	8005346 <_PreparePacket>
 8005b68:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b6a:	4bb5      	ldr	r3, [pc, #724]	@ (8005e40 <_VPrintTarget+0x2f8>)
 8005b6c:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b74:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 81a8 	beq.w	8005ee8 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005b98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b9c:	2b25      	cmp	r3, #37	@ 0x25
 8005b9e:	f040 8195 	bne.w	8005ecc <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bb6:	3b23      	subs	r3, #35	@ 0x23
 8005bb8:	2b0d      	cmp	r3, #13
 8005bba:	d83f      	bhi.n	8005c3c <_VPrintTarget+0xf4>
 8005bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc4 <_VPrintTarget+0x7c>)
 8005bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc2:	bf00      	nop
 8005bc4:	08005c2d 	.word	0x08005c2d
 8005bc8:	08005c3d 	.word	0x08005c3d
 8005bcc:	08005c3d 	.word	0x08005c3d
 8005bd0:	08005c3d 	.word	0x08005c3d
 8005bd4:	08005c3d 	.word	0x08005c3d
 8005bd8:	08005c3d 	.word	0x08005c3d
 8005bdc:	08005c3d 	.word	0x08005c3d
 8005be0:	08005c3d 	.word	0x08005c3d
 8005be4:	08005c1d 	.word	0x08005c1d
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005bfd 	.word	0x08005bfd
 8005bf0:	08005c3d 	.word	0x08005c3d
 8005bf4:	08005c3d 	.word	0x08005c3d
 8005bf8:	08005c0d 	.word	0x08005c0d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	e01a      	b.n	8005c42 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c0e:	f043 0302 	orr.w	r3, r3, #2
 8005c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	e012      	b.n	8005c42 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005c1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c1e:	f043 0304 	orr.w	r3, r3, #4
 8005c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e00a      	b.n	8005c42 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c2e:	f043 0308 	orr.w	r3, r3, #8
 8005c32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e002      	b.n	8005c42 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c40:	bf00      	nop
        }
      } while (v);
 8005c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1b0      	bne.n	8005baa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005c54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c58:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c5a:	d912      	bls.n	8005c82 <_VPrintTarget+0x13a>
 8005c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c60:	2b39      	cmp	r3, #57	@ 0x39
 8005c62:	d80e      	bhi.n	8005c82 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	461a      	mov	r2, r3
 8005c76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3b30      	subs	r3, #48	@ 0x30
 8005c7e:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005c80:	e7e4      	b.n	8005c4c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c82:	2300      	movs	r3, #0
 8005c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c92:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c94:	d11d      	bne.n	8005cd2 <_VPrintTarget+0x18a>
        sFormat++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005ca4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ca8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005caa:	d912      	bls.n	8005cd2 <_VPrintTarget+0x18a>
 8005cac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cb0:	2b39      	cmp	r3, #57	@ 0x39
 8005cb2:	d80e      	bhi.n	8005cd2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005cba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cca:	4413      	add	r3, r2
 8005ccc:	3b30      	subs	r3, #48	@ 0x30
 8005cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005cd0:	e7e4      	b.n	8005c9c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005cda:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cde:	2b6c      	cmp	r3, #108	@ 0x6c
 8005ce0:	d003      	beq.n	8005cea <_VPrintTarget+0x1a2>
 8005ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ce6:	2b68      	cmp	r3, #104	@ 0x68
 8005ce8:	d107      	bne.n	8005cfa <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005cf8:	e7ef      	b.n	8005cda <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005cfa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cfe:	2b25      	cmp	r3, #37	@ 0x25
 8005d00:	f000 80d8 	beq.w	8005eb4 <_VPrintTarget+0x36c>
 8005d04:	2b25      	cmp	r3, #37	@ 0x25
 8005d06:	f2c0 80dc 	blt.w	8005ec2 <_VPrintTarget+0x37a>
 8005d0a:	2b78      	cmp	r3, #120	@ 0x78
 8005d0c:	f300 80d9 	bgt.w	8005ec2 <_VPrintTarget+0x37a>
 8005d10:	2b58      	cmp	r3, #88	@ 0x58
 8005d12:	f2c0 80d6 	blt.w	8005ec2 <_VPrintTarget+0x37a>
 8005d16:	3b58      	subs	r3, #88	@ 0x58
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	f200 80d2 	bhi.w	8005ec2 <_VPrintTarget+0x37a>
 8005d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d24 <_VPrintTarget+0x1dc>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005e1b 	.word	0x08005e1b
 8005d28:	08005ec3 	.word	0x08005ec3
 8005d2c:	08005ec3 	.word	0x08005ec3
 8005d30:	08005ec3 	.word	0x08005ec3
 8005d34:	08005ec3 	.word	0x08005ec3
 8005d38:	08005ec3 	.word	0x08005ec3
 8005d3c:	08005ec3 	.word	0x08005ec3
 8005d40:	08005ec3 	.word	0x08005ec3
 8005d44:	08005ec3 	.word	0x08005ec3
 8005d48:	08005ec3 	.word	0x08005ec3
 8005d4c:	08005ec3 	.word	0x08005ec3
 8005d50:	08005da9 	.word	0x08005da9
 8005d54:	08005dcf 	.word	0x08005dcf
 8005d58:	08005ec3 	.word	0x08005ec3
 8005d5c:	08005ec3 	.word	0x08005ec3
 8005d60:	08005ec3 	.word	0x08005ec3
 8005d64:	08005ec3 	.word	0x08005ec3
 8005d68:	08005ec3 	.word	0x08005ec3
 8005d6c:	08005ec3 	.word	0x08005ec3
 8005d70:	08005ec3 	.word	0x08005ec3
 8005d74:	08005ec3 	.word	0x08005ec3
 8005d78:	08005ec3 	.word	0x08005ec3
 8005d7c:	08005ec3 	.word	0x08005ec3
 8005d80:	08005ec3 	.word	0x08005ec3
 8005d84:	08005e8f 	.word	0x08005e8f
 8005d88:	08005ec3 	.word	0x08005ec3
 8005d8c:	08005ec3 	.word	0x08005ec3
 8005d90:	08005e45 	.word	0x08005e45
 8005d94:	08005ec3 	.word	0x08005ec3
 8005d98:	08005df5 	.word	0x08005df5
 8005d9c:	08005ec3 	.word	0x08005ec3
 8005da0:	08005ec3 	.word	0x08005ec3
 8005da4:	08005e1b 	.word	0x08005e1b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	1d19      	adds	r1, r3, #4
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6011      	str	r1, [r2, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005dbc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005dc0:	f107 0310 	add.w	r3, r7, #16
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff fd1c 	bl	8005804 <_StoreChar>
        break;
 8005dcc:	e07a      	b.n	8005ec4 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	1d19      	adds	r1, r3, #4
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6011      	str	r1, [r2, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005ddc:	f107 0010 	add.w	r0, r7, #16
 8005de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dea:	220a      	movs	r2, #10
 8005dec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005dee:	f7ff fe1b 	bl	8005a28 <_PrintInt>
        break;
 8005df2:	e067      	b.n	8005ec4 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	1d19      	adds	r1, r3, #4
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6011      	str	r1, [r2, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e04:	f107 0010 	add.w	r0, r7, #16
 8005e08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e12:	220a      	movs	r2, #10
 8005e14:	f7ff fd72 	bl	80058fc <_PrintUnsigned>
        break;
 8005e18:	e054      	b.n	8005ec4 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	1d19      	adds	r1, r3, #4
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6011      	str	r1, [r2, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e28:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e2a:	f107 0010 	add.w	r0, r7, #16
 8005e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e38:	2210      	movs	r2, #16
 8005e3a:	f7ff fd5f 	bl	80058fc <_PrintUnsigned>
        break;
 8005e3e:	e041      	b.n	8005ec4 <_VPrintTarget+0x37c>
 8005e40:	20004620 	.word	0x20004620
      case 's':
        s = va_arg(*pParamList, const char*);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	1d19      	adds	r1, r3, #4
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6011      	str	r1, [r2, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8005e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <_VPrintTarget+0x314>
          s = "(null)";
 8005e58:	4b4a      	ldr	r3, [pc, #296]	@ (8005f84 <_VPrintTarget+0x43c>)
 8005e5a:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8005e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e66:	3301      	adds	r3, #1
 8005e68:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8005e6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005e72:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005e76:	f107 0310 	add.w	r3, r7, #16
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fcc1 	bl	8005804 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e86:	d9e9      	bls.n	8005e5c <_VPrintTarget+0x314>
        break;
 8005e88:	e01c      	b.n	8005ec4 <_VPrintTarget+0x37c>
            break;
 8005e8a:	bf00      	nop
        break;
 8005e8c:	e01a      	b.n	8005ec4 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	1d19      	adds	r1, r3, #4
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6011      	str	r1, [r2, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e9c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e9e:	f107 0010 	add.w	r0, r7, #16
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	2308      	movs	r3, #8
 8005eac:	2210      	movs	r2, #16
 8005eae:	f7ff fd25 	bl	80058fc <_PrintUnsigned>
        break;
 8005eb2:	e007      	b.n	8005ec4 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005eb4:	f107 0310 	add.w	r3, r7, #16
 8005eb8:	2125      	movs	r1, #37	@ 0x25
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fca2 	bl	8005804 <_StoreChar>
        break;
 8005ec0:	e000      	b.n	8005ec4 <_VPrintTarget+0x37c>
      default:
        break;
 8005ec2:	bf00      	nop
      }
      sFormat++;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e007      	b.n	8005edc <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005ecc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005ed0:	f107 0310 	add.w	r3, r7, #16
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fc94 	bl	8005804 <_StoreChar>
    }
  } while (*sFormat);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f47f ae4d 	bne.w	8005b80 <_VPrintTarget+0x38>
 8005ee6:	e000      	b.n	8005eea <_VPrintTarget+0x3a2>
      break;
 8005ee8:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d041      	beq.n	8005f74 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f00:	e00b      	b.n	8005f1a <_VPrintTarget+0x3d2>
 8005f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f08:	1c59      	adds	r1, r3, #1
 8005f0a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005f0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f16:	09db      	lsrs	r3, r3, #7
 8005f18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f1e:	d8f0      	bhi.n	8005f02 <_VPrintTarget+0x3ba>
 8005f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f2e:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f34:	2300      	movs	r3, #0
 8005f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f38:	e00b      	b.n	8005f52 <_VPrintTarget+0x40a>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f40:	1c59      	adds	r1, r3, #1
 8005f42:	6379      	str	r1, [r7, #52]	@ 0x34
 8005f44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4e:	09db      	lsrs	r3, r3, #7
 8005f50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f54:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f56:	d8f0      	bhi.n	8005f3a <_VPrintTarget+0x3f2>
 8005f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	637a      	str	r2, [r7, #52]	@ 0x34
 8005f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f66:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	6979      	ldr	r1, [r7, #20]
 8005f6c:	221a      	movs	r2, #26
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fad8 	bl	8005524 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f76:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f7a:	bf00      	nop
 8005f7c:	3758      	adds	r7, #88	@ 0x58
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	080078b4 	.word	0x080078b4

08005f88 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f96:	2300      	movs	r3, #0
 8005f98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005f9c:	4917      	ldr	r1, [pc, #92]	@ (8005ffc <SEGGER_SYSVIEW_Init+0x74>)
 8005f9e:	4818      	ldr	r0, [pc, #96]	@ (8006000 <SEGGER_SYSVIEW_Init+0x78>)
 8005fa0:	f7ff f8c8 	bl	8005134 <SEGGER_RTT_AllocUpBuffer>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	4b16      	ldr	r3, [pc, #88]	@ (8006004 <SEGGER_SYSVIEW_Init+0x7c>)
 8005faa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005fac:	4b15      	ldr	r3, [pc, #84]	@ (8006004 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fae:	785a      	ldrb	r2, [r3, #1]
 8005fb0:	4b14      	ldr	r3, [pc, #80]	@ (8006004 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fb2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005fb4:	4b13      	ldr	r3, [pc, #76]	@ (8006004 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fb6:	7e1b      	ldrb	r3, [r3, #24]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	4a11      	ldr	r2, [pc, #68]	@ (8006008 <SEGGER_SYSVIEW_Init+0x80>)
 8005fc2:	490f      	ldr	r1, [pc, #60]	@ (8006000 <SEGGER_SYSVIEW_Init+0x78>)
 8005fc4:	f7ff f93a 	bl	800523c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006004 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005fce:	4b0f      	ldr	r3, [pc, #60]	@ (800600c <SEGGER_SYSVIEW_Init+0x84>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8006004 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fd4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8006004 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005fdc:	4a09      	ldr	r2, [pc, #36]	@ (8006004 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005fe2:	4a08      	ldr	r2, [pc, #32]	@ (8006004 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005fe8:	4a06      	ldr	r2, [pc, #24]	@ (8006004 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005fee:	4b05      	ldr	r3, [pc, #20]	@ (8006004 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005ff4:	bf00      	nop
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	200035e8 	.word	0x200035e8
 8006000:	080078bc 	.word	0x080078bc
 8006004:	200045f0 	.word	0x200045f0
 8006008:	200045e8 	.word	0x200045e8
 800600c:	e0001004 	.word	0xe0001004

08006010 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006018:	4a04      	ldr	r2, [pc, #16]	@ (800602c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6113      	str	r3, [r2, #16]
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	200045f0 	.word	0x200045f0

08006030 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006038:	f3ef 8311 	mrs	r3, BASEPRI
 800603c:	f04f 0120 	mov.w	r1, #32
 8006040:	f381 8811 	msr	BASEPRI, r1
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	4808      	ldr	r0, [pc, #32]	@ (8006068 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006048:	f7ff f97d 	bl	8005346 <_PreparePacket>
 800604c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	68b8      	ldr	r0, [r7, #8]
 8006054:	f7ff fa66 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f383 8811 	msr	BASEPRI, r3
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20004620 	.word	0x20004620

0800606c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006076:	f3ef 8311 	mrs	r3, BASEPRI
 800607a:	f04f 0120 	mov.w	r1, #32
 800607e:	f381 8811 	msr	BASEPRI, r1
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	4816      	ldr	r0, [pc, #88]	@ (80060e0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006086:	f7ff f95e 	bl	8005346 <_PreparePacket>
 800608a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	61bb      	str	r3, [r7, #24]
 8006098:	e00b      	b.n	80060b2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	b2da      	uxtb	r2, r3
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	1c59      	adds	r1, r3, #1
 80060a2:	61f9      	str	r1, [r7, #28]
 80060a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	09db      	lsrs	r3, r3, #7
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80060b6:	d8f0      	bhi.n	800609a <SEGGER_SYSVIEW_RecordU32+0x2e>
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	61fa      	str	r2, [r7, #28]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	68f9      	ldr	r1, [r7, #12]
 80060cc:	6938      	ldr	r0, [r7, #16]
 80060ce:	f7ff fa29 	bl	8005524 <_SendPacket>
  RECORD_END();
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f383 8811 	msr	BASEPRI, r3
}
 80060d8:	bf00      	nop
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20004620 	.word	0x20004620

080060e4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08c      	sub	sp, #48	@ 0x30
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060f0:	f3ef 8311 	mrs	r3, BASEPRI
 80060f4:	f04f 0120 	mov.w	r1, #32
 80060f8:	f381 8811 	msr	BASEPRI, r1
 80060fc:	61fb      	str	r3, [r7, #28]
 80060fe:	4825      	ldr	r0, [pc, #148]	@ (8006194 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006100:	f7ff f921 	bl	8005346 <_PreparePacket>
 8006104:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006112:	e00b      	b.n	800612c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006116:	b2da      	uxtb	r2, r3
 8006118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611a:	1c59      	adds	r1, r3, #1
 800611c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800611e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	09db      	lsrs	r3, r3, #7
 800612a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006130:	d8f0      	bhi.n	8006114 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	623b      	str	r3, [r7, #32]
 800614a:	e00b      	b.n	8006164 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	b2da      	uxtb	r2, r3
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	1c59      	adds	r1, r3, #1
 8006154:	6279      	str	r1, [r7, #36]	@ 0x24
 8006156:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	09db      	lsrs	r3, r3, #7
 8006162:	623b      	str	r3, [r7, #32]
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	2b7f      	cmp	r3, #127	@ 0x7f
 8006168:	d8f0      	bhi.n	800614c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006170:	6a3a      	ldr	r2, [r7, #32]
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	6979      	ldr	r1, [r7, #20]
 800617e:	69b8      	ldr	r0, [r7, #24]
 8006180:	f7ff f9d0 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f383 8811 	msr	BASEPRI, r3
}
 800618a:	bf00      	nop
 800618c:	3730      	adds	r7, #48	@ 0x30
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20004620 	.word	0x20004620

08006198 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b08c      	sub	sp, #48	@ 0x30
 800619c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800619e:	4b59      	ldr	r3, [pc, #356]	@ (8006304 <SEGGER_SYSVIEW_Start+0x16c>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80061a4:	f3ef 8311 	mrs	r3, BASEPRI
 80061a8:	f04f 0120 	mov.w	r1, #32
 80061ac:	f381 8811 	msr	BASEPRI, r1
 80061b0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80061b2:	4b54      	ldr	r3, [pc, #336]	@ (8006304 <SEGGER_SYSVIEW_Start+0x16c>)
 80061b4:	785b      	ldrb	r3, [r3, #1]
 80061b6:	220a      	movs	r2, #10
 80061b8:	4953      	ldr	r1, [pc, #332]	@ (8006308 <SEGGER_SYSVIEW_Start+0x170>)
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fa f810 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80061c6:	f7fe fc87 	bl	8004ad8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80061ca:	200a      	movs	r0, #10
 80061cc:	f7ff ff30 	bl	8006030 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061d0:	f3ef 8311 	mrs	r3, BASEPRI
 80061d4:	f04f 0120 	mov.w	r1, #32
 80061d8:	f381 8811 	msr	BASEPRI, r1
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	484b      	ldr	r0, [pc, #300]	@ (800630c <SEGGER_SYSVIEW_Start+0x174>)
 80061e0:	f7ff f8b1 	bl	8005346 <_PreparePacket>
 80061e4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ee:	4b45      	ldr	r3, [pc, #276]	@ (8006304 <SEGGER_SYSVIEW_Start+0x16c>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061f4:	e00b      	b.n	800620e <SEGGER_SYSVIEW_Start+0x76>
 80061f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fc:	1c59      	adds	r1, r3, #1
 80061fe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006200:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620a:	09db      	lsrs	r3, r3, #7
 800620c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006210:	2b7f      	cmp	r3, #127	@ 0x7f
 8006212:	d8f0      	bhi.n	80061f6 <SEGGER_SYSVIEW_Start+0x5e>
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800621a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006222:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
 8006228:	4b36      	ldr	r3, [pc, #216]	@ (8006304 <SEGGER_SYSVIEW_Start+0x16c>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	623b      	str	r3, [r7, #32]
 800622e:	e00b      	b.n	8006248 <SEGGER_SYSVIEW_Start+0xb0>
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	b2da      	uxtb	r2, r3
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	1c59      	adds	r1, r3, #1
 8006238:	6279      	str	r1, [r7, #36]	@ 0x24
 800623a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	09db      	lsrs	r3, r3, #7
 8006246:	623b      	str	r3, [r7, #32]
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	2b7f      	cmp	r3, #127	@ 0x7f
 800624c:	d8f0      	bhi.n	8006230 <SEGGER_SYSVIEW_Start+0x98>
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	627a      	str	r2, [r7, #36]	@ 0x24
 8006254:	6a3a      	ldr	r2, [r7, #32]
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	4b28      	ldr	r3, [pc, #160]	@ (8006304 <SEGGER_SYSVIEW_Start+0x16c>)
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	e00b      	b.n	8006282 <SEGGER_SYSVIEW_Start+0xea>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	b2da      	uxtb	r2, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	1c59      	adds	r1, r3, #1
 8006272:	61f9      	str	r1, [r7, #28]
 8006274:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	09db      	lsrs	r3, r3, #7
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b7f      	cmp	r3, #127	@ 0x7f
 8006286:	d8f0      	bhi.n	800626a <SEGGER_SYSVIEW_Start+0xd2>
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	61fa      	str	r2, [r7, #28]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	e00b      	b.n	80062ba <SEGGER_SYSVIEW_Start+0x122>
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	1c59      	adds	r1, r3, #1
 80062aa:	6179      	str	r1, [r7, #20]
 80062ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	09db      	lsrs	r3, r3, #7
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80062be:	d8f0      	bhi.n	80062a2 <SEGGER_SYSVIEW_Start+0x10a>
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	617a      	str	r2, [r7, #20]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80062d0:	2218      	movs	r2, #24
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff f925 	bl	8005524 <_SendPacket>
      RECORD_END();
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80062e0:	4b08      	ldr	r3, [pc, #32]	@ (8006304 <SEGGER_SYSVIEW_Start+0x16c>)
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80062e8:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <SEGGER_SYSVIEW_Start+0x16c>)
 80062ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ec:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80062ee:	f000 f9eb 	bl	80066c8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80062f2:	f000 f9b1 	bl	8006658 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80062f6:	f000 fca7 	bl	8006c48 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80062fa:	bf00      	nop
 80062fc:	3730      	adds	r7, #48	@ 0x30
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	200045f0 	.word	0x200045f0
 8006308:	08007900 	.word	0x08007900
 800630c:	20004620 	.word	0x20004620

08006310 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006316:	f3ef 8311 	mrs	r3, BASEPRI
 800631a:	f04f 0120 	mov.w	r1, #32
 800631e:	f381 8811 	msr	BASEPRI, r1
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	480b      	ldr	r0, [pc, #44]	@ (8006354 <SEGGER_SYSVIEW_Stop+0x44>)
 8006326:	f7ff f80e 	bl	8005346 <_PreparePacket>
 800632a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800632c:	4b0a      	ldr	r3, [pc, #40]	@ (8006358 <SEGGER_SYSVIEW_Stop+0x48>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006334:	220b      	movs	r2, #11
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6838      	ldr	r0, [r7, #0]
 800633a:	f7ff f8f3 	bl	8005524 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800633e:	4b06      	ldr	r3, [pc, #24]	@ (8006358 <SEGGER_SYSVIEW_Stop+0x48>)
 8006340:	2200      	movs	r2, #0
 8006342:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f383 8811 	msr	BASEPRI, r3
}
 800634a:	bf00      	nop
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20004620 	.word	0x20004620
 8006358:	200045f0 	.word	0x200045f0

0800635c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b08c      	sub	sp, #48	@ 0x30
 8006360:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006362:	f3ef 8311 	mrs	r3, BASEPRI
 8006366:	f04f 0120 	mov.w	r1, #32
 800636a:	f381 8811 	msr	BASEPRI, r1
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	4845      	ldr	r0, [pc, #276]	@ (8006488 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006372:	f7fe ffe8 	bl	8005346 <_PreparePacket>
 8006376:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006380:	4b42      	ldr	r3, [pc, #264]	@ (800648c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006386:	e00b      	b.n	80063a0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638a:	b2da      	uxtb	r2, r3
 800638c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638e:	1c59      	adds	r1, r3, #1
 8006390:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006392:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	09db      	lsrs	r3, r3, #7
 800639e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80063a4:	d8f0      	bhi.n	8006388 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80063a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ba:	4b34      	ldr	r3, [pc, #208]	@ (800648c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	623b      	str	r3, [r7, #32]
 80063c0:	e00b      	b.n	80063da <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	1c59      	adds	r1, r3, #1
 80063ca:	6279      	str	r1, [r7, #36]	@ 0x24
 80063cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	09db      	lsrs	r3, r3, #7
 80063d8:	623b      	str	r3, [r7, #32]
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80063de:	d8f0      	bhi.n	80063c2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80063e6:	6a3a      	ldr	r2, [r7, #32]
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	61fb      	str	r3, [r7, #28]
 80063f4:	4b25      	ldr	r3, [pc, #148]	@ (800648c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	e00b      	b.n	8006414 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	1c59      	adds	r1, r3, #1
 8006404:	61f9      	str	r1, [r7, #28]
 8006406:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	09db      	lsrs	r3, r3, #7
 8006412:	61bb      	str	r3, [r7, #24]
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b7f      	cmp	r3, #127	@ 0x7f
 8006418:	d8f0      	bhi.n	80063fc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	61fa      	str	r2, [r7, #28]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	2300      	movs	r3, #0
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	e00b      	b.n	800644c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	1c59      	adds	r1, r3, #1
 800643c:	6179      	str	r1, [r7, #20]
 800643e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	09db      	lsrs	r3, r3, #7
 800644a:	613b      	str	r3, [r7, #16]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006450:	d8f0      	bhi.n	8006434 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	617a      	str	r2, [r7, #20]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006462:	2218      	movs	r2, #24
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	68b8      	ldr	r0, [r7, #8]
 8006468:	f7ff f85c 	bl	8005524 <_SendPacket>
  RECORD_END();
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006472:	4b06      	ldr	r3, [pc, #24]	@ (800648c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800647a:	4b04      	ldr	r3, [pc, #16]	@ (800648c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	4798      	blx	r3
  }
}
 8006480:	bf00      	nop
 8006482:	3730      	adds	r7, #48	@ 0x30
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20004620 	.word	0x20004620
 800648c:	200045f0 	.word	0x200045f0

08006490 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006490:	b580      	push	{r7, lr}
 8006492:	b092      	sub	sp, #72	@ 0x48
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006498:	f3ef 8311 	mrs	r3, BASEPRI
 800649c:	f04f 0120 	mov.w	r1, #32
 80064a0:	f381 8811 	msr	BASEPRI, r1
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	486a      	ldr	r0, [pc, #424]	@ (8006650 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80064a8:	f7fe ff4d 	bl	8005346 <_PreparePacket>
 80064ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4b66      	ldr	r3, [pc, #408]	@ (8006654 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80064c2:	e00b      	b.n	80064dc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80064c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ca:	1c59      	adds	r1, r3, #1
 80064cc:	6479      	str	r1, [r7, #68]	@ 0x44
 80064ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064d8:	09db      	lsrs	r3, r3, #7
 80064da:	643b      	str	r3, [r7, #64]	@ 0x40
 80064dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064de:	2b7f      	cmp	r3, #127	@ 0x7f
 80064e0:	d8f0      	bhi.n	80064c4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80064e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80064e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064fc:	e00b      	b.n	8006516 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80064fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006500:	b2da      	uxtb	r2, r3
 8006502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006504:	1c59      	adds	r1, r3, #1
 8006506:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006508:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006512:	09db      	lsrs	r3, r3, #7
 8006514:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006518:	2b7f      	cmp	r3, #127	@ 0x7f
 800651a:	d8f0      	bhi.n	80064fe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800651c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006522:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800652a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	4619      	mov	r1, r3
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7fe fecd 	bl	80052d4 <_EncodeStr>
 800653a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800653c:	2209      	movs	r2, #9
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	6938      	ldr	r0, [r7, #16]
 8006542:	f7fe ffef 	bl	8005524 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	637b      	str	r3, [r7, #52]	@ 0x34
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b40      	ldr	r3, [pc, #256]	@ (8006654 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	633b      	str	r3, [r7, #48]	@ 0x30
 800655a:	e00b      	b.n	8006574 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	b2da      	uxtb	r2, r3
 8006560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	6379      	str	r1, [r7, #52]	@ 0x34
 8006566:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006570:	09db      	lsrs	r3, r3, #7
 8006572:	633b      	str	r3, [r7, #48]	@ 0x30
 8006574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006576:	2b7f      	cmp	r3, #127	@ 0x7f
 8006578:	d8f0      	bhi.n	800655c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800657a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006594:	e00b      	b.n	80065ae <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006598:	b2da      	uxtb	r2, r3
 800659a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800659c:	1c59      	adds	r1, r3, #1
 800659e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80065a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	09db      	lsrs	r3, r3, #7
 80065ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80065b2:	d8f0      	bhi.n	8006596 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80065b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	623b      	str	r3, [r7, #32]
 80065ce:	e00b      	b.n	80065e8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	1c59      	adds	r1, r3, #1
 80065d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80065da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	09db      	lsrs	r3, r3, #7
 80065e6:	623b      	str	r3, [r7, #32]
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80065ec:	d8f0      	bhi.n	80065d0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80065ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	61fb      	str	r3, [r7, #28]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	61bb      	str	r3, [r7, #24]
 8006608:	e00b      	b.n	8006622 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	b2da      	uxtb	r2, r3
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	1c59      	adds	r1, r3, #1
 8006612:	61f9      	str	r1, [r7, #28]
 8006614:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	09db      	lsrs	r3, r3, #7
 8006620:	61bb      	str	r3, [r7, #24]
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b7f      	cmp	r3, #127	@ 0x7f
 8006626:	d8f0      	bhi.n	800660a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	61fa      	str	r2, [r7, #28]
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006638:	2215      	movs	r2, #21
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	6938      	ldr	r0, [r7, #16]
 800663e:	f7fe ff71 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f383 8811 	msr	BASEPRI, r3
}
 8006648:	bf00      	nop
 800664a:	3748      	adds	r7, #72	@ 0x48
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20004620 	.word	0x20004620
 8006654:	200045f0 	.word	0x200045f0

08006658 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800665c:	4b07      	ldr	r3, [pc, #28]	@ (800667c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006664:	4b05      	ldr	r3, [pc, #20]	@ (800667c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800666e:	4b03      	ldr	r3, [pc, #12]	@ (800667c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	4798      	blx	r3
  }
}
 8006676:	bf00      	nop
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	200045f0 	.word	0x200045f0

08006680 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006688:	f3ef 8311 	mrs	r3, BASEPRI
 800668c:	f04f 0120 	mov.w	r1, #32
 8006690:	f381 8811 	msr	BASEPRI, r1
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	480b      	ldr	r0, [pc, #44]	@ (80066c4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006698:	f7fe fe55 	bl	8005346 <_PreparePacket>
 800669c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800669e:	2280      	movs	r2, #128	@ 0x80
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	6938      	ldr	r0, [r7, #16]
 80066a4:	f7fe fe16 	bl	80052d4 <_EncodeStr>
 80066a8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80066aa:	220e      	movs	r2, #14
 80066ac:	68f9      	ldr	r1, [r7, #12]
 80066ae:	6938      	ldr	r0, [r7, #16]
 80066b0:	f7fe ff38 	bl	8005524 <_SendPacket>
  RECORD_END();
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f383 8811 	msr	BASEPRI, r3
}
 80066ba:	bf00      	nop
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20004620 	.word	0x20004620

080066c8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80066c8:	b590      	push	{r4, r7, lr}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80066ce:	4b15      	ldr	r3, [pc, #84]	@ (8006724 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01a      	beq.n	800670c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80066d6:	4b13      	ldr	r3, [pc, #76]	@ (8006724 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d015      	beq.n	800670c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80066e0:	4b10      	ldr	r3, [pc, #64]	@ (8006724 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4798      	blx	r3
 80066e8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80066ec:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80066ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	000a      	movs	r2, r1
 80066fc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80066fe:	4613      	mov	r3, r2
 8006700:	461a      	mov	r2, r3
 8006702:	4621      	mov	r1, r4
 8006704:	200d      	movs	r0, #13
 8006706:	f7ff fced 	bl	80060e4 <SEGGER_SYSVIEW_RecordU32x2>
 800670a:	e006      	b.n	800671a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800670c:	4b06      	ldr	r3, [pc, #24]	@ (8006728 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4619      	mov	r1, r3
 8006712:	200c      	movs	r0, #12
 8006714:	f7ff fcaa 	bl	800606c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	bd90      	pop	{r4, r7, pc}
 8006722:	bf00      	nop
 8006724:	200045f0 	.word	0x200045f0
 8006728:	e0001004 	.word	0xe0001004

0800672c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006734:	f3ef 8311 	mrs	r3, BASEPRI
 8006738:	f04f 0120 	mov.w	r1, #32
 800673c:	f381 8811 	msr	BASEPRI, r1
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	4817      	ldr	r0, [pc, #92]	@ (80067a0 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006744:	f7fe fdff 	bl	8005346 <_PreparePacket>
 8006748:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	61fb      	str	r3, [r7, #28]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	e00b      	b.n	8006770 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	b2da      	uxtb	r2, r3
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	1c59      	adds	r1, r3, #1
 8006760:	61f9      	str	r1, [r7, #28]
 8006762:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	09db      	lsrs	r3, r3, #7
 800676e:	61bb      	str	r3, [r7, #24]
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b7f      	cmp	r3, #127	@ 0x7f
 8006774:	d8f0      	bhi.n	8006758 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	61fa      	str	r2, [r7, #28]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006786:	221c      	movs	r2, #28
 8006788:	68f9      	ldr	r1, [r7, #12]
 800678a:	6938      	ldr	r0, [r7, #16]
 800678c:	f7fe feca 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f383 8811 	msr	BASEPRI, r3
}
 8006796:	bf00      	nop
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20004620 	.word	0x20004620

080067a4 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	@ 0x28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80067ae:	f3ef 8311 	mrs	r3, BASEPRI
 80067b2:	f04f 0120 	mov.w	r1, #32
 80067b6:	f381 8811 	msr	BASEPRI, r1
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	4824      	ldr	r0, [pc, #144]	@ (8006850 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80067be:	f7fe fdc2 	bl	8005346 <_PreparePacket>
 80067c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	623b      	str	r3, [r7, #32]
 80067d0:	e00b      	b.n	80067ea <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	6279      	str	r1, [r7, #36]	@ 0x24
 80067dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	09db      	lsrs	r3, r3, #7
 80067e8:	623b      	str	r3, [r7, #32]
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80067ee:	d8f0      	bhi.n	80067d2 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80067f6:	6a3a      	ldr	r2, [r7, #32]
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	61fb      	str	r3, [r7, #28]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	e00b      	b.n	8006822 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	1c59      	adds	r1, r3, #1
 8006812:	61f9      	str	r1, [r7, #28]
 8006814:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	09db      	lsrs	r3, r3, #7
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b7f      	cmp	r3, #127	@ 0x7f
 8006826:	d8f0      	bhi.n	800680a <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	61fa      	str	r2, [r7, #28]
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006838:	221c      	movs	r2, #28
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	6938      	ldr	r0, [r7, #16]
 800683e:	f7fe fe71 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f383 8811 	msr	BASEPRI, r3
}
 8006848:	bf00      	nop
 800684a:	3728      	adds	r7, #40	@ 0x28
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20004620 	.word	0x20004620

08006854 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800685a:	f3ef 8311 	mrs	r3, BASEPRI
 800685e:	f04f 0120 	mov.w	r1, #32
 8006862:	f381 8811 	msr	BASEPRI, r1
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	4807      	ldr	r0, [pc, #28]	@ (8006888 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800686a:	f7fe fd6c 	bl	8005346 <_PreparePacket>
 800686e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006870:	2211      	movs	r2, #17
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6838      	ldr	r0, [r7, #0]
 8006876:	f7fe fe55 	bl	8005524 <_SendPacket>
  RECORD_END();
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f383 8811 	msr	BASEPRI, r3
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	20004620 	.word	0x20004620

0800688c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006894:	f3ef 8311 	mrs	r3, BASEPRI
 8006898:	f04f 0120 	mov.w	r1, #32
 800689c:	f381 8811 	msr	BASEPRI, r1
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	4819      	ldr	r0, [pc, #100]	@ (8006908 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80068a4:	f7fe fd4f 	bl	8005346 <_PreparePacket>
 80068a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068ae:	4b17      	ldr	r3, [pc, #92]	@ (800690c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	61bb      	str	r3, [r7, #24]
 80068c0:	e00b      	b.n	80068da <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	1c59      	adds	r1, r3, #1
 80068ca:	61f9      	str	r1, [r7, #28]
 80068cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	09db      	lsrs	r3, r3, #7
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80068de:	d8f0      	bhi.n	80068c2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	61fa      	str	r2, [r7, #28]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80068f0:	2208      	movs	r2, #8
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	6938      	ldr	r0, [r7, #16]
 80068f6:	f7fe fe15 	bl	8005524 <_SendPacket>
  RECORD_END();
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f383 8811 	msr	BASEPRI, r3
}
 8006900:	bf00      	nop
 8006902:	3720      	adds	r7, #32
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20004620 	.word	0x20004620
 800690c:	200045f0 	.word	0x200045f0

08006910 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006918:	f3ef 8311 	mrs	r3, BASEPRI
 800691c:	f04f 0120 	mov.w	r1, #32
 8006920:	f381 8811 	msr	BASEPRI, r1
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	4819      	ldr	r0, [pc, #100]	@ (800698c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006928:	f7fe fd0d 	bl	8005346 <_PreparePacket>
 800692c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006932:	4b17      	ldr	r3, [pc, #92]	@ (8006990 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	e00b      	b.n	800695e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	b2da      	uxtb	r2, r3
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	1c59      	adds	r1, r3, #1
 800694e:	61f9      	str	r1, [r7, #28]
 8006950:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	09db      	lsrs	r3, r3, #7
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b7f      	cmp	r3, #127	@ 0x7f
 8006962:	d8f0      	bhi.n	8006946 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	61fa      	str	r2, [r7, #28]
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006974:	2204      	movs	r2, #4
 8006976:	68f9      	ldr	r1, [r7, #12]
 8006978:	6938      	ldr	r0, [r7, #16]
 800697a:	f7fe fdd3 	bl	8005524 <_SendPacket>
  RECORD_END();
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f383 8811 	msr	BASEPRI, r3
}
 8006984:	bf00      	nop
 8006986:	3720      	adds	r7, #32
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20004620 	.word	0x20004620
 8006990:	200045f0 	.word	0x200045f0

08006994 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800699c:	f3ef 8311 	mrs	r3, BASEPRI
 80069a0:	f04f 0120 	mov.w	r1, #32
 80069a4:	f381 8811 	msr	BASEPRI, r1
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	4819      	ldr	r0, [pc, #100]	@ (8006a10 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80069ac:	f7fe fccb 	bl	8005346 <_PreparePacket>
 80069b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069b6:	4b17      	ldr	r3, [pc, #92]	@ (8006a14 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	e00b      	b.n	80069e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	1c59      	adds	r1, r3, #1
 80069d2:	61f9      	str	r1, [r7, #28]
 80069d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	09db      	lsrs	r3, r3, #7
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80069e6:	d8f0      	bhi.n	80069ca <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	61fa      	str	r2, [r7, #28]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	b2d2      	uxtb	r2, r2
 80069f2:	701a      	strb	r2, [r3, #0]
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80069f8:	2206      	movs	r2, #6
 80069fa:	68f9      	ldr	r1, [r7, #12]
 80069fc:	6938      	ldr	r0, [r7, #16]
 80069fe:	f7fe fd91 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f383 8811 	msr	BASEPRI, r3
}
 8006a08:	bf00      	nop
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20004620 	.word	0x20004620
 8006a14:	200045f0 	.word	0x200045f0

08006a18 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08a      	sub	sp, #40	@ 0x28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a22:	f3ef 8311 	mrs	r3, BASEPRI
 8006a26:	f04f 0120 	mov.w	r1, #32
 8006a2a:	f381 8811 	msr	BASEPRI, r1
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	4827      	ldr	r0, [pc, #156]	@ (8006ad0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006a32:	f7fe fc88 	bl	8005346 <_PreparePacket>
 8006a36:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a3c:	4b25      	ldr	r3, [pc, #148]	@ (8006ad4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	623b      	str	r3, [r7, #32]
 8006a4e:	e00b      	b.n	8006a68 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	09db      	lsrs	r3, r3, #7
 8006a66:	623b      	str	r3, [r7, #32]
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a6c:	d8f0      	bhi.n	8006a50 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a74:	6a3a      	ldr	r2, [r7, #32]
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	e00b      	b.n	8006aa0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	1c59      	adds	r1, r3, #1
 8006a90:	61f9      	str	r1, [r7, #28]
 8006a92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	09db      	lsrs	r3, r3, #7
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aa4:	d8f0      	bhi.n	8006a88 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	61fa      	str	r2, [r7, #28]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006ab6:	2207      	movs	r2, #7
 8006ab8:	68f9      	ldr	r1, [r7, #12]
 8006aba:	6938      	ldr	r0, [r7, #16]
 8006abc:	f7fe fd32 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f383 8811 	msr	BASEPRI, r3
}
 8006ac6:	bf00      	nop
 8006ac8:	3728      	adds	r7, #40	@ 0x28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20004620 	.word	0x20004620
 8006ad4:	200045f0 	.word	0x200045f0

08006ad8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006ae0:	4b04      	ldr	r3, [pc, #16]	@ (8006af4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	1ad3      	subs	r3, r2, r3
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	200045f0 	.word	0x200045f0

08006af8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08c      	sub	sp, #48	@ 0x30
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006b02:	4b40      	ldr	r3, [pc, #256]	@ (8006c04 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d077      	beq.n	8006bfa <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c04 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006b10:	2300      	movs	r3, #0
 8006b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b14:	e008      	b.n	8006b28 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d007      	beq.n	8006b32 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b24:	3301      	adds	r3, #1
 8006b26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d3f2      	bcc.n	8006b16 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b30:	e000      	b.n	8006b34 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b32:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d055      	beq.n	8006be6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b3e:	f04f 0120 	mov.w	r1, #32
 8006b42:	f381 8811 	msr	BASEPRI, r1
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	482f      	ldr	r0, [pc, #188]	@ (8006c08 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006b4a:	f7fe fbfc 	bl	8005346 <_PreparePacket>
 8006b4e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	623b      	str	r3, [r7, #32]
 8006b5c:	e00b      	b.n	8006b76 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	1c59      	adds	r1, r3, #1
 8006b66:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	09db      	lsrs	r3, r3, #7
 8006b74:	623b      	str	r3, [r7, #32]
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b7a:	d8f0      	bhi.n	8006b5e <SEGGER_SYSVIEW_SendModule+0x66>
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b82:	6a3a      	ldr	r2, [r7, #32]
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	e00b      	b.n	8006bb0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	1c59      	adds	r1, r3, #1
 8006ba0:	61f9      	str	r1, [r7, #28]
 8006ba2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	09db      	lsrs	r3, r3, #7
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bb4:	d8f0      	bhi.n	8006b98 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	61fa      	str	r2, [r7, #28]
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2280      	movs	r2, #128	@ 0x80
 8006bcc:	4619      	mov	r1, r3
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7fe fb80 	bl	80052d4 <_EncodeStr>
 8006bd4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006bd6:	2216      	movs	r2, #22
 8006bd8:	68f9      	ldr	r1, [r7, #12]
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f7fe fca2 	bl	8005524 <_SendPacket>
      RECORD_END();
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d006      	beq.n	8006bfa <SEGGER_SYSVIEW_SendModule+0x102>
 8006bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	4798      	blx	r3
    }
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	3730      	adds	r7, #48	@ 0x30
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20004618 	.word	0x20004618
 8006c08:	20004620 	.word	0x20004620

08006c0c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006c12:	4b0c      	ldr	r3, [pc, #48]	@ (8006c44 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00f      	beq.n	8006c3a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c44 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f2      	bne.n	8006c20 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20004618 	.word	0x20004618

08006c48 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006c4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c52:	f04f 0120 	mov.w	r1, #32
 8006c56:	f381 8811 	msr	BASEPRI, r1
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	4817      	ldr	r0, [pc, #92]	@ (8006cbc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006c5e:	f7fe fb72 	bl	8005346 <_PreparePacket>
 8006c62:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	4b14      	ldr	r3, [pc, #80]	@ (8006cc0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	613b      	str	r3, [r7, #16]
 8006c72:	e00b      	b.n	8006c8c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	1c59      	adds	r1, r3, #1
 8006c7c:	6179      	str	r1, [r7, #20]
 8006c7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	09db      	lsrs	r3, r3, #7
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c90:	d8f0      	bhi.n	8006c74 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	617a      	str	r2, [r7, #20]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006ca2:	221b      	movs	r2, #27
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	68b8      	ldr	r0, [r7, #8]
 8006ca8:	f7fe fc3c 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f383 8811 	msr	BASEPRI, r3
}
 8006cb2:	bf00      	nop
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20004620 	.word	0x20004620
 8006cc0:	2000461c 	.word	0x2000461c

08006cc4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006cc4:	b40f      	push	{r0, r1, r2, r3}
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006ccc:	f107 0314 	add.w	r3, r7, #20
 8006cd0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	6938      	ldr	r0, [r7, #16]
 8006cda:	f7fe ff35 	bl	8005b48 <_VPrintTarget>
  va_end(ParamList);
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ce8:	b004      	add	sp, #16
 8006cea:	4770      	bx	lr

08006cec <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	@ 0x28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cf4:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf8:	f04f 0120 	mov.w	r1, #32
 8006cfc:	f381 8811 	msr	BASEPRI, r1
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	4827      	ldr	r0, [pc, #156]	@ (8006da0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d04:	f7fe fb1f 	bl	8005346 <_PreparePacket>
 8006d08:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d0a:	2280      	movs	r2, #128	@ 0x80
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	6938      	ldr	r0, [r7, #16]
 8006d10:	f7fe fae0 	bl	80052d4 <_EncodeStr>
 8006d14:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	623b      	str	r3, [r7, #32]
 8006d1e:	e00b      	b.n	8006d38 <SEGGER_SYSVIEW_Warn+0x4c>
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	1c59      	adds	r1, r3, #1
 8006d28:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	09db      	lsrs	r3, r3, #7
 8006d36:	623b      	str	r3, [r7, #32]
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d3c:	d8f0      	bhi.n	8006d20 <SEGGER_SYSVIEW_Warn+0x34>
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d44:	6a3a      	ldr	r2, [r7, #32]
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	61fb      	str	r3, [r7, #28]
 8006d52:	2300      	movs	r3, #0
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	e00b      	b.n	8006d70 <SEGGER_SYSVIEW_Warn+0x84>
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	1c59      	adds	r1, r3, #1
 8006d60:	61f9      	str	r1, [r7, #28]
 8006d62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	09db      	lsrs	r3, r3, #7
 8006d6e:	61bb      	str	r3, [r7, #24]
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d74:	d8f0      	bhi.n	8006d58 <SEGGER_SYSVIEW_Warn+0x6c>
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	61fa      	str	r2, [r7, #28]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006d86:	221a      	movs	r2, #26
 8006d88:	68f9      	ldr	r1, [r7, #12]
 8006d8a:	6938      	ldr	r0, [r7, #16]
 8006d8c:	f7fe fbca 	bl	8005524 <_SendPacket>
  RECORD_END();
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f383 8811 	msr	BASEPRI, r3
}
 8006d96:	bf00      	nop
 8006d98:	3728      	adds	r7, #40	@ 0x28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20004620 	.word	0x20004620

08006da4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006da8:	4b13      	ldr	r3, [pc, #76]	@ (8006df8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006daa:	7e1b      	ldrb	r3, [r3, #24]
 8006dac:	4619      	mov	r1, r3
 8006dae:	4a13      	ldr	r2, [pc, #76]	@ (8006dfc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006db0:	460b      	mov	r3, r1
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	440b      	add	r3, r1
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	4413      	add	r3, r2
 8006dba:	336c      	adds	r3, #108	@ 0x6c
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006df8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006dc0:	7e1b      	ldrb	r3, [r3, #24]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	490d      	ldr	r1, [pc, #52]	@ (8006dfc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4403      	add	r3, r0
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	440b      	add	r3, r1
 8006dd0:	3370      	adds	r3, #112	@ 0x70
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d00b      	beq.n	8006df0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006dd8:	4b07      	ldr	r3, [pc, #28]	@ (8006df8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006dda:	789b      	ldrb	r3, [r3, #2]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d107      	bne.n	8006df0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006de0:	4b05      	ldr	r3, [pc, #20]	@ (8006df8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006de6:	f7fe fabb 	bl	8005360 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006dea:	4b03      	ldr	r3, [pc, #12]	@ (8006df8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006df0:	4b01      	ldr	r3, [pc, #4]	@ (8006df8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	200045f0 	.word	0x200045f0
 8006dfc:	20003130 	.word	0x20003130

08006e00 <sniprintf>:
 8006e00:	b40c      	push	{r2, r3}
 8006e02:	b530      	push	{r4, r5, lr}
 8006e04:	4b18      	ldr	r3, [pc, #96]	@ (8006e68 <sniprintf+0x68>)
 8006e06:	1e0c      	subs	r4, r1, #0
 8006e08:	681d      	ldr	r5, [r3, #0]
 8006e0a:	b09d      	sub	sp, #116	@ 0x74
 8006e0c:	da08      	bge.n	8006e20 <sniprintf+0x20>
 8006e0e:	238b      	movs	r3, #139	@ 0x8b
 8006e10:	602b      	str	r3, [r5, #0]
 8006e12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e16:	b01d      	add	sp, #116	@ 0x74
 8006e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e1c:	b002      	add	sp, #8
 8006e1e:	4770      	bx	lr
 8006e20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006e24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006e2e:	bf14      	ite	ne
 8006e30:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006e34:	4623      	moveq	r3, r4
 8006e36:	9304      	str	r3, [sp, #16]
 8006e38:	9307      	str	r3, [sp, #28]
 8006e3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e3e:	9002      	str	r0, [sp, #8]
 8006e40:	9006      	str	r0, [sp, #24]
 8006e42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e48:	ab21      	add	r3, sp, #132	@ 0x84
 8006e4a:	a902      	add	r1, sp, #8
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	f000 f9ac 	bl	80071ac <_svfiprintf_r>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	bfbc      	itt	lt
 8006e58:	238b      	movlt	r3, #139	@ 0x8b
 8006e5a:	602b      	strlt	r3, [r5, #0]
 8006e5c:	2c00      	cmp	r4, #0
 8006e5e:	d0da      	beq.n	8006e16 <sniprintf+0x16>
 8006e60:	9b02      	ldr	r3, [sp, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e7d6      	b.n	8006e16 <sniprintf+0x16>
 8006e68:	20000018 	.word	0x20000018

08006e6c <memcmp>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	3901      	subs	r1, #1
 8006e70:	4402      	add	r2, r0
 8006e72:	4290      	cmp	r0, r2
 8006e74:	d101      	bne.n	8006e7a <memcmp+0xe>
 8006e76:	2000      	movs	r0, #0
 8006e78:	e005      	b.n	8006e86 <memcmp+0x1a>
 8006e7a:	7803      	ldrb	r3, [r0, #0]
 8006e7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	d001      	beq.n	8006e88 <memcmp+0x1c>
 8006e84:	1b18      	subs	r0, r3, r4
 8006e86:	bd10      	pop	{r4, pc}
 8006e88:	3001      	adds	r0, #1
 8006e8a:	e7f2      	b.n	8006e72 <memcmp+0x6>

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <__libc_init_array>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8006ed4 <__libc_init_array+0x38>)
 8006ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8006ed8 <__libc_init_array+0x3c>)
 8006ea2:	1b64      	subs	r4, r4, r5
 8006ea4:	10a4      	asrs	r4, r4, #2
 8006ea6:	2600      	movs	r6, #0
 8006ea8:	42a6      	cmp	r6, r4
 8006eaa:	d109      	bne.n	8006ec0 <__libc_init_array+0x24>
 8006eac:	4d0b      	ldr	r5, [pc, #44]	@ (8006edc <__libc_init_array+0x40>)
 8006eae:	4c0c      	ldr	r4, [pc, #48]	@ (8006ee0 <__libc_init_array+0x44>)
 8006eb0:	f000 fc72 	bl	8007798 <_init>
 8006eb4:	1b64      	subs	r4, r4, r5
 8006eb6:	10a4      	asrs	r4, r4, #2
 8006eb8:	2600      	movs	r6, #0
 8006eba:	42a6      	cmp	r6, r4
 8006ebc:	d105      	bne.n	8006eca <__libc_init_array+0x2e>
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
 8006ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec4:	4798      	blx	r3
 8006ec6:	3601      	adds	r6, #1
 8006ec8:	e7ee      	b.n	8006ea8 <__libc_init_array+0xc>
 8006eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ece:	4798      	blx	r3
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	e7f2      	b.n	8006eba <__libc_init_array+0x1e>
 8006ed4:	08007958 	.word	0x08007958
 8006ed8:	08007958 	.word	0x08007958
 8006edc:	08007958 	.word	0x08007958
 8006ee0:	0800795c 	.word	0x0800795c

08006ee4 <__retarget_lock_acquire_recursive>:
 8006ee4:	4770      	bx	lr

08006ee6 <__retarget_lock_release_recursive>:
 8006ee6:	4770      	bx	lr

08006ee8 <memcpy>:
 8006ee8:	440a      	add	r2, r1
 8006eea:	4291      	cmp	r1, r2
 8006eec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006ef0:	d100      	bne.n	8006ef4 <memcpy+0xc>
 8006ef2:	4770      	bx	lr
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006efe:	4291      	cmp	r1, r2
 8006f00:	d1f9      	bne.n	8006ef6 <memcpy+0xe>
 8006f02:	bd10      	pop	{r4, pc}

08006f04 <_free_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4605      	mov	r5, r0
 8006f08:	2900      	cmp	r1, #0
 8006f0a:	d041      	beq.n	8006f90 <_free_r+0x8c>
 8006f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f10:	1f0c      	subs	r4, r1, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bfb8      	it	lt
 8006f16:	18e4      	addlt	r4, r4, r3
 8006f18:	f000 f8e0 	bl	80070dc <__malloc_lock>
 8006f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f94 <_free_r+0x90>)
 8006f1e:	6813      	ldr	r3, [r2, #0]
 8006f20:	b933      	cbnz	r3, 8006f30 <_free_r+0x2c>
 8006f22:	6063      	str	r3, [r4, #4]
 8006f24:	6014      	str	r4, [r2, #0]
 8006f26:	4628      	mov	r0, r5
 8006f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f2c:	f000 b8dc 	b.w	80070e8 <__malloc_unlock>
 8006f30:	42a3      	cmp	r3, r4
 8006f32:	d908      	bls.n	8006f46 <_free_r+0x42>
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	1821      	adds	r1, r4, r0
 8006f38:	428b      	cmp	r3, r1
 8006f3a:	bf01      	itttt	eq
 8006f3c:	6819      	ldreq	r1, [r3, #0]
 8006f3e:	685b      	ldreq	r3, [r3, #4]
 8006f40:	1809      	addeq	r1, r1, r0
 8006f42:	6021      	streq	r1, [r4, #0]
 8006f44:	e7ed      	b.n	8006f22 <_free_r+0x1e>
 8006f46:	461a      	mov	r2, r3
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	b10b      	cbz	r3, 8006f50 <_free_r+0x4c>
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d9fa      	bls.n	8006f46 <_free_r+0x42>
 8006f50:	6811      	ldr	r1, [r2, #0]
 8006f52:	1850      	adds	r0, r2, r1
 8006f54:	42a0      	cmp	r0, r4
 8006f56:	d10b      	bne.n	8006f70 <_free_r+0x6c>
 8006f58:	6820      	ldr	r0, [r4, #0]
 8006f5a:	4401      	add	r1, r0
 8006f5c:	1850      	adds	r0, r2, r1
 8006f5e:	4283      	cmp	r3, r0
 8006f60:	6011      	str	r1, [r2, #0]
 8006f62:	d1e0      	bne.n	8006f26 <_free_r+0x22>
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	6053      	str	r3, [r2, #4]
 8006f6a:	4408      	add	r0, r1
 8006f6c:	6010      	str	r0, [r2, #0]
 8006f6e:	e7da      	b.n	8006f26 <_free_r+0x22>
 8006f70:	d902      	bls.n	8006f78 <_free_r+0x74>
 8006f72:	230c      	movs	r3, #12
 8006f74:	602b      	str	r3, [r5, #0]
 8006f76:	e7d6      	b.n	8006f26 <_free_r+0x22>
 8006f78:	6820      	ldr	r0, [r4, #0]
 8006f7a:	1821      	adds	r1, r4, r0
 8006f7c:	428b      	cmp	r3, r1
 8006f7e:	bf04      	itt	eq
 8006f80:	6819      	ldreq	r1, [r3, #0]
 8006f82:	685b      	ldreq	r3, [r3, #4]
 8006f84:	6063      	str	r3, [r4, #4]
 8006f86:	bf04      	itt	eq
 8006f88:	1809      	addeq	r1, r1, r0
 8006f8a:	6021      	streq	r1, [r4, #0]
 8006f8c:	6054      	str	r4, [r2, #4]
 8006f8e:	e7ca      	b.n	8006f26 <_free_r+0x22>
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	20004848 	.word	0x20004848

08006f98 <sbrk_aligned>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8006fd8 <sbrk_aligned+0x40>)
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	6831      	ldr	r1, [r6, #0]
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	b911      	cbnz	r1, 8006faa <sbrk_aligned+0x12>
 8006fa4:	f000 fba4 	bl	80076f0 <_sbrk_r>
 8006fa8:	6030      	str	r0, [r6, #0]
 8006faa:	4621      	mov	r1, r4
 8006fac:	4628      	mov	r0, r5
 8006fae:	f000 fb9f 	bl	80076f0 <_sbrk_r>
 8006fb2:	1c43      	adds	r3, r0, #1
 8006fb4:	d103      	bne.n	8006fbe <sbrk_aligned+0x26>
 8006fb6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006fba:	4620      	mov	r0, r4
 8006fbc:	bd70      	pop	{r4, r5, r6, pc}
 8006fbe:	1cc4      	adds	r4, r0, #3
 8006fc0:	f024 0403 	bic.w	r4, r4, #3
 8006fc4:	42a0      	cmp	r0, r4
 8006fc6:	d0f8      	beq.n	8006fba <sbrk_aligned+0x22>
 8006fc8:	1a21      	subs	r1, r4, r0
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f000 fb90 	bl	80076f0 <_sbrk_r>
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d1f2      	bne.n	8006fba <sbrk_aligned+0x22>
 8006fd4:	e7ef      	b.n	8006fb6 <sbrk_aligned+0x1e>
 8006fd6:	bf00      	nop
 8006fd8:	20004844 	.word	0x20004844

08006fdc <_malloc_r>:
 8006fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe0:	1ccd      	adds	r5, r1, #3
 8006fe2:	f025 0503 	bic.w	r5, r5, #3
 8006fe6:	3508      	adds	r5, #8
 8006fe8:	2d0c      	cmp	r5, #12
 8006fea:	bf38      	it	cc
 8006fec:	250c      	movcc	r5, #12
 8006fee:	2d00      	cmp	r5, #0
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	db01      	blt.n	8006ff8 <_malloc_r+0x1c>
 8006ff4:	42a9      	cmp	r1, r5
 8006ff6:	d904      	bls.n	8007002 <_malloc_r+0x26>
 8006ff8:	230c      	movs	r3, #12
 8006ffa:	6033      	str	r3, [r6, #0]
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070d8 <_malloc_r+0xfc>
 8007006:	f000 f869 	bl	80070dc <__malloc_lock>
 800700a:	f8d8 3000 	ldr.w	r3, [r8]
 800700e:	461c      	mov	r4, r3
 8007010:	bb44      	cbnz	r4, 8007064 <_malloc_r+0x88>
 8007012:	4629      	mov	r1, r5
 8007014:	4630      	mov	r0, r6
 8007016:	f7ff ffbf 	bl	8006f98 <sbrk_aligned>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	4604      	mov	r4, r0
 800701e:	d158      	bne.n	80070d2 <_malloc_r+0xf6>
 8007020:	f8d8 4000 	ldr.w	r4, [r8]
 8007024:	4627      	mov	r7, r4
 8007026:	2f00      	cmp	r7, #0
 8007028:	d143      	bne.n	80070b2 <_malloc_r+0xd6>
 800702a:	2c00      	cmp	r4, #0
 800702c:	d04b      	beq.n	80070c6 <_malloc_r+0xea>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	4639      	mov	r1, r7
 8007032:	4630      	mov	r0, r6
 8007034:	eb04 0903 	add.w	r9, r4, r3
 8007038:	f000 fb5a 	bl	80076f0 <_sbrk_r>
 800703c:	4581      	cmp	r9, r0
 800703e:	d142      	bne.n	80070c6 <_malloc_r+0xea>
 8007040:	6821      	ldr	r1, [r4, #0]
 8007042:	1a6d      	subs	r5, r5, r1
 8007044:	4629      	mov	r1, r5
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff ffa6 	bl	8006f98 <sbrk_aligned>
 800704c:	3001      	adds	r0, #1
 800704e:	d03a      	beq.n	80070c6 <_malloc_r+0xea>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	442b      	add	r3, r5
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	f8d8 3000 	ldr.w	r3, [r8]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	bb62      	cbnz	r2, 80070b8 <_malloc_r+0xdc>
 800705e:	f8c8 7000 	str.w	r7, [r8]
 8007062:	e00f      	b.n	8007084 <_malloc_r+0xa8>
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	1b52      	subs	r2, r2, r5
 8007068:	d420      	bmi.n	80070ac <_malloc_r+0xd0>
 800706a:	2a0b      	cmp	r2, #11
 800706c:	d917      	bls.n	800709e <_malloc_r+0xc2>
 800706e:	1961      	adds	r1, r4, r5
 8007070:	42a3      	cmp	r3, r4
 8007072:	6025      	str	r5, [r4, #0]
 8007074:	bf18      	it	ne
 8007076:	6059      	strne	r1, [r3, #4]
 8007078:	6863      	ldr	r3, [r4, #4]
 800707a:	bf08      	it	eq
 800707c:	f8c8 1000 	streq.w	r1, [r8]
 8007080:	5162      	str	r2, [r4, r5]
 8007082:	604b      	str	r3, [r1, #4]
 8007084:	4630      	mov	r0, r6
 8007086:	f000 f82f 	bl	80070e8 <__malloc_unlock>
 800708a:	f104 000b 	add.w	r0, r4, #11
 800708e:	1d23      	adds	r3, r4, #4
 8007090:	f020 0007 	bic.w	r0, r0, #7
 8007094:	1ac2      	subs	r2, r0, r3
 8007096:	bf1c      	itt	ne
 8007098:	1a1b      	subne	r3, r3, r0
 800709a:	50a3      	strne	r3, [r4, r2]
 800709c:	e7af      	b.n	8006ffe <_malloc_r+0x22>
 800709e:	6862      	ldr	r2, [r4, #4]
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	bf0c      	ite	eq
 80070a4:	f8c8 2000 	streq.w	r2, [r8]
 80070a8:	605a      	strne	r2, [r3, #4]
 80070aa:	e7eb      	b.n	8007084 <_malloc_r+0xa8>
 80070ac:	4623      	mov	r3, r4
 80070ae:	6864      	ldr	r4, [r4, #4]
 80070b0:	e7ae      	b.n	8007010 <_malloc_r+0x34>
 80070b2:	463c      	mov	r4, r7
 80070b4:	687f      	ldr	r7, [r7, #4]
 80070b6:	e7b6      	b.n	8007026 <_malloc_r+0x4a>
 80070b8:	461a      	mov	r2, r3
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	42a3      	cmp	r3, r4
 80070be:	d1fb      	bne.n	80070b8 <_malloc_r+0xdc>
 80070c0:	2300      	movs	r3, #0
 80070c2:	6053      	str	r3, [r2, #4]
 80070c4:	e7de      	b.n	8007084 <_malloc_r+0xa8>
 80070c6:	230c      	movs	r3, #12
 80070c8:	6033      	str	r3, [r6, #0]
 80070ca:	4630      	mov	r0, r6
 80070cc:	f000 f80c 	bl	80070e8 <__malloc_unlock>
 80070d0:	e794      	b.n	8006ffc <_malloc_r+0x20>
 80070d2:	6005      	str	r5, [r0, #0]
 80070d4:	e7d6      	b.n	8007084 <_malloc_r+0xa8>
 80070d6:	bf00      	nop
 80070d8:	20004848 	.word	0x20004848

080070dc <__malloc_lock>:
 80070dc:	4801      	ldr	r0, [pc, #4]	@ (80070e4 <__malloc_lock+0x8>)
 80070de:	f7ff bf01 	b.w	8006ee4 <__retarget_lock_acquire_recursive>
 80070e2:	bf00      	nop
 80070e4:	20004840 	.word	0x20004840

080070e8 <__malloc_unlock>:
 80070e8:	4801      	ldr	r0, [pc, #4]	@ (80070f0 <__malloc_unlock+0x8>)
 80070ea:	f7ff befc 	b.w	8006ee6 <__retarget_lock_release_recursive>
 80070ee:	bf00      	nop
 80070f0:	20004840 	.word	0x20004840

080070f4 <__ssputs_r>:
 80070f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f8:	688e      	ldr	r6, [r1, #8]
 80070fa:	461f      	mov	r7, r3
 80070fc:	42be      	cmp	r6, r7
 80070fe:	680b      	ldr	r3, [r1, #0]
 8007100:	4682      	mov	sl, r0
 8007102:	460c      	mov	r4, r1
 8007104:	4690      	mov	r8, r2
 8007106:	d82d      	bhi.n	8007164 <__ssputs_r+0x70>
 8007108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800710c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007110:	d026      	beq.n	8007160 <__ssputs_r+0x6c>
 8007112:	6965      	ldr	r5, [r4, #20]
 8007114:	6909      	ldr	r1, [r1, #16]
 8007116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800711a:	eba3 0901 	sub.w	r9, r3, r1
 800711e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007122:	1c7b      	adds	r3, r7, #1
 8007124:	444b      	add	r3, r9
 8007126:	106d      	asrs	r5, r5, #1
 8007128:	429d      	cmp	r5, r3
 800712a:	bf38      	it	cc
 800712c:	461d      	movcc	r5, r3
 800712e:	0553      	lsls	r3, r2, #21
 8007130:	d527      	bpl.n	8007182 <__ssputs_r+0x8e>
 8007132:	4629      	mov	r1, r5
 8007134:	f7ff ff52 	bl	8006fdc <_malloc_r>
 8007138:	4606      	mov	r6, r0
 800713a:	b360      	cbz	r0, 8007196 <__ssputs_r+0xa2>
 800713c:	6921      	ldr	r1, [r4, #16]
 800713e:	464a      	mov	r2, r9
 8007140:	f7ff fed2 	bl	8006ee8 <memcpy>
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800714a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	6126      	str	r6, [r4, #16]
 8007152:	6165      	str	r5, [r4, #20]
 8007154:	444e      	add	r6, r9
 8007156:	eba5 0509 	sub.w	r5, r5, r9
 800715a:	6026      	str	r6, [r4, #0]
 800715c:	60a5      	str	r5, [r4, #8]
 800715e:	463e      	mov	r6, r7
 8007160:	42be      	cmp	r6, r7
 8007162:	d900      	bls.n	8007166 <__ssputs_r+0x72>
 8007164:	463e      	mov	r6, r7
 8007166:	6820      	ldr	r0, [r4, #0]
 8007168:	4632      	mov	r2, r6
 800716a:	4641      	mov	r1, r8
 800716c:	f000 faa6 	bl	80076bc <memmove>
 8007170:	68a3      	ldr	r3, [r4, #8]
 8007172:	1b9b      	subs	r3, r3, r6
 8007174:	60a3      	str	r3, [r4, #8]
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	4433      	add	r3, r6
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	2000      	movs	r0, #0
 800717e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007182:	462a      	mov	r2, r5
 8007184:	f000 fac4 	bl	8007710 <_realloc_r>
 8007188:	4606      	mov	r6, r0
 800718a:	2800      	cmp	r0, #0
 800718c:	d1e0      	bne.n	8007150 <__ssputs_r+0x5c>
 800718e:	6921      	ldr	r1, [r4, #16]
 8007190:	4650      	mov	r0, sl
 8007192:	f7ff feb7 	bl	8006f04 <_free_r>
 8007196:	230c      	movs	r3, #12
 8007198:	f8ca 3000 	str.w	r3, [sl]
 800719c:	89a3      	ldrh	r3, [r4, #12]
 800719e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071a2:	81a3      	strh	r3, [r4, #12]
 80071a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071a8:	e7e9      	b.n	800717e <__ssputs_r+0x8a>
	...

080071ac <_svfiprintf_r>:
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	4698      	mov	r8, r3
 80071b2:	898b      	ldrh	r3, [r1, #12]
 80071b4:	061b      	lsls	r3, r3, #24
 80071b6:	b09d      	sub	sp, #116	@ 0x74
 80071b8:	4607      	mov	r7, r0
 80071ba:	460d      	mov	r5, r1
 80071bc:	4614      	mov	r4, r2
 80071be:	d510      	bpl.n	80071e2 <_svfiprintf_r+0x36>
 80071c0:	690b      	ldr	r3, [r1, #16]
 80071c2:	b973      	cbnz	r3, 80071e2 <_svfiprintf_r+0x36>
 80071c4:	2140      	movs	r1, #64	@ 0x40
 80071c6:	f7ff ff09 	bl	8006fdc <_malloc_r>
 80071ca:	6028      	str	r0, [r5, #0]
 80071cc:	6128      	str	r0, [r5, #16]
 80071ce:	b930      	cbnz	r0, 80071de <_svfiprintf_r+0x32>
 80071d0:	230c      	movs	r3, #12
 80071d2:	603b      	str	r3, [r7, #0]
 80071d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071d8:	b01d      	add	sp, #116	@ 0x74
 80071da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071de:	2340      	movs	r3, #64	@ 0x40
 80071e0:	616b      	str	r3, [r5, #20]
 80071e2:	2300      	movs	r3, #0
 80071e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071e6:	2320      	movs	r3, #32
 80071e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80071f0:	2330      	movs	r3, #48	@ 0x30
 80071f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007390 <_svfiprintf_r+0x1e4>
 80071f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071fa:	f04f 0901 	mov.w	r9, #1
 80071fe:	4623      	mov	r3, r4
 8007200:	469a      	mov	sl, r3
 8007202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007206:	b10a      	cbz	r2, 800720c <_svfiprintf_r+0x60>
 8007208:	2a25      	cmp	r2, #37	@ 0x25
 800720a:	d1f9      	bne.n	8007200 <_svfiprintf_r+0x54>
 800720c:	ebba 0b04 	subs.w	fp, sl, r4
 8007210:	d00b      	beq.n	800722a <_svfiprintf_r+0x7e>
 8007212:	465b      	mov	r3, fp
 8007214:	4622      	mov	r2, r4
 8007216:	4629      	mov	r1, r5
 8007218:	4638      	mov	r0, r7
 800721a:	f7ff ff6b 	bl	80070f4 <__ssputs_r>
 800721e:	3001      	adds	r0, #1
 8007220:	f000 80a7 	beq.w	8007372 <_svfiprintf_r+0x1c6>
 8007224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007226:	445a      	add	r2, fp
 8007228:	9209      	str	r2, [sp, #36]	@ 0x24
 800722a:	f89a 3000 	ldrb.w	r3, [sl]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 809f 	beq.w	8007372 <_svfiprintf_r+0x1c6>
 8007234:	2300      	movs	r3, #0
 8007236:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800723a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800723e:	f10a 0a01 	add.w	sl, sl, #1
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	9307      	str	r3, [sp, #28]
 8007246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800724a:	931a      	str	r3, [sp, #104]	@ 0x68
 800724c:	4654      	mov	r4, sl
 800724e:	2205      	movs	r2, #5
 8007250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007254:	484e      	ldr	r0, [pc, #312]	@ (8007390 <_svfiprintf_r+0x1e4>)
 8007256:	f7f9 f813 	bl	8000280 <memchr>
 800725a:	9a04      	ldr	r2, [sp, #16]
 800725c:	b9d8      	cbnz	r0, 8007296 <_svfiprintf_r+0xea>
 800725e:	06d0      	lsls	r0, r2, #27
 8007260:	bf44      	itt	mi
 8007262:	2320      	movmi	r3, #32
 8007264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007268:	0711      	lsls	r1, r2, #28
 800726a:	bf44      	itt	mi
 800726c:	232b      	movmi	r3, #43	@ 0x2b
 800726e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007272:	f89a 3000 	ldrb.w	r3, [sl]
 8007276:	2b2a      	cmp	r3, #42	@ 0x2a
 8007278:	d015      	beq.n	80072a6 <_svfiprintf_r+0xfa>
 800727a:	9a07      	ldr	r2, [sp, #28]
 800727c:	4654      	mov	r4, sl
 800727e:	2000      	movs	r0, #0
 8007280:	f04f 0c0a 	mov.w	ip, #10
 8007284:	4621      	mov	r1, r4
 8007286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800728a:	3b30      	subs	r3, #48	@ 0x30
 800728c:	2b09      	cmp	r3, #9
 800728e:	d94b      	bls.n	8007328 <_svfiprintf_r+0x17c>
 8007290:	b1b0      	cbz	r0, 80072c0 <_svfiprintf_r+0x114>
 8007292:	9207      	str	r2, [sp, #28]
 8007294:	e014      	b.n	80072c0 <_svfiprintf_r+0x114>
 8007296:	eba0 0308 	sub.w	r3, r0, r8
 800729a:	fa09 f303 	lsl.w	r3, r9, r3
 800729e:	4313      	orrs	r3, r2
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	46a2      	mov	sl, r4
 80072a4:	e7d2      	b.n	800724c <_svfiprintf_r+0xa0>
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	1d19      	adds	r1, r3, #4
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	9103      	str	r1, [sp, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bfbb      	ittet	lt
 80072b2:	425b      	neglt	r3, r3
 80072b4:	f042 0202 	orrlt.w	r2, r2, #2
 80072b8:	9307      	strge	r3, [sp, #28]
 80072ba:	9307      	strlt	r3, [sp, #28]
 80072bc:	bfb8      	it	lt
 80072be:	9204      	strlt	r2, [sp, #16]
 80072c0:	7823      	ldrb	r3, [r4, #0]
 80072c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80072c4:	d10a      	bne.n	80072dc <_svfiprintf_r+0x130>
 80072c6:	7863      	ldrb	r3, [r4, #1]
 80072c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80072ca:	d132      	bne.n	8007332 <_svfiprintf_r+0x186>
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	1d1a      	adds	r2, r3, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	9203      	str	r2, [sp, #12]
 80072d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072d8:	3402      	adds	r4, #2
 80072da:	9305      	str	r3, [sp, #20]
 80072dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80073a0 <_svfiprintf_r+0x1f4>
 80072e0:	7821      	ldrb	r1, [r4, #0]
 80072e2:	2203      	movs	r2, #3
 80072e4:	4650      	mov	r0, sl
 80072e6:	f7f8 ffcb 	bl	8000280 <memchr>
 80072ea:	b138      	cbz	r0, 80072fc <_svfiprintf_r+0x150>
 80072ec:	9b04      	ldr	r3, [sp, #16]
 80072ee:	eba0 000a 	sub.w	r0, r0, sl
 80072f2:	2240      	movs	r2, #64	@ 0x40
 80072f4:	4082      	lsls	r2, r0
 80072f6:	4313      	orrs	r3, r2
 80072f8:	3401      	adds	r4, #1
 80072fa:	9304      	str	r3, [sp, #16]
 80072fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007300:	4824      	ldr	r0, [pc, #144]	@ (8007394 <_svfiprintf_r+0x1e8>)
 8007302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007306:	2206      	movs	r2, #6
 8007308:	f7f8 ffba 	bl	8000280 <memchr>
 800730c:	2800      	cmp	r0, #0
 800730e:	d036      	beq.n	800737e <_svfiprintf_r+0x1d2>
 8007310:	4b21      	ldr	r3, [pc, #132]	@ (8007398 <_svfiprintf_r+0x1ec>)
 8007312:	bb1b      	cbnz	r3, 800735c <_svfiprintf_r+0x1b0>
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	3307      	adds	r3, #7
 8007318:	f023 0307 	bic.w	r3, r3, #7
 800731c:	3308      	adds	r3, #8
 800731e:	9303      	str	r3, [sp, #12]
 8007320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007322:	4433      	add	r3, r6
 8007324:	9309      	str	r3, [sp, #36]	@ 0x24
 8007326:	e76a      	b.n	80071fe <_svfiprintf_r+0x52>
 8007328:	fb0c 3202 	mla	r2, ip, r2, r3
 800732c:	460c      	mov	r4, r1
 800732e:	2001      	movs	r0, #1
 8007330:	e7a8      	b.n	8007284 <_svfiprintf_r+0xd8>
 8007332:	2300      	movs	r3, #0
 8007334:	3401      	adds	r4, #1
 8007336:	9305      	str	r3, [sp, #20]
 8007338:	4619      	mov	r1, r3
 800733a:	f04f 0c0a 	mov.w	ip, #10
 800733e:	4620      	mov	r0, r4
 8007340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007344:	3a30      	subs	r2, #48	@ 0x30
 8007346:	2a09      	cmp	r2, #9
 8007348:	d903      	bls.n	8007352 <_svfiprintf_r+0x1a6>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0c6      	beq.n	80072dc <_svfiprintf_r+0x130>
 800734e:	9105      	str	r1, [sp, #20]
 8007350:	e7c4      	b.n	80072dc <_svfiprintf_r+0x130>
 8007352:	fb0c 2101 	mla	r1, ip, r1, r2
 8007356:	4604      	mov	r4, r0
 8007358:	2301      	movs	r3, #1
 800735a:	e7f0      	b.n	800733e <_svfiprintf_r+0x192>
 800735c:	ab03      	add	r3, sp, #12
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	462a      	mov	r2, r5
 8007362:	4b0e      	ldr	r3, [pc, #56]	@ (800739c <_svfiprintf_r+0x1f0>)
 8007364:	a904      	add	r1, sp, #16
 8007366:	4638      	mov	r0, r7
 8007368:	f3af 8000 	nop.w
 800736c:	1c42      	adds	r2, r0, #1
 800736e:	4606      	mov	r6, r0
 8007370:	d1d6      	bne.n	8007320 <_svfiprintf_r+0x174>
 8007372:	89ab      	ldrh	r3, [r5, #12]
 8007374:	065b      	lsls	r3, r3, #25
 8007376:	f53f af2d 	bmi.w	80071d4 <_svfiprintf_r+0x28>
 800737a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800737c:	e72c      	b.n	80071d8 <_svfiprintf_r+0x2c>
 800737e:	ab03      	add	r3, sp, #12
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	462a      	mov	r2, r5
 8007384:	4b05      	ldr	r3, [pc, #20]	@ (800739c <_svfiprintf_r+0x1f0>)
 8007386:	a904      	add	r1, sp, #16
 8007388:	4638      	mov	r0, r7
 800738a:	f000 f879 	bl	8007480 <_printf_i>
 800738e:	e7ed      	b.n	800736c <_svfiprintf_r+0x1c0>
 8007390:	0800791c 	.word	0x0800791c
 8007394:	08007926 	.word	0x08007926
 8007398:	00000000 	.word	0x00000000
 800739c:	080070f5 	.word	0x080070f5
 80073a0:	08007922 	.word	0x08007922

080073a4 <_printf_common>:
 80073a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a8:	4616      	mov	r6, r2
 80073aa:	4698      	mov	r8, r3
 80073ac:	688a      	ldr	r2, [r1, #8]
 80073ae:	690b      	ldr	r3, [r1, #16]
 80073b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073b4:	4293      	cmp	r3, r2
 80073b6:	bfb8      	it	lt
 80073b8:	4613      	movlt	r3, r2
 80073ba:	6033      	str	r3, [r6, #0]
 80073bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073c0:	4607      	mov	r7, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	b10a      	cbz	r2, 80073ca <_printf_common+0x26>
 80073c6:	3301      	adds	r3, #1
 80073c8:	6033      	str	r3, [r6, #0]
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	0699      	lsls	r1, r3, #26
 80073ce:	bf42      	ittt	mi
 80073d0:	6833      	ldrmi	r3, [r6, #0]
 80073d2:	3302      	addmi	r3, #2
 80073d4:	6033      	strmi	r3, [r6, #0]
 80073d6:	6825      	ldr	r5, [r4, #0]
 80073d8:	f015 0506 	ands.w	r5, r5, #6
 80073dc:	d106      	bne.n	80073ec <_printf_common+0x48>
 80073de:	f104 0a19 	add.w	sl, r4, #25
 80073e2:	68e3      	ldr	r3, [r4, #12]
 80073e4:	6832      	ldr	r2, [r6, #0]
 80073e6:	1a9b      	subs	r3, r3, r2
 80073e8:	42ab      	cmp	r3, r5
 80073ea:	dc26      	bgt.n	800743a <_printf_common+0x96>
 80073ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073f0:	6822      	ldr	r2, [r4, #0]
 80073f2:	3b00      	subs	r3, #0
 80073f4:	bf18      	it	ne
 80073f6:	2301      	movne	r3, #1
 80073f8:	0692      	lsls	r2, r2, #26
 80073fa:	d42b      	bmi.n	8007454 <_printf_common+0xb0>
 80073fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007400:	4641      	mov	r1, r8
 8007402:	4638      	mov	r0, r7
 8007404:	47c8      	blx	r9
 8007406:	3001      	adds	r0, #1
 8007408:	d01e      	beq.n	8007448 <_printf_common+0xa4>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	6922      	ldr	r2, [r4, #16]
 800740e:	f003 0306 	and.w	r3, r3, #6
 8007412:	2b04      	cmp	r3, #4
 8007414:	bf02      	ittt	eq
 8007416:	68e5      	ldreq	r5, [r4, #12]
 8007418:	6833      	ldreq	r3, [r6, #0]
 800741a:	1aed      	subeq	r5, r5, r3
 800741c:	68a3      	ldr	r3, [r4, #8]
 800741e:	bf0c      	ite	eq
 8007420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007424:	2500      	movne	r5, #0
 8007426:	4293      	cmp	r3, r2
 8007428:	bfc4      	itt	gt
 800742a:	1a9b      	subgt	r3, r3, r2
 800742c:	18ed      	addgt	r5, r5, r3
 800742e:	2600      	movs	r6, #0
 8007430:	341a      	adds	r4, #26
 8007432:	42b5      	cmp	r5, r6
 8007434:	d11a      	bne.n	800746c <_printf_common+0xc8>
 8007436:	2000      	movs	r0, #0
 8007438:	e008      	b.n	800744c <_printf_common+0xa8>
 800743a:	2301      	movs	r3, #1
 800743c:	4652      	mov	r2, sl
 800743e:	4641      	mov	r1, r8
 8007440:	4638      	mov	r0, r7
 8007442:	47c8      	blx	r9
 8007444:	3001      	adds	r0, #1
 8007446:	d103      	bne.n	8007450 <_printf_common+0xac>
 8007448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800744c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007450:	3501      	adds	r5, #1
 8007452:	e7c6      	b.n	80073e2 <_printf_common+0x3e>
 8007454:	18e1      	adds	r1, r4, r3
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	2030      	movs	r0, #48	@ 0x30
 800745a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800745e:	4422      	add	r2, r4
 8007460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007464:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007468:	3302      	adds	r3, #2
 800746a:	e7c7      	b.n	80073fc <_printf_common+0x58>
 800746c:	2301      	movs	r3, #1
 800746e:	4622      	mov	r2, r4
 8007470:	4641      	mov	r1, r8
 8007472:	4638      	mov	r0, r7
 8007474:	47c8      	blx	r9
 8007476:	3001      	adds	r0, #1
 8007478:	d0e6      	beq.n	8007448 <_printf_common+0xa4>
 800747a:	3601      	adds	r6, #1
 800747c:	e7d9      	b.n	8007432 <_printf_common+0x8e>
	...

08007480 <_printf_i>:
 8007480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007484:	7e0f      	ldrb	r7, [r1, #24]
 8007486:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007488:	2f78      	cmp	r7, #120	@ 0x78
 800748a:	4691      	mov	r9, r2
 800748c:	4680      	mov	r8, r0
 800748e:	460c      	mov	r4, r1
 8007490:	469a      	mov	sl, r3
 8007492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007496:	d807      	bhi.n	80074a8 <_printf_i+0x28>
 8007498:	2f62      	cmp	r7, #98	@ 0x62
 800749a:	d80a      	bhi.n	80074b2 <_printf_i+0x32>
 800749c:	2f00      	cmp	r7, #0
 800749e:	f000 80d1 	beq.w	8007644 <_printf_i+0x1c4>
 80074a2:	2f58      	cmp	r7, #88	@ 0x58
 80074a4:	f000 80b8 	beq.w	8007618 <_printf_i+0x198>
 80074a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074b0:	e03a      	b.n	8007528 <_printf_i+0xa8>
 80074b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074b6:	2b15      	cmp	r3, #21
 80074b8:	d8f6      	bhi.n	80074a8 <_printf_i+0x28>
 80074ba:	a101      	add	r1, pc, #4	@ (adr r1, 80074c0 <_printf_i+0x40>)
 80074bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074c0:	08007519 	.word	0x08007519
 80074c4:	0800752d 	.word	0x0800752d
 80074c8:	080074a9 	.word	0x080074a9
 80074cc:	080074a9 	.word	0x080074a9
 80074d0:	080074a9 	.word	0x080074a9
 80074d4:	080074a9 	.word	0x080074a9
 80074d8:	0800752d 	.word	0x0800752d
 80074dc:	080074a9 	.word	0x080074a9
 80074e0:	080074a9 	.word	0x080074a9
 80074e4:	080074a9 	.word	0x080074a9
 80074e8:	080074a9 	.word	0x080074a9
 80074ec:	0800762b 	.word	0x0800762b
 80074f0:	08007557 	.word	0x08007557
 80074f4:	080075e5 	.word	0x080075e5
 80074f8:	080074a9 	.word	0x080074a9
 80074fc:	080074a9 	.word	0x080074a9
 8007500:	0800764d 	.word	0x0800764d
 8007504:	080074a9 	.word	0x080074a9
 8007508:	08007557 	.word	0x08007557
 800750c:	080074a9 	.word	0x080074a9
 8007510:	080074a9 	.word	0x080074a9
 8007514:	080075ed 	.word	0x080075ed
 8007518:	6833      	ldr	r3, [r6, #0]
 800751a:	1d1a      	adds	r2, r3, #4
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6032      	str	r2, [r6, #0]
 8007520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007528:	2301      	movs	r3, #1
 800752a:	e09c      	b.n	8007666 <_printf_i+0x1e6>
 800752c:	6833      	ldr	r3, [r6, #0]
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	1d19      	adds	r1, r3, #4
 8007532:	6031      	str	r1, [r6, #0]
 8007534:	0606      	lsls	r6, r0, #24
 8007536:	d501      	bpl.n	800753c <_printf_i+0xbc>
 8007538:	681d      	ldr	r5, [r3, #0]
 800753a:	e003      	b.n	8007544 <_printf_i+0xc4>
 800753c:	0645      	lsls	r5, r0, #25
 800753e:	d5fb      	bpl.n	8007538 <_printf_i+0xb8>
 8007540:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007544:	2d00      	cmp	r5, #0
 8007546:	da03      	bge.n	8007550 <_printf_i+0xd0>
 8007548:	232d      	movs	r3, #45	@ 0x2d
 800754a:	426d      	negs	r5, r5
 800754c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007550:	4858      	ldr	r0, [pc, #352]	@ (80076b4 <_printf_i+0x234>)
 8007552:	230a      	movs	r3, #10
 8007554:	e011      	b.n	800757a <_printf_i+0xfa>
 8007556:	6821      	ldr	r1, [r4, #0]
 8007558:	6833      	ldr	r3, [r6, #0]
 800755a:	0608      	lsls	r0, r1, #24
 800755c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007560:	d402      	bmi.n	8007568 <_printf_i+0xe8>
 8007562:	0649      	lsls	r1, r1, #25
 8007564:	bf48      	it	mi
 8007566:	b2ad      	uxthmi	r5, r5
 8007568:	2f6f      	cmp	r7, #111	@ 0x6f
 800756a:	4852      	ldr	r0, [pc, #328]	@ (80076b4 <_printf_i+0x234>)
 800756c:	6033      	str	r3, [r6, #0]
 800756e:	bf14      	ite	ne
 8007570:	230a      	movne	r3, #10
 8007572:	2308      	moveq	r3, #8
 8007574:	2100      	movs	r1, #0
 8007576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800757a:	6866      	ldr	r6, [r4, #4]
 800757c:	60a6      	str	r6, [r4, #8]
 800757e:	2e00      	cmp	r6, #0
 8007580:	db05      	blt.n	800758e <_printf_i+0x10e>
 8007582:	6821      	ldr	r1, [r4, #0]
 8007584:	432e      	orrs	r6, r5
 8007586:	f021 0104 	bic.w	r1, r1, #4
 800758a:	6021      	str	r1, [r4, #0]
 800758c:	d04b      	beq.n	8007626 <_printf_i+0x1a6>
 800758e:	4616      	mov	r6, r2
 8007590:	fbb5 f1f3 	udiv	r1, r5, r3
 8007594:	fb03 5711 	mls	r7, r3, r1, r5
 8007598:	5dc7      	ldrb	r7, [r0, r7]
 800759a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800759e:	462f      	mov	r7, r5
 80075a0:	42bb      	cmp	r3, r7
 80075a2:	460d      	mov	r5, r1
 80075a4:	d9f4      	bls.n	8007590 <_printf_i+0x110>
 80075a6:	2b08      	cmp	r3, #8
 80075a8:	d10b      	bne.n	80075c2 <_printf_i+0x142>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	07df      	lsls	r7, r3, #31
 80075ae:	d508      	bpl.n	80075c2 <_printf_i+0x142>
 80075b0:	6923      	ldr	r3, [r4, #16]
 80075b2:	6861      	ldr	r1, [r4, #4]
 80075b4:	4299      	cmp	r1, r3
 80075b6:	bfde      	ittt	le
 80075b8:	2330      	movle	r3, #48	@ 0x30
 80075ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075be:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80075c2:	1b92      	subs	r2, r2, r6
 80075c4:	6122      	str	r2, [r4, #16]
 80075c6:	f8cd a000 	str.w	sl, [sp]
 80075ca:	464b      	mov	r3, r9
 80075cc:	aa03      	add	r2, sp, #12
 80075ce:	4621      	mov	r1, r4
 80075d0:	4640      	mov	r0, r8
 80075d2:	f7ff fee7 	bl	80073a4 <_printf_common>
 80075d6:	3001      	adds	r0, #1
 80075d8:	d14a      	bne.n	8007670 <_printf_i+0x1f0>
 80075da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075de:	b004      	add	sp, #16
 80075e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	f043 0320 	orr.w	r3, r3, #32
 80075ea:	6023      	str	r3, [r4, #0]
 80075ec:	4832      	ldr	r0, [pc, #200]	@ (80076b8 <_printf_i+0x238>)
 80075ee:	2778      	movs	r7, #120	@ 0x78
 80075f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	6831      	ldr	r1, [r6, #0]
 80075f8:	061f      	lsls	r7, r3, #24
 80075fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80075fe:	d402      	bmi.n	8007606 <_printf_i+0x186>
 8007600:	065f      	lsls	r7, r3, #25
 8007602:	bf48      	it	mi
 8007604:	b2ad      	uxthmi	r5, r5
 8007606:	6031      	str	r1, [r6, #0]
 8007608:	07d9      	lsls	r1, r3, #31
 800760a:	bf44      	itt	mi
 800760c:	f043 0320 	orrmi.w	r3, r3, #32
 8007610:	6023      	strmi	r3, [r4, #0]
 8007612:	b11d      	cbz	r5, 800761c <_printf_i+0x19c>
 8007614:	2310      	movs	r3, #16
 8007616:	e7ad      	b.n	8007574 <_printf_i+0xf4>
 8007618:	4826      	ldr	r0, [pc, #152]	@ (80076b4 <_printf_i+0x234>)
 800761a:	e7e9      	b.n	80075f0 <_printf_i+0x170>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	f023 0320 	bic.w	r3, r3, #32
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	e7f6      	b.n	8007614 <_printf_i+0x194>
 8007626:	4616      	mov	r6, r2
 8007628:	e7bd      	b.n	80075a6 <_printf_i+0x126>
 800762a:	6833      	ldr	r3, [r6, #0]
 800762c:	6825      	ldr	r5, [r4, #0]
 800762e:	6961      	ldr	r1, [r4, #20]
 8007630:	1d18      	adds	r0, r3, #4
 8007632:	6030      	str	r0, [r6, #0]
 8007634:	062e      	lsls	r6, r5, #24
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	d501      	bpl.n	800763e <_printf_i+0x1be>
 800763a:	6019      	str	r1, [r3, #0]
 800763c:	e002      	b.n	8007644 <_printf_i+0x1c4>
 800763e:	0668      	lsls	r0, r5, #25
 8007640:	d5fb      	bpl.n	800763a <_printf_i+0x1ba>
 8007642:	8019      	strh	r1, [r3, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	6123      	str	r3, [r4, #16]
 8007648:	4616      	mov	r6, r2
 800764a:	e7bc      	b.n	80075c6 <_printf_i+0x146>
 800764c:	6833      	ldr	r3, [r6, #0]
 800764e:	1d1a      	adds	r2, r3, #4
 8007650:	6032      	str	r2, [r6, #0]
 8007652:	681e      	ldr	r6, [r3, #0]
 8007654:	6862      	ldr	r2, [r4, #4]
 8007656:	2100      	movs	r1, #0
 8007658:	4630      	mov	r0, r6
 800765a:	f7f8 fe11 	bl	8000280 <memchr>
 800765e:	b108      	cbz	r0, 8007664 <_printf_i+0x1e4>
 8007660:	1b80      	subs	r0, r0, r6
 8007662:	6060      	str	r0, [r4, #4]
 8007664:	6863      	ldr	r3, [r4, #4]
 8007666:	6123      	str	r3, [r4, #16]
 8007668:	2300      	movs	r3, #0
 800766a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800766e:	e7aa      	b.n	80075c6 <_printf_i+0x146>
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	4632      	mov	r2, r6
 8007674:	4649      	mov	r1, r9
 8007676:	4640      	mov	r0, r8
 8007678:	47d0      	blx	sl
 800767a:	3001      	adds	r0, #1
 800767c:	d0ad      	beq.n	80075da <_printf_i+0x15a>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	079b      	lsls	r3, r3, #30
 8007682:	d413      	bmi.n	80076ac <_printf_i+0x22c>
 8007684:	68e0      	ldr	r0, [r4, #12]
 8007686:	9b03      	ldr	r3, [sp, #12]
 8007688:	4298      	cmp	r0, r3
 800768a:	bfb8      	it	lt
 800768c:	4618      	movlt	r0, r3
 800768e:	e7a6      	b.n	80075de <_printf_i+0x15e>
 8007690:	2301      	movs	r3, #1
 8007692:	4632      	mov	r2, r6
 8007694:	4649      	mov	r1, r9
 8007696:	4640      	mov	r0, r8
 8007698:	47d0      	blx	sl
 800769a:	3001      	adds	r0, #1
 800769c:	d09d      	beq.n	80075da <_printf_i+0x15a>
 800769e:	3501      	adds	r5, #1
 80076a0:	68e3      	ldr	r3, [r4, #12]
 80076a2:	9903      	ldr	r1, [sp, #12]
 80076a4:	1a5b      	subs	r3, r3, r1
 80076a6:	42ab      	cmp	r3, r5
 80076a8:	dcf2      	bgt.n	8007690 <_printf_i+0x210>
 80076aa:	e7eb      	b.n	8007684 <_printf_i+0x204>
 80076ac:	2500      	movs	r5, #0
 80076ae:	f104 0619 	add.w	r6, r4, #25
 80076b2:	e7f5      	b.n	80076a0 <_printf_i+0x220>
 80076b4:	0800792d 	.word	0x0800792d
 80076b8:	0800793e 	.word	0x0800793e

080076bc <memmove>:
 80076bc:	4288      	cmp	r0, r1
 80076be:	b510      	push	{r4, lr}
 80076c0:	eb01 0402 	add.w	r4, r1, r2
 80076c4:	d902      	bls.n	80076cc <memmove+0x10>
 80076c6:	4284      	cmp	r4, r0
 80076c8:	4623      	mov	r3, r4
 80076ca:	d807      	bhi.n	80076dc <memmove+0x20>
 80076cc:	1e43      	subs	r3, r0, #1
 80076ce:	42a1      	cmp	r1, r4
 80076d0:	d008      	beq.n	80076e4 <memmove+0x28>
 80076d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076da:	e7f8      	b.n	80076ce <memmove+0x12>
 80076dc:	4402      	add	r2, r0
 80076de:	4601      	mov	r1, r0
 80076e0:	428a      	cmp	r2, r1
 80076e2:	d100      	bne.n	80076e6 <memmove+0x2a>
 80076e4:	bd10      	pop	{r4, pc}
 80076e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076ee:	e7f7      	b.n	80076e0 <memmove+0x24>

080076f0 <_sbrk_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d06      	ldr	r5, [pc, #24]	@ (800770c <_sbrk_r+0x1c>)
 80076f4:	2300      	movs	r3, #0
 80076f6:	4604      	mov	r4, r0
 80076f8:	4608      	mov	r0, r1
 80076fa:	602b      	str	r3, [r5, #0]
 80076fc:	f000 f83e 	bl	800777c <_sbrk>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d102      	bne.n	800770a <_sbrk_r+0x1a>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	b103      	cbz	r3, 800770a <_sbrk_r+0x1a>
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	2000483c 	.word	0x2000483c

08007710 <_realloc_r>:
 8007710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007714:	4607      	mov	r7, r0
 8007716:	4614      	mov	r4, r2
 8007718:	460d      	mov	r5, r1
 800771a:	b921      	cbnz	r1, 8007726 <_realloc_r+0x16>
 800771c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007720:	4611      	mov	r1, r2
 8007722:	f7ff bc5b 	b.w	8006fdc <_malloc_r>
 8007726:	b92a      	cbnz	r2, 8007734 <_realloc_r+0x24>
 8007728:	f7ff fbec 	bl	8006f04 <_free_r>
 800772c:	4625      	mov	r5, r4
 800772e:	4628      	mov	r0, r5
 8007730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007734:	f000 f81a 	bl	800776c <_malloc_usable_size_r>
 8007738:	4284      	cmp	r4, r0
 800773a:	4606      	mov	r6, r0
 800773c:	d802      	bhi.n	8007744 <_realloc_r+0x34>
 800773e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007742:	d8f4      	bhi.n	800772e <_realloc_r+0x1e>
 8007744:	4621      	mov	r1, r4
 8007746:	4638      	mov	r0, r7
 8007748:	f7ff fc48 	bl	8006fdc <_malloc_r>
 800774c:	4680      	mov	r8, r0
 800774e:	b908      	cbnz	r0, 8007754 <_realloc_r+0x44>
 8007750:	4645      	mov	r5, r8
 8007752:	e7ec      	b.n	800772e <_realloc_r+0x1e>
 8007754:	42b4      	cmp	r4, r6
 8007756:	4622      	mov	r2, r4
 8007758:	4629      	mov	r1, r5
 800775a:	bf28      	it	cs
 800775c:	4632      	movcs	r2, r6
 800775e:	f7ff fbc3 	bl	8006ee8 <memcpy>
 8007762:	4629      	mov	r1, r5
 8007764:	4638      	mov	r0, r7
 8007766:	f7ff fbcd 	bl	8006f04 <_free_r>
 800776a:	e7f1      	b.n	8007750 <_realloc_r+0x40>

0800776c <_malloc_usable_size_r>:
 800776c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007770:	1f18      	subs	r0, r3, #4
 8007772:	2b00      	cmp	r3, #0
 8007774:	bfbc      	itt	lt
 8007776:	580b      	ldrlt	r3, [r1, r0]
 8007778:	18c0      	addlt	r0, r0, r3
 800777a:	4770      	bx	lr

0800777c <_sbrk>:
 800777c:	4a04      	ldr	r2, [pc, #16]	@ (8007790 <_sbrk+0x14>)
 800777e:	6811      	ldr	r1, [r2, #0]
 8007780:	4603      	mov	r3, r0
 8007782:	b909      	cbnz	r1, 8007788 <_sbrk+0xc>
 8007784:	4903      	ldr	r1, [pc, #12]	@ (8007794 <_sbrk+0x18>)
 8007786:	6011      	str	r1, [r2, #0]
 8007788:	6810      	ldr	r0, [r2, #0]
 800778a:	4403      	add	r3, r0
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	4770      	bx	lr
 8007790:	2000484c 	.word	0x2000484c
 8007794:	20004850 	.word	0x20004850

08007798 <_init>:
 8007798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779a:	bf00      	nop
 800779c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779e:	bc08      	pop	{r3}
 80077a0:	469e      	mov	lr, r3
 80077a2:	4770      	bx	lr

080077a4 <_fini>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	bf00      	nop
 80077a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077aa:	bc08      	pop	{r3}
 80077ac:	469e      	mov	lr, r3
 80077ae:	4770      	bx	lr
