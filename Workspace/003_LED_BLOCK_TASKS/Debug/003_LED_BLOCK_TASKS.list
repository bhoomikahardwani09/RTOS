
003_LED_BLOCK_TASKS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c84  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08006e24  08006e24  00007e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd8  08006fd8  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006fd8  08006fd8  00007fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe0  08006fe0  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe0  08006fe0  00007fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fe4  08006fe4  00007fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006fe8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004694  20000010  08006ff8  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200046a4  08006ff8  000086a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ad3  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003221  00000000  00000000  0001db13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00020d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc5  00000000  00000000  000221b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a363  00000000  00000000  0002317d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bf3  00000000  00000000  0003d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac345  00000000  00000000  000530d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f0  00000000  00000000  000ff45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000dc  00000000  00000000  00104a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e0c 	.word	0x08006e0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006e0c 	.word	0x08006e0c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200030d0 	.word	0x200030d0

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000288:	f000 b988 	b.w	800059c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	468e      	mov	lr, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	4688      	mov	r8, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d962      	bls.n	8000380 <__udivmoddi4+0xdc>
 80002ba:	fab2 f682 	clz	r6, r2
 80002be:	b14e      	cbz	r6, 80002d4 <__udivmoddi4+0x30>
 80002c0:	f1c6 0320 	rsb	r3, r6, #32
 80002c4:	fa01 f806 	lsl.w	r8, r1, r6
 80002c8:	fa20 f303 	lsr.w	r3, r0, r3
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	ea43 0808 	orr.w	r8, r3, r8
 80002d2:	40b4      	lsls	r4, r6
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f fc87 	uxth.w	ip, r7
 80002dc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f8:	f080 80ea 	bcs.w	80004d0 <__udivmoddi4+0x22c>
 80002fc:	429a      	cmp	r2, r3
 80002fe:	f240 80e7 	bls.w	80004d0 <__udivmoddi4+0x22c>
 8000302:	3902      	subs	r1, #2
 8000304:	443b      	add	r3, r7
 8000306:	1a9a      	subs	r2, r3, r2
 8000308:	b2a3      	uxth	r3, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb00 fc0c 	mul.w	ip, r0, ip
 800031a:	459c      	cmp	ip, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x8e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000324:	f080 80d6 	bcs.w	80004d4 <__udivmoddi4+0x230>
 8000328:	459c      	cmp	ip, r3
 800032a:	f240 80d3 	bls.w	80004d4 <__udivmoddi4+0x230>
 800032e:	443b      	add	r3, r7
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000336:	eba3 030c 	sub.w	r3, r3, ip
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa2>
 800033e:	40f3      	lsrs	r3, r6
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xb6>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb0>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa2>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x14c>
 8000362:	4573      	cmp	r3, lr
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xc8>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 8105 	bhi.w	8000576 <__udivmoddi4+0x2d2>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000372:	2001      	movs	r0, #1
 8000374:	4690      	mov	r8, r2
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e5      	beq.n	8000346 <__udivmoddi4+0xa2>
 800037a:	e9c5 4800 	strd	r4, r8, [r5]
 800037e:	e7e2      	b.n	8000346 <__udivmoddi4+0xa2>
 8000380:	2a00      	cmp	r2, #0
 8000382:	f000 8090 	beq.w	80004a6 <__udivmoddi4+0x202>
 8000386:	fab2 f682 	clz	r6, r2
 800038a:	2e00      	cmp	r6, #0
 800038c:	f040 80a4 	bne.w	80004d8 <__udivmoddi4+0x234>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	0c03      	lsrs	r3, r0, #16
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	b280      	uxth	r0, r0
 800039a:	b2bc      	uxth	r4, r7
 800039c:	2101      	movs	r1, #1
 800039e:	fbb2 fcfe 	udiv	ip, r2, lr
 80003a2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003aa:	fb04 f20c 	mul.w	r2, r4, ip
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d907      	bls.n	80003c2 <__udivmoddi4+0x11e>
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b8:	d202      	bcs.n	80003c0 <__udivmoddi4+0x11c>
 80003ba:	429a      	cmp	r2, r3
 80003bc:	f200 80e0 	bhi.w	8000580 <__udivmoddi4+0x2dc>
 80003c0:	46c4      	mov	ip, r8
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003cc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003d0:	fb02 f404 	mul.w	r4, r2, r4
 80003d4:	429c      	cmp	r4, r3
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x144>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x142>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f200 80ca 	bhi.w	800057a <__udivmoddi4+0x2d6>
 80003e6:	4602      	mov	r2, r0
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x98>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa0e f401 	lsl.w	r4, lr, r1
 8000400:	fa20 f306 	lsr.w	r3, r0, r6
 8000404:	fa2e fe06 	lsr.w	lr, lr, r6
 8000408:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800040c:	4323      	orrs	r3, r4
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	fa1f fc87 	uxth.w	ip, r7
 8000416:	fbbe f0f9 	udiv	r0, lr, r9
 800041a:	0c1c      	lsrs	r4, r3, #16
 800041c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000420:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000424:	fb00 fe0c 	mul.w	lr, r0, ip
 8000428:	45a6      	cmp	lr, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d909      	bls.n	8000444 <__udivmoddi4+0x1a0>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000436:	f080 809c 	bcs.w	8000572 <__udivmoddi4+0x2ce>
 800043a:	45a6      	cmp	lr, r4
 800043c:	f240 8099 	bls.w	8000572 <__udivmoddi4+0x2ce>
 8000440:	3802      	subs	r0, #2
 8000442:	443c      	add	r4, r7
 8000444:	eba4 040e 	sub.w	r4, r4, lr
 8000448:	fa1f fe83 	uxth.w	lr, r3
 800044c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000450:	fb09 4413 	mls	r4, r9, r3, r4
 8000454:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000458:	fb03 fc0c 	mul.w	ip, r3, ip
 800045c:	45a4      	cmp	ip, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x1ce>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000466:	f080 8082 	bcs.w	800056e <__udivmoddi4+0x2ca>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d97f      	bls.n	800056e <__udivmoddi4+0x2ca>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000476:	eba4 040c 	sub.w	r4, r4, ip
 800047a:	fba0 ec02 	umull	lr, ip, r0, r2
 800047e:	4564      	cmp	r4, ip
 8000480:	4673      	mov	r3, lr
 8000482:	46e1      	mov	r9, ip
 8000484:	d362      	bcc.n	800054c <__udivmoddi4+0x2a8>
 8000486:	d05f      	beq.n	8000548 <__udivmoddi4+0x2a4>
 8000488:	b15d      	cbz	r5, 80004a2 <__udivmoddi4+0x1fe>
 800048a:	ebb8 0203 	subs.w	r2, r8, r3
 800048e:	eb64 0409 	sbc.w	r4, r4, r9
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	fa22 f301 	lsr.w	r3, r2, r1
 800049a:	431e      	orrs	r6, r3
 800049c:	40cc      	lsrs	r4, r1
 800049e:	e9c5 6400 	strd	r6, r4, [r5]
 80004a2:	2100      	movs	r1, #0
 80004a4:	e74f      	b.n	8000346 <__udivmoddi4+0xa2>
 80004a6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004aa:	0c01      	lsrs	r1, r0, #16
 80004ac:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004b0:	b280      	uxth	r0, r0
 80004b2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b6:	463b      	mov	r3, r7
 80004b8:	4638      	mov	r0, r7
 80004ba:	463c      	mov	r4, r7
 80004bc:	46b8      	mov	r8, r7
 80004be:	46be      	mov	lr, r7
 80004c0:	2620      	movs	r6, #32
 80004c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c6:	eba2 0208 	sub.w	r2, r2, r8
 80004ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ce:	e766      	b.n	800039e <__udivmoddi4+0xfa>
 80004d0:	4601      	mov	r1, r0
 80004d2:	e718      	b.n	8000306 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e72c      	b.n	8000332 <__udivmoddi4+0x8e>
 80004d8:	f1c6 0220 	rsb	r2, r6, #32
 80004dc:	fa2e f302 	lsr.w	r3, lr, r2
 80004e0:	40b7      	lsls	r7, r6
 80004e2:	40b1      	lsls	r1, r6
 80004e4:	fa20 f202 	lsr.w	r2, r0, r2
 80004e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004ec:	430a      	orrs	r2, r1
 80004ee:	fbb3 f8fe 	udiv	r8, r3, lr
 80004f2:	b2bc      	uxth	r4, r7
 80004f4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f8:	0c11      	lsrs	r1, r2, #16
 80004fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fe:	fb08 f904 	mul.w	r9, r8, r4
 8000502:	40b0      	lsls	r0, r6
 8000504:	4589      	cmp	r9, r1
 8000506:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800050a:	b280      	uxth	r0, r0
 800050c:	d93e      	bls.n	800058c <__udivmoddi4+0x2e8>
 800050e:	1879      	adds	r1, r7, r1
 8000510:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000514:	d201      	bcs.n	800051a <__udivmoddi4+0x276>
 8000516:	4589      	cmp	r9, r1
 8000518:	d81f      	bhi.n	800055a <__udivmoddi4+0x2b6>
 800051a:	eba1 0109 	sub.w	r1, r1, r9
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	fb0e 1119 	mls	r1, lr, r9, r1
 800052a:	b292      	uxth	r2, r2
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	4542      	cmp	r2, r8
 8000532:	d229      	bcs.n	8000588 <__udivmoddi4+0x2e4>
 8000534:	18ba      	adds	r2, r7, r2
 8000536:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800053a:	d2c4      	bcs.n	80004c6 <__udivmoddi4+0x222>
 800053c:	4542      	cmp	r2, r8
 800053e:	d2c2      	bcs.n	80004c6 <__udivmoddi4+0x222>
 8000540:	f1a9 0102 	sub.w	r1, r9, #2
 8000544:	443a      	add	r2, r7
 8000546:	e7be      	b.n	80004c6 <__udivmoddi4+0x222>
 8000548:	45f0      	cmp	r8, lr
 800054a:	d29d      	bcs.n	8000488 <__udivmoddi4+0x1e4>
 800054c:	ebbe 0302 	subs.w	r3, lr, r2
 8000550:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000554:	3801      	subs	r0, #1
 8000556:	46e1      	mov	r9, ip
 8000558:	e796      	b.n	8000488 <__udivmoddi4+0x1e4>
 800055a:	eba7 0909 	sub.w	r9, r7, r9
 800055e:	4449      	add	r1, r9
 8000560:	f1a8 0c02 	sub.w	ip, r8, #2
 8000564:	fbb1 f9fe 	udiv	r9, r1, lr
 8000568:	fb09 f804 	mul.w	r8, r9, r4
 800056c:	e7db      	b.n	8000526 <__udivmoddi4+0x282>
 800056e:	4673      	mov	r3, lr
 8000570:	e77f      	b.n	8000472 <__udivmoddi4+0x1ce>
 8000572:	4650      	mov	r0, sl
 8000574:	e766      	b.n	8000444 <__udivmoddi4+0x1a0>
 8000576:	4608      	mov	r0, r1
 8000578:	e6fd      	b.n	8000376 <__udivmoddi4+0xd2>
 800057a:	443b      	add	r3, r7
 800057c:	3a02      	subs	r2, #2
 800057e:	e733      	b.n	80003e8 <__udivmoddi4+0x144>
 8000580:	f1ac 0c02 	sub.w	ip, ip, #2
 8000584:	443b      	add	r3, r7
 8000586:	e71c      	b.n	80003c2 <__udivmoddi4+0x11e>
 8000588:	4649      	mov	r1, r9
 800058a:	e79c      	b.n	80004c6 <__udivmoddi4+0x222>
 800058c:	eba1 0109 	sub.w	r1, r1, r9
 8000590:	46c4      	mov	ip, r8
 8000592:	fbb1 f9fe 	udiv	r9, r1, lr
 8000596:	fb09 f804 	mul.w	r8, r9, r4
 800059a:	e7c4      	b.n	8000526 <__udivmoddi4+0x282>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	@ 0x28
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 faa9 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f877 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8d3 	bl	8000758 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //enable the cycle count//
  DWT_CTRL |= (1 << 0);
 80005b2:	4b30      	ldr	r3, [pc, #192]	@ (8000674 <main+0xd4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000674 <main+0xd4>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6013      	str	r3, [r2, #0]

//  SEGGER_UART_init(50000);

  //calling the APIs to start recording
  SEGGER_SYSVIEW_Conf();
 80005be:	f004 fb09 	bl	8004bd4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005c2:	f005 fd5b 	bl	800607c <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led1_handler, "Task-1", configMINIMAL_STACK_SIZE * 2, "Executing task-1", 2, &task1_handler);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2302      	movs	r3, #2
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <main+0xd8>)
 80005d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005d6:	4929      	ldr	r1, [pc, #164]	@ (800067c <main+0xdc>)
 80005d8:	4829      	ldr	r0, [pc, #164]	@ (8000680 <main+0xe0>)
 80005da:	f002 f8c1 	bl	8002760 <xTaskCreate>
 80005de:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00b      	beq.n	80005fe <main+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <main+0x5a>

  status = xTaskCreate(led2_handler, "Task-2", configMINIMAL_STACK_SIZE * 2, "Executing task-2", 2, &task2_handler);
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	2302      	movs	r3, #2
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <main+0xe4>)
 800060a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800060e:	491e      	ldr	r1, [pc, #120]	@ (8000688 <main+0xe8>)
 8000610:	481e      	ldr	r0, [pc, #120]	@ (800068c <main+0xec>)
 8000612:	f002 f8a5 	bl	8002760 <xTaskCreate>
 8000616:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d00b      	beq.n	8000636 <main+0x96>
    __asm volatile
 800061e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000622:	f383 8811 	msr	BASEPRI, r3
 8000626:	f3bf 8f6f 	isb	sy
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	617b      	str	r3, [r7, #20]
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	e7fd      	b.n	8000632 <main+0x92>

  status = xTaskCreate(led3_handler, "Task-3", configMINIMAL_STACK_SIZE * 2, "Executing task-3", 2, &task3_handler);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2302      	movs	r3, #2
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <main+0xf0>)
 8000640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000644:	4913      	ldr	r1, [pc, #76]	@ (8000694 <main+0xf4>)
 8000646:	4814      	ldr	r0, [pc, #80]	@ (8000698 <main+0xf8>)
 8000648:	f002 f88a 	bl	8002760 <xTaskCreate>
 800064c:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00b      	beq.n	800066c <main+0xcc>
    __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	613b      	str	r3, [r7, #16]
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <main+0xc8>

  //Starting the FreeRTOS Scheduler//
  vTaskStartScheduler();
 800066c:	f002 fa8a 	bl	8002b84 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <main+0xd0>
 8000674:	e0001000 	.word	0xe0001000
 8000678:	08006e24 	.word	0x08006e24
 800067c:	08006e38 	.word	0x08006e38
 8000680:	08000811 	.word	0x08000811
 8000684:	08006e40 	.word	0x08006e40
 8000688:	08006e54 	.word	0x08006e54
 800068c:	08000841 	.word	0x08000841
 8000690:	08006e5c 	.word	0x08006e5c
 8000694:	08006e70 	.word	0x08006e70
 8000698:	08000871 	.word	0x08000871

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 fb74 	bl	8006d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <SystemClock_Config+0xb4>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SystemClock_Config+0xb4>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xb4>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <SystemClock_Config+0xb8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000754 <SystemClock_Config+0xb8>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <SystemClock_Config+0xb8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fcf1 	bl	80010f4 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000718:	f000 f8d9 	bl	80008ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f000 ff54 	bl	80015e4 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000742:	f000 f8c4 	bl	80008ce <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	@ 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a1c      	ldr	r2, [pc, #112]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_GPIO_Init+0xac>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ac:	4816      	ldr	r0, [pc, #88]	@ (8000808 <MX_GPIO_Init+0xb0>)
 80007ae:	f000 fc4d 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80007b8:	4814      	ldr	r0, [pc, #80]	@ (800080c <MX_GPIO_Init+0xb4>)
 80007ba:	f000 fc47 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	@ (8000808 <MX_GPIO_Init+0xb0>)
 80007d8:	f000 fab4 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007dc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_GPIO_Init+0xb4>)
 80007f6:	f000 faa5 	bl	8000d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020800 	.word	0x40020800
 800080c:	40020400 	.word	0x40020400

08000810 <led1_handler>:

/* USER CODE BEGIN 4 */
static void led1_handler(void* parameters)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <led1_handler+0x28>)
 800081a:	f006 fa3d 	bl	8006c98 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800081e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <led1_handler+0x2c>)
 8000824:	f000 fc2b 	bl	800107e <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000828:	f04f 0064 	mov.w	r0, #100	@ 0x64
 800082c:	f04f 0100 	mov.w	r1, #0
 8000830:	f002 f904 	bl	8002a3c <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000834:	bf00      	nop
 8000836:	e7ef      	b.n	8000818 <led1_handler+0x8>
 8000838:	08006e78 	.word	0x08006e78
 800083c:	40020800 	.word	0x40020800

08000840 <led2_handler>:
//		taskYIELD();
	}
}
static void led2_handler(void* parameters)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling B13 Pin");
 8000848:	4807      	ldr	r0, [pc, #28]	@ (8000868 <led2_handler+0x28>)
 800084a:	f006 fa25 	bl	8006c98 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800084e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <led2_handler+0x2c>)
 8000854:	f000 fc13 	bl	800107e <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(800));
 8000858:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800085c:	f04f 0100 	mov.w	r1, #0
 8000860:	f002 f8ec 	bl	8002a3c <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling B13 Pin");
 8000864:	bf00      	nop
 8000866:	e7ef      	b.n	8000848 <led2_handler+0x8>
 8000868:	08006e8c 	.word	0x08006e8c
 800086c:	40020400 	.word	0x40020400

08000870 <led3_handler>:
//		taskYIELD();
	}
}
static void led3_handler(void* parameters)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling B14 Pin");
 8000878:	4807      	ldr	r0, [pc, #28]	@ (8000898 <led3_handler+0x28>)
 800087a:	f006 fa0d 	bl	8006c98 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800087e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <led3_handler+0x2c>)
 8000884:	f000 fbfb 	bl	800107e <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(400));
 8000888:	f04f 0028 	mov.w	r0, #40	@ 0x28
 800088c:	f04f 0100 	mov.w	r1, #0
 8000890:	f002 f8d4 	bl	8002a3c <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling B14 Pin");
 8000894:	bf00      	nop
 8000896:	e7ef      	b.n	8000878 <led3_handler+0x8>
 8000898:	08006ea0 	.word	0x08006ea0
 800089c:	40020400 	.word	0x40020400

080008a0 <vApplicationIdleHook>:
	}

}

void vApplicationIdleHook(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80008a4:	2101      	movs	r1, #1
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 fc04 	bl	80010b4 <HAL_PWR_EnterSLEEPMode>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008c2:	f000 f93d 	bl	8000b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d2:	b672      	cpsid	i
}
 80008d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d6:	bf00      	nop
 80008d8:	e7fd      	b.n	80008d6 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	@ 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800091a:	f003 fd23 	bl	8004364 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4b34      	ldr	r3, [pc, #208]	@ (8000a14 <HAL_InitTick+0xe8>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a33      	ldr	r2, [pc, #204]	@ (8000a14 <HAL_InitTick+0xe8>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
 800094c:	4b31      	ldr	r3, [pc, #196]	@ (8000a14 <HAL_InitTick+0xe8>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f80a 	bl	800197c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800096c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000972:	f000 ffef 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8000976:	6378      	str	r0, [r7, #52]	@ 0x34
 8000978:	e004      	b.n	8000984 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800097a:	f000 ffeb 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 800097e:	4603      	mov	r3, r0
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000986:	4a24      	ldr	r2, [pc, #144]	@ (8000a18 <HAL_InitTick+0xec>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	0c9b      	lsrs	r3, r3, #18
 800098e:	3b01      	subs	r3, #1
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000992:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <HAL_InitTick+0xf0>)
 8000994:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000998:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800099a:	4b20      	ldr	r3, [pc, #128]	@ (8000a1c <HAL_InitTick+0xf0>)
 800099c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009a0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009a2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80009ba:	4818      	ldr	r0, [pc, #96]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009bc:	f001 f810 	bl	80019e0 <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d11b      	bne.n	8000a06 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80009ce:	4813      	ldr	r0, [pc, #76]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009d0:	f001 f860 	bl	8001a94 <HAL_TIM_Base_Start_IT>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d111      	bne.n	8000a06 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009e2:	201c      	movs	r0, #28
 80009e4:	f000 f9a0 	bl	8000d28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	d808      	bhi.n	8000a00 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80009ee:	2200      	movs	r2, #0
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	201c      	movs	r0, #28
 80009f4:	f000 f97c 	bl	8000cf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f8:	4a09      	ldr	r2, [pc, #36]	@ (8000a20 <HAL_InitTick+0xf4>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
 80009fe:	e002      	b.n	8000a06 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3738      	adds	r7, #56	@ 0x38
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	431bde83 	.word	0x431bde83
 8000a1c:	2000002c 	.word	0x2000002c
 8000a20:	20000004 	.word	0x20000004

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <SysTick_Handler>:
void SysTick_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a5e:	f002 feeb 	bl	8003838 <xTaskGetSchedulerState>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d001      	beq.n	8000a6c <SysTick_Handler+0x12>
    {
        xPortSysTickHandler();
 8000a68:	f003 fd7e 	bl	8004568 <xPortSysTickHandler>
    }
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <TIM2_IRQHandler+0x10>)
 8000a76:	f001 f86f 	bl	8001b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000002c 	.word	0x2000002c

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aac:	f7ff ffea 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	@ (8000ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8000aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8000af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f006 f967 	bl	8006da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fd61 	bl	80005a0 <main>
  bx  lr    
 8000ade:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aec:	08006fe8 	.word	0x08006fe8
  ldr r2, =_sbss
 8000af0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000af4:	200046a4 	.word	0x200046a4

08000af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b00:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <HAL_Init+0x40>)
 8000b06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <HAL_Init+0x40>)
 8000b12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	@ (8000b3c <HAL_Init+0x40>)
 8000b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f8d8 	bl	8000cda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f7ff fefe 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fed4 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023c00 	.word	0x40023c00

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000074 	.word	0x20000074

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000074 	.word	0x20000074

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	@ (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	@ (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	@ (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	@ 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	@ 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ff4c 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d02:	f7ff ff61 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	68b9      	ldr	r1, [r7, #8]
 8000d0c:	6978      	ldr	r0, [r7, #20]
 8000d0e:	f7ff ffb1 	bl	8000c74 <NVIC_EncodePriority>
 8000d12:	4602      	mov	r2, r0
 8000d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff80 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff54 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	e159      	b.n	8001014 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d60:	2201      	movs	r2, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f040 8148 	bne.w	800100e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d005      	beq.n	8000d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d130      	bne.n	8000df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	f003 0201 	and.w	r2, r3, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d017      	beq.n	8000e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d123      	bne.n	8000e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	220f      	movs	r2, #15
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	69b9      	ldr	r1, [r7, #24]
 8000e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0203 	and.w	r2, r3, #3
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80a2 	beq.w	800100e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b57      	ldr	r3, [pc, #348]	@ (800102c <HAL_GPIO_Init+0x2e8>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	4a56      	ldr	r2, [pc, #344]	@ (800102c <HAL_GPIO_Init+0x2e8>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eda:	4b54      	ldr	r3, [pc, #336]	@ (800102c <HAL_GPIO_Init+0x2e8>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee6:	4a52      	ldr	r2, [pc, #328]	@ (8001030 <HAL_GPIO_Init+0x2ec>)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a49      	ldr	r2, [pc, #292]	@ (8001034 <HAL_GPIO_Init+0x2f0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0x202>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a48      	ldr	r2, [pc, #288]	@ (8001038 <HAL_GPIO_Init+0x2f4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x1fe>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a47      	ldr	r2, [pc, #284]	@ (800103c <HAL_GPIO_Init+0x2f8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x1fa>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a46      	ldr	r2, [pc, #280]	@ (8001040 <HAL_GPIO_Init+0x2fc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x1f6>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a45      	ldr	r2, [pc, #276]	@ (8001044 <HAL_GPIO_Init+0x300>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x1f2>
 8000f32:	2304      	movs	r3, #4
 8000f34:	e008      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f36:	2307      	movs	r3, #7
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x204>
 8000f46:	2300      	movs	r3, #0
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f58:	4935      	ldr	r1, [pc, #212]	@ (8001030 <HAL_GPIO_Init+0x2ec>)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f66:	4b38      	ldr	r3, [pc, #224]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb4:	4a24      	ldr	r2, [pc, #144]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fba:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fde:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001008:	4a0f      	ldr	r2, [pc, #60]	@ (8001048 <HAL_GPIO_Init+0x304>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3301      	adds	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	f67f aea2 	bls.w	8000d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3724      	adds	r7, #36	@ 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40013800 	.word	0x40013800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40013c00 	.word	0x40013c00

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	041a      	lsls	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800107e:	b480      	push	{r7}
 8001080:	b085      	sub	sp, #20
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001090:	887a      	ldrh	r2, [r7, #2]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	041a      	lsls	r2, r3, #16
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43d9      	mvns	r1, r3
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	400b      	ands	r3, r1
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <HAL_PWR_EnterSLEEPMode+0x3c>)
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <HAL_PWR_EnterSLEEPMode+0x3c>)
 80010c6:	f023 0304 	bic.w	r3, r3, #4
 80010ca:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80010d2:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 80010d4:	e005      	b.n	80010e2 <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d001      	beq.n	80010e0 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 80010dc:	bf40      	sev
      __WFE();
 80010de:	bf20      	wfe
    __WFE();
 80010e0:	bf20      	wfe
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e267      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d075      	beq.n	80011fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001112:	4b88      	ldr	r3, [pc, #544]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	2b04      	cmp	r3, #4
 800111c:	d00c      	beq.n	8001138 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4b85      	ldr	r3, [pc, #532]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001126:	2b08      	cmp	r3, #8
 8001128:	d112      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112a:	4b82      	ldr	r3, [pc, #520]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001132:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001136:	d10b      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	4b7e      	ldr	r3, [pc, #504]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d05b      	beq.n	80011fc <HAL_RCC_OscConfig+0x108>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d157      	bne.n	80011fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e242      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001158:	d106      	bne.n	8001168 <HAL_RCC_OscConfig+0x74>
 800115a:	4b76      	ldr	r3, [pc, #472]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a75      	ldr	r2, [pc, #468]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e01d      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x98>
 8001172:	4b70      	ldr	r3, [pc, #448]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a6f      	ldr	r2, [pc, #444]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b6d      	ldr	r3, [pc, #436]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6c      	ldr	r2, [pc, #432]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 800118c:	4b69      	ldr	r3, [pc, #420]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a68      	ldr	r2, [pc, #416]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b66      	ldr	r3, [pc, #408]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a65      	ldr	r2, [pc, #404]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fcdc 	bl	8000b68 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fcd8 	bl	8000b68 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	@ 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e207      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xc0>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fcc8 	bl	8000b68 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fcc4 	bl	8000b68 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	@ 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1f3      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	4b51      	ldr	r3, [pc, #324]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0xe8>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d063      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800120a:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b47      	ldr	r3, [pc, #284]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800121e:	2b08      	cmp	r3, #8
 8001220:	d11c      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b44      	ldr	r3, [pc, #272]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	4b41      	ldr	r3, [pc, #260]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e1c7      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b3b      	ldr	r3, [pc, #236]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4937      	ldr	r1, [pc, #220]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	e03a      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001264:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <HAL_RCC_OscConfig+0x244>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126a:	f7ff fc7d 	bl	8000b68 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fc79 	bl	8000b68 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1a8      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	4b2b      	ldr	r3, [pc, #172]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001290:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4925      	ldr	r1, [pc, #148]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a6:	4b24      	ldr	r3, [pc, #144]	@ (8001338 <HAL_RCC_OscConfig+0x244>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc5c 	bl	8000b68 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fc58 	bl	8000b68 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e187      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d036      	beq.n	800134c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d016      	beq.n	8001314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_RCC_OscConfig+0x248>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ec:	f7ff fc3c 	bl	8000b68 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fc38 	bl	8000b68 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e167      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x200>
 8001312:	e01b      	b.n	800134c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_RCC_OscConfig+0x248>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fc25 	bl	8000b68 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	e00e      	b.n	8001340 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001322:	f7ff fc21 	bl	8000b68 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d907      	bls.n	8001340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e150      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
 8001334:	40023800 	.word	0x40023800
 8001338:	42470000 	.word	0x42470000
 800133c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	4b88      	ldr	r3, [pc, #544]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1ea      	bne.n	8001322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 8097 	beq.w	8001488 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135e:	4b81      	ldr	r3, [pc, #516]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10f      	bne.n	800138a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b7d      	ldr	r3, [pc, #500]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	4a7c      	ldr	r2, [pc, #496]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	@ 0x40
 800137a:	4b7a      	ldr	r3, [pc, #488]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001386:	2301      	movs	r3, #1
 8001388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b77      	ldr	r3, [pc, #476]	@ (8001568 <HAL_RCC_OscConfig+0x474>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d118      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001396:	4b74      	ldr	r3, [pc, #464]	@ (8001568 <HAL_RCC_OscConfig+0x474>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a73      	ldr	r2, [pc, #460]	@ (8001568 <HAL_RCC_OscConfig+0x474>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fbe1 	bl	8000b68 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013aa:	f7ff fbdd 	bl	8000b68 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e10c      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001568 <HAL_RCC_OscConfig+0x474>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x2ea>
 80013d0:	4b64      	ldr	r3, [pc, #400]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d4:	4a63      	ldr	r2, [pc, #396]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6713      	str	r3, [r2, #112]	@ 0x70
 80013dc:	e01c      	b.n	8001418 <HAL_RCC_OscConfig+0x324>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x30c>
 80013e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0x324>
 8001400:	4b58      	ldr	r3, [pc, #352]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001404:	4a57      	ldr	r2, [pc, #348]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	@ 0x70
 800140c:	4b55      	ldr	r3, [pc, #340]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001410:	4a54      	ldr	r2, [pc, #336]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001412:	f023 0304 	bic.w	r3, r3, #4
 8001416:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d015      	beq.n	800144c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001420:	f7ff fba2 	bl	8000b68 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001426:	e00a      	b.n	800143e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001428:	f7ff fb9e 	bl	8000b68 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e0cb      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143e:	4b49      	ldr	r3, [pc, #292]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0ee      	beq.n	8001428 <HAL_RCC_OscConfig+0x334>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144c:	f7ff fb8c 	bl	8000b68 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001452:	e00a      	b.n	800146a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001454:	f7ff fb88 	bl	8000b68 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e0b5      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146a:	4b3e      	ldr	r3, [pc, #248]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ee      	bne.n	8001454 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001476:	7dfb      	ldrb	r3, [r7, #23]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147c:	4b39      	ldr	r3, [pc, #228]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	4a38      	ldr	r2, [pc, #224]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80a1 	beq.w	80015d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001492:	4b34      	ldr	r3, [pc, #208]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b08      	cmp	r3, #8
 800149c:	d05c      	beq.n	8001558 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d141      	bne.n	800152a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b31      	ldr	r3, [pc, #196]	@ (800156c <HAL_RCC_OscConfig+0x478>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb5c 	bl	8000b68 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fb58 	bl	8000b68 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e087      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	4b27      	ldr	r3, [pc, #156]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69da      	ldr	r2, [r3, #28]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	019b      	lsls	r3, r3, #6
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	3b01      	subs	r3, #1
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	491b      	ldr	r1, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_RCC_OscConfig+0x478>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fb31 	bl	8000b68 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff fb2d 	bl	8000b68 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e05c      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x416>
 8001528:	e054      	b.n	80015d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <HAL_RCC_OscConfig+0x478>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fb1a 	bl	8000b68 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fb16 	bl	8000b68 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e045      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x444>
 8001556:	e03d      	b.n	80015d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e038      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000
 800156c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <HAL_RCC_OscConfig+0x4ec>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d028      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d121      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d11a      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015a0:	4013      	ands	r3, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d111      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	085b      	lsrs	r3, r3, #1
 80015b8:	3b01      	subs	r3, #1
 80015ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015bc:	429a      	cmp	r2, r3
 80015be:	d107      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0cc      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f8:	4b68      	ldr	r3, [pc, #416]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d90c      	bls.n	8001620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001606:	4b65      	ldr	r3, [pc, #404]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	4b63      	ldr	r3, [pc, #396]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0b8      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d020      	beq.n	800166e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001638:	4b59      	ldr	r3, [pc, #356]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4a58      	ldr	r2, [pc, #352]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001642:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001650:	4b53      	ldr	r3, [pc, #332]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4a52      	ldr	r2, [pc, #328]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800165a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165c:	4b50      	ldr	r3, [pc, #320]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	494d      	ldr	r1, [pc, #308]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d044      	beq.n	8001704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d119      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e07f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b3f      	ldr	r3, [pc, #252]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	4b3b      	ldr	r3, [pc, #236]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e067      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c2:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f023 0203 	bic.w	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4934      	ldr	r1, [pc, #208]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d4:	f7ff fa48 	bl	8000b68 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016dc:	f7ff fa44 	bl	8000b68 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e04f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	4b2b      	ldr	r3, [pc, #172]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 020c 	and.w	r2, r3, #12
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	429a      	cmp	r2, r3
 8001702:	d1eb      	bne.n	80016dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001704:	4b25      	ldr	r3, [pc, #148]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d20c      	bcs.n	800172c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b22      	ldr	r3, [pc, #136]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b20      	ldr	r3, [pc, #128]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e032      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001738:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4916      	ldr	r1, [pc, #88]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d009      	beq.n	800176a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001756:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	490e      	ldr	r1, [pc, #56]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800176a:	f000 f821 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 800176e:	4602      	mov	r2, r0
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	490a      	ldr	r1, [pc, #40]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	5ccb      	ldrb	r3, [r1, r3]
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	4a09      	ldr	r2, [pc, #36]	@ (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_RCC_ClockConfig+0x1c8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f8ce 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00
 80017a0:	40023800 	.word	0x40023800
 80017a4:	08006f84 	.word	0x08006f84
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b4:	b090      	sub	sp, #64	@ 0x40
 80017b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c8:	4b59      	ldr	r3, [pc, #356]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d00d      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x40>
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	f200 80a1 	bhi.w	800191c <HAL_RCC_GetSysClockFreq+0x16c>
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x34>
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0x3a>
 80017e2:	e09b      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4b53      	ldr	r3, [pc, #332]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x184>)
 80017e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017e8:	e09b      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ea:	4b53      	ldr	r3, [pc, #332]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x188>)
 80017ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017ee:	e098      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d028      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001806:	4b4a      	ldr	r3, [pc, #296]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	099b      	lsrs	r3, r3, #6
 800180c:	2200      	movs	r2, #0
 800180e:	623b      	str	r3, [r7, #32]
 8001810:	627a      	str	r2, [r7, #36]	@ 0x24
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001818:	2100      	movs	r1, #0
 800181a:	4b47      	ldr	r3, [pc, #284]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x188>)
 800181c:	fb03 f201 	mul.w	r2, r3, r1
 8001820:	2300      	movs	r3, #0
 8001822:	fb00 f303 	mul.w	r3, r0, r3
 8001826:	4413      	add	r3, r2
 8001828:	4a43      	ldr	r2, [pc, #268]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x188>)
 800182a:	fba0 1202 	umull	r1, r2, r0, r2
 800182e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001830:	460a      	mov	r2, r1
 8001832:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001836:	4413      	add	r3, r2
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800183a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800183c:	2200      	movs	r2, #0
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	61fa      	str	r2, [r7, #28]
 8001842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001846:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800184a:	f7fe fd13 	bl	8000274 <__aeabi_uldivmod>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4613      	mov	r3, r2
 8001854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001856:	e053      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001858:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	2200      	movs	r2, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	617a      	str	r2, [r7, #20]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800186a:	f04f 0b00 	mov.w	fp, #0
 800186e:	4652      	mov	r2, sl
 8001870:	465b      	mov	r3, fp
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	0159      	lsls	r1, r3, #5
 800187c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001880:	0150      	lsls	r0, r2, #5
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	ebb2 080a 	subs.w	r8, r2, sl
 800188a:	eb63 090b 	sbc.w	r9, r3, fp
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800189a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800189e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018a2:	ebb2 0408 	subs.w	r4, r2, r8
 80018a6:	eb63 0509 	sbc.w	r5, r3, r9
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	00eb      	lsls	r3, r5, #3
 80018b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b8:	00e2      	lsls	r2, r4, #3
 80018ba:	4614      	mov	r4, r2
 80018bc:	461d      	mov	r5, r3
 80018be:	eb14 030a 	adds.w	r3, r4, sl
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	eb45 030b 	adc.w	r3, r5, fp
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d6:	4629      	mov	r1, r5
 80018d8:	028b      	lsls	r3, r1, #10
 80018da:	4621      	mov	r1, r4
 80018dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e0:	4621      	mov	r1, r4
 80018e2:	028a      	lsls	r2, r1, #10
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ea:	2200      	movs	r2, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	60fa      	str	r2, [r7, #12]
 80018f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018f4:	f7fe fcbe 	bl	8000274 <__aeabi_uldivmod>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4613      	mov	r3, r2
 80018fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	0c1b      	lsrs	r3, r3, #16
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	3301      	adds	r3, #1
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001910:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001914:	fbb2 f3f3 	udiv	r3, r2, r3
 8001918:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800191a:	e002      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x184>)
 800191e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001924:	4618      	mov	r0, r3
 8001926:	3740      	adds	r7, #64	@ 0x40
 8001928:	46bd      	mov	sp, r7
 800192a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	00f42400 	.word	0x00f42400
 8001938:	017d7840 	.word	0x017d7840

0800193c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <HAL_RCC_GetHCLKFreq+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000000 	.word	0x20000000

08001954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001958:	f7ff fff0 	bl	800193c <HAL_RCC_GetHCLKFreq>
 800195c:	4602      	mov	r2, r0
 800195e:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	0a9b      	lsrs	r3, r3, #10
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	4903      	ldr	r1, [pc, #12]	@ (8001978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800196a:	5ccb      	ldrb	r3, [r1, r3]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	08006f94 	.word	0x08006f94

0800197c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	220f      	movs	r2, #15
 800198a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_RCC_GetClockConfig+0x5c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0203 	and.w	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <HAL_RCC_GetClockConfig+0x5c>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <HAL_RCC_GetClockConfig+0x5c>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_RCC_GetClockConfig+0x5c>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	08db      	lsrs	r3, r3, #3
 80019b6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019be:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <HAL_RCC_GetClockConfig+0x60>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0207 	and.w	r2, r3, #7
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	601a      	str	r2, [r3, #0]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e041      	b.n	8001a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f839 	bl	8001a7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f000 f9b2 	bl	8001d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d001      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e044      	b.n	8001b36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <HAL_TIM_Base_Start_IT+0xb0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d018      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x6c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ad6:	d013      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x6c>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b48 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00e      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x6c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a19      	ldr	r2, [pc, #100]	@ (8001b4c <HAL_TIM_Base_Start_IT+0xb8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d009      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x6c>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a17      	ldr	r2, [pc, #92]	@ (8001b50 <HAL_TIM_Base_Start_IT+0xbc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d004      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0x6c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a16      	ldr	r2, [pc, #88]	@ (8001b54 <HAL_TIM_Base_Start_IT+0xc0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d111      	bne.n	8001b24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d010      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b22:	e007      	b.n	8001b34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40000400 	.word	0x40000400
 8001b4c:	40000800 	.word	0x40000800
 8001b50:	40000c00 	.word	0x40000c00
 8001b54:	40014000 	.word	0x40014000

08001b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d020      	beq.n	8001bbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01b      	beq.n	8001bbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0202 	mvn.w	r2, #2
 8001b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8d2 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 8001ba8:	e005      	b.n	8001bb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8c4 	bl	8001d38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8d5 	bl	8001d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d020      	beq.n	8001c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01b      	beq.n	8001c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0204 	mvn.w	r2, #4
 8001bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f8ac 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f89e 	bl	8001d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8af 	bl	8001d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d020      	beq.n	8001c54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01b      	beq.n	8001c54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0208 	mvn.w	r2, #8
 8001c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f886 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 8001c40:	e005      	b.n	8001c4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f878 	bl	8001d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f889 	bl	8001d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d020      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d01b      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0210 	mvn.w	r2, #16
 8001c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2208      	movs	r2, #8
 8001c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f860 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 8001c8c:	e005      	b.n	8001c9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f852 	bl	8001d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f863 	bl	8001d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0201 	mvn.w	r2, #1
 8001cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe fdf6 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00c      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8e0 	bl	8001ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00c      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f834 	bl	8001d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00c      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0220 	mvn.w	r2, #32
 8001d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8b2 	bl	8001e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a37      	ldr	r2, [pc, #220]	@ (8001e78 <TIM_Base_SetConfig+0xf0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00f      	beq.n	8001dc0 <TIM_Base_SetConfig+0x38>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da6:	d00b      	beq.n	8001dc0 <TIM_Base_SetConfig+0x38>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a34      	ldr	r2, [pc, #208]	@ (8001e7c <TIM_Base_SetConfig+0xf4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <TIM_Base_SetConfig+0x38>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a33      	ldr	r2, [pc, #204]	@ (8001e80 <TIM_Base_SetConfig+0xf8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d003      	beq.n	8001dc0 <TIM_Base_SetConfig+0x38>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a32      	ldr	r2, [pc, #200]	@ (8001e84 <TIM_Base_SetConfig+0xfc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a28      	ldr	r2, [pc, #160]	@ (8001e78 <TIM_Base_SetConfig+0xf0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01b      	beq.n	8001e12 <TIM_Base_SetConfig+0x8a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de0:	d017      	beq.n	8001e12 <TIM_Base_SetConfig+0x8a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a25      	ldr	r2, [pc, #148]	@ (8001e7c <TIM_Base_SetConfig+0xf4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <TIM_Base_SetConfig+0x8a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a24      	ldr	r2, [pc, #144]	@ (8001e80 <TIM_Base_SetConfig+0xf8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00f      	beq.n	8001e12 <TIM_Base_SetConfig+0x8a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a23      	ldr	r2, [pc, #140]	@ (8001e84 <TIM_Base_SetConfig+0xfc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00b      	beq.n	8001e12 <TIM_Base_SetConfig+0x8a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a22      	ldr	r2, [pc, #136]	@ (8001e88 <TIM_Base_SetConfig+0x100>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <TIM_Base_SetConfig+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a21      	ldr	r2, [pc, #132]	@ (8001e8c <TIM_Base_SetConfig+0x104>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d003      	beq.n	8001e12 <TIM_Base_SetConfig+0x8a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a20      	ldr	r2, [pc, #128]	@ (8001e90 <TIM_Base_SetConfig+0x108>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d108      	bne.n	8001e24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a0c      	ldr	r2, [pc, #48]	@ (8001e78 <TIM_Base_SetConfig+0xf0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d103      	bne.n	8001e52 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f043 0204 	orr.w	r2, r3, #4
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	601a      	str	r2, [r3, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	40000c00 	.word	0x40000c00
 8001e88:	40014000 	.word	0x40014000
 8001e8c:	40014400 	.word	0x40014400
 8001e90:	40014800 	.word	0x40014800

08001e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f103 0208 	add.w	r2, r3, #8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ed8:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f103 0208 	add.w	r2, r3, #8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f103 0208 	add.w	r2, r3, #8
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	615a      	str	r2, [r3, #20]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8001ef6:	f240 1019 	movw	r0, #281	@ 0x119
 8001efa:	f004 fc01 	bl	8006700 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8001f14:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001f18:	f004 fbf2 	bl	8006700 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	e9c7 2302 	strd	r2, r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f40:	bf08      	it	eq
 8001f42:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8001f46:	d103      	bne.n	8001f50 <vListInsert+0x2c>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e010      	b.n	8001f72 <vListInsert+0x4e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3308      	adds	r3, #8
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e002      	b.n	8001f5e <vListInsert+0x3a>
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001f70:	d2f2      	bcs.n	8001f58 <vListInsert+0x34>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	60da      	str	r2, [r3, #12]
    pxNewListItem->pxPrevious = pxIterator;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	60da      	str	r2, [r3, #12]
    pxIterator->pxNext = pxNewListItem;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	615a      	str	r2, [r3, #20]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8001f9e:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8001fa2:	f004 fbad 	bl	8006700 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68d2      	ldr	r2, [r2, #12]
 8001fc4:	60da      	str	r2, [r3, #12]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6892      	ldr	r2, [r2, #8]
 8001fce:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d103      	bne.n	8001fe2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1e5a      	subs	r2, r3, #1
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f240 101d 	movw	r0, #285	@ 0x11d
 8001ffc:	f004 fbbc 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002016:	2301      	movs	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10b      	bne.n	800203c <xQueueGenericReset+0x30>
    __asm volatile
 8002024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	60fb      	str	r3, [r7, #12]
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d05d      	beq.n	80020fe <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    if( ( pxQueue != NULL ) &&
 8002046:	2b00      	cmp	r3, #0
 8002048:	d059      	beq.n	80020fe <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	2100      	movs	r1, #0
 8002054:	fba3 2302 	umull	r2, r3, r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d000      	beq.n	800205e <xQueueGenericReset+0x52>
 800205c:	2101      	movs	r1, #1
 800205e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002060:	2b00      	cmp	r3, #0
 8002062:	d14c      	bne.n	80020fe <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002064:	f002 f9ec 	bl	8004440 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002070:	6939      	ldr	r1, [r7, #16]
 8002072:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	441a      	add	r2, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2200      	movs	r2, #0
 8002082:	641a      	str	r2, [r3, #64]	@ 0x40
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002094:	3b01      	subs	r3, #1
 8002096:	6939      	ldr	r1, [r7, #16]
 8002098:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	441a      	add	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	22ff      	movs	r2, #255	@ 0xff
 80020a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxQueue->cTxLock = queueUNLOCKED;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	22ff      	movs	r2, #255	@ 0xff
 80020b0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

            if( xNewQueue == pdFALSE )
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d114      	bne.n	80020e4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01a      	beq.n	80020f8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	3310      	adds	r3, #16
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 f946 	bl	8003358 <xTaskRemoveFromEventList>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d012      	beq.n	80020f8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80020d2:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <xQueueGenericReset+0x128>)
 80020d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	e009      	b.n	80020f8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	3310      	adds	r3, #16
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fee7 	bl	8001ebc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	3328      	adds	r3, #40	@ 0x28
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fee2 	bl	8001ebc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80020f8:	f002 f9d4 	bl	80044a4 <vPortExitCritical>
 80020fc:	e001      	b.n	8002102 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10b      	bne.n	8002120 <xQueueGenericReset+0x114>
    __asm volatile
 8002108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800210c:	f383 8811 	msr	BASEPRI, r3
 8002110:	f3bf 8f6f 	isb	sy
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	60bb      	str	r3, [r7, #8]
}
 800211a:	bf00      	nop
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	4619      	mov	r1, r3
 8002124:	2096      	movs	r0, #150	@ 0x96
 8002126:	f004 fb27 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800212a:	697b      	ldr	r3, [r7, #20]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	e000ed04 	.word	0xe000ed04

08002138 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	@ 0x30
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10b      	bne.n	8002168 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 8002150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	623b      	str	r3, [r7, #32]
}
 8002162:	bf00      	nop
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d031      	beq.n	80021d2 <xQueueGenericCreateStatic+0x9a>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d02e      	beq.n	80021d2 <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d028      	beq.n	80021d2 <xQueueGenericCreateStatic+0x9a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d122      	bne.n	80021d2 <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800218c:	2350      	movs	r3, #80	@ 0x50
 800218e:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b50      	cmp	r3, #80	@ 0x50
 8002194:	d00b      	beq.n	80021ae <xQueueGenericCreateStatic+0x76>
    __asm volatile
 8002196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800219a:	f383 8811 	msr	BASEPRI, r3
 800219e:	f3bf 8f6f 	isb	sy
 80021a2:	f3bf 8f4f 	dsb	sy
 80021a6:	61fb      	str	r3, [r7, #28]
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	e7fd      	b.n	80021aa <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 80021ae:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021bc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f81e 	bl	800220c <prvInitialiseNewQueue>
 80021d0:	e00e      	b.n	80021f0 <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10b      	bne.n	80021f0 <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 80021d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021dc:	f383 8811 	msr	BASEPRI, r3
 80021e0:	f3bf 8f6f 	isb	sy
 80021e4:	f3bf 8f4f 	dsb	sy
 80021e8:	61bb      	str	r3, [r7, #24]
}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 fc5a 	bl	8006aac <SEGGER_SYSVIEW_ShrinkId>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4619      	mov	r1, r3
 80021fc:	2097      	movs	r0, #151	@ 0x97
 80021fe:	f004 fabb 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002204:	4618      	mov	r0, r3
 8002206:	3728      	adds	r7, #40	@ 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d103      	bne.n	8002228 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e002      	b.n	800222e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	645a      	str	r2, [r3, #68]	@ 0x44
    pxNewQueue->uxItemSize = uxItemSize;
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	649a      	str	r2, [r3, #72]	@ 0x48
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800223a:	2101      	movs	r1, #1
 800223c:	69b8      	ldr	r0, [r7, #24]
 800223e:	f7ff fee5 	bl	800200c <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08e      	sub	sp, #56	@ 0x38
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	e9c7 2300 	strd	r2, r3, [r7]
    BaseType_t xEntryTimeSet = pdFALSE;
 800225a:	2300      	movs	r3, #0
 800225c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <xQueueReceive+0x34>
    __asm volatile
 8002268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <xQueueReceive+0x30>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <xQueueReceive+0x42>
 8002286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <xQueueReceive+0x46>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <xQueueReceive+0x48>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10b      	bne.n	80022b0 <xQueueReceive+0x64>
    __asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <xQueueReceive+0x60>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022b0:	f001 fac2 	bl	8003838 <xTaskGetSchedulerState>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d103      	bne.n	80022c2 <xQueueReceive+0x76>
 80022ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022be:	4313      	orrs	r3, r2
 80022c0:	d101      	bne.n	80022c6 <xQueueReceive+0x7a>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <xQueueReceive+0x7c>
 80022c6:	2300      	movs	r3, #0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <xQueueReceive+0x98>
    __asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	623b      	str	r3, [r7, #32]
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <xQueueReceive+0x94>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80022e4:	f002 f8ac 	bl	8004440 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d023      	beq.n	800233c <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022f8:	f000 f89c 	bl	8002434 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80022fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fe:	1e5a      	subs	r2, r3, #1
 8002300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00f      	beq.n	800232c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800230c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230e:	3310      	adds	r3, #16
 8002310:	4618      	mov	r0, r3
 8002312:	f001 f821 	bl	8003358 <xTaskRemoveFromEventList>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <xQueueReceive+0xe0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800231c:	4b44      	ldr	r3, [pc, #272]	@ (8002430 <xQueueReceive+0x1e4>)
 800231e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800232c:	f002 f8ba 	bl	80044a4 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002330:	2101      	movs	r1, #1
 8002332:	20a4      	movs	r0, #164	@ 0xa4
 8002334:	f004 fa20 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002338:	2301      	movs	r3, #1
 800233a:	e074      	b.n	8002426 <xQueueReceive+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800233c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002340:	4313      	orrs	r3, r2
 8002342:	d107      	bne.n	8002354 <xQueueReceive+0x108>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002344:	f002 f8ae 	bl	80044a4 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002348:	2100      	movs	r1, #0
 800234a:	20a4      	movs	r0, #164	@ 0xa4
 800234c:	f004 fa14 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002350:	2300      	movs	r3, #0
 8002352:	e068      	b.n	8002426 <xQueueReceive+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	4618      	mov	r0, r3
 8002360:	f001 f8dc 	bl	800351c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002364:	2301      	movs	r3, #1
 8002366:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002368:	f002 f89c 	bl	80044a4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800236c:	f000 fc6a 	bl	8002c44 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002370:	f002 f866 	bl	8004440 <vPortEnterCritical>
 8002374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002376:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800237a:	b25b      	sxtb	r3, r3
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002380:	d103      	bne.n	800238a <xQueueReceive+0x13e>
 8002382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002384:	2200      	movs	r2, #0
 8002386:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002390:	b25b      	sxtb	r3, r3
 8002392:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002396:	d103      	bne.n	80023a0 <xQueueReceive+0x154>
 8002398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239a:	2200      	movs	r2, #0
 800239c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80023a0:	f002 f880 	bl	80044a4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023a4:	463a      	mov	r2, r7
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f001 f8cf 	bl	8003550 <xTaskCheckForTimeOut>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d125      	bne.n	8002404 <xQueueReceive+0x1b8>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023ba:	f000 f8b3 	bl	8002524 <prvIsQueueEmpty>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d019      	beq.n	80023f8 <xQueueReceive+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80023ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ce:	4608      	mov	r0, r1
 80023d0:	f000 ff4a 	bl	8003268 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80023d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023d6:	f000 f853 	bl	8002480 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80023da:	f000 fc41 	bl	8002c60 <xTaskResumeAll>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f47f af7f 	bne.w	80022e4 <xQueueReceive+0x98>
                {
                    taskYIELD_WITHIN_API();
 80023e6:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <xQueueReceive+0x1e4>)
 80023e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	e775      	b.n	80022e4 <xQueueReceive+0x98>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80023f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023fa:	f000 f841 	bl	8002480 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80023fe:	f000 fc2f 	bl	8002c60 <xTaskResumeAll>
 8002402:	e76f      	b.n	80022e4 <xQueueReceive+0x98>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002406:	f000 f83b 	bl	8002480 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800240a:	f000 fc29 	bl	8002c60 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800240e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002410:	f000 f888 	bl	8002524 <prvIsQueueEmpty>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	f43f af64 	beq.w	80022e4 <xQueueReceive+0x98>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800241c:	2100      	movs	r1, #0
 800241e:	20a4      	movs	r0, #164	@ 0xa4
 8002420:	f004 f9aa 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8002424:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002426:	4618      	mov	r0, r3
 8002428:	3738      	adds	r7, #56	@ 0x38
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000ed04 	.word	0xe000ed04

08002434 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002442:	2b00      	cmp	r3, #0
 8002444:	d018      	beq.n	8002478 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800244e:	441a      	add	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	d303      	bcc.n	8002468 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68d9      	ldr	r1, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002470:	461a      	mov	r2, r3
 8002472:	6838      	ldr	r0, [r7, #0]
 8002474:	f004 fcbc 	bl	8006df0 <memcpy>
    }
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002488:	f001 ffda 	bl	8004440 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002492:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002494:	e011      	b.n	80024ba <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	d012      	beq.n	80024c4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3328      	adds	r3, #40	@ 0x28
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 ff58 	bl	8003358 <xTaskRemoveFromEventList>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80024ae:	f001 f8df 	bl	8003670 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	dce9      	bgt.n	8002496 <prvUnlockQueue+0x16>
 80024c2:	e000      	b.n	80024c6 <prvUnlockQueue+0x46>
                    break;
 80024c4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	22ff      	movs	r2, #255	@ 0xff
 80024ca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    }
    taskEXIT_CRITICAL();
 80024ce:	f001 ffe9 	bl	80044a4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80024d2:	f001 ffb5 	bl	8004440 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80024dc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024de:	e011      	b.n	8002504 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d012      	beq.n	800250e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3310      	adds	r3, #16
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 ff33 	bl	8003358 <xTaskRemoveFromEventList>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80024f8:	f001 f8ba 	bl	8003670 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80024fc:	7bbb      	ldrb	r3, [r7, #14]
 80024fe:	3b01      	subs	r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002508:	2b00      	cmp	r3, #0
 800250a:	dce9      	bgt.n	80024e0 <prvUnlockQueue+0x60>
 800250c:	e000      	b.n	8002510 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800250e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	22ff      	movs	r2, #255	@ 0xff
 8002514:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    }
    taskEXIT_CRITICAL();
 8002518:	f001 ffc4 	bl	80044a4 <vPortExitCritical>
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800252c:	f001 ff88 	bl	8004440 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002538:	2301      	movs	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e001      	b.n	8002542 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002542:	f001 ffaf 	bl	80044a4 <vPortExitCritical>

    return xReturn;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	e9c7 2300 	strd	r2, r3, [r7]
        Queue_t * const pxQueue = xQueue;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002560:	f001 ff6e 	bl	8004440 <vPortEnterCritical>
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800256a:	b25b      	sxtb	r3, r3
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002570:	d103      	bne.n	800257a <vQueueWaitForMessageRestricted+0x2a>
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002580:	b25b      	sxtb	r3, r3
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002586:	d103      	bne.n	8002590 <vQueueWaitForMessageRestricted+0x40>
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8002590:	f001 ff88 	bl	80044a4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <vQueueWaitForMessageRestricted+0x60>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025aa:	4608      	mov	r0, r1
 80025ac:	f000 fe86 	bl	80032bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80025b0:	6978      	ldr	r0, [r7, #20]
 80025b2:	f7ff ff65 	bl	8002480 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 80025b6:	20b9      	movs	r0, #185	@ 0xb9
 80025b8:	f004 f8a2 	bl	8006700 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80025bc:	bf00      	nop
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08e      	sub	sp, #56	@ 0x38
 80025c8:	af04      	add	r7, sp, #16
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 80025d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <prvCreateStaticTask+0x2c>
    __asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	623b      	str	r3, [r7, #32]
}
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80025f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <prvCreateStaticTask+0x4a>
    __asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	61fb      	str	r3, [r7, #28]
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	e7fd      	b.n	800260a <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800260e:	2360      	movs	r3, #96	@ 0x60
 8002610:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b60      	cmp	r3, #96	@ 0x60
 8002616:	d00b      	beq.n	8002630 <prvCreateStaticTask+0x6c>
    __asm volatile
 8002618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	61bb      	str	r3, [r7, #24]
}
 800262a:	bf00      	nop
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8002630:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01f      	beq.n	8002678 <prvCreateStaticTask+0xb4>
 8002638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01c      	beq.n	8002678 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 800263e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002642:	2260      	movs	r2, #96	@ 0x60
 8002644:	2100      	movs	r1, #0
 8002646:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002648:	f004 fba6 	bl	8006d98 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002650:	63da      	str	r2, [r3, #60]	@ 0x3c

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	2202      	movs	r2, #2
 8002656:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800265a:	2300      	movs	r3, #0
 800265c:	9303      	str	r3, [sp, #12]
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	9302      	str	r3, [sp, #8]
 8002662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f89d 	bl	80027b0 <prvInitialiseNewTask>
 8002676:	e001      	b.n	800267c <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800267e:	4618      	mov	r0, r3
 8002680:	3728      	adds	r7, #40	@ 0x28
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8002686:	b580      	push	{r7, lr}
 8002688:	b08a      	sub	sp, #40	@ 0x28
 800268a:	af04      	add	r7, sp, #16
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	9303      	str	r3, [sp, #12]
 800269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a0:	9302      	str	r3, [sp, #8]
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff ff87 	bl	80025c4 <prvCreateStaticTask>
 80026b6:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f000 f908 	bl	80028d4 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 f9f0 	bl	8006aac <SEGGER_SYSVIEW_ShrinkId>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4619      	mov	r1, r3
 80026d0:	20bf      	movs	r0, #191	@ 0xbf
 80026d2:	f004 f851 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80026d6:	693b      	ldr	r3, [r7, #16]
    }
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	@ 0x28
 80026e4:	af04      	add	r7, sp, #16
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f001 ffd4 	bl	80046a0 <pvPortMalloc>
 80026f8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002700:	2060      	movs	r0, #96	@ 0x60
 8002702:	f001 ffcd 	bl	80046a0 <pvPortMalloc>
 8002706:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800270e:	2260      	movs	r2, #96	@ 0x60
 8002710:	2100      	movs	r1, #0
 8002712:	6978      	ldr	r0, [r7, #20]
 8002714:	f004 fb40 	bl	8006d98 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800271e:	e005      	b.n	800272c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002720:	6938      	ldr	r0, [r7, #16]
 8002722:	f002 f8ef 	bl	8004904 <vPortFree>
 8002726:	e001      	b.n	800272c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d011      	beq.n	8002756 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800273a:	2300      	movs	r3, #0
 800273c:	9303      	str	r3, [sp, #12]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f82d 	bl	80027b0 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002756:	697b      	ldr	r3, [r7, #20]
    }
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff ffaf 	bl	80026e0 <prvCreateTask>
 8002782:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800278a:	6938      	ldr	r0, [r7, #16]
 800278c:	f000 f8a2 	bl	80028d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002790:	2301      	movs	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	e002      	b.n	800279c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800279a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	4619      	mov	r1, r3
 80027a0:	20c2      	movs	r0, #194	@ 0xc2
 80027a2:	f003 ffe9 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80027a6:	697b      	ldr	r3, [r7, #20]
    }
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80027b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027b4:	b088      	sub	sp, #32
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80027c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027ca:	3b01      	subs	r3, #1
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f023 0307 	bic.w	r3, r3, #7
 80027d8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <prvInitialiseNewTask+0x4c>
    __asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	617b      	str	r3, [r7, #20]
}
 80027f6:	bf00      	nop
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <prvInitialiseNewTask+0x48>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01e      	beq.n	8002840 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e012      	b.n	800282e <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	7819      	ldrb	r1, [r3, #0]
 8002810:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	3340      	adds	r3, #64	@ 0x40
 8002818:	460a      	mov	r2, r1
 800281a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	4413      	add	r3, r2
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	2b0f      	cmp	r3, #15
 8002832:	d9e9      	bls.n	8002808 <prvInitialiseNewTask+0x58>
 8002834:	e000      	b.n	8002838 <prvInitialiseNewTask+0x88>
            {
                break;
 8002836:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800283a:	2200      	movs	r2, #0
 800283c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002842:	2b04      	cmp	r3, #4
 8002844:	d90b      	bls.n	800285e <prvInitialiseNewTask+0xae>
    __asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	613b      	str	r3, [r7, #16]
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	e7fd      	b.n	800285a <prvInitialiseNewTask+0xaa>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800285e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002860:	2b04      	cmp	r3, #4
 8002862:	d901      	bls.n	8002868 <prvInitialiseNewTask+0xb8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002864:	2304      	movs	r3, #4
 8002866:	63bb      	str	r3, [r7, #56]	@ 0x38
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800286a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800286c:	639a      	str	r2, [r3, #56]	@ 0x38
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800286e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002870:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002872:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002876:	3308      	adds	r3, #8
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fb44 	bl	8001f06 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800287e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002880:	3320      	adds	r3, #32
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fb3f 	bl	8001f06 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800288a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800288c:	619a      	str	r2, [r3, #24]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800288e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002890:	2200      	movs	r2, #0
 8002892:	461c      	mov	r4, r3
 8002894:	4615      	mov	r5, r2
 8002896:	2300      	movs	r3, #0
 8002898:	f1d4 0805 	rsbs	r8, r4, #5
 800289c:	eb63 0905 	sbc.w	r9, r3, r5
 80028a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a2:	e9c3 8908 	strd	r8, r9, [r3, #32]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	68f9      	ldr	r1, [r7, #12]
 80028b0:	69b8      	ldr	r0, [r7, #24]
 80028b2:	f001 fbd9 	bl	8004068 <pxPortInitialiseStack>
 80028b6:	4602      	mov	r2, r0
 80028b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028ba:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80028bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80028c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028c6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028c8:	bf00      	nop
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080028d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80028d4:	b5b0      	push	{r4, r5, r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af02      	add	r7, sp, #8
 80028da:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80028dc:	f001 fdb0 	bl	8004440 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80028e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002a20 <prvAddNewTaskToReadyList+0x14c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	4a4e      	ldr	r2, [pc, #312]	@ (8002a20 <prvAddNewTaskToReadyList+0x14c>)
 80028e8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80028ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002a24 <prvAddNewTaskToReadyList+0x150>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80028f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002a24 <prvAddNewTaskToReadyList+0x150>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028f8:	4b49      	ldr	r3, [pc, #292]	@ (8002a20 <prvAddNewTaskToReadyList+0x14c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d110      	bne.n	8002922 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002900:	f000 fedc 	bl	80036bc <prvInitialiseTaskLists>
 8002904:	e00d      	b.n	8002922 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002906:	4b48      	ldr	r3, [pc, #288]	@ (8002a28 <prvAddNewTaskToReadyList+0x154>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800290e:	4b45      	ldr	r3, [pc, #276]	@ (8002a24 <prvAddNewTaskToReadyList+0x150>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	429a      	cmp	r2, r3
 800291a:	d802      	bhi.n	8002922 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800291c:	4a41      	ldr	r2, [pc, #260]	@ (8002a24 <prvAddNewTaskToReadyList+0x150>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002922:	4b42      	ldr	r3, [pc, #264]	@ (8002a2c <prvAddNewTaskToReadyList+0x158>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3301      	adds	r3, #1
 8002928:	4a40      	ldr	r2, [pc, #256]	@ (8002a2c <prvAddNewTaskToReadyList+0x158>)
 800292a:	6013      	str	r3, [r2, #0]
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <prvAddNewTaskToReadyList+0x8c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	f003 ff93 	bl	8006860 <SEGGER_SYSVIEW_OnTaskCreate>
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294a:	461d      	mov	r5, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461c      	mov	r4, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002956:	1ae3      	subs	r3, r4, r3
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	462b      	mov	r3, r5
 800295c:	f002 f9f6 	bl	8004d4c <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	f004 f800 	bl	8006968 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800296c:	4b30      	ldr	r3, [pc, #192]	@ (8002a30 <prvAddNewTaskToReadyList+0x15c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d903      	bls.n	800297c <prvAddNewTaskToReadyList+0xa8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002978:	4a2d      	ldr	r2, [pc, #180]	@ (8002a30 <prvAddNewTaskToReadyList+0x15c>)
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002980:	492c      	ldr	r1, [pc, #176]	@ (8002a34 <prvAddNewTaskToReadyList+0x160>)
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	3304      	adds	r3, #4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	611a      	str	r2, [r3, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	615a      	str	r2, [r3, #20]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	3208      	adds	r2, #8
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f103 0208 	add.w	r2, r3, #8
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a34 <prvAddNewTaskToReadyList+0x160>)
 80029c2:	441a      	add	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	61da      	str	r2, [r3, #28]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029cc:	4919      	ldr	r1, [pc, #100]	@ (8002a34 <prvAddNewTaskToReadyList+0x160>)
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029de:	1c59      	adds	r1, r3, #1
 80029e0:	4814      	ldr	r0, [pc, #80]	@ (8002a34 <prvAddNewTaskToReadyList+0x160>)
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4403      	add	r3, r0
 80029ec:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80029ee:	f001 fd59 	bl	80044a4 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80029f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <prvAddNewTaskToReadyList+0x154>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00e      	beq.n	8002a18 <prvAddNewTaskToReadyList+0x144>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <prvAddNewTaskToReadyList+0x150>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d207      	bcs.n	8002a18 <prvAddNewTaskToReadyList+0x144>
 8002a08:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <prvAddNewTaskToReadyList+0x164>)
 8002a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a20:	20000180 	.word	0x20000180
 8002a24:	20000078 	.word	0x20000078
 8002a28:	20000194 	.word	0x20000194
 8002a2c:	200001a8 	.word	0x200001a8
 8002a30:	20000190 	.word	0x20000190
 8002a34:	20000080 	.word	0x20000080
 8002a38:	e000ed04 	.word	0xe000ed04

08002a3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	e9c7 0100 	strd	r0, r1, [r7]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	d019      	beq.n	8002a86 <vTaskDelay+0x4a>
        {
            vTaskSuspendAll();
 8002a52:	f000 f8f7 	bl	8002c44 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <vTaskDelay+0x70>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d00b      	beq.n	8002a76 <vTaskDelay+0x3a>
    __asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	60bb      	str	r3, [r7, #8]
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	e7fd      	b.n	8002a72 <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a76:	2200      	movs	r2, #0
 8002a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a7c:	f000 fefe 	bl	800387c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002a80:	f000 f8ee 	bl	8002c60 <xTaskResumeAll>
 8002a84:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <vTaskDelay+0x60>
        {
            taskYIELD_WITHIN_API();
 8002a8c:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <vTaskDelay+0x74>)
 8002a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8002a9c:	20c5      	movs	r0, #197	@ 0xc5
 8002a9e:	f003 fe2f 	bl	8006700 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200001bc 	.word	0x200001bc
 8002ab0:	e000ed04 	.word	0xe000ed04

08002ab4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b090      	sub	sp, #64	@ 0x40
 8002ab8:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8002aba:	2301      	movs	r3, #1
 8002abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac6:	e013      	b.n	8002af0 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8002b78 <prvCreateIdleTasks+0xc4>)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	4413      	add	r3, r2
 8002ace:	7819      	ldrb	r1, [r3, #0]
 8002ad0:	f107 0210 	add.w	r2, r7, #16
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	4413      	add	r3, r2
 8002ad8:	460a      	mov	r2, r1
 8002ada:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002adc:	f107 0210 	add.w	r2, r7, #16
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	4413      	add	r3, r2
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	3301      	adds	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	2b0f      	cmp	r3, #15
 8002af4:	dde8      	ble.n	8002ac8 <prvCreateIdleTasks+0x14>
 8002af6:	e000      	b.n	8002afa <prvCreateIdleTasks+0x46>
        {
            break;
 8002af8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002afa:	2300      	movs	r3, #0
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002afe:	e031      	b.n	8002b64 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002b00:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <prvCreateIdleTasks+0xc8>)
 8002b02:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8002b0c:	1d3a      	adds	r2, r7, #4
 8002b0e:	f107 0108 	add.w	r1, r7, #8
 8002b12:	f107 030c 	add.w	r3, r7, #12
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 ff46 	bl	80039a8 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	f107 0110 	add.w	r1, r7, #16
 8002b26:	9202      	str	r2, [sp, #8]
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a38      	ldr	r0, [r7, #32]
 8002b34:	f7ff fda7 	bl	8002686 <xTaskCreateStatic>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4911      	ldr	r1, [pc, #68]	@ (8002b80 <prvCreateIdleTasks+0xcc>)
 8002b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002b42:	4a0f      	ldr	r2, [pc, #60]	@ (8002b80 <prvCreateIdleTasks+0xcc>)
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b52:	e001      	b.n	8002b58 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b60:	3301      	adds	r3, #1
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	ddca      	ble.n	8002b00 <prvCreateIdleTasks+0x4c>
 8002b6a:	e000      	b.n	8002b6e <prvCreateIdleTasks+0xba>
        {
            break;
 8002b6c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3730      	adds	r7, #48	@ 0x30
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	08006eb4 	.word	0x08006eb4
 8002b7c:	08003689 	.word	0x08003689
 8002b80:	200001b8 	.word	0x200001b8

08002b84 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002b8a:	f7ff ff93 	bl	8002ab4 <prvCreateIdleTasks>
 8002b8e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d102      	bne.n	8002b9c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002b96:	f000 ff3b 	bl	8003a10 <xTimerCreateTimerTask>
 8002b9a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d12b      	bne.n	8002bfa <vTaskStartScheduler+0x76>
    __asm volatile
 8002ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	60bb      	str	r3, [r7, #8]
}
 8002bb4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002bb6:	491d      	ldr	r1, [pc, #116]	@ (8002c2c <vTaskStartScheduler+0xa8>)
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bc0:	e9c1 2300 	strd	r2, r3, [r1]
        xSchedulerRunning = pdTRUE;
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <vTaskStartScheduler+0xac>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002bca:	491a      	ldr	r1, [pc, #104]	@ (8002c34 <vTaskStartScheduler+0xb0>)
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9c1 2300 	strd	r2, r3, [r1]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002bd8:	4b17      	ldr	r3, [pc, #92]	@ (8002c38 <vTaskStartScheduler+0xb4>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b17      	ldr	r3, [pc, #92]	@ (8002c3c <vTaskStartScheduler+0xb8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d102      	bne.n	8002bea <vTaskStartScheduler+0x66>
 8002be4:	f003 fe20 	bl	8006828 <SEGGER_SYSVIEW_OnIdle>
 8002be8:	e004      	b.n	8002bf4 <vTaskStartScheduler+0x70>
 8002bea:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <vTaskStartScheduler+0xb8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fe78 	bl	80068e4 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002bf4:	f001 fac6 	bl	8004184 <xPortStartScheduler>
 8002bf8:	e00f      	b.n	8002c1a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c00:	d10b      	bne.n	8002c1a <vTaskStartScheduler+0x96>
    __asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	607b      	str	r3, [r7, #4]
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	e7fd      	b.n	8002c16 <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c1a:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <vTaskStartScheduler+0xbc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002c1e:	20cd      	movs	r0, #205	@ 0xcd
 8002c20:	f003 fd6e 	bl	8006700 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	200001b0 	.word	0x200001b0
 8002c30:	20000194 	.word	0x20000194
 8002c34:	20000188 	.word	0x20000188
 8002c38:	200001b8 	.word	0x200001b8
 8002c3c:	20000078 	.word	0x20000078
 8002c40:	08006f9c 	.word	0x08006f9c

08002c44 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002c48:	4b04      	ldr	r3, [pc, #16]	@ (8002c5c <vTaskSuspendAll+0x18>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	4a03      	ldr	r2, [pc, #12]	@ (8002c5c <vTaskSuspendAll+0x18>)
 8002c50:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002c52:	20cf      	movs	r0, #207	@ 0xcf
 8002c54:	f003 fd54 	bl	8006700 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	200001bc 	.word	0x200001bc

08002c60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b08a      	sub	sp, #40	@ 0x28
 8002c64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002c6e:	f001 fbe7 	bl	8004440 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002c76:	4b81      	ldr	r3, [pc, #516]	@ (8002e7c <xTaskResumeAll+0x21c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10b      	bne.n	8002c96 <xTaskResumeAll+0x36>
    __asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	607b      	str	r3, [r7, #4]
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	e7fd      	b.n	8002c92 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002c96:	4b79      	ldr	r3, [pc, #484]	@ (8002e7c <xTaskResumeAll+0x21c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	4a77      	ldr	r2, [pc, #476]	@ (8002e7c <xTaskResumeAll+0x21c>)
 8002c9e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002ca0:	4b76      	ldr	r3, [pc, #472]	@ (8002e7c <xTaskResumeAll+0x21c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 80dc 	bne.w	8002e62 <xTaskResumeAll+0x202>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002caa:	4b75      	ldr	r3, [pc, #468]	@ (8002e80 <xTaskResumeAll+0x220>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80d7 	beq.w	8002e62 <xTaskResumeAll+0x202>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cb4:	e094      	b.n	8002de0 <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002cb6:	4b73      	ldr	r3, [pc, #460]	@ (8002e84 <xTaskResumeAll+0x224>)
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	3320      	adds	r3, #32
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d103      	bne.n	8002cec <xTaskResumeAll+0x8c>
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	2200      	movs	r2, #0
 8002cf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	1e5a      	subs	r2, r3, #1
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d08:	6952      	ldr	r2, [r2, #20]
 8002d0a:	60da      	str	r2, [r3, #12]
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d12:	6912      	ldr	r2, [r2, #16]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d103      	bne.n	8002d2a <xTaskResumeAll+0xca>
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	61da      	str	r2, [r3, #28]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fe13 	bl	8006968 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d46:	4b50      	ldr	r3, [pc, #320]	@ (8002e88 <xTaskResumeAll+0x228>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d903      	bls.n	8002d56 <xTaskResumeAll+0xf6>
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d52:	4a4d      	ldr	r2, [pc, #308]	@ (8002e88 <xTaskResumeAll+0x228>)
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d5a:	494c      	ldr	r1, [pc, #304]	@ (8002e8c <xTaskResumeAll+0x22c>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	3304      	adds	r3, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	611a      	str	r2, [r3, #16]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	615a      	str	r2, [r3, #20]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d80:	3208      	adds	r2, #8
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	f103 0208 	add.w	r2, r3, #8
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e8c <xTaskResumeAll+0x22c>)
 8002d9c:	441a      	add	r2, r3
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	61da      	str	r2, [r3, #28]
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002da6:	4939      	ldr	r1, [pc, #228]	@ (8002e8c <xTaskResumeAll+0x22c>)
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	440b      	add	r3, r1
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002db8:	1c59      	adds	r1, r3, #1
 8002dba:	4834      	ldr	r0, [pc, #208]	@ (8002e8c <xTaskResumeAll+0x22c>)
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4403      	add	r3, r0
 8002dc6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dcc:	4b30      	ldr	r3, [pc, #192]	@ (8002e90 <xTaskResumeAll+0x230>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d904      	bls.n	8002de0 <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8002e94 <xTaskResumeAll+0x234>)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002de0:	4b28      	ldr	r3, [pc, #160]	@ (8002e84 <xTaskResumeAll+0x224>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f47f af66 	bne.w	8002cb6 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002df0:	f000 fd02 	bl	80037f8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002df4:	4b28      	ldr	r3, [pc, #160]	@ (8002e98 <xTaskResumeAll+0x238>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	e9c7 2306 	strd	r2, r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	d01b      	beq.n	8002e3e <xTaskResumeAll+0x1de>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002e06:	f000 f891 	bl	8002f2c <xTaskIncrementTick>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <xTaskResumeAll+0x1ba>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002e10:	4a20      	ldr	r2, [pc, #128]	@ (8002e94 <xTaskResumeAll+0x234>)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2101      	movs	r1, #1
 8002e16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002e1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1e:	1e54      	subs	r4, r2, #1
 8002e20:	f143 35ff 	adc.w	r5, r3, #4294967295	@ 0xffffffff
 8002e24:	e9c7 4506 	strd	r4, r5, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	d1ea      	bne.n	8002e06 <xTaskResumeAll+0x1a6>

                            xPendedTicks = 0;
 8002e30:	4919      	ldr	r1, [pc, #100]	@ (8002e98 <xTaskResumeAll+0x238>)
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9c1 2300 	strd	r2, r3, [r1]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002e3e:	4a15      	ldr	r2, [pc, #84]	@ (8002e94 <xTaskResumeAll+0x234>)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <xTaskResumeAll+0x202>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	623b      	str	r3, [r7, #32]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002e4e:	4b10      	ldr	r3, [pc, #64]	@ (8002e90 <xTaskResumeAll+0x230>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4b12      	ldr	r3, [pc, #72]	@ (8002e9c <xTaskResumeAll+0x23c>)
 8002e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e62:	f001 fb1f 	bl	80044a4 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	20d0      	movs	r0, #208	@ 0xd0
 8002e6c:	f003 fc84 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002e70:	6a3b      	ldr	r3, [r7, #32]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3728      	adds	r7, #40	@ 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bdb0      	pop	{r4, r5, r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200001bc 	.word	0x200001bc
 8002e80:	20000180 	.word	0x20000180
 8002e84:	20000130 	.word	0x20000130
 8002e88:	20000190 	.word	0x20000190
 8002e8c:	20000080 	.word	0x20000080
 8002e90:	20000078 	.word	0x20000078
 8002e94:	200001a0 	.word	0x200001a0
 8002e98:	20000198 	.word	0x20000198
 8002e9c:	e000ed04 	.word	0xe000ed04

08002ea0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
 8002ea6:	f001 facb 	bl	8004440 <vPortEnterCritical>
    {
        xTicks = xTickCount;
 8002eaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <xTaskGetTickCount+0x30>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	e9c7 2300 	strd	r2, r3, [r7]
    }
    portTICK_TYPE_EXIT_CRITICAL();
 8002eb4:	f001 faf6 	bl	80044a4 <vPortExitCritical>

    traceRETURN_xTaskGetTickCount( xTicks );
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	20d1      	movs	r0, #209	@ 0xd1
 8002ebe:	f003 fc5b 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8002ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000188 	.word	0x20000188

08002ed4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eda:	f001 fb9f 	bl	800461c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8002ede:	f3ef 8211 	mrs	r2, BASEPRI
 8002ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	60ba      	str	r2, [r7, #8]
 8002ef4:	607b      	str	r3, [r7, #4]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8002ef6:	68bb      	ldr	r3, [r7, #8]

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002ef8:	61fb      	str	r3, [r7, #28]
    {
        xReturn = xTickCount;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <xTaskGetTickCountFromISR+0x54>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002f0e:	bf00      	nop
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4619      	mov	r1, r3
 8002f14:	20d2      	movs	r0, #210	@ 0xd2
 8002f16:	f003 fc2f 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002f1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000188 	.word	0x20000188

08002f2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f2c:	b5b0      	push	{r4, r5, r7, lr}
 8002f2e:	b08c      	sub	sp, #48	@ 0x30
 8002f30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002f36:	4b8a      	ldr	r3, [pc, #552]	@ (8003160 <xTaskIncrementTick+0x234>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 80fd 	bne.w	800313a <xTaskIncrementTick+0x20e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f40:	4b88      	ldr	r3, [pc, #544]	@ (8003164 <xTaskIncrementTick+0x238>)
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	1c54      	adds	r4, r2, #1
 8002f48:	f143 0500 	adc.w	r5, r3, #0
 8002f4c:	e9c7 4508 	strd	r4, r5, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f50:	4984      	ldr	r1, [pc, #528]	@ (8003164 <xTaskIncrementTick+0x238>)
 8002f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f56:	e9c1 2300 	strd	r2, r3, [r1]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	d121      	bne.n	8002fa6 <xTaskIncrementTick+0x7a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f62:	4b81      	ldr	r3, [pc, #516]	@ (8003168 <xTaskIncrementTick+0x23c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <xTaskIncrementTick+0x58>
    __asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	603b      	str	r3, [r7, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	bf00      	nop
 8002f82:	e7fd      	b.n	8002f80 <xTaskIncrementTick+0x54>
 8002f84:	4b78      	ldr	r3, [pc, #480]	@ (8003168 <xTaskIncrementTick+0x23c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	4b78      	ldr	r3, [pc, #480]	@ (800316c <xTaskIncrementTick+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a76      	ldr	r2, [pc, #472]	@ (8003168 <xTaskIncrementTick+0x23c>)
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4a76      	ldr	r2, [pc, #472]	@ (800316c <xTaskIncrementTick+0x240>)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b75      	ldr	r3, [pc, #468]	@ (8003170 <xTaskIncrementTick+0x244>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	4a74      	ldr	r2, [pc, #464]	@ (8003170 <xTaskIncrementTick+0x244>)
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	f000 fc29 	bl	80037f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002fa6:	4b73      	ldr	r3, [pc, #460]	@ (8003174 <xTaskIncrementTick+0x248>)
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fb0:	4290      	cmp	r0, r2
 8002fb2:	eb71 0303 	sbcs.w	r3, r1, r3
 8002fb6:	f0c0 80b9 	bcc.w	800312c <xTaskIncrementTick+0x200>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fba:	4b6b      	ldr	r3, [pc, #428]	@ (8003168 <xTaskIncrementTick+0x23c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d107      	bne.n	8002fd4 <xTaskIncrementTick+0xa8>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002fc4:	496b      	ldr	r1, [pc, #428]	@ (8003174 <xTaskIncrementTick+0x248>)
 8002fc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fce:	e9c1 2300 	strd	r2, r3, [r1]
                    break;
 8002fd2:	e0ab      	b.n	800312c <xTaskIncrementTick+0x200>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fd4:	4b64      	ldr	r3, [pc, #400]	@ (8003168 <xTaskIncrementTick+0x23c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fe4:	e9c7 2304 	strd	r2, r3, [r7, #16]

                    if( xConstTickCount < xItemValue )
 8002fe8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ff0:	4290      	cmp	r0, r2
 8002ff2:	eb71 0303 	sbcs.w	r3, r1, r3
 8002ff6:	d205      	bcs.n	8003004 <xTaskIncrementTick+0xd8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ff8:	495e      	ldr	r1, [pc, #376]	@ (8003174 <xTaskIncrementTick+0x248>)
 8002ffa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ffe:	e9c1 2300 	strd	r2, r3, [r1]
                        break;
 8003002:	e093      	b.n	800312c <xTaskIncrementTick+0x200>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	6952      	ldr	r2, [r2, #20]
 8003012:	60da      	str	r2, [r3, #12]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	6912      	ldr	r2, [r2, #16]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3308      	adds	r3, #8
 8003026:	429a      	cmp	r2, r3
 8003028:	d103      	bne.n	8003032 <xTaskIncrementTick+0x106>
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2200      	movs	r2, #0
 8003036:	61da      	str	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	1e5a      	subs	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01e      	beq.n	8003088 <xTaskIncrementTick+0x15c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	3320      	adds	r3, #32
 800306c:	429a      	cmp	r2, r3
 800306e:	d103      	bne.n	8003078 <xTaskIncrementTick+0x14c>
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	605a      	str	r2, [r3, #4]
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2200      	movs	r2, #0
 800307c:	635a      	str	r2, [r3, #52]	@ 0x34
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	1e5a      	subs	r2, r3, #1
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	4618      	mov	r0, r3
 800308c:	f003 fc6c 	bl	8006968 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003094:	4b38      	ldr	r3, [pc, #224]	@ (8003178 <xTaskIncrementTick+0x24c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d903      	bls.n	80030a4 <xTaskIncrementTick+0x178>
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a0:	4a35      	ldr	r2, [pc, #212]	@ (8003178 <xTaskIncrementTick+0x24c>)
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a8:	4934      	ldr	r1, [pc, #208]	@ (800317c <xTaskIncrementTick+0x250>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	3304      	adds	r3, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	611a      	str	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	615a      	str	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	3208      	adds	r2, #8
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f103 0208 	add.w	r2, r3, #8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4a24      	ldr	r2, [pc, #144]	@ (800317c <xTaskIncrementTick+0x250>)
 80030ea:	441a      	add	r2, r3
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	61da      	str	r2, [r3, #28]
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030f4:	4921      	ldr	r1, [pc, #132]	@ (800317c <xTaskIncrementTick+0x250>)
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	481c      	ldr	r0, [pc, #112]	@ (800317c <xTaskIncrementTick+0x250>)
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4403      	add	r3, r0
 8003114:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800311a:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <xTaskIncrementTick+0x254>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003120:	429a      	cmp	r2, r3
 8003122:	f67f af4a 	bls.w	8002fba <xTaskIncrementTick+0x8e>
                            {
                                xSwitchRequired = pdTRUE;
 8003126:	2301      	movs	r3, #1
 8003128:	62fb      	str	r3, [r7, #44]	@ 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800312a:	e746      	b.n	8002fba <xTaskIncrementTick+0x8e>
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800312c:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <xTaskIncrementTick+0x258>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <xTaskIncrementTick+0x220>
                {
                    xSwitchRequired = pdTRUE;
 8003134:	2301      	movs	r3, #1
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003138:	e008      	b.n	800314c <xTaskIncrementTick+0x220>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800313a:	4b13      	ldr	r3, [pc, #76]	@ (8003188 <xTaskIncrementTick+0x25c>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	1c50      	adds	r0, r2, #1
 8003142:	f143 0100 	adc.w	r1, r3, #0
 8003146:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <xTaskIncrementTick+0x25c>)
 8003148:	e9c3 0100 	strd	r0, r1, [r3]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	4619      	mov	r1, r3
 8003150:	20db      	movs	r0, #219	@ 0xdb
 8003152:	f003 fb11 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003158:	4618      	mov	r0, r3
 800315a:	3730      	adds	r7, #48	@ 0x30
 800315c:	46bd      	mov	sp, r7
 800315e:	bdb0      	pop	{r4, r5, r7, pc}
 8003160:	200001bc 	.word	0x200001bc
 8003164:	20000188 	.word	0x20000188
 8003168:	20000128 	.word	0x20000128
 800316c:	2000012c 	.word	0x2000012c
 8003170:	200001a4 	.word	0x200001a4
 8003174:	200001b0 	.word	0x200001b0
 8003178:	20000190 	.word	0x20000190
 800317c:	20000080 	.word	0x20000080
 8003180:	20000078 	.word	0x20000078
 8003184:	200001a0 	.word	0x200001a0
 8003188:	20000198 	.word	0x20000198

0800318c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003192:	4b2f      	ldr	r3, [pc, #188]	@ (8003250 <vTaskSwitchContext+0xc4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800319a:	4b2e      	ldr	r3, [pc, #184]	@ (8003254 <vTaskSwitchContext+0xc8>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80031a0:	e051      	b.n	8003246 <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 80031a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003254 <vTaskSwitchContext+0xc8>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80031a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003258 <vTaskSwitchContext+0xcc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	e011      	b.n	80031d4 <vTaskSwitchContext+0x48>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <vTaskSwitchContext+0x42>
    __asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	607b      	str	r3, [r7, #4]
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	e7fd      	b.n	80031ca <vTaskSwitchContext+0x3e>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	4921      	ldr	r1, [pc, #132]	@ (800325c <vTaskSwitchContext+0xd0>)
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4413      	add	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	440b      	add	r3, r1
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0e3      	beq.n	80031b0 <vTaskSwitchContext+0x24>
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4a1a      	ldr	r2, [pc, #104]	@ (800325c <vTaskSwitchContext+0xd0>)
 80031f4:	4413      	add	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3308      	adds	r3, #8
 800320a:	429a      	cmp	r2, r3
 800320c:	d103      	bne.n	8003216 <vTaskSwitchContext+0x8a>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	4a10      	ldr	r2, [pc, #64]	@ (8003260 <vTaskSwitchContext+0xd4>)
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4a0d      	ldr	r2, [pc, #52]	@ (8003258 <vTaskSwitchContext+0xcc>)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003226:	4b0f      	ldr	r3, [pc, #60]	@ (8003264 <vTaskSwitchContext+0xd8>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <vTaskSwitchContext+0xd4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d102      	bne.n	8003238 <vTaskSwitchContext+0xac>
 8003232:	f003 faf9 	bl	8006828 <SEGGER_SYSVIEW_OnIdle>
 8003236:	e004      	b.n	8003242 <vTaskSwitchContext+0xb6>
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <vTaskSwitchContext+0xd4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f003 fb51 	bl	80068e4 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003242:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <vTaskSwitchContext+0xd4>)
 8003244:	681b      	ldr	r3, [r3, #0]
    }
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200001bc 	.word	0x200001bc
 8003254:	200001a0 	.word	0x200001a0
 8003258:	20000190 	.word	0x20000190
 800325c:	20000080 	.word	0x20000080
 8003260:	20000078 	.word	0x20000078
 8003264:	200001b8 	.word	0x200001b8

08003268 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	e9c7 2300 	strd	r2, r3, [r7]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <vTaskPlaceOnEventList+0x2a>
    __asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	617b      	str	r3, [r7, #20]
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	e7fd      	b.n	800328e <vTaskPlaceOnEventList+0x26>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003292:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <vTaskPlaceOnEventList+0x50>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3320      	adds	r3, #32
 8003298:	4619      	mov	r1, r3
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f7fe fe42 	bl	8001f24 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032a0:	2201      	movs	r2, #1
 80032a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032a6:	f000 fae9 	bl	800387c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80032aa:	20e1      	movs	r0, #225	@ 0xe1
 80032ac:	f003 fa28 	bl	8006700 <SEGGER_SYSVIEW_RecordEndCall>
}
 80032b0:	bf00      	nop
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000078 	.word	0x20000078

080032bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	e9c7 2300 	strd	r2, r3, [r7]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10b      	bne.n	80032e6 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	613b      	str	r3, [r7, #16]
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	e7fd      	b.n	80032e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	4b19      	ldr	r3, [pc, #100]	@ (8003354 <vTaskPlaceOnEventListRestricted+0x98>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80032f4:	4b17      	ldr	r3, [pc, #92]	@ (8003354 <vTaskPlaceOnEventListRestricted+0x98>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	68d2      	ldr	r2, [r2, #12]
 80032fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032fe:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <vTaskPlaceOnEventListRestricted+0x98>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	3220      	adds	r2, #32
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	4b12      	ldr	r3, [pc, #72]	@ (8003354 <vTaskPlaceOnEventListRestricted+0x98>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f103 0220 	add.w	r2, r3, #32
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	4b0f      	ldr	r3, [pc, #60]	@ (8003354 <vTaskPlaceOnEventListRestricted+0x98>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	635a      	str	r2, [r3, #52]	@ 0x34
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <vTaskPlaceOnEventListRestricted+0x7e>
        {
            xTicksToWait = portMAX_DELAY;
 800332e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003336:	e9c7 2300 	strd	r2, r3, [r7]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800333a:	6a3a      	ldr	r2, [r7, #32]
 800333c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003340:	f000 fa9c 	bl	800387c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003344:	20e3      	movs	r0, #227	@ 0xe3
 8003346:	f003 f9db 	bl	8006700 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000078 	.word	0x20000078

08003358 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	@ 0x28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10b      	bne.n	8003386 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	60fb      	str	r3, [r7, #12]
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	e7fd      	b.n	8003382 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	6a3a      	ldr	r2, [r7, #32]
 8003392:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	6a3a      	ldr	r2, [r7, #32]
 800339c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	3320      	adds	r3, #32
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d103      	bne.n	80033b4 <xTaskRemoveFromEventList+0x5c>
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	2200      	movs	r2, #0
 80033b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80033c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003504 <xTaskRemoveFromEventList+0x1ac>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d166      	bne.n	800349a <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	6a3a      	ldr	r2, [r7, #32]
 80033d8:	6952      	ldr	r2, [r2, #20]
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	6912      	ldr	r2, [r2, #16]
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	3308      	adds	r3, #8
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d103      	bne.n	80033fa <xTaskRemoveFromEventList+0xa2>
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	2200      	movs	r2, #0
 80033fe:	61da      	str	r2, [r3, #28]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1e5a      	subs	r2, r3, #1
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	4618      	mov	r0, r3
 800340e:	f003 faab 	bl	8006968 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003416:	4b3c      	ldr	r3, [pc, #240]	@ (8003508 <xTaskRemoveFromEventList+0x1b0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d903      	bls.n	8003426 <xTaskRemoveFromEventList+0xce>
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003422:	4a39      	ldr	r2, [pc, #228]	@ (8003508 <xTaskRemoveFromEventList+0x1b0>)
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800342a:	4938      	ldr	r1, [pc, #224]	@ (800350c <xTaskRemoveFromEventList+0x1b4>)
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	440b      	add	r3, r1
 8003436:	3304      	adds	r3, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	611a      	str	r2, [r3, #16]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	615a      	str	r2, [r3, #20]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	6a3a      	ldr	r2, [r7, #32]
 8003450:	3208      	adds	r2, #8
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	f103 0208 	add.w	r2, r3, #8
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4a28      	ldr	r2, [pc, #160]	@ (800350c <xTaskRemoveFromEventList+0x1b4>)
 800346c:	441a      	add	r2, r3
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	61da      	str	r2, [r3, #28]
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003476:	4925      	ldr	r1, [pc, #148]	@ (800350c <xTaskRemoveFromEventList+0x1b4>)
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6a3a      	ldr	r2, [r7, #32]
 8003486:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003488:	1c59      	adds	r1, r3, #1
 800348a:	4820      	ldr	r0, [pc, #128]	@ (800350c <xTaskRemoveFromEventList+0x1b4>)
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4403      	add	r3, r0
 8003496:	6019      	str	r1, [r3, #0]
 8003498:	e01b      	b.n	80034d2 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800349a:	4b1d      	ldr	r3, [pc, #116]	@ (8003510 <xTaskRemoveFromEventList+0x1b8>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	6a3a      	ldr	r2, [r7, #32]
 80034b4:	3220      	adds	r2, #32
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	f103 0220 	add.w	r2, r3, #32
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	4a12      	ldr	r2, [pc, #72]	@ (8003510 <xTaskRemoveFromEventList+0x1b8>)
 80034c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80034c8:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <xTaskRemoveFromEventList+0x1b8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3301      	adds	r3, #1
 80034ce:	4a10      	ldr	r2, [pc, #64]	@ (8003510 <xTaskRemoveFromEventList+0x1b8>)
 80034d0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003514 <xTaskRemoveFromEventList+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	429a      	cmp	r2, r3
 80034de:	d905      	bls.n	80034ec <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80034e0:	2301      	movs	r3, #1
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80034e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003518 <xTaskRemoveFromEventList+0x1c0>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e001      	b.n	80034f0 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	4619      	mov	r1, r3
 80034f4:	20e4      	movs	r0, #228	@ 0xe4
 80034f6:	f003 f93f 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3728      	adds	r7, #40	@ 0x28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	200001bc 	.word	0x200001bc
 8003508:	20000190 	.word	0x20000190
 800350c:	20000080 	.word	0x20000080
 8003510:	20000130 	.word	0x20000130
 8003514:	20000078 	.word	0x20000078
 8003518:	200001a0 	.word	0x200001a0

0800351c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003524:	4b08      	ldr	r3, [pc, #32]	@ (8003548 <vTaskInternalSetTimeOutState+0x2c>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800352c:	4b07      	ldr	r3, [pc, #28]	@ (800354c <vTaskInternalSetTimeOutState+0x30>)
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	e9c1 2302 	strd	r2, r3, [r1, #8]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003538:	20e7      	movs	r0, #231	@ 0xe7
 800353a:	f003 f8e1 	bl	8006700 <SEGGER_SYSVIEW_RecordEndCall>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200001a4 	.word	0x200001a4
 800354c:	20000188 	.word	0x20000188

08003550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003550:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003554:	b08a      	sub	sp, #40	@ 0x28
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <xTaskCheckForTimeOut+0x2a>
    __asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	60fb      	str	r3, [r7, #12]
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	e7fd      	b.n	8003576 <xTaskCheckForTimeOut+0x26>
    configASSERT( pxTicksToWait );
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <xTaskCheckForTimeOut+0x48>
    __asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	60bb      	str	r3, [r7, #8]
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <xTaskCheckForTimeOut+0x44>

    taskENTER_CRITICAL();
 8003598:	f000 ff52 	bl	8004440 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800359c:	4b32      	ldr	r3, [pc, #200]	@ (8003668 <xTaskCheckForTimeOut+0x118>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035b0:	ebb0 0802 	subs.w	r8, r0, r2
 80035b4:	eb61 0903 	sbc.w	r9, r1, r3
 80035b8:	e9c7 8904 	strd	r8, r9, [r7, #16]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035c6:	bf08      	it	eq
 80035c8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 80035cc:	d102      	bne.n	80035d4 <xTaskCheckForTimeOut+0x84>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d2:	e03b      	b.n	800364c <xTaskCheckForTimeOut+0xfc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4b24      	ldr	r3, [pc, #144]	@ (800366c <xTaskCheckForTimeOut+0x11c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d012      	beq.n	8003606 <xTaskCheckForTimeOut+0xb6>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035ea:	4290      	cmp	r0, r2
 80035ec:	eb71 0303 	sbcs.w	r3, r1, r3
 80035f0:	d309      	bcc.n	8003606 <xTaskCheckForTimeOut+0xb6>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
            *pxTicksToWait = ( TickType_t ) 0;
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9c1 2300 	strd	r2, r3, [r1]
 8003604:	e022      	b.n	800364c <xTaskCheckForTimeOut+0xfc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003610:	4290      	cmp	r0, r2
 8003612:	eb71 0303 	sbcs.w	r3, r1, r3
 8003616:	d210      	bcs.n	800363a <xTaskCheckForTimeOut+0xea>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800361e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003622:	1a84      	subs	r4, r0, r2
 8003624:	eb61 0503 	sbc.w	r5, r1, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	e9c3 4500 	strd	r4, r5, [r3]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ff74 	bl	800351c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
 8003638:	e008      	b.n	800364c <xTaskCheckForTimeOut+0xfc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800363a:	6839      	ldr	r1, [r7, #0]
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9c1 2300 	strd	r2, r3, [r1]
            xReturn = pdTRUE;
 8003648:	2301      	movs	r3, #1
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    taskEXIT_CRITICAL();
 800364c:	f000 ff2a 	bl	80044a4 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	4619      	mov	r1, r3
 8003654:	20e8      	movs	r0, #232	@ 0xe8
 8003656:	f003 f88f 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800365c:	4618      	mov	r0, r3
 800365e:	3728      	adds	r7, #40	@ 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003666:	bf00      	nop
 8003668:	20000188 	.word	0x20000188
 800366c:	200001a4 	.word	0x200001a4

08003670 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003674:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <vTaskMissedYield+0x14>)
 8003676:	2201      	movs	r2, #1
 8003678:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800367a:	20e9      	movs	r0, #233	@ 0xe9
 800367c:	f003 f840 	bl	8006700 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003680:	bf00      	nop
 8003682:	bd80      	pop	{r7, pc}
 8003684:	200001a0 	.word	0x200001a0

08003688 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003690:	f000 f854 	bl	800373c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003694:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <prvIdleTask+0x2c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d907      	bls.n	80036ac <prvIdleTask+0x24>
            {
                taskYIELD();
 800369c:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <prvIdleTask+0x30>)
 800369e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	f3bf 8f6f 	isb	sy
        #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */

        #if ( configUSE_IDLE_HOOK == 1 )
        {
            /* Call the user defined function from within the idle task. */
            vApplicationIdleHook();
 80036ac:	f7fd f8f8 	bl	80008a0 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80036b0:	e7ee      	b.n	8003690 <prvIdleTask+0x8>
 80036b2:	bf00      	nop
 80036b4:	20000080 	.word	0x20000080
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036c2:	2300      	movs	r3, #0
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	e00c      	b.n	80036e2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4a12      	ldr	r2, [pc, #72]	@ (800371c <prvInitialiseTaskLists+0x60>)
 80036d4:	4413      	add	r3, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe fbf0 	bl	8001ebc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3301      	adds	r3, #1
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d9ef      	bls.n	80036c8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036e8:	480d      	ldr	r0, [pc, #52]	@ (8003720 <prvInitialiseTaskLists+0x64>)
 80036ea:	f7fe fbe7 	bl	8001ebc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036ee:	480d      	ldr	r0, [pc, #52]	@ (8003724 <prvInitialiseTaskLists+0x68>)
 80036f0:	f7fe fbe4 	bl	8001ebc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036f4:	480c      	ldr	r0, [pc, #48]	@ (8003728 <prvInitialiseTaskLists+0x6c>)
 80036f6:	f7fe fbe1 	bl	8001ebc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80036fa:	480c      	ldr	r0, [pc, #48]	@ (800372c <prvInitialiseTaskLists+0x70>)
 80036fc:	f7fe fbde 	bl	8001ebc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003700:	480b      	ldr	r0, [pc, #44]	@ (8003730 <prvInitialiseTaskLists+0x74>)
 8003702:	f7fe fbdb 	bl	8001ebc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003706:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <prvInitialiseTaskLists+0x78>)
 8003708:	4a05      	ldr	r2, [pc, #20]	@ (8003720 <prvInitialiseTaskLists+0x64>)
 800370a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800370c:	4b0a      	ldr	r3, [pc, #40]	@ (8003738 <prvInitialiseTaskLists+0x7c>)
 800370e:	4a05      	ldr	r2, [pc, #20]	@ (8003724 <prvInitialiseTaskLists+0x68>)
 8003710:	601a      	str	r2, [r3, #0]
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000080 	.word	0x20000080
 8003720:	200000f8 	.word	0x200000f8
 8003724:	20000110 	.word	0x20000110
 8003728:	20000130 	.word	0x20000130
 800372c:	20000148 	.word	0x20000148
 8003730:	20000168 	.word	0x20000168
 8003734:	20000128 	.word	0x20000128
 8003738:	2000012c 	.word	0x2000012c

0800373c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003742:	e019      	b.n	8003778 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003744:	f000 fe7c 	bl	8004440 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003748:	4b10      	ldr	r3, [pc, #64]	@ (800378c <prvCheckTasksWaitingTermination+0x50>)
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3308      	adds	r3, #8
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fc2a 	bl	8001fae <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <prvCheckTasksWaitingTermination+0x54>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3b01      	subs	r3, #1
 8003760:	4a0b      	ldr	r2, [pc, #44]	@ (8003790 <prvCheckTasksWaitingTermination+0x54>)
 8003762:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003764:	4b0b      	ldr	r3, [pc, #44]	@ (8003794 <prvCheckTasksWaitingTermination+0x58>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3b01      	subs	r3, #1
 800376a:	4a0a      	ldr	r2, [pc, #40]	@ (8003794 <prvCheckTasksWaitingTermination+0x58>)
 800376c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800376e:	f000 fe99 	bl	80044a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f810 	bl	8003798 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003778:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <prvCheckTasksWaitingTermination+0x58>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e1      	bne.n	8003744 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000148 	.word	0x20000148
 8003790:	20000180 	.word	0x20000180
 8003794:	20000160 	.word	0x20000160

08003798 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d108      	bne.n	80037bc <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 f8a8 	bl	8004904 <vPortFree>
                vPortFree( pxTCB );
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f001 f8a5 	bl	8004904 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80037ba:	e019      	b.n	80037f0 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d103      	bne.n	80037ce <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f001 f89c 	bl	8004904 <vPortFree>
    }
 80037cc:	e010      	b.n	80037f0 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d00b      	beq.n	80037f0 <prvDeleteTCB+0x58>
    __asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	60fb      	str	r3, [r7, #12]
}
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	e7fd      	b.n	80037ec <prvDeleteTCB+0x54>
    }
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003830 <prvResetNextTaskUnblockTime+0x38>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d107      	bne.n	8003816 <prvResetNextTaskUnblockTime+0x1e>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003806:	490b      	ldr	r1, [pc, #44]	@ (8003834 <prvResetNextTaskUnblockTime+0x3c>)
 8003808:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800380c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003810:	e9c1 2300 	strd	r2, r3, [r1]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003814:	e007      	b.n	8003826 <prvResetNextTaskUnblockTime+0x2e>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003816:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <prvResetNextTaskUnblockTime+0x38>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	4904      	ldr	r1, [pc, #16]	@ (8003834 <prvResetNextTaskUnblockTime+0x3c>)
 8003822:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003826:	bf00      	nop
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20000128 	.word	0x20000128
 8003834:	200001b0 	.word	0x200001b0

08003838 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800383e:	4b0d      	ldr	r3, [pc, #52]	@ (8003874 <xTaskGetSchedulerState+0x3c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d102      	bne.n	800384c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003846:	2301      	movs	r3, #1
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	e008      	b.n	800385e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800384c:	4b0a      	ldr	r3, [pc, #40]	@ (8003878 <xTaskGetSchedulerState+0x40>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003854:	2302      	movs	r3, #2
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	e001      	b.n	800385e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4619      	mov	r1, r3
 8003862:	20f5      	movs	r0, #245	@ 0xf5
 8003864:	f002 ff88 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003868:	687b      	ldr	r3, [r7, #4]
    }
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000194 	.word	0x20000194
 8003878:	200001bc 	.word	0x200001bc

0800387c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800387c:	b5b0      	push	{r4, r5, r7, lr}
 800387e:	b08c      	sub	sp, #48	@ 0x30
 8003880:	af00      	add	r7, sp, #0
 8003882:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003888:	4b41      	ldr	r3, [pc, #260]	@ (8003990 <prvAddCurrentTaskToDelayedList+0x114>)
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003892:	4b40      	ldr	r3, [pc, #256]	@ (8003994 <prvAddCurrentTaskToDelayedList+0x118>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003898:	4b3f      	ldr	r3, [pc, #252]	@ (8003998 <prvAddCurrentTaskToDelayedList+0x11c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	623b      	str	r3, [r7, #32]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800389e:	4b3f      	ldr	r3, [pc, #252]	@ (800399c <prvAddCurrentTaskToDelayedList+0x120>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3308      	adds	r3, #8
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe fb82 	bl	8001fae <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038b2:	bf08      	it	eq
 80038b4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 80038b8:	d125      	bne.n	8003906 <prvAddCurrentTaskToDelayedList+0x8a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d022      	beq.n	8003906 <prvAddCurrentTaskToDelayedList+0x8a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c0:	4b37      	ldr	r3, [pc, #220]	@ (80039a0 <prvAddCurrentTaskToDelayedList+0x124>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	4b35      	ldr	r3, [pc, #212]	@ (800399c <prvAddCurrentTaskToDelayedList+0x120>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	611a      	str	r2, [r3, #16]
 80038ce:	4b33      	ldr	r3, [pc, #204]	@ (800399c <prvAddCurrentTaskToDelayedList+0x120>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	615a      	str	r2, [r3, #20]
 80038d8:	4b30      	ldr	r3, [pc, #192]	@ (800399c <prvAddCurrentTaskToDelayedList+0x120>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	3208      	adds	r2, #8
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	4b2d      	ldr	r3, [pc, #180]	@ (800399c <prvAddCurrentTaskToDelayedList+0x120>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f103 0208 	add.w	r2, r3, #8
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	60da      	str	r2, [r3, #12]
 80038f0:	4b2a      	ldr	r3, [pc, #168]	@ (800399c <prvAddCurrentTaskToDelayedList+0x120>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2a      	ldr	r2, [pc, #168]	@ (80039a0 <prvAddCurrentTaskToDelayedList+0x124>)
 80038f6:	61da      	str	r2, [r3, #28]
 80038f8:	4b29      	ldr	r3, [pc, #164]	@ (80039a0 <prvAddCurrentTaskToDelayedList+0x124>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	4a28      	ldr	r2, [pc, #160]	@ (80039a0 <prvAddCurrentTaskToDelayedList+0x124>)
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003904:	e03f      	b.n	8003986 <prvAddCurrentTaskToDelayedList+0x10a>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003906:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800390a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800390e:	1884      	adds	r4, r0, r2
 8003910:	eb41 0503 	adc.w	r5, r1, r3
 8003914:	e9c7 4504 	strd	r4, r5, [r7, #16]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003918:	4b20      	ldr	r3, [pc, #128]	@ (800399c <prvAddCurrentTaskToDelayedList+0x120>)
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003920:	e9c1 2302 	strd	r2, r3, [r1, #8]
            if( xTimeToWake < xConstTickCount )
 8003924:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800392c:	4290      	cmp	r0, r2
 800392e:	eb71 0303 	sbcs.w	r3, r1, r3
 8003932:	d20d      	bcs.n	8003950 <prvAddCurrentTaskToDelayedList+0xd4>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003934:	4b19      	ldr	r3, [pc, #100]	@ (800399c <prvAddCurrentTaskToDelayedList+0x120>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2104      	movs	r1, #4
 800393a:	4618      	mov	r0, r3
 800393c:	f003 f856 	bl	80069ec <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003940:	4b16      	ldr	r3, [pc, #88]	@ (800399c <prvAddCurrentTaskToDelayedList+0x120>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	4619      	mov	r1, r3
 8003948:	6a38      	ldr	r0, [r7, #32]
 800394a:	f7fe faeb 	bl	8001f24 <vListInsert>
}
 800394e:	e01a      	b.n	8003986 <prvAddCurrentTaskToDelayedList+0x10a>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003950:	4b12      	ldr	r3, [pc, #72]	@ (800399c <prvAddCurrentTaskToDelayedList+0x120>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2104      	movs	r1, #4
 8003956:	4618      	mov	r0, r3
 8003958:	f003 f848 	bl	80069ec <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800395c:	4b0f      	ldr	r3, [pc, #60]	@ (800399c <prvAddCurrentTaskToDelayedList+0x120>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	4619      	mov	r1, r3
 8003964:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003966:	f7fe fadd 	bl	8001f24 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800396a:	4b0e      	ldr	r3, [pc, #56]	@ (80039a4 <prvAddCurrentTaskToDelayedList+0x128>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003974:	4290      	cmp	r0, r2
 8003976:	eb71 0303 	sbcs.w	r3, r1, r3
 800397a:	d204      	bcs.n	8003986 <prvAddCurrentTaskToDelayedList+0x10a>
                    xNextTaskUnblockTime = xTimeToWake;
 800397c:	4909      	ldr	r1, [pc, #36]	@ (80039a4 <prvAddCurrentTaskToDelayedList+0x128>)
 800397e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003982:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003986:	bf00      	nop
 8003988:	3730      	adds	r7, #48	@ 0x30
 800398a:	46bd      	mov	sp, r7
 800398c:	bdb0      	pop	{r4, r5, r7, pc}
 800398e:	bf00      	nop
 8003990:	20000188 	.word	0x20000188
 8003994:	20000128 	.word	0x20000128
 8003998:	2000012c 	.word	0x2000012c
 800399c:	20000078 	.word	0x20000078
 80039a0:	20000168 	.word	0x20000168
 80039a4:	200001b0 	.word	0x200001b0

080039a8 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a07      	ldr	r2, [pc, #28]	@ (80039d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80039b8:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4a06      	ldr	r2, [pc, #24]	@ (80039d8 <vApplicationGetIdleTaskMemory+0x30>)
 80039be:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2280      	movs	r2, #128	@ 0x80
 80039c4:	601a      	str	r2, [r3, #0]
    }
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	200001c0 	.word	0x200001c0
 80039d8:	20000220 	.word	0x20000220

080039dc <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a07      	ldr	r2, [pc, #28]	@ (8003a08 <vApplicationGetTimerTaskMemory+0x2c>)
 80039ec:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4a06      	ldr	r2, [pc, #24]	@ (8003a0c <vApplicationGetTimerTaskMemory+0x30>)
 80039f2:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2280      	movs	r2, #128	@ 0x80
 80039f8:	601a      	str	r2, [r3, #0]
    }
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000420 	.word	0x20000420
 8003a0c:	20000480 	.word	0x20000480

08003a10 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	@ 0x28
 8003a14:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a1a:	f000 faf1 	bl	8004000 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a1e:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <xTimerCreateTimerTask+0x90>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d021      	beq.n	8003a6a <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 8003a2e:	1d3a      	adds	r2, r7, #4
 8003a30:	f107 0108 	add.w	r1, r7, #8
 8003a34:	f107 030c 	add.w	r3, r7, #12
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff ffcf 	bl	80039dc <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	9202      	str	r2, [sp, #8]
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2304      	movs	r3, #4
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	460a      	mov	r2, r1
 8003a50:	4914      	ldr	r1, [pc, #80]	@ (8003aa4 <xTimerCreateTimerTask+0x94>)
 8003a52:	4815      	ldr	r0, [pc, #84]	@ (8003aa8 <xTimerCreateTimerTask+0x98>)
 8003a54:	f7fe fe17 	bl	8002686 <xTaskCreateStatic>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	4a14      	ldr	r2, [pc, #80]	@ (8003aac <xTimerCreateTimerTask+0x9c>)
 8003a5c:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8003a5e:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <xTimerCreateTimerTask+0x9c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8003a66:	2301      	movs	r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <xTimerCreateTimerTask+0x78>
    __asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	613b      	str	r3, [r7, #16]
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003a90:	f002 fe72 	bl	8006778 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003a94:	697b      	ldr	r3, [r7, #20]
    }
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200006b8 	.word	0x200006b8
 8003aa4:	08006ebc 	.word	0x08006ebc
 8003aa8:	08003b89 	.word	0x08003b89
 8003aac:	200006bc 	.word	0x200006bc

08003ab0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ab0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ab4:	b088      	sub	sp, #32
 8003ab6:	af04      	add	r7, sp, #16
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	e9c7 2300 	strd	r2, r3, [r7]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003abe:	e00d      	b.n	8003adc <prvReloadTimer+0x2c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ac6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003aca:	1884      	adds	r4, r0, r2
 8003acc:	eb41 0503 	adc.w	r5, r1, r3
 8003ad0:	e9c7 4500 	strd	r4, r5, [r7]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ae6:	eb10 0802 	adds.w	r8, r0, r2
 8003aea:	eb41 0903 	adc.w	r9, r1, r3
 8003aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003af2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003afa:	e9cd 2300 	strd	r2, r3, [sp]
 8003afe:	4642      	mov	r2, r8
 8003b00:	464b      	mov	r3, r9
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f906 	bl	8003d14 <prvInsertTimerInActiveList>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1d8      	bne.n	8003ac0 <prvReloadTimer+0x10>
        }
    }
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003b1c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003b26:	e9c7 2300 	strd	r2, r3, [r7]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b2a:	4b16      	ldr	r3, [pc, #88]	@ (8003b84 <prvProcessExpiredTimer+0x68>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3308      	adds	r3, #8
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fa38 	bl	8001fae <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <prvProcessExpiredTimer+0x44>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b50:	e9cd 2300 	strd	r2, r3, [sp]
 8003b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b58:	6978      	ldr	r0, [r7, #20]
 8003b5a:	f7ff ffa9 	bl	8003ab0 <prvReloadTimer>
 8003b5e:	e008      	b.n	8003b72 <prvProcessExpiredTimer+0x56>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b76:	6978      	ldr	r0, [r7, #20]
 8003b78:	4798      	blx	r3
    }
 8003b7a:	bf00      	nop
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200006b0 	.word	0x200006b0

08003b88 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b90:	f107 030c 	add.w	r3, r7, #12
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 f869 	bl	8003c6c <prvGetNextExpireTime>
 8003b9a:	e9c7 0104 	strd	r0, r1, [r7, #16]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ba6:	f000 f805 	bl	8003bb4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003baa:	f000 f909 	bl	8003dc0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bae:	bf00      	nop
 8003bb0:	e7ee      	b.n	8003b90 <prvTimerTask+0x8>
	...

08003bb4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb6:	b08b      	sub	sp, #44	@ 0x2c
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003bc0:	f7ff f840 	bl	8002c44 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f87b 	bl	8003cc4 <prvSampleTimeNow>
 8003bce:	e9c7 0106 	strd	r0, r1, [r7, #24]

            if( xTimerListsWereSwitched == pdFALSE )
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d13d      	bne.n	8003c54 <prvProcessTimerOrBlockTask+0xa0>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d110      	bne.n	8003c00 <prvProcessTimerOrBlockTask+0x4c>
 8003bde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003be6:	4290      	cmp	r0, r2
 8003be8:	eb71 0303 	sbcs.w	r3, r1, r3
 8003bec:	d308      	bcc.n	8003c00 <prvProcessTimerOrBlockTask+0x4c>
                {
                    ( void ) xTaskResumeAll();
 8003bee:	f7ff f837 	bl	8002c60 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bfa:	f7ff ff8f 	bl	8003b1c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003bfe:	e02b      	b.n	8003c58 <prvProcessTimerOrBlockTask+0xa4>
                    if( xListWasEmpty != pdFALSE )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <prvProcessTimerOrBlockTask+0x64>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c06:	4b16      	ldr	r3, [pc, #88]	@ (8003c60 <prvProcessTimerOrBlockTask+0xac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <prvProcessTimerOrBlockTask+0x60>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <prvProcessTimerOrBlockTask+0x62>
 8003c14:	2300      	movs	r3, #0
 8003c16:	607b      	str	r3, [r7, #4]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c18:	4b12      	ldr	r3, [pc, #72]	@ (8003c64 <prvProcessTimerOrBlockTask+0xb0>)
 8003c1a:	681e      	ldr	r6, [r3, #0]
 8003c1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c24:	1a84      	subs	r4, r0, r2
 8003c26:	eb61 0503 	sbc.w	r5, r1, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	4622      	mov	r2, r4
 8003c30:	462b      	mov	r3, r5
 8003c32:	4630      	mov	r0, r6
 8003c34:	f7fe fc8c 	bl	8002550 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c38:	f7ff f812 	bl	8002c60 <xTaskResumeAll>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <prvProcessTimerOrBlockTask+0xa4>
                        taskYIELD_WITHIN_API();
 8003c42:	4b09      	ldr	r3, [pc, #36]	@ (8003c68 <prvProcessTimerOrBlockTask+0xb4>)
 8003c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	f3bf 8f6f 	isb	sy
    }
 8003c52:	e001      	b.n	8003c58 <prvProcessTimerOrBlockTask+0xa4>
                ( void ) xTaskResumeAll();
 8003c54:	f7ff f804 	bl	8002c60 <xTaskResumeAll>
    }
 8003c58:	bf00      	nop
 8003c5a:	3724      	adds	r7, #36	@ 0x24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c60:	200006b4 	.word	0x200006b4
 8003c64:	200006b8 	.word	0x200006b8
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c74:	4b12      	ldr	r3, [pc, #72]	@ (8003cc0 <prvGetNextExpireTime+0x54>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <prvGetNextExpireTime+0x16>
 8003c7e:	2201      	movs	r2, #1
 8003c80:	e000      	b.n	8003c84 <prvGetNextExpireTime+0x18>
 8003c82:	2200      	movs	r2, #0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <prvGetNextExpireTime+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c90:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <prvGetNextExpireTime+0x54>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003c9e:	e005      	b.n	8003cac <prvGetNextExpireTime+0x40>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	e9c7 2302 	strd	r2, r3, [r7, #8]
        }

        return xNextExpireTime;
 8003cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	200006b0 	.word	0x200006b0

08003cc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003ccc:	f7ff f8e8 	bl	8002ea0 <xTaskGetTickCount>
 8003cd0:	e9c7 0102 	strd	r0, r1, [r7, #8]

        if( xTimeNow < xLastTime )
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d10 <prvSampleTimeNow+0x4c>)
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cde:	4290      	cmp	r0, r2
 8003ce0:	eb71 0303 	sbcs.w	r3, r1, r3
 8003ce4:	d205      	bcs.n	8003cf2 <prvSampleTimeNow+0x2e>
        {
            prvSwitchTimerLists();
 8003ce6:	f000 f961 	bl	8003fac <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e002      	b.n	8003cf8 <prvSampleTimeNow+0x34>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003cf8:	4905      	ldr	r1, [pc, #20]	@ (8003d10 <prvSampleTimeNow+0x4c>)
 8003cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cfe:	e9c1 2300 	strd	r2, r3, [r1]

        return xTimeNow;
 8003d02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	200006c0 	.word	0x200006c0

08003d14 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d14:	b5b0      	push	{r4, r5, r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	e9c7 2300 	strd	r2, r3, [r7]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d24:	68f9      	ldr	r1, [r7, #12]
 8003d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d2a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	619a      	str	r2, [r3, #24]

        if( xNextExpiryTime <= xTimeNow )
 8003d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d3c:	4290      	cmp	r0, r2
 8003d3e:	eb71 0303 	sbcs.w	r3, r1, r3
 8003d42:	d319      	bcc.n	8003d78 <prvInsertTimerInActiveList+0x64>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003d44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003d4c:	1a84      	subs	r4, r0, r2
 8003d4e:	eb61 0503 	sbc.w	r5, r1, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d58:	4294      	cmp	r4, r2
 8003d5a:	eb75 0303 	sbcs.w	r3, r5, r3
 8003d5e:	d302      	bcc.n	8003d66 <prvInsertTimerInActiveList+0x52>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e023      	b.n	8003dae <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d66:	4b14      	ldr	r3, [pc, #80]	@ (8003db8 <prvInsertTimerInActiveList+0xa4>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7fe f8d7 	bl	8001f24 <vListInsert>
 8003d76:	e01a      	b.n	8003dae <prvInsertTimerInActiveList+0x9a>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003d80:	4290      	cmp	r0, r2
 8003d82:	eb71 0303 	sbcs.w	r3, r1, r3
 8003d86:	d20a      	bcs.n	8003d9e <prvInsertTimerInActiveList+0x8a>
 8003d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003d90:	4290      	cmp	r0, r2
 8003d92:	eb71 0303 	sbcs.w	r3, r1, r3
 8003d96:	d302      	bcc.n	8003d9e <prvInsertTimerInActiveList+0x8a>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e007      	b.n	8003dae <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d9e:	4b07      	ldr	r3, [pc, #28]	@ (8003dbc <prvInsertTimerInActiveList+0xa8>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3308      	adds	r3, #8
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f7fe f8bb 	bl	8001f24 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003dae:	697b      	ldr	r3, [r7, #20]
    }
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bdb0      	pop	{r4, r5, r7, pc}
 8003db8:	200006b4 	.word	0x200006b4
 8003dbc:	200006b0 	.word	0x200006b0

08003dc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc4:	b092      	sub	sp, #72	@ 0x48
 8003dc6:	af04      	add	r7, sp, #16
        DaemonTaskMessage_t xMessage = { 0 };
 8003dc8:	f107 0308 	add.w	r3, r7, #8
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	60da      	str	r2, [r3, #12]
 8003dd6:	611a      	str	r2, [r3, #16]
 8003dd8:	615a      	str	r2, [r3, #20]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003dda:	e0d0      	b.n	8003f7e <prvProcessReceivedCommands+0x1be>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f2c0 80cd 	blt.w	8003f7e <prvProcessReceivedCommands+0x1be>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <prvProcessReceivedCommands+0x3a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df2:	3308      	adds	r3, #8
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fe f8da 	bl	8001fae <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff61 	bl	8003cc4 <prvSampleTimeNow>
 8003e02:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

                switch( xMessage.xMessageID )
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	f200 80b4 	bhi.w	8003f78 <prvProcessReceivedCommands+0x1b8>
 8003e10:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <prvProcessReceivedCommands+0x58>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e3d 	.word	0x08003e3d
 8003e1c:	08003e3d 	.word	0x08003e3d
 8003e20:	08003ecf 	.word	0x08003ecf
 8003e24:	08003ee3 	.word	0x08003ee3
 8003e28:	08003f4f 	.word	0x08003f4f
 8003e2c:	08003e3d 	.word	0x08003e3d
 8003e30:	08003e3d 	.word	0x08003e3d
 8003e34:	08003ecf 	.word	0x08003ecf
 8003e38:	08003ee3 	.word	0x08003ee3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e58:	1884      	adds	r4, r0, r2
 8003e5a:	eb41 0503 	adc.w	r5, r1, r3
 8003e5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e6a:	e9cd 2300 	strd	r2, r3, [sp]
 8003e6e:	4622      	mov	r2, r4
 8003e70:	462b      	mov	r3, r5
 8003e72:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e74:	f7ff ff4e 	bl	8003d14 <prvInsertTimerInActiveList>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d07e      	beq.n	8003f7c <prvProcessReceivedCommands+0x1bc>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d012      	beq.n	8003eb2 <prvProcessReceivedCommands+0xf2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003e8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e96:	eb10 0802 	adds.w	r8, r0, r2
 8003e9a:	eb41 0903 	adc.w	r9, r1, r3
 8003e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ea2:	e9cd 2300 	strd	r2, r3, [sp]
 8003ea6:	4642      	mov	r2, r8
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003eac:	f7ff fe00 	bl	8003ab0 <prvReloadTimer>
 8003eb0:	e008      	b.n	8003ec4 <prvProcessReceivedCommands+0x104>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003eca:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003ecc:	e056      	b.n	8003f7c <prvProcessReceivedCommands+0x1bc>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003edc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 8003ee0:	e04d      	b.n	8003f7e <prvProcessReceivedCommands+0x1be>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ef4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ef8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003efa:	e9c1 2308 	strd	r2, r3, [r1, #32]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	d10b      	bne.n	8003f20 <prvProcessReceivedCommands+0x160>
    __asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	e7fd      	b.n	8003f1c <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f22:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f2a:	eb10 0a02 	adds.w	sl, r0, r2
 8003f2e:	eb41 0b03 	adc.w	fp, r1, r3
 8003f32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f3e:	e9cd 2300 	strd	r2, r3, [sp]
 8003f42:	4652      	mov	r2, sl
 8003f44:	465b      	mov	r3, fp
 8003f46:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f48:	f7ff fee4 	bl	8003d14 <prvInsertTimerInActiveList>
                        break;
 8003f4c:	e017      	b.n	8003f7e <prvProcessReceivedCommands+0x1be>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d103      	bne.n	8003f64 <prvProcessReceivedCommands+0x1a4>
                            {
                                vPortFree( pxTimer );
 8003f5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f5e:	f000 fcd1 	bl	8004904 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f62:	e00c      	b.n	8003f7e <prvProcessReceivedCommands+0x1be>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 8003f76:	e002      	b.n	8003f7e <prvProcessReceivedCommands+0x1be>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <prvProcessReceivedCommands+0x1be>
                        break;
 8003f7c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <prvProcessReceivedCommands+0x1e8>)
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	f107 0108 	add.w	r1, r7, #8
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	f7fe f95d 	bl	800224c <xQueueReceive>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f47f af21 	bne.w	8003ddc <prvProcessReceivedCommands+0x1c>
                }
            }
        }
    }
 8003f9a:	bf00      	nop
 8003f9c:	bf00      	nop
 8003f9e:	3738      	adds	r7, #56	@ 0x38
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200006b8 	.word	0x200006b8

08003fac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fb2:	e00e      	b.n	8003fd2 <prvSwitchTimerLists+0x26>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fb4:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <prvSwitchTimerLists+0x4c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	e9c7 2300 	strd	r2, r3, [r7]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003fc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fce:	f7ff fda5 	bl	8003b1c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fd2:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <prvSwitchTimerLists+0x4c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1eb      	bne.n	8003fb4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <prvSwitchTimerLists+0x4c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]
        pxCurrentTimerList = pxOverflowTimerList;
 8003fe2:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <prvSwitchTimerLists+0x50>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a04      	ldr	r2, [pc, #16]	@ (8003ff8 <prvSwitchTimerLists+0x4c>)
 8003fe8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003fea:	4a04      	ldr	r2, [pc, #16]	@ (8003ffc <prvSwitchTimerLists+0x50>)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6013      	str	r3, [r2, #0]
    }
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	200006b0 	.word	0x200006b0
 8003ffc:	200006b4 	.word	0x200006b4

08004000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004006:	f000 fa1b 	bl	8004440 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800400a:	4b10      	ldr	r3, [pc, #64]	@ (800404c <prvCheckForValidListAndQueue+0x4c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d116      	bne.n	8004040 <prvCheckForValidListAndQueue+0x40>
            {
                vListInitialise( &xActiveTimerList1 );
 8004012:	480f      	ldr	r0, [pc, #60]	@ (8004050 <prvCheckForValidListAndQueue+0x50>)
 8004014:	f7fd ff52 	bl	8001ebc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004018:	480e      	ldr	r0, [pc, #56]	@ (8004054 <prvCheckForValidListAndQueue+0x54>)
 800401a:	f7fd ff4f 	bl	8001ebc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800401e:	4b0e      	ldr	r3, [pc, #56]	@ (8004058 <prvCheckForValidListAndQueue+0x58>)
 8004020:	4a0b      	ldr	r2, [pc, #44]	@ (8004050 <prvCheckForValidListAndQueue+0x50>)
 8004022:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004024:	4b0d      	ldr	r3, [pc, #52]	@ (800405c <prvCheckForValidListAndQueue+0x5c>)
 8004026:	4a0b      	ldr	r2, [pc, #44]	@ (8004054 <prvCheckForValidListAndQueue+0x54>)
 8004028:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800402a:	2300      	movs	r3, #0
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	4b0c      	ldr	r3, [pc, #48]	@ (8004060 <prvCheckForValidListAndQueue+0x60>)
 8004030:	4a0c      	ldr	r2, [pc, #48]	@ (8004064 <prvCheckForValidListAndQueue+0x64>)
 8004032:	2118      	movs	r1, #24
 8004034:	200a      	movs	r0, #10
 8004036:	f7fe f87f 	bl	8002138 <xQueueGenericCreateStatic>
 800403a:	4603      	mov	r3, r0
 800403c:	4a03      	ldr	r2, [pc, #12]	@ (800404c <prvCheckForValidListAndQueue+0x4c>)
 800403e:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004040:	f000 fa30 	bl	80044a4 <vPortExitCritical>
    }
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200006b8 	.word	0x200006b8
 8004050:	20000680 	.word	0x20000680
 8004054:	20000698 	.word	0x20000698
 8004058:	200006b0 	.word	0x200006b0
 800405c:	200006b4 	.word	0x200006b4
 8004060:	200007b8 	.word	0x200007b8
 8004064:	200006c8 	.word	0x200006c8

08004068 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3b04      	subs	r3, #4
 8004078:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004080:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3b04      	subs	r3, #4
 8004086:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f023 0201 	bic.w	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b04      	subs	r3, #4
 8004096:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004098:	4a0c      	ldr	r2, [pc, #48]	@ (80040cc <pxPortInitialiseStack+0x64>)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3b14      	subs	r3, #20
 80040a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3b04      	subs	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f06f 0202 	mvn.w	r2, #2
 80040b6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3b20      	subs	r3, #32
 80040bc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040be:	68fb      	ldr	r3, [r7, #12]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	080040d1 	.word	0x080040d1

080040d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80040da:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <prvTaskExitError+0x58>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040e2:	d00b      	beq.n	80040fc <prvTaskExitError+0x2c>
    __asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	60fb      	str	r3, [r7, #12]
}
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	e7fd      	b.n	80040f8 <prvTaskExitError+0x28>
    __asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	60bb      	str	r3, [r7, #8]
}
 800410e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004110:	bf00      	nop
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0fc      	beq.n	8004112 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	2000000c 	.word	0x2000000c
 800412c:	00000000 	.word	0x00000000

08004130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004130:	4b07      	ldr	r3, [pc, #28]	@ (8004150 <pxCurrentTCBConst2>)
 8004132:	6819      	ldr	r1, [r3, #0]
 8004134:	6808      	ldr	r0, [r1, #0]
 8004136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413a:	f380 8809 	msr	PSP, r0
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8811 	msr	BASEPRI, r0
 800414a:	4770      	bx	lr
 800414c:	f3af 8000 	nop.w

08004150 <pxCurrentTCBConst2>:
 8004150:	20000078 	.word	0x20000078
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop

08004158 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004158:	4808      	ldr	r0, [pc, #32]	@ (800417c <prvPortStartFirstTask+0x24>)
 800415a:	6800      	ldr	r0, [r0, #0]
 800415c:	6800      	ldr	r0, [r0, #0]
 800415e:	f380 8808 	msr	MSP, r0
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8814 	msr	CONTROL, r0
 800416a:	b662      	cpsie	i
 800416c:	b661      	cpsie	f
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	df00      	svc	0
 8004178:	bf00      	nop
 800417a:	0000      	.short	0x0000
 800417c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop

08004184 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08c      	sub	sp, #48	@ 0x30
 8004188:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800418a:	4b69      	ldr	r3, [pc, #420]	@ (8004330 <xPortStartScheduler+0x1ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a69      	ldr	r2, [pc, #420]	@ (8004334 <xPortStartScheduler+0x1b0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d10b      	bne.n	80041ac <xPortStartScheduler+0x28>
    __asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	623b      	str	r3, [r7, #32]
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041ac:	4b60      	ldr	r3, [pc, #384]	@ (8004330 <xPortStartScheduler+0x1ac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a61      	ldr	r2, [pc, #388]	@ (8004338 <xPortStartScheduler+0x1b4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d10b      	bne.n	80041ce <xPortStartScheduler+0x4a>
    __asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80041ce:	4b5b      	ldr	r3, [pc, #364]	@ (800433c <xPortStartScheduler+0x1b8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80041d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d6:	332c      	adds	r3, #44	@ 0x2c
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a59      	ldr	r2, [pc, #356]	@ (8004340 <xPortStartScheduler+0x1bc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <xPortStartScheduler+0x74>
    __asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	61fb      	str	r3, [r7, #28]
}
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
 80041f6:	e7fd      	b.n	80041f4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80041f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fa:	3338      	adds	r3, #56	@ 0x38
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a51      	ldr	r2, [pc, #324]	@ (8004344 <xPortStartScheduler+0x1c0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00b      	beq.n	800421c <xPortStartScheduler+0x98>
    __asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	61bb      	str	r3, [r7, #24]
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004220:	4b49      	ldr	r3, [pc, #292]	@ (8004348 <xPortStartScheduler+0x1c4>)
 8004222:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800422c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422e:	22ff      	movs	r2, #255	@ 0xff
 8004230:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004242:	b2da      	uxtb	r2, r3
 8004244:	4b41      	ldr	r3, [pc, #260]	@ (800434c <xPortStartScheduler+0x1c8>)
 8004246:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004248:	4b40      	ldr	r3, [pc, #256]	@ (800434c <xPortStartScheduler+0x1c8>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <xPortStartScheduler+0xe4>
    __asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	617b      	str	r3, [r7, #20]
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004272:	2b00      	cmp	r3, #0
 8004274:	d013      	beq.n	800429e <xPortStartScheduler+0x11a>
    __asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	613b      	str	r3, [r7, #16]
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	e7fd      	b.n	800428a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	3301      	adds	r3, #1
 8004292:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	b2db      	uxtb	r3, r3
 800429c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a6:	2b80      	cmp	r3, #128	@ 0x80
 80042a8:	d0f1      	beq.n	800428e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d103      	bne.n	80042b8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80042b0:	4b27      	ldr	r3, [pc, #156]	@ (8004350 <xPortStartScheduler+0x1cc>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e004      	b.n	80042c2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f1c3 0307 	rsb	r3, r3, #7
 80042be:	4a24      	ldr	r2, [pc, #144]	@ (8004350 <xPortStartScheduler+0x1cc>)
 80042c0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042c2:	4b23      	ldr	r3, [pc, #140]	@ (8004350 <xPortStartScheduler+0x1cc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	4a21      	ldr	r2, [pc, #132]	@ (8004350 <xPortStartScheduler+0x1cc>)
 80042ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042cc:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <xPortStartScheduler+0x1cc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004350 <xPortStartScheduler+0x1cc>)
 80042d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80042e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004354 <xPortStartScheduler+0x1d0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004354 <xPortStartScheduler+0x1d0>)
 80042e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80042ec:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <xPortStartScheduler+0x1d0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a18      	ldr	r2, [pc, #96]	@ (8004354 <xPortStartScheduler+0x1d0>)
 80042f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042f6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80042f8:	4b17      	ldr	r3, [pc, #92]	@ (8004358 <xPortStartScheduler+0x1d4>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042fe:	f000 f95d 	bl	80045bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004302:	4b16      	ldr	r3, [pc, #88]	@ (800435c <xPortStartScheduler+0x1d8>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004308:	f000 f97c 	bl	8004604 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800430c:	4b14      	ldr	r3, [pc, #80]	@ (8004360 <xPortStartScheduler+0x1dc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a13      	ldr	r2, [pc, #76]	@ (8004360 <xPortStartScheduler+0x1dc>)
 8004312:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004316:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004318:	f7ff ff1e 	bl	8004158 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800431c:	f7fe ff36 	bl	800318c <vTaskSwitchContext>
    prvTaskExitError();
 8004320:	f7ff fed6 	bl	80040d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3730      	adds	r7, #48	@ 0x30
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	e000ed00 	.word	0xe000ed00
 8004334:	410fc271 	.word	0x410fc271
 8004338:	410fc270 	.word	0x410fc270
 800433c:	e000ed08 	.word	0xe000ed08
 8004340:	08004131 	.word	0x08004131
 8004344:	08004501 	.word	0x08004501
 8004348:	e000e400 	.word	0xe000e400
 800434c:	20000808 	.word	0x20000808
 8004350:	2000080c 	.word	0x2000080c
 8004354:	e000ed20 	.word	0xe000ed20
 8004358:	e000ed1c 	.word	0xe000ed1c
 800435c:	2000000c 	.word	0x2000000c
 8004360:	e000ef34 	.word	0xe000ef34

08004364 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800436a:	4b2f      	ldr	r3, [pc, #188]	@ (8004428 <vInitPrioGroupValue+0xc4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2f      	ldr	r2, [pc, #188]	@ (800442c <vInitPrioGroupValue+0xc8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d10b      	bne.n	800438c <vInitPrioGroupValue+0x28>
    __asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	60fb      	str	r3, [r7, #12]
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800438c:	4b26      	ldr	r3, [pc, #152]	@ (8004428 <vInitPrioGroupValue+0xc4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a27      	ldr	r2, [pc, #156]	@ (8004430 <vInitPrioGroupValue+0xcc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10b      	bne.n	80043ae <vInitPrioGroupValue+0x4a>
    __asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	613b      	str	r3, [r7, #16]
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	e7fd      	b.n	80043aa <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043ae:	4b21      	ldr	r3, [pc, #132]	@ (8004434 <vInitPrioGroupValue+0xd0>)
 80043b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	22ff      	movs	r2, #255	@ 0xff
 80043be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	4b19      	ldr	r3, [pc, #100]	@ (8004438 <vInitPrioGroupValue+0xd4>)
 80043d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043d6:	4b19      	ldr	r3, [pc, #100]	@ (800443c <vInitPrioGroupValue+0xd8>)
 80043d8:	2207      	movs	r2, #7
 80043da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043dc:	e009      	b.n	80043f2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80043de:	4b17      	ldr	r3, [pc, #92]	@ (800443c <vInitPrioGroupValue+0xd8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	4a15      	ldr	r2, [pc, #84]	@ (800443c <vInitPrioGroupValue+0xd8>)
 80043e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fa:	2b80      	cmp	r3, #128	@ 0x80
 80043fc:	d0ef      	beq.n	80043de <vInitPrioGroupValue+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043fe:	4b0f      	ldr	r3, [pc, #60]	@ (800443c <vInitPrioGroupValue+0xd8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	4a0d      	ldr	r2, [pc, #52]	@ (800443c <vInitPrioGroupValue+0xd8>)
 8004406:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004408:	4b0c      	ldr	r3, [pc, #48]	@ (800443c <vInitPrioGroupValue+0xd8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004410:	4a0a      	ldr	r2, [pc, #40]	@ (800443c <vInitPrioGroupValue+0xd8>)
 8004412:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800441c:	bf00      	nop
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	e000ed00 	.word	0xe000ed00
 800442c:	410fc271 	.word	0x410fc271
 8004430:	410fc270 	.word	0x410fc270
 8004434:	e000e400 	.word	0xe000e400
 8004438:	20000808 	.word	0x20000808
 800443c:	2000080c 	.word	0x2000080c

08004440 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
    __asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	607b      	str	r3, [r7, #4]
}
 8004458:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800445a:	4b10      	ldr	r3, [pc, #64]	@ (800449c <vPortEnterCritical+0x5c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	4a0e      	ldr	r2, [pc, #56]	@ (800449c <vPortEnterCritical+0x5c>)
 8004462:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004464:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <vPortEnterCritical+0x5c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d110      	bne.n	800448e <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800446c:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <vPortEnterCritical+0x60>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <vPortEnterCritical+0x4e>
    __asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	603b      	str	r3, [r7, #0]
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	e7fd      	b.n	800448a <vPortEnterCritical+0x4a>
    }
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	2000000c 	.word	0x2000000c
 80044a0:	e000ed04 	.word	0xe000ed04

080044a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80044aa:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <vPortExitCritical+0x50>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <vPortExitCritical+0x26>
    __asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	607b      	str	r3, [r7, #4]
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	e7fd      	b.n	80044c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80044ca:	4b0a      	ldr	r3, [pc, #40]	@ (80044f4 <vPortExitCritical+0x50>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	4a08      	ldr	r2, [pc, #32]	@ (80044f4 <vPortExitCritical+0x50>)
 80044d2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80044d4:	4b07      	ldr	r3, [pc, #28]	@ (80044f4 <vPortExitCritical+0x50>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <vPortExitCritical+0x44>
 80044dc:	2300      	movs	r3, #0
 80044de:	603b      	str	r3, [r7, #0]
    __asm volatile
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f383 8811 	msr	BASEPRI, r3
}
 80044e6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	2000000c 	.word	0x2000000c
	...

08004500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004500:	f3ef 8009 	mrs	r0, PSP
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <pxCurrentTCBConst>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f01e 0f10 	tst.w	lr, #16
 8004510:	bf08      	it	eq
 8004512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451a:	6010      	str	r0, [r2, #0]
 800451c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004524:	f380 8811 	msr	BASEPRI, r0
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f7fe fe2c 	bl	800318c <vTaskSwitchContext>
 8004534:	f04f 0000 	mov.w	r0, #0
 8004538:	f380 8811 	msr	BASEPRI, r0
 800453c:	bc09      	pop	{r0, r3}
 800453e:	6819      	ldr	r1, [r3, #0]
 8004540:	6808      	ldr	r0, [r1, #0]
 8004542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004546:	f01e 0f10 	tst.w	lr, #16
 800454a:	bf08      	it	eq
 800454c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004550:	f380 8809 	msr	PSP, r0
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	f3af 8000 	nop.w

08004560 <pxCurrentTCBConst>:
 8004560:	20000078 	.word	0x20000078
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop

08004568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
    __asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	607b      	str	r3, [r7, #4]
}
 8004580:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004582:	f002 f843 	bl	800660c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004586:	f7fe fcd1 	bl	8002f2c <xTaskIncrementTick>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d006      	beq.n	800459e <xPortSysTickHandler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004590:	f002 f89a 	bl	80066c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004594:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <xPortSysTickHandler+0x50>)
 8004596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	e001      	b.n	80045a2 <xPortSysTickHandler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800459e:	f002 f877 	bl	8006690 <SEGGER_SYSVIEW_RecordExitISR>
 80045a2:	2300      	movs	r3, #0
 80045a4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f383 8811 	msr	BASEPRI, r3
}
 80045ac:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045c0:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <vPortSetupTimerInterrupt+0x34>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045c6:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <vPortSetupTimerInterrupt+0x38>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045cc:	4b0a      	ldr	r3, [pc, #40]	@ (80045f8 <vPortSetupTimerInterrupt+0x3c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0a      	ldr	r2, [pc, #40]	@ (80045fc <vPortSetupTimerInterrupt+0x40>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <vPortSetupTimerInterrupt+0x44>)
 80045da:	3b01      	subs	r3, #1
 80045dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045de:	4b04      	ldr	r3, [pc, #16]	@ (80045f0 <vPortSetupTimerInterrupt+0x34>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	e000e010 	.word	0xe000e010
 80045f4:	e000e018 	.word	0xe000e018
 80045f8:	20000000 	.word	0x20000000
 80045fc:	51eb851f 	.word	0x51eb851f
 8004600:	e000e014 	.word	0xe000e014

08004604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004604:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004614 <vPortEnableVFP+0x10>
 8004608:	6801      	ldr	r1, [r0, #0]
 800460a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800460e:	6001      	str	r1, [r0, #0]
 8004610:	4770      	bx	lr
 8004612:	0000      	.short	0x0000
 8004614:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop

0800461c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004622:	f3ef 8305 	mrs	r3, IPSR
 8004626:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b0f      	cmp	r3, #15
 800462c:	d915      	bls.n	800465a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800462e:	4a18      	ldr	r2, [pc, #96]	@ (8004690 <vPortValidateInterruptPriority+0x74>)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004638:	4b16      	ldr	r3, [pc, #88]	@ (8004694 <vPortValidateInterruptPriority+0x78>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	7afa      	ldrb	r2, [r7, #11]
 800463e:	429a      	cmp	r2, r3
 8004640:	d20b      	bcs.n	800465a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	607b      	str	r3, [r7, #4]
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800465a:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <vPortValidateInterruptPriority+0x7c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004662:	4b0e      	ldr	r3, [pc, #56]	@ (800469c <vPortValidateInterruptPriority+0x80>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d90b      	bls.n	8004682 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	603b      	str	r3, [r7, #0]
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	e7fd      	b.n	800467e <vPortValidateInterruptPriority+0x62>
    }
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000e3f0 	.word	0xe000e3f0
 8004694:	20000808 	.word	0x20000808
 8004698:	e000ed0c 	.word	0xe000ed0c
 800469c:	2000080c 	.word	0x2000080c

080046a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08e      	sub	sp, #56	@ 0x38
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d022      	beq.n	80046f8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80046b2:	2308      	movs	r3, #8
 80046b4:	43db      	mvns	r3, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d81b      	bhi.n	80046f4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80046bc:	2208      	movs	r2, #8
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4413      	add	r3, r2
 80046c2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d014      	beq.n	80046f8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	f1c3 0308 	rsb	r3, r3, #8
 80046d8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80046da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046dc:	43db      	mvns	r3, r3
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d804      	bhi.n	80046ee <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e8:	4413      	add	r3, r2
 80046ea:	607b      	str	r3, [r7, #4]
 80046ec:	e004      	b.n	80046f8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	e001      	b.n	80046f8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80046f8:	f7fe faa4 	bl	8002c44 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80046fc:	4b7a      	ldr	r3, [pc, #488]	@ (80048e8 <pvPortMalloc+0x248>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004704:	f000 f984 	bl	8004a10 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f2c0 80d3 	blt.w	80048b6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80cf 	beq.w	80048b6 <pvPortMalloc+0x216>
 8004718:	4b74      	ldr	r3, [pc, #464]	@ (80048ec <pvPortMalloc+0x24c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	429a      	cmp	r2, r3
 8004720:	f200 80c9 	bhi.w	80048b6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004724:	4b72      	ldr	r3, [pc, #456]	@ (80048f0 <pvPortMalloc+0x250>)
 8004726:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004728:	4b71      	ldr	r3, [pc, #452]	@ (80048f0 <pvPortMalloc+0x250>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800472e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004730:	4a70      	ldr	r2, [pc, #448]	@ (80048f4 <pvPortMalloc+0x254>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d305      	bcc.n	8004742 <pvPortMalloc+0xa2>
 8004736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004738:	4a6f      	ldr	r2, [pc, #444]	@ (80048f8 <pvPortMalloc+0x258>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d801      	bhi.n	8004742 <pvPortMalloc+0xa2>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <pvPortMalloc+0xa4>
 8004742:	2300      	movs	r3, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d129      	bne.n	800479c <pvPortMalloc+0xfc>
    __asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	623b      	str	r3, [r7, #32]
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	e7fd      	b.n	800475c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004762:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800476a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476c:	4a61      	ldr	r2, [pc, #388]	@ (80048f4 <pvPortMalloc+0x254>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d305      	bcc.n	800477e <pvPortMalloc+0xde>
 8004772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004774:	4a60      	ldr	r2, [pc, #384]	@ (80048f8 <pvPortMalloc+0x258>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d801      	bhi.n	800477e <pvPortMalloc+0xde>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <pvPortMalloc+0xe0>
 800477e:	2300      	movs	r3, #0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <pvPortMalloc+0xfc>
    __asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	61fb      	str	r3, [r7, #28]
}
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800479c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d903      	bls.n	80047ae <pvPortMalloc+0x10e>
 80047a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1d8      	bne.n	8004760 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80047ae:	4b4e      	ldr	r3, [pc, #312]	@ (80048e8 <pvPortMalloc+0x248>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d07e      	beq.n	80048b6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2208      	movs	r2, #8
 80047be:	4413      	add	r3, r2
 80047c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80047c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c4:	4a4b      	ldr	r2, [pc, #300]	@ (80048f4 <pvPortMalloc+0x254>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d305      	bcc.n	80047d6 <pvPortMalloc+0x136>
 80047ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047cc:	4a4a      	ldr	r2, [pc, #296]	@ (80048f8 <pvPortMalloc+0x258>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d801      	bhi.n	80047d6 <pvPortMalloc+0x136>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <pvPortMalloc+0x138>
 80047d6:	2300      	movs	r3, #0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <pvPortMalloc+0x154>
    __asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	61bb      	str	r3, [r7, #24]
}
 80047ee:	bf00      	nop
 80047f0:	bf00      	nop
 80047f2:	e7fd      	b.n	80047f0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80047fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d90b      	bls.n	800481e <pvPortMalloc+0x17e>
    __asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	617b      	str	r3, [r7, #20]
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	e7fd      	b.n	800481a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800481e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	1ad2      	subs	r2, r2, r3
 8004826:	2308      	movs	r3, #8
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	429a      	cmp	r2, r3
 800482c:	d924      	bls.n	8004878 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800482e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00b      	beq.n	8004858 <pvPortMalloc+0x1b8>
    __asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	613b      	str	r3, [r7, #16]
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	1ad2      	subs	r2, r2, r3
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800486a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004876:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004878:	4b1c      	ldr	r3, [pc, #112]	@ (80048ec <pvPortMalloc+0x24c>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	4a1a      	ldr	r2, [pc, #104]	@ (80048ec <pvPortMalloc+0x24c>)
 8004884:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004886:	4b19      	ldr	r3, [pc, #100]	@ (80048ec <pvPortMalloc+0x24c>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b1c      	ldr	r3, [pc, #112]	@ (80048fc <pvPortMalloc+0x25c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d203      	bcs.n	800489a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004892:	4b16      	ldr	r3, [pc, #88]	@ (80048ec <pvPortMalloc+0x24c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a19      	ldr	r2, [pc, #100]	@ (80048fc <pvPortMalloc+0x25c>)
 8004898:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800489a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80048a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80048a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80048ac:	4b14      	ldr	r3, [pc, #80]	@ (8004900 <pvPortMalloc+0x260>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	4a13      	ldr	r2, [pc, #76]	@ (8004900 <pvPortMalloc+0x260>)
 80048b4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80048b6:	f7fe f9d3 	bl	8002c60 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <pvPortMalloc+0x23c>
    __asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	60fb      	str	r3, [r7, #12]
}
 80048d6:	bf00      	nop
 80048d8:	bf00      	nop
 80048da:	e7fd      	b.n	80048d8 <pvPortMalloc+0x238>
    return pvReturn;
 80048dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3738      	adds	r7, #56	@ 0x38
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20003018 	.word	0x20003018
 80048ec:	2000301c 	.word	0x2000301c
 80048f0:	20003010 	.word	0x20003010
 80048f4:	20000810 	.word	0x20000810
 80048f8:	2000300f 	.word	0x2000300f
 80048fc:	20003020 	.word	0x20003020
 8004900:	20003024 	.word	0x20003024

08004904 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d070      	beq.n	80049f8 <vPortFree+0xf4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004916:	2308      	movs	r3, #8
 8004918:	425b      	negs	r3, r3
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	4a36      	ldr	r2, [pc, #216]	@ (8004a00 <vPortFree+0xfc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d305      	bcc.n	8004938 <vPortFree+0x34>
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	4a35      	ldr	r2, [pc, #212]	@ (8004a04 <vPortFree+0x100>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d801      	bhi.n	8004938 <vPortFree+0x34>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <vPortFree+0x36>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <vPortFree+0x52>
    __asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	617b      	str	r3, [r7, #20]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	db0b      	blt.n	8004976 <vPortFree+0x72>
    __asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	613b      	str	r3, [r7, #16]
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	e7fd      	b.n	8004972 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <vPortFree+0x92>
    __asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	60fb      	str	r3, [r7, #12]
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	e7fd      	b.n	8004992 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	da2c      	bge.n	80049f8 <vPortFree+0xf4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d128      	bne.n	80049f8 <vPortFree+0xf4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	605a      	str	r2, [r3, #4]
                #if ( configHEAP_CLEAR_MEMORY_ON_FREE == 1 )
                {
                    /* Check for underflow as this can occur if xBlockSize is
                     * overwritten in a heap block. */
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2208      	movs	r2, #8
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d30a      	bcc.n	80049d2 <vPortFree+0xce>
                    {
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
 80049bc:	2208      	movs	r2, #8
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	1898      	adds	r0, r3, r2
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2208      	movs	r2, #8
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	461a      	mov	r2, r3
 80049cc:	2100      	movs	r1, #0
 80049ce:	f002 f9e3 	bl	8006d98 <memset>
                    }
                }
                #endif

                vTaskSuspendAll();
 80049d2:	f7fe f937 	bl	8002c44 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	4b0b      	ldr	r3, [pc, #44]	@ (8004a08 <vPortFree+0x104>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4413      	add	r3, r2
 80049e0:	4a09      	ldr	r2, [pc, #36]	@ (8004a08 <vPortFree+0x104>)
 80049e2:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049e4:	69b8      	ldr	r0, [r7, #24]
 80049e6:	f000 f86d 	bl	8004ac4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049ea:	4b08      	ldr	r3, [pc, #32]	@ (8004a0c <vPortFree+0x108>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3301      	adds	r3, #1
 80049f0:	4a06      	ldr	r2, [pc, #24]	@ (8004a0c <vPortFree+0x108>)
 80049f2:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80049f4:	f7fe f934 	bl	8002c60 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80049f8:	bf00      	nop
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000810 	.word	0x20000810
 8004a04:	2000300f 	.word	0x2000300f
 8004a08:	2000301c 	.word	0x2000301c
 8004a0c:	20003028 	.word	0x20003028

08004a10 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a16:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004a1a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004a1c:	4b24      	ldr	r3, [pc, #144]	@ (8004ab0 <prvHeapInit+0xa0>)
 8004a1e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3307      	adds	r3, #7
 8004a2e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0307 	bic.w	r3, r3, #7
 8004a36:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab0 <prvHeapInit+0xa0>)
 8004a40:	4413      	add	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab4 <prvHeapInit+0xa4>)
 8004a48:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab4 <prvHeapInit+0xa4>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4413      	add	r3, r2
 8004a56:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004a58:	2208      	movs	r2, #8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f023 0307 	bic.w	r3, r3, #7
 8004a66:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a13      	ldr	r2, [pc, #76]	@ (8004ab8 <prvHeapInit+0xa8>)
 8004a6c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a6e:	4b12      	ldr	r3, [pc, #72]	@ (8004ab8 <prvHeapInit+0xa8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004a76:	4b10      	ldr	r3, [pc, #64]	@ (8004ab8 <prvHeapInit+0xa8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	1ad2      	subs	r2, r2, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab8 <prvHeapInit+0xa8>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <prvHeapInit+0xac>)
 8004a9a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a07      	ldr	r2, [pc, #28]	@ (8004ac0 <prvHeapInit+0xb0>)
 8004aa2:	6013      	str	r3, [r2, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20000810 	.word	0x20000810
 8004ab4:	20003010 	.word	0x20003010
 8004ab8:	20003018 	.word	0x20003018
 8004abc:	20003020 	.word	0x20003020
 8004ac0:	2000301c 	.word	0x2000301c

08004ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004acc:	4b36      	ldr	r3, [pc, #216]	@ (8004ba8 <prvInsertBlockIntoFreeList+0xe4>)
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e002      	b.n	8004ad8 <prvInsertBlockIntoFreeList+0x14>
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d8f7      	bhi.n	8004ad2 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	4a30      	ldr	r2, [pc, #192]	@ (8004ba8 <prvInsertBlockIntoFreeList+0xe4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d018      	beq.n	8004b1c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	4a2f      	ldr	r2, [pc, #188]	@ (8004bac <prvInsertBlockIntoFreeList+0xe8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d305      	bcc.n	8004afe <prvInsertBlockIntoFreeList+0x3a>
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb0 <prvInsertBlockIntoFreeList+0xec>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d801      	bhi.n	8004afe <prvInsertBlockIntoFreeList+0x3a>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <prvInsertBlockIntoFreeList+0x3c>
 8004afe:	2300      	movs	r3, #0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10b      	bne.n	8004b1c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	60fb      	str	r3, [r7, #12]
}
 8004b16:	bf00      	nop
 8004b18:	bf00      	nop
 8004b1a:	e7fd      	b.n	8004b18 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d108      	bne.n	8004b40 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	441a      	add	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	441a      	add	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d118      	bne.n	8004b86 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4b16      	ldr	r3, [pc, #88]	@ (8004bb4 <prvInsertBlockIntoFreeList+0xf0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d00d      	beq.n	8004b7c <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	441a      	add	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	e008      	b.n	8004b8e <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <prvInsertBlockIntoFreeList+0xf0>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	e003      	b.n	8004b8e <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d002      	beq.n	8004b9c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b9c:	bf00      	nop
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	20003010 	.word	0x20003010
 8004bac:	20000810 	.word	0x20000810
 8004bb0:	2000300f 	.word	0x2000300f
 8004bb4:	20003018 	.word	0x20003018

08004bb8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004bbc:	4803      	ldr	r0, [pc, #12]	@ (8004bcc <_cbSendSystemDesc+0x14>)
 8004bbe:	f001 fccf 	bl	8006560 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004bc2:	4803      	ldr	r0, [pc, #12]	@ (8004bd0 <_cbSendSystemDesc+0x18>)
 8004bc4:	f001 fccc 	bl	8006560 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004bc8:	bf00      	nop
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	08006ec4 	.word	0x08006ec4
 8004bd0:	08006f00 	.word	0x08006f00

08004bd4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004bd8:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004be2:	4a06      	ldr	r2, [pc, #24]	@ (8004bfc <SEGGER_SYSVIEW_Conf+0x28>)
 8004be4:	f001 f942 	bl	8005e6c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004be8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004bec:	f001 f982 	bl	8005ef4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004bf0:	bf00      	nop
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000000 	.word	0x20000000
 8004bf8:	08004bb9 	.word	0x08004bb9
 8004bfc:	08006fa0 	.word	0x08006fa0

08004c00 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	e033      	b.n	8004c74 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004c0c:	491e      	ldr	r1, [pc, #120]	@ (8004c88 <_cbSendTaskList+0x88>)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	491a      	ldr	r1, [pc, #104]	@ (8004c88 <_cbSendTaskList+0x88>)
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	4c16      	ldr	r4, [pc, #88]	@ (8004c88 <_cbSendTaskList+0x88>)
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4423      	add	r3, r4
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	681c      	ldr	r4, [r3, #0]
 8004c40:	4d11      	ldr	r5, [pc, #68]	@ (8004c88 <_cbSendTaskList+0x88>)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	442b      	add	r3, r5
 8004c4e:	330c      	adds	r3, #12
 8004c50:	681d      	ldr	r5, [r3, #0]
 8004c52:	4e0d      	ldr	r6, [pc, #52]	@ (8004c88 <_cbSendTaskList+0x88>)
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4433      	add	r3, r6
 8004c60:	3310      	adds	r3, #16
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	462b      	mov	r3, r5
 8004c68:	4622      	mov	r2, r4
 8004c6a:	f000 f8d7 	bl	8004e1c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3301      	adds	r3, #1
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <_cbSendTaskList+0x8c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d3c6      	bcc.n	8004c0c <_cbSendTaskList+0xc>
  }
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c88:	2000302c 	.word	0x2000302c
 8004c8c:	200030cc 	.word	0x200030cc

08004c90 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c94:	b086      	sub	sp, #24
 8004c96:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c98:	f7fe f91c 	bl	8002ed4 <xTaskGetTickCountFromISR>
 8004c9c:	e9c7 0104 	strd	r0, r1, [r7, #16]
  Time *= portTICK_PERIOD_MS;
 8004ca0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ca4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004ca8:	f04f 0000 	mov.w	r0, #0
 8004cac:	f04f 0100 	mov.w	r1, #0
 8004cb0:	0099      	lsls	r1, r3, #2
 8004cb2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004cb6:	0090      	lsls	r0, r2, #2
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	eb12 0801 	adds.w	r8, r2, r1
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	eb43 0901 	adc.w	r9, r3, r1
 8004cc8:	eb18 0308 	adds.w	r3, r8, r8
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	eb49 0309 	adc.w	r3, r9, r9
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004cd8:	e9c7 8904 	strd	r8, r9, [r7, #16]
  Time *= 1000;
 8004cdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	f04f 0800 	mov.w	r8, #0
 8004ce8:	f04f 0900 	mov.w	r9, #0
 8004cec:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8004cf0:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8004cf4:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	1a14      	subs	r4, r2, r0
 8004cfe:	eb63 0501 	sbc.w	r5, r3, r1
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	00ab      	lsls	r3, r5, #2
 8004d0c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004d10:	00a2      	lsls	r2, r4, #2
 8004d12:	4614      	mov	r4, r2
 8004d14:	461d      	mov	r5, r3
 8004d16:	eb14 0a00 	adds.w	sl, r4, r0
 8004d1a:	eb45 0b01 	adc.w	fp, r5, r1
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d32:	4692      	mov	sl, r2
 8004d34:	469b      	mov	fp, r3
 8004d36:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  return Time;
 8004d3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004d4c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004d5a:	2205      	movs	r2, #5
 8004d5c:	492b      	ldr	r1, [pc, #172]	@ (8004e0c <SYSVIEW_AddTask+0xc0>)
 8004d5e:	68b8      	ldr	r0, [r7, #8]
 8004d60:	f002 f80a 	bl	8006d78 <memcmp>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d04b      	beq.n	8004e02 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d6a:	4b29      	ldr	r3, [pc, #164]	@ (8004e10 <SYSVIEW_AddTask+0xc4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b07      	cmp	r3, #7
 8004d70:	d903      	bls.n	8004d7a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d72:	4828      	ldr	r0, [pc, #160]	@ (8004e14 <SYSVIEW_AddTask+0xc8>)
 8004d74:	f001 ffa4 	bl	8006cc0 <SEGGER_SYSVIEW_Warn>
    return;
 8004d78:	e044      	b.n	8004e04 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d7a:	4b25      	ldr	r3, [pc, #148]	@ (8004e10 <SYSVIEW_AddTask+0xc4>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4926      	ldr	r1, [pc, #152]	@ (8004e18 <SYSVIEW_AddTask+0xcc>)
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d8e:	4b20      	ldr	r3, [pc, #128]	@ (8004e10 <SYSVIEW_AddTask+0xc4>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4921      	ldr	r1, [pc, #132]	@ (8004e18 <SYSVIEW_AddTask+0xcc>)
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3304      	adds	r3, #4
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004da4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e10 <SYSVIEW_AddTask+0xc4>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	491b      	ldr	r1, [pc, #108]	@ (8004e18 <SYSVIEW_AddTask+0xcc>)
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	3308      	adds	r3, #8
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004dba:	4b15      	ldr	r3, [pc, #84]	@ (8004e10 <SYSVIEW_AddTask+0xc4>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4916      	ldr	r1, [pc, #88]	@ (8004e18 <SYSVIEW_AddTask+0xcc>)
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	330c      	adds	r3, #12
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e10 <SYSVIEW_AddTask+0xc4>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4910      	ldr	r1, [pc, #64]	@ (8004e18 <SYSVIEW_AddTask+0xcc>)
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	3310      	adds	r3, #16
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004de6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e10 <SYSVIEW_AddTask+0xc4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3301      	adds	r3, #1
 8004dec:	4a08      	ldr	r2, [pc, #32]	@ (8004e10 <SYSVIEW_AddTask+0xc4>)
 8004dee:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f80e 	bl	8004e1c <SYSVIEW_SendTaskInfo>
 8004e00:	e000      	b.n	8004e04 <SYSVIEW_AddTask+0xb8>
    return;
 8004e02:	bf00      	nop

}
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	08006f10 	.word	0x08006f10
 8004e10:	200030cc 	.word	0x200030cc
 8004e14:	08006f18 	.word	0x08006f18
 8004e18:	2000302c 	.word	0x2000302c

08004e1c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08a      	sub	sp, #40	@ 0x28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004e2a:	f107 0310 	add.w	r3, r7, #16
 8004e2e:	2218      	movs	r2, #24
 8004e30:	2100      	movs	r1, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 ffb0 	bl	8006d98 <memset>
  TaskInfo.TaskID     = TaskID;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004e4c:	f107 0310 	add.w	r3, r7, #16
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 fa8d 	bl	8006370 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004e56:	bf00      	nop
 8004e58:	3728      	adds	r7, #40	@ 0x28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004e66:	4b26      	ldr	r3, [pc, #152]	@ (8004f00 <_DoInit+0xa0>)
 8004e68:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004e6a:	22a8      	movs	r2, #168	@ 0xa8
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	6838      	ldr	r0, [r7, #0]
 8004e70:	f001 ff92 	bl	8006d98 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2203      	movs	r2, #3
 8004e78:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	4a20      	ldr	r2, [pc, #128]	@ (8004f04 <_DoInit+0xa4>)
 8004e84:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	4a1f      	ldr	r2, [pc, #124]	@ (8004f08 <_DoInit+0xa8>)
 8004e8a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e92:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2200      	movs	r2, #0
 8004e98:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	4a16      	ldr	r2, [pc, #88]	@ (8004f04 <_DoInit+0xa4>)
 8004eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	4a17      	ldr	r2, [pc, #92]	@ (8004f0c <_DoInit+0xac>)
 8004eb0:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2210      	movs	r2, #16
 8004eb6:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004eca:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
 8004ed2:	e00c      	b.n	8004eee <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f1c3 030f 	rsb	r3, r3, #15
 8004eda:	4a0d      	ldr	r2, [pc, #52]	@ (8004f10 <_DoInit+0xb0>)
 8004edc:	5cd1      	ldrb	r1, [r2, r3]
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	460a      	mov	r2, r1
 8004ee6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3301      	adds	r3, #1
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b0f      	cmp	r3, #15
 8004ef2:	d9ef      	bls.n	8004ed4 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004ef4:	f3bf 8f5f 	dmb	sy
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	200030d0 	.word	0x200030d0
 8004f04:	08006f68 	.word	0x08006f68
 8004f08:	20003178 	.word	0x20003178
 8004f0c:	20003578 	.word	0x20003578
 8004f10:	08006fa8 	.word	0x08006fa8

08004f14 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08c      	sub	sp, #48	@ 0x30
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004f20:	4b3e      	ldr	r3, [pc, #248]	@ (800501c <SEGGER_RTT_ReadNoLock+0x108>)
 8004f22:	623b      	str	r3, [r7, #32]
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b53      	cmp	r3, #83	@ 0x53
 8004f2c:	d001      	beq.n	8004f32 <SEGGER_RTT_ReadNoLock+0x1e>
 8004f2e:	f7ff ff97 	bl	8004e60 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4613      	mov	r3, r2
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	4413      	add	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	3360      	adds	r3, #96	@ 0x60
 8004f3e:	4a37      	ldr	r2, [pc, #220]	@ (800501c <SEGGER_RTT_ReadNoLock+0x108>)
 8004f40:	4413      	add	r3, r2
 8004f42:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f54:	2300      	movs	r3, #0
 8004f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d92b      	bls.n	8004fb8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	bf28      	it	cs
 8004f72:	4613      	movcs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7c:	4413      	add	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	6939      	ldr	r1, [r7, #16]
 8004f84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f86:	f001 ff33 	bl	8006df0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	4413      	add	r3, r2
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d101      	bne.n	8004fb8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	bf28      	it	cs
 8004fc8:	4613      	movcs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d019      	beq.n	8005006 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd8:	4413      	add	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	6939      	ldr	r1, [r7, #16]
 8004fe0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fe2:	f001 ff05 	bl	8006df0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ffe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4413      	add	r3, r2
 8005004:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005010:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005014:	4618      	mov	r0, r3
 8005016:	3730      	adds	r7, #48	@ 0x30
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	200030d0 	.word	0x200030d0

08005020 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800502e:	4b3d      	ldr	r3, [pc, #244]	@ (8005124 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b53      	cmp	r3, #83	@ 0x53
 800503a:	d001      	beq.n	8005040 <SEGGER_RTT_AllocUpBuffer+0x20>
 800503c:	f7ff ff10 	bl	8004e60 <_DoInit>
  SEGGER_RTT_LOCK();
 8005040:	f3ef 8311 	mrs	r3, BASEPRI
 8005044:	f04f 0120 	mov.w	r1, #32
 8005048:	f381 8811 	msr	BASEPRI, r1
 800504c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800504e:	4b35      	ldr	r3, [pc, #212]	@ (8005124 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005050:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005056:	6939      	ldr	r1, [r7, #16]
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	4613      	mov	r3, r2
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4413      	add	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	440b      	add	r3, r1
 8005066:	3304      	adds	r3, #4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d008      	beq.n	8005080 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3301      	adds	r3, #1
 8005072:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	429a      	cmp	r2, r3
 800507c:	dbeb      	blt.n	8005056 <SEGGER_RTT_AllocUpBuffer+0x36>
 800507e:	e000      	b.n	8005082 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005080:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	429a      	cmp	r2, r3
 800508a:	da3f      	bge.n	800510c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800508c:	6939      	ldr	r1, [r7, #16]
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	4613      	mov	r3, r2
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4413      	add	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	440b      	add	r3, r1
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80050a0:	6939      	ldr	r1, [r7, #16]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	4613      	mov	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	440b      	add	r3, r1
 80050b0:	3304      	adds	r3, #4
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80050b6:	6939      	ldr	r1, [r7, #16]
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	4613      	mov	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	3320      	adds	r3, #32
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80050ca:	6939      	ldr	r1, [r7, #16]
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	4613      	mov	r3, r2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	4413      	add	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	440b      	add	r3, r1
 80050d8:	3328      	adds	r3, #40	@ 0x28
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80050de:	6939      	ldr	r1, [r7, #16]
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	4613      	mov	r3, r2
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	4413      	add	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	440b      	add	r3, r1
 80050ec:	3324      	adds	r3, #36	@ 0x24
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80050f2:	6939      	ldr	r1, [r7, #16]
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	4613      	mov	r3, r2
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	332c      	adds	r3, #44	@ 0x2c
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005106:	f3bf 8f5f 	dmb	sy
 800510a:	e002      	b.n	8005112 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800510c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005110:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005118:	69fb      	ldr	r3, [r7, #28]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	200030d0 	.word	0x200030d0

08005128 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	@ 0x28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005136:	4b21      	ldr	r3, [pc, #132]	@ (80051bc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005138:	623b      	str	r3, [r7, #32]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b53      	cmp	r3, #83	@ 0x53
 8005142:	d001      	beq.n	8005148 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005144:	f7ff fe8c 	bl	8004e60 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005148:	4b1c      	ldr	r3, [pc, #112]	@ (80051bc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800514a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d82c      	bhi.n	80051ac <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005152:	f3ef 8311 	mrs	r3, BASEPRI
 8005156:	f04f 0120 	mov.w	r1, #32
 800515a:	f381 8811 	msr	BASEPRI, r1
 800515e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4613      	mov	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4413      	add	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	3360      	adds	r3, #96	@ 0x60
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00e      	beq.n	8005196 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2200      	movs	r2, #0
 800518e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2200      	movs	r2, #0
 8005194:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800519a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800519c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051aa:	e002      	b.n	80051b2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3728      	adds	r7, #40	@ 0x28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	200030d0 	.word	0x200030d0

080051c0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d105      	bne.n	80051de <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	60fa      	str	r2, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	e022      	b.n	8005224 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	60fa      	str	r2, [r7, #12]
 80051e8:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b80      	cmp	r3, #128	@ 0x80
 80051ee:	d90a      	bls.n	8005206 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80051f0:	2380      	movs	r3, #128	@ 0x80
 80051f2:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80051f4:	e007      	b.n	8005206 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	1c53      	adds	r3, r2, #1
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1c59      	adds	r1, r3, #1
 8005200:	60f9      	str	r1, [r7, #12]
 8005202:	7812      	ldrb	r2, [r2, #0]
 8005204:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	1e5a      	subs	r2, r3, #1
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <_EncodeStr+0x58>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ee      	bne.n	80051f6 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	b2da      	uxtb	r2, r3
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005224:	68fb      	ldr	r3, [r7, #12]
}
 8005226:	4618      	mov	r0, r3
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3307      	adds	r3, #7
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005252:	4b34      	ldr	r3, [pc, #208]	@ (8005324 <_HandleIncomingPacket+0xd8>)
 8005254:	7e1b      	ldrb	r3, [r3, #24]
 8005256:	4618      	mov	r0, r3
 8005258:	1cfb      	adds	r3, r7, #3
 800525a:	2201      	movs	r2, #1
 800525c:	4619      	mov	r1, r3
 800525e:	f7ff fe59 	bl	8004f14 <SEGGER_RTT_ReadNoLock>
 8005262:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d057      	beq.n	800531a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	2b80      	cmp	r3, #128	@ 0x80
 800526e:	d031      	beq.n	80052d4 <_HandleIncomingPacket+0x88>
 8005270:	2b80      	cmp	r3, #128	@ 0x80
 8005272:	dc40      	bgt.n	80052f6 <_HandleIncomingPacket+0xaa>
 8005274:	2b07      	cmp	r3, #7
 8005276:	dc15      	bgt.n	80052a4 <_HandleIncomingPacket+0x58>
 8005278:	2b00      	cmp	r3, #0
 800527a:	dd3c      	ble.n	80052f6 <_HandleIncomingPacket+0xaa>
 800527c:	3b01      	subs	r3, #1
 800527e:	2b06      	cmp	r3, #6
 8005280:	d839      	bhi.n	80052f6 <_HandleIncomingPacket+0xaa>
 8005282:	a201      	add	r2, pc, #4	@ (adr r2, 8005288 <_HandleIncomingPacket+0x3c>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052ab 	.word	0x080052ab
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052b7 	.word	0x080052b7
 8005294:	080052bd 	.word	0x080052bd
 8005298:	080052c3 	.word	0x080052c3
 800529c:	080052c9 	.word	0x080052c9
 80052a0:	080052cf 	.word	0x080052cf
 80052a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80052a6:	d033      	beq.n	8005310 <_HandleIncomingPacket+0xc4>
 80052a8:	e025      	b.n	80052f6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80052aa:	f000 fee7 	bl	800607c <SEGGER_SYSVIEW_Start>
      break;
 80052ae:	e034      	b.n	800531a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80052b0:	f000 ff9e 	bl	80061f0 <SEGGER_SYSVIEW_Stop>
      break;
 80052b4:	e031      	b.n	800531a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80052b6:	f001 f977 	bl	80065a8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80052ba:	e02e      	b.n	800531a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80052bc:	f001 f93c 	bl	8006538 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80052c0:	e02b      	b.n	800531a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80052c2:	f000 ffbb 	bl	800623c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80052c6:	e028      	b.n	800531a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80052c8:	f001 fca8 	bl	8006c1c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80052cc:	e025      	b.n	800531a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80052ce:	f001 fc87 	bl	8006be0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80052d2:	e022      	b.n	800531a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052d4:	4b13      	ldr	r3, [pc, #76]	@ (8005324 <_HandleIncomingPacket+0xd8>)
 80052d6:	7e1b      	ldrb	r3, [r3, #24]
 80052d8:	4618      	mov	r0, r3
 80052da:	1cfb      	adds	r3, r7, #3
 80052dc:	2201      	movs	r2, #1
 80052de:	4619      	mov	r1, r3
 80052e0:	f7ff fe18 	bl	8004f14 <SEGGER_RTT_ReadNoLock>
 80052e4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d013      	beq.n	8005314 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 fbec 	bl	8006acc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80052f4:	e00e      	b.n	8005314 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	b25b      	sxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	da0c      	bge.n	8005318 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052fe:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <_HandleIncomingPacket+0xd8>)
 8005300:	7e1b      	ldrb	r3, [r3, #24]
 8005302:	4618      	mov	r0, r3
 8005304:	1cfb      	adds	r3, r7, #3
 8005306:	2201      	movs	r2, #1
 8005308:	4619      	mov	r1, r3
 800530a:	f7ff fe03 	bl	8004f14 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800530e:	e003      	b.n	8005318 <_HandleIncomingPacket+0xcc>
      break;
 8005310:	bf00      	nop
 8005312:	e002      	b.n	800531a <_HandleIncomingPacket+0xce>
      break;
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <_HandleIncomingPacket+0xce>
      break;
 8005318:	bf00      	nop
    }
  }
}
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20004590 	.word	0x20004590

08005328 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b08c      	sub	sp, #48	@ 0x30
 800532c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800532e:	2301      	movs	r3, #1
 8005330:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005332:	1d3b      	adds	r3, r7, #4
 8005334:	3301      	adds	r3, #1
 8005336:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800533c:	4b31      	ldr	r3, [pc, #196]	@ (8005404 <_TrySendOverflowPacket+0xdc>)
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005342:	e00b      	b.n	800535c <_TrySendOverflowPacket+0x34>
 8005344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005346:	b2da      	uxtb	r2, r3
 8005348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534a:	1c59      	adds	r1, r3, #1
 800534c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800534e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	09db      	lsrs	r3, r3, #7
 800535a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005360:	d8f0      	bhi.n	8005344 <_TrySendOverflowPacket+0x1c>
 8005362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005370:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005372:	4b25      	ldr	r3, [pc, #148]	@ (8005408 <_TrySendOverflowPacket+0xe0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005378:	4b22      	ldr	r3, [pc, #136]	@ (8005404 <_TrySendOverflowPacket+0xdc>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	627b      	str	r3, [r7, #36]	@ 0x24
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	623b      	str	r3, [r7, #32]
 800538a:	e00b      	b.n	80053a4 <_TrySendOverflowPacket+0x7c>
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	1c59      	adds	r1, r3, #1
 8005394:	6279      	str	r1, [r7, #36]	@ 0x24
 8005396:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	09db      	lsrs	r3, r3, #7
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80053a8:	d8f0      	bhi.n	800538c <_TrySendOverflowPacket+0x64>
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80053ba:	4b12      	ldr	r3, [pc, #72]	@ (8005404 <_TrySendOverflowPacket+0xdc>)
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	4618      	mov	r0, r3
 80053c0:	1d3b      	adds	r3, r7, #4
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	461a      	mov	r2, r3
 80053c8:	1d3b      	adds	r3, r7, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	f7fa ff08 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80053d0:	4603      	mov	r3, r0
 80053d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80053da:	4a0a      	ldr	r2, [pc, #40]	@ (8005404 <_TrySendOverflowPacket+0xdc>)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80053e0:	4b08      	ldr	r3, [pc, #32]	@ (8005404 <_TrySendOverflowPacket+0xdc>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <_TrySendOverflowPacket+0xdc>)
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	e004      	b.n	80053f8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80053ee:	4b05      	ldr	r3, [pc, #20]	@ (8005404 <_TrySendOverflowPacket+0xdc>)
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	3301      	adds	r3, #1
 80053f4:	4a03      	ldr	r2, [pc, #12]	@ (8005404 <_TrySendOverflowPacket+0xdc>)
 80053f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80053f8:	693b      	ldr	r3, [r7, #16]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3730      	adds	r7, #48	@ 0x30
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20004590 	.word	0x20004590
 8005408:	e0001004 	.word	0xe0001004

0800540c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	@ 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005418:	4b98      	ldr	r3, [pc, #608]	@ (800567c <_SendPacket+0x270>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d010      	beq.n	8005442 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005420:	4b96      	ldr	r3, [pc, #600]	@ (800567c <_SendPacket+0x270>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 812d 	beq.w	8005684 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800542a:	4b94      	ldr	r3, [pc, #592]	@ (800567c <_SendPacket+0x270>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d109      	bne.n	8005446 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005432:	f7ff ff79 	bl	8005328 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005436:	4b91      	ldr	r3, [pc, #580]	@ (800567c <_SendPacket+0x270>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b01      	cmp	r3, #1
 800543c:	f040 8124 	bne.w	8005688 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005440:	e001      	b.n	8005446 <_SendPacket+0x3a>
    goto Send;
 8005442:	bf00      	nop
 8005444:	e000      	b.n	8005448 <_SendPacket+0x3c>
Send:
 8005446:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b1f      	cmp	r3, #31
 800544c:	d809      	bhi.n	8005462 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800544e:	4b8b      	ldr	r3, [pc, #556]	@ (800567c <_SendPacket+0x270>)
 8005450:	69da      	ldr	r2, [r3, #28]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	f040 8115 	bne.w	800568c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b17      	cmp	r3, #23
 8005466:	d807      	bhi.n	8005478 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3b01      	subs	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	e0c4      	b.n	8005602 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2b7f      	cmp	r3, #127	@ 0x7f
 8005484:	d912      	bls.n	80054ac <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	09da      	lsrs	r2, r3, #7
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3b01      	subs	r3, #1
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	3a01      	subs	r2, #1
 800549e:	60fa      	str	r2, [r7, #12]
 80054a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	e006      	b.n	80054ba <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b7e      	cmp	r3, #126	@ 0x7e
 80054be:	d807      	bhi.n	80054d0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e098      	b.n	8005602 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054d6:	d212      	bcs.n	80054fe <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	09da      	lsrs	r2, r3, #7
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3b01      	subs	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	3a01      	subs	r2, #1
 80054f0:	60fa      	str	r2, [r7, #12]
 80054f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	701a      	strb	r2, [r3, #0]
 80054fc:	e081      	b.n	8005602 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005504:	d21d      	bcs.n	8005542 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	0b9a      	lsrs	r2, r3, #14
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b01      	subs	r3, #1
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	09db      	lsrs	r3, r3, #7
 800551a:	b2db      	uxtb	r3, r3
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	3a01      	subs	r2, #1
 8005520:	60fa      	str	r2, [r7, #12]
 8005522:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005526:	b2da      	uxtb	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	3a01      	subs	r2, #1
 8005534:	60fa      	str	r2, [r7, #12]
 8005536:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800553a:	b2da      	uxtb	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e05f      	b.n	8005602 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005548:	d228      	bcs.n	800559c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	0d5a      	lsrs	r2, r3, #21
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3b01      	subs	r3, #1
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	0b9b      	lsrs	r3, r3, #14
 800555e:	b2db      	uxtb	r3, r3
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	3a01      	subs	r2, #1
 8005564:	60fa      	str	r2, [r7, #12]
 8005566:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800556a:	b2da      	uxtb	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	09db      	lsrs	r3, r3, #7
 8005574:	b2db      	uxtb	r3, r3
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	3a01      	subs	r2, #1
 800557a:	60fa      	str	r2, [r7, #12]
 800557c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005580:	b2da      	uxtb	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	3a01      	subs	r2, #1
 800558e:	60fa      	str	r2, [r7, #12]
 8005590:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005594:	b2da      	uxtb	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	e032      	b.n	8005602 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	0f1a      	lsrs	r2, r3, #28
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	0d5b      	lsrs	r3, r3, #21
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	3a01      	subs	r2, #1
 80055b6:	60fa      	str	r2, [r7, #12]
 80055b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	0b9b      	lsrs	r3, r3, #14
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	3a01      	subs	r2, #1
 80055cc:	60fa      	str	r2, [r7, #12]
 80055ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	09db      	lsrs	r3, r3, #7
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	3a01      	subs	r2, #1
 80055e2:	60fa      	str	r2, [r7, #12]
 80055e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	3a01      	subs	r2, #1
 80055f6:	60fa      	str	r2, [r7, #12]
 80055f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005602:	4b1f      	ldr	r3, [pc, #124]	@ (8005680 <_SendPacket+0x274>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005608:	4b1c      	ldr	r3, [pc, #112]	@ (800567c <_SendPacket+0x270>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	623b      	str	r3, [r7, #32]
 800561a:	e00b      	b.n	8005634 <_SendPacket+0x228>
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005622:	1c59      	adds	r1, r3, #1
 8005624:	6279      	str	r1, [r7, #36]	@ 0x24
 8005626:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	09db      	lsrs	r3, r3, #7
 8005632:	623b      	str	r3, [r7, #32]
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	2b7f      	cmp	r3, #127	@ 0x7f
 8005638:	d8f0      	bhi.n	800561c <_SendPacket+0x210>
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005640:	6a3a      	ldr	r2, [r7, #32]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800564a:	4b0c      	ldr	r3, [pc, #48]	@ (800567c <_SendPacket+0x270>)
 800564c:	785b      	ldrb	r3, [r3, #1]
 800564e:	4618      	mov	r0, r3
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	461a      	mov	r2, r3
 8005658:	68f9      	ldr	r1, [r7, #12]
 800565a:	f7fa fdc1 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800565e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005666:	4a05      	ldr	r2, [pc, #20]	@ (800567c <_SendPacket+0x270>)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	60d3      	str	r3, [r2, #12]
 800566c:	e00f      	b.n	800568e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800566e:	4b03      	ldr	r3, [pc, #12]	@ (800567c <_SendPacket+0x270>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	3301      	adds	r3, #1
 8005674:	b2da      	uxtb	r2, r3
 8005676:	4b01      	ldr	r3, [pc, #4]	@ (800567c <_SendPacket+0x270>)
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	e008      	b.n	800568e <_SendPacket+0x282>
 800567c:	20004590 	.word	0x20004590
 8005680:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005684:	bf00      	nop
 8005686:	e002      	b.n	800568e <_SendPacket+0x282>
      goto SendDone;
 8005688:	bf00      	nop
 800568a:	e000      	b.n	800568e <_SendPacket+0x282>
      goto SendDone;
 800568c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800568e:	4b14      	ldr	r3, [pc, #80]	@ (80056e0 <_SendPacket+0x2d4>)
 8005690:	7e1b      	ldrb	r3, [r3, #24]
 8005692:	4619      	mov	r1, r3
 8005694:	4a13      	ldr	r2, [pc, #76]	@ (80056e4 <_SendPacket+0x2d8>)
 8005696:	460b      	mov	r3, r1
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	440b      	add	r3, r1
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	4413      	add	r3, r2
 80056a0:	336c      	adds	r3, #108	@ 0x6c
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	4b0e      	ldr	r3, [pc, #56]	@ (80056e0 <_SendPacket+0x2d4>)
 80056a6:	7e1b      	ldrb	r3, [r3, #24]
 80056a8:	4618      	mov	r0, r3
 80056aa:	490e      	ldr	r1, [pc, #56]	@ (80056e4 <_SendPacket+0x2d8>)
 80056ac:	4603      	mov	r3, r0
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4403      	add	r3, r0
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	440b      	add	r3, r1
 80056b6:	3370      	adds	r3, #112	@ 0x70
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d00b      	beq.n	80056d6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80056be:	4b08      	ldr	r3, [pc, #32]	@ (80056e0 <_SendPacket+0x2d4>)
 80056c0:	789b      	ldrb	r3, [r3, #2]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80056c6:	4b06      	ldr	r3, [pc, #24]	@ (80056e0 <_SendPacket+0x2d4>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80056cc:	f7ff fdbe 	bl	800524c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80056d0:	4b03      	ldr	r3, [pc, #12]	@ (80056e0 <_SendPacket+0x2d4>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80056d6:	bf00      	nop
 80056d8:	3728      	adds	r7, #40	@ 0x28
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20004590 	.word	0x20004590
 80056e4:	200030d0 	.word	0x200030d0

080056e8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	@ 0x28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	3301      	adds	r3, #1
 80056fe:	2b80      	cmp	r3, #128	@ 0x80
 8005700:	d80a      	bhi.n	8005718 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	1c59      	adds	r1, r3, #1
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6051      	str	r1, [r2, #4]
 800570c:	78fa      	ldrb	r2, [r7, #3]
 800570e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b80      	cmp	r3, #128	@ 0x80
 800571e:	d15a      	bne.n	80057d6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	627b      	str	r3, [r7, #36]	@ 0x24
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	623b      	str	r3, [r7, #32]
 8005740:	e00b      	b.n	800575a <_StoreChar+0x72>
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	1c59      	adds	r1, r3, #1
 800574a:	6279      	str	r1, [r7, #36]	@ 0x24
 800574c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	09db      	lsrs	r3, r3, #7
 8005758:	623b      	str	r3, [r7, #32]
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	2b7f      	cmp	r3, #127	@ 0x7f
 800575e:	d8f0      	bhi.n	8005742 <_StoreChar+0x5a>
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	627a      	str	r2, [r7, #36]	@ 0x24
 8005766:	6a3a      	ldr	r2, [r7, #32]
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	2300      	movs	r3, #0
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	e00b      	b.n	8005792 <_StoreChar+0xaa>
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	61f9      	str	r1, [r7, #28]
 8005784:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	09db      	lsrs	r3, r3, #7
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b7f      	cmp	r3, #127	@ 0x7f
 8005796:	d8f0      	bhi.n	800577a <_StoreChar+0x92>
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	61fa      	str	r2, [r7, #28]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	221a      	movs	r2, #26
 80057ae:	6939      	ldr	r1, [r7, #16]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fe2b 	bl	800540c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff fd39 	bl	8005232 <_PreparePacket>
 80057c0:	4602      	mov	r2, r0
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	611a      	str	r2, [r3, #16]
  }
}
 80057d6:	bf00      	nop
 80057d8:	3728      	adds	r7, #40	@ 0x28
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08a      	sub	sp, #40	@ 0x28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80057f2:	2301      	movs	r3, #1
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80057f6:	2301      	movs	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80057fa:	e007      	b.n	800580c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80057fc:	6a3a      	ldr	r2, [r7, #32]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	623b      	str	r3, [r7, #32]
    Width++;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800580c:	6a3a      	ldr	r2, [r7, #32]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d2f3      	bcs.n	80057fc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	429a      	cmp	r2, r3
 800581a:	d901      	bls.n	8005820 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d000      	beq.n	800582c <_PrintUnsigned+0x4c>
 800582a:	e01f      	b.n	800586c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01c      	beq.n	800586c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <_PrintUnsigned+0x68>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d102      	bne.n	8005848 <_PrintUnsigned+0x68>
        c = '0';
 8005842:	2330      	movs	r3, #48	@ 0x30
 8005844:	76fb      	strb	r3, [r7, #27]
 8005846:	e001      	b.n	800584c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005848:	2320      	movs	r3, #32
 800584a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800584c:	e007      	b.n	800585e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	3b01      	subs	r3, #1
 8005852:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005854:	7efb      	ldrb	r3, [r7, #27]
 8005856:	4619      	mov	r1, r3
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7ff ff45 	bl	80056e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <_PrintUnsigned+0x8c>
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	429a      	cmp	r2, r3
 800586a:	d3f0      	bcc.n	800584e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d903      	bls.n	800587a <_PrintUnsigned+0x9a>
      NumDigits--;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	3b01      	subs	r3, #1
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	e009      	b.n	800588e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005882:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	429a      	cmp	r2, r3
 800588a:	d200      	bcs.n	800588e <_PrintUnsigned+0xae>
        break;
 800588c:	e005      	b.n	800589a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	fb02 f303 	mul.w	r3, r2, r3
 8005896:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005898:	e7e8      	b.n	800586c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a8:	fb02 f303 	mul.w	r3, r2, r3
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80058b2:	4a15      	ldr	r2, [pc, #84]	@ (8005908 <_PrintUnsigned+0x128>)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	4619      	mov	r1, r3
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff ff13 	bl	80056e8 <_StoreChar>
    Digit /= Base;
 80058c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e3      	bne.n	800589a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80058d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d011      	beq.n	8005900 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80058dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00e      	beq.n	8005900 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058e2:	e006      	b.n	80058f2 <_PrintUnsigned+0x112>
        FieldWidth--;
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	3b01      	subs	r3, #1
 80058e8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80058ea:	2120      	movs	r1, #32
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7ff fefb 	bl	80056e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <_PrintUnsigned+0x120>
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d3f1      	bcc.n	80058e4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005900:	bf00      	nop
 8005902:	3728      	adds	r7, #40	@ 0x28
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	08006fc8 	.word	0x08006fc8

0800590c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af02      	add	r7, sp, #8
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	bfb8      	it	lt
 8005920:	425b      	neglt	r3, r3
 8005922:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005924:	2301      	movs	r3, #1
 8005926:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005928:	e007      	b.n	800593a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005932:	613b      	str	r3, [r7, #16]
    Width++;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	3301      	adds	r3, #1
 8005938:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	429a      	cmp	r2, r3
 8005940:	daf3      	bge.n	800592a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	429a      	cmp	r2, r3
 8005948:	d901      	bls.n	800594e <_PrintInt+0x42>
    Width = NumDigits;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <_PrintInt+0x5e>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	db04      	blt.n	8005964 <_PrintInt+0x58>
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <_PrintInt+0x5e>
    FieldWidth--;
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	3b01      	subs	r3, #1
 8005968:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <_PrintInt+0x6e>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d016      	beq.n	80059a8 <_PrintInt+0x9c>
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d111      	bne.n	80059a8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00e      	beq.n	80059a8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800598a:	e006      	b.n	800599a <_PrintInt+0x8e>
        FieldWidth--;
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	3b01      	subs	r3, #1
 8005990:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005992:	2120      	movs	r1, #32
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff fea7 	bl	80056e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <_PrintInt+0x9c>
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d3f1      	bcc.n	800598c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	da07      	bge.n	80059be <_PrintInt+0xb2>
    v = -v;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	425b      	negs	r3, r3
 80059b2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80059b4:	212d      	movs	r1, #45	@ 0x2d
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff fe96 	bl	80056e8 <_StoreChar>
 80059bc:	e008      	b.n	80059d0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80059c8:	212b      	movs	r1, #43	@ 0x2b
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f7ff fe8c 	bl	80056e8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d019      	beq.n	8005a0e <_PrintInt+0x102>
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d114      	bne.n	8005a0e <_PrintInt+0x102>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d111      	bne.n	8005a0e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00e      	beq.n	8005a0e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059f0:	e006      	b.n	8005a00 <_PrintInt+0xf4>
        FieldWidth--;
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80059f8:	2130      	movs	r1, #48	@ 0x30
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f7ff fe74 	bl	80056e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <_PrintInt+0x102>
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d3f1      	bcc.n	80059f2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7ff fedf 	bl	80057e0 <_PrintUnsigned>
}
 8005a22:	bf00      	nop
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b098      	sub	sp, #96	@ 0x60
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a38:	f3ef 8311 	mrs	r3, BASEPRI
 8005a3c:	f04f 0120 	mov.w	r1, #32
 8005a40:	f381 8811 	msr	BASEPRI, r1
 8005a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a46:	48b7      	ldr	r0, [pc, #732]	@ (8005d24 <_VPrintTarget+0x2f8>)
 8005a48:	f7ff fbf3 	bl	8005232 <_PreparePacket>
 8005a4c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005a4e:	4bb5      	ldr	r3, [pc, #724]	@ (8005d24 <_VPrintTarget+0x2f8>)
 8005a50:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005a52:	2300      	movs	r3, #0
 8005a54:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a58:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005a72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 81a8 	beq.w	8005dcc <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005a7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a80:	2b25      	cmp	r3, #37	@ 0x25
 8005a82:	f040 8195 	bne.w	8005db0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005a86:	2300      	movs	r3, #0
 8005a88:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005a96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a9a:	3b23      	subs	r3, #35	@ 0x23
 8005a9c:	2b0d      	cmp	r3, #13
 8005a9e:	d83f      	bhi.n	8005b20 <_VPrintTarget+0xf4>
 8005aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa8 <_VPrintTarget+0x7c>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005b11 	.word	0x08005b11
 8005aac:	08005b21 	.word	0x08005b21
 8005ab0:	08005b21 	.word	0x08005b21
 8005ab4:	08005b21 	.word	0x08005b21
 8005ab8:	08005b21 	.word	0x08005b21
 8005abc:	08005b21 	.word	0x08005b21
 8005ac0:	08005b21 	.word	0x08005b21
 8005ac4:	08005b21 	.word	0x08005b21
 8005ac8:	08005b01 	.word	0x08005b01
 8005acc:	08005b21 	.word	0x08005b21
 8005ad0:	08005ae1 	.word	0x08005ae1
 8005ad4:	08005b21 	.word	0x08005b21
 8005ad8:	08005b21 	.word	0x08005b21
 8005adc:	08005af1 	.word	0x08005af1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	e01a      	b.n	8005b26 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005af2:	f043 0302 	orr.w	r3, r3, #2
 8005af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	e012      	b.n	8005b26 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b02:	f043 0304 	orr.w	r3, r3, #4
 8005b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e00a      	b.n	8005b26 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005b10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b12:	f043 0308 	orr.w	r3, r3, #8
 8005b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e002      	b.n	8005b26 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005b20:	2300      	movs	r3, #0
 8005b22:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b24:	bf00      	nop
        }
      } while (v);
 8005b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1b0      	bne.n	8005a8e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005b38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b3e:	d912      	bls.n	8005b66 <_VPrintTarget+0x13a>
 8005b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b44:	2b39      	cmp	r3, #57	@ 0x39
 8005b46:	d80e      	bhi.n	8005b66 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b5e:	4413      	add	r3, r2
 8005b60:	3b30      	subs	r3, #48	@ 0x30
 8005b62:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005b64:	e7e4      	b.n	8005b30 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005b66:	2300      	movs	r3, #0
 8005b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005b72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b76:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b78:	d11d      	bne.n	8005bb6 <_VPrintTarget+0x18a>
        sFormat++;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005b88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b8e:	d912      	bls.n	8005bb6 <_VPrintTarget+0x18a>
 8005b90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b94:	2b39      	cmp	r3, #57	@ 0x39
 8005b96:	d80e      	bhi.n	8005bb6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005b9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	461a      	mov	r2, r3
 8005baa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bae:	4413      	add	r3, r2
 8005bb0:	3b30      	subs	r3, #48	@ 0x30
 8005bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005bb4:	e7e4      	b.n	8005b80 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005bbe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bc2:	2b6c      	cmp	r3, #108	@ 0x6c
 8005bc4:	d003      	beq.n	8005bce <_VPrintTarget+0x1a2>
 8005bc6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bca:	2b68      	cmp	r3, #104	@ 0x68
 8005bcc:	d107      	bne.n	8005bde <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005bdc:	e7ef      	b.n	8005bbe <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005bde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005be2:	2b25      	cmp	r3, #37	@ 0x25
 8005be4:	f000 80d8 	beq.w	8005d98 <_VPrintTarget+0x36c>
 8005be8:	2b25      	cmp	r3, #37	@ 0x25
 8005bea:	f2c0 80dc 	blt.w	8005da6 <_VPrintTarget+0x37a>
 8005bee:	2b78      	cmp	r3, #120	@ 0x78
 8005bf0:	f300 80d9 	bgt.w	8005da6 <_VPrintTarget+0x37a>
 8005bf4:	2b58      	cmp	r3, #88	@ 0x58
 8005bf6:	f2c0 80d6 	blt.w	8005da6 <_VPrintTarget+0x37a>
 8005bfa:	3b58      	subs	r3, #88	@ 0x58
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	f200 80d2 	bhi.w	8005da6 <_VPrintTarget+0x37a>
 8005c02:	a201      	add	r2, pc, #4	@ (adr r2, 8005c08 <_VPrintTarget+0x1dc>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005cff 	.word	0x08005cff
 8005c0c:	08005da7 	.word	0x08005da7
 8005c10:	08005da7 	.word	0x08005da7
 8005c14:	08005da7 	.word	0x08005da7
 8005c18:	08005da7 	.word	0x08005da7
 8005c1c:	08005da7 	.word	0x08005da7
 8005c20:	08005da7 	.word	0x08005da7
 8005c24:	08005da7 	.word	0x08005da7
 8005c28:	08005da7 	.word	0x08005da7
 8005c2c:	08005da7 	.word	0x08005da7
 8005c30:	08005da7 	.word	0x08005da7
 8005c34:	08005c8d 	.word	0x08005c8d
 8005c38:	08005cb3 	.word	0x08005cb3
 8005c3c:	08005da7 	.word	0x08005da7
 8005c40:	08005da7 	.word	0x08005da7
 8005c44:	08005da7 	.word	0x08005da7
 8005c48:	08005da7 	.word	0x08005da7
 8005c4c:	08005da7 	.word	0x08005da7
 8005c50:	08005da7 	.word	0x08005da7
 8005c54:	08005da7 	.word	0x08005da7
 8005c58:	08005da7 	.word	0x08005da7
 8005c5c:	08005da7 	.word	0x08005da7
 8005c60:	08005da7 	.word	0x08005da7
 8005c64:	08005da7 	.word	0x08005da7
 8005c68:	08005d73 	.word	0x08005d73
 8005c6c:	08005da7 	.word	0x08005da7
 8005c70:	08005da7 	.word	0x08005da7
 8005c74:	08005d29 	.word	0x08005d29
 8005c78:	08005da7 	.word	0x08005da7
 8005c7c:	08005cd9 	.word	0x08005cd9
 8005c80:	08005da7 	.word	0x08005da7
 8005c84:	08005da7 	.word	0x08005da7
 8005c88:	08005cff 	.word	0x08005cff
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	1d19      	adds	r1, r3, #4
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6011      	str	r1, [r2, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005ca0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005ca4:	f107 0310 	add.w	r3, r7, #16
 8005ca8:	4611      	mov	r1, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fd1c 	bl	80056e8 <_StoreChar>
        break;
 8005cb0:	e07a      	b.n	8005da8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	1d19      	adds	r1, r3, #4
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6011      	str	r1, [r2, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005cc0:	f107 0010 	add.w	r0, r7, #16
 8005cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cce:	220a      	movs	r2, #10
 8005cd0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cd2:	f7ff fe1b 	bl	800590c <_PrintInt>
        break;
 8005cd6:	e067      	b.n	8005da8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	1d19      	adds	r1, r3, #4
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6011      	str	r1, [r2, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005ce6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ce8:	f107 0010 	add.w	r0, r7, #16
 8005cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cf6:	220a      	movs	r2, #10
 8005cf8:	f7ff fd72 	bl	80057e0 <_PrintUnsigned>
        break;
 8005cfc:	e054      	b.n	8005da8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	1d19      	adds	r1, r3, #4
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6011      	str	r1, [r2, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005d0c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d0e:	f107 0010 	add.w	r0, r7, #16
 8005d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	f7ff fd5f 	bl	80057e0 <_PrintUnsigned>
        break;
 8005d22:	e041      	b.n	8005da8 <_VPrintTarget+0x37c>
 8005d24:	200045c0 	.word	0x200045c0
      case 's':
        s = va_arg(*pParamList, const char*);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	1d19      	adds	r1, r3, #4
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6011      	str	r1, [r2, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8005d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <_VPrintTarget+0x314>
          s = "(null)";
 8005d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8005e68 <_VPrintTarget+0x43c>)
 8005d3e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005d40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8005d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8005d4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00b      	beq.n	8005d6e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005d56:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005d5a:	f107 0310 	add.w	r3, r7, #16
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fcc1 	bl	80056e8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d6a:	d9e9      	bls.n	8005d40 <_VPrintTarget+0x314>
        break;
 8005d6c:	e01c      	b.n	8005da8 <_VPrintTarget+0x37c>
            break;
 8005d6e:	bf00      	nop
        break;
 8005d70:	e01a      	b.n	8005da8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	1d19      	adds	r1, r3, #4
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6011      	str	r1, [r2, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005d80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d82:	f107 0010 	add.w	r0, r7, #16
 8005d86:	2300      	movs	r3, #0
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	2308      	movs	r3, #8
 8005d90:	2210      	movs	r2, #16
 8005d92:	f7ff fd25 	bl	80057e0 <_PrintUnsigned>
        break;
 8005d96:	e007      	b.n	8005da8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005d98:	f107 0310 	add.w	r3, r7, #16
 8005d9c:	2125      	movs	r1, #37	@ 0x25
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fca2 	bl	80056e8 <_StoreChar>
        break;
 8005da4:	e000      	b.n	8005da8 <_VPrintTarget+0x37c>
      default:
        break;
 8005da6:	bf00      	nop
      }
      sFormat++;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3301      	adds	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	e007      	b.n	8005dc0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005db0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005db4:	f107 0310 	add.w	r3, r7, #16
 8005db8:	4611      	mov	r1, r2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff fc94 	bl	80056e8 <_StoreChar>
    }
  } while (*sFormat);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f47f ae4d 	bne.w	8005a64 <_VPrintTarget+0x38>
 8005dca:	e000      	b.n	8005dce <_VPrintTarget+0x3a2>
      break;
 8005dcc:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d041      	beq.n	8005e58 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005dd4:	6a3a      	ldr	r2, [r7, #32]
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005de4:	e00b      	b.n	8005dfe <_VPrintTarget+0x3d2>
 8005de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dec:	1c59      	adds	r1, r3, #1
 8005dee:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005df0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfa:	09db      	lsrs	r3, r3, #7
 8005dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e00:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e02:	d8f0      	bhi.n	8005de6 <_VPrintTarget+0x3ba>
 8005e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e12:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e18:	2300      	movs	r3, #0
 8005e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e1c:	e00b      	b.n	8005e36 <_VPrintTarget+0x40a>
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e24:	1c59      	adds	r1, r3, #1
 8005e26:	6379      	str	r1, [r7, #52]	@ 0x34
 8005e28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e32:	09db      	lsrs	r3, r3, #7
 8005e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e3a:	d8f0      	bhi.n	8005e1e <_VPrintTarget+0x3f2>
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	637a      	str	r2, [r7, #52]	@ 0x34
 8005e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e4a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	6979      	ldr	r1, [r7, #20]
 8005e50:	221a      	movs	r2, #26
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff fada 	bl	800540c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005e5e:	bf00      	nop
 8005e60:	3758      	adds	r7, #88	@ 0x58
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	08006f74 	.word	0x08006f74

08005e6c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e80:	4917      	ldr	r1, [pc, #92]	@ (8005ee0 <SEGGER_SYSVIEW_Init+0x74>)
 8005e82:	4818      	ldr	r0, [pc, #96]	@ (8005ee4 <SEGGER_SYSVIEW_Init+0x78>)
 8005e84:	f7ff f8cc 	bl	8005020 <SEGGER_RTT_AllocUpBuffer>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	4b16      	ldr	r3, [pc, #88]	@ (8005ee8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e8e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005e90:	4b15      	ldr	r3, [pc, #84]	@ (8005ee8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e92:	785a      	ldrb	r2, [r3, #1]
 8005e94:	4b14      	ldr	r3, [pc, #80]	@ (8005ee8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e96:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e98:	4b13      	ldr	r3, [pc, #76]	@ (8005ee8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e9a:	7e1b      	ldrb	r3, [r3, #24]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	4a11      	ldr	r2, [pc, #68]	@ (8005eec <SEGGER_SYSVIEW_Init+0x80>)
 8005ea6:	490f      	ldr	r1, [pc, #60]	@ (8005ee4 <SEGGER_SYSVIEW_Init+0x78>)
 8005ea8:	f7ff f93e 	bl	8005128 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005eac:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef0 <SEGGER_SYSVIEW_Init+0x84>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ee8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005eb8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005eba:	4a0b      	ldr	r2, [pc, #44]	@ (8005ee8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005ec0:	4a09      	ldr	r2, [pc, #36]	@ (8005ee8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005ec6:	4a08      	ldr	r2, [pc, #32]	@ (8005ee8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005ecc:	4a06      	ldr	r2, [pc, #24]	@ (8005ee8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005ed2:	4b05      	ldr	r3, [pc, #20]	@ (8005ee8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20003588 	.word	0x20003588
 8005ee4:	08006f7c 	.word	0x08006f7c
 8005ee8:	20004590 	.word	0x20004590
 8005eec:	20004588 	.word	0x20004588
 8005ef0:	e0001004 	.word	0xe0001004

08005ef4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005efc:	4a04      	ldr	r2, [pc, #16]	@ (8005f10 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6113      	str	r3, [r2, #16]
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20004590 	.word	0x20004590

08005f14 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f20:	f04f 0120 	mov.w	r1, #32
 8005f24:	f381 8811 	msr	BASEPRI, r1
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	4808      	ldr	r0, [pc, #32]	@ (8005f4c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005f2c:	f7ff f981 	bl	8005232 <_PreparePacket>
 8005f30:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68b8      	ldr	r0, [r7, #8]
 8005f38:	f7ff fa68 	bl	800540c <_SendPacket>
  RECORD_END();
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f383 8811 	msr	BASEPRI, r3
}
 8005f42:	bf00      	nop
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	200045c0 	.word	0x200045c0

08005f50 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f5e:	f04f 0120 	mov.w	r1, #32
 8005f62:	f381 8811 	msr	BASEPRI, r1
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	4816      	ldr	r0, [pc, #88]	@ (8005fc4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005f6a:	f7ff f962 	bl	8005232 <_PreparePacket>
 8005f6e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	61bb      	str	r3, [r7, #24]
 8005f7c:	e00b      	b.n	8005f96 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	1c59      	adds	r1, r3, #1
 8005f86:	61f9      	str	r1, [r7, #28]
 8005f88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	09db      	lsrs	r3, r3, #7
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f9a:	d8f0      	bhi.n	8005f7e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	61fa      	str	r2, [r7, #28]
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68f9      	ldr	r1, [r7, #12]
 8005fb0:	6938      	ldr	r0, [r7, #16]
 8005fb2:	f7ff fa2b 	bl	800540c <_SendPacket>
  RECORD_END();
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f383 8811 	msr	BASEPRI, r3
}
 8005fbc:	bf00      	nop
 8005fbe:	3720      	adds	r7, #32
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	200045c0 	.word	0x200045c0

08005fc8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08c      	sub	sp, #48	@ 0x30
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fd4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd8:	f04f 0120 	mov.w	r1, #32
 8005fdc:	f381 8811 	msr	BASEPRI, r1
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	4825      	ldr	r0, [pc, #148]	@ (8006078 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005fe4:	f7ff f925 	bl	8005232 <_PreparePacket>
 8005fe8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ff6:	e00b      	b.n	8006010 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffe:	1c59      	adds	r1, r3, #1
 8006000:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006002:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600c:	09db      	lsrs	r3, r3, #7
 800600e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	2b7f      	cmp	r3, #127	@ 0x7f
 8006014:	d8f0      	bhi.n	8005ff8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800601c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006024:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	623b      	str	r3, [r7, #32]
 800602e:	e00b      	b.n	8006048 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	b2da      	uxtb	r2, r3
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	1c59      	adds	r1, r3, #1
 8006038:	6279      	str	r1, [r7, #36]	@ 0x24
 800603a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	09db      	lsrs	r3, r3, #7
 8006046:	623b      	str	r3, [r7, #32]
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	2b7f      	cmp	r3, #127	@ 0x7f
 800604c:	d8f0      	bhi.n	8006030 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	627a      	str	r2, [r7, #36]	@ 0x24
 8006054:	6a3a      	ldr	r2, [r7, #32]
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	6979      	ldr	r1, [r7, #20]
 8006062:	69b8      	ldr	r0, [r7, #24]
 8006064:	f7ff f9d2 	bl	800540c <_SendPacket>
  RECORD_END();
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f383 8811 	msr	BASEPRI, r3
}
 800606e:	bf00      	nop
 8006070:	3730      	adds	r7, #48	@ 0x30
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	200045c0 	.word	0x200045c0

0800607c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	@ 0x30
 8006080:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006082:	4b58      	ldr	r3, [pc, #352]	@ (80061e4 <SEGGER_SYSVIEW_Start+0x168>)
 8006084:	2201      	movs	r2, #1
 8006086:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006088:	f3ef 8311 	mrs	r3, BASEPRI
 800608c:	f04f 0120 	mov.w	r1, #32
 8006090:	f381 8811 	msr	BASEPRI, r1
 8006094:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006096:	4b53      	ldr	r3, [pc, #332]	@ (80061e4 <SEGGER_SYSVIEW_Start+0x168>)
 8006098:	785b      	ldrb	r3, [r3, #1]
 800609a:	220a      	movs	r2, #10
 800609c:	4952      	ldr	r1, [pc, #328]	@ (80061e8 <SEGGER_SYSVIEW_Start+0x16c>)
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fa f89e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80060aa:	200a      	movs	r0, #10
 80060ac:	f7ff ff32 	bl	8005f14 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80060b0:	f3ef 8311 	mrs	r3, BASEPRI
 80060b4:	f04f 0120 	mov.w	r1, #32
 80060b8:	f381 8811 	msr	BASEPRI, r1
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	484b      	ldr	r0, [pc, #300]	@ (80061ec <SEGGER_SYSVIEW_Start+0x170>)
 80060c0:	f7ff f8b7 	bl	8005232 <_PreparePacket>
 80060c4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ce:	4b45      	ldr	r3, [pc, #276]	@ (80061e4 <SEGGER_SYSVIEW_Start+0x168>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060d4:	e00b      	b.n	80060ee <SEGGER_SYSVIEW_Start+0x72>
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060dc:	1c59      	adds	r1, r3, #1
 80060de:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80060e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ea:	09db      	lsrs	r3, r3, #7
 80060ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80060f2:	d8f0      	bhi.n	80060d6 <SEGGER_SYSVIEW_Start+0x5a>
 80060f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006102:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
 8006108:	4b36      	ldr	r3, [pc, #216]	@ (80061e4 <SEGGER_SYSVIEW_Start+0x168>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	623b      	str	r3, [r7, #32]
 800610e:	e00b      	b.n	8006128 <SEGGER_SYSVIEW_Start+0xac>
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	b2da      	uxtb	r2, r3
 8006114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006116:	1c59      	adds	r1, r3, #1
 8006118:	6279      	str	r1, [r7, #36]	@ 0x24
 800611a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	09db      	lsrs	r3, r3, #7
 8006126:	623b      	str	r3, [r7, #32]
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	2b7f      	cmp	r3, #127	@ 0x7f
 800612c:	d8f0      	bhi.n	8006110 <SEGGER_SYSVIEW_Start+0x94>
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	627a      	str	r2, [r7, #36]	@ 0x24
 8006134:	6a3a      	ldr	r2, [r7, #32]
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	61fb      	str	r3, [r7, #28]
 8006142:	4b28      	ldr	r3, [pc, #160]	@ (80061e4 <SEGGER_SYSVIEW_Start+0x168>)
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e00b      	b.n	8006162 <SEGGER_SYSVIEW_Start+0xe6>
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	1c59      	adds	r1, r3, #1
 8006152:	61f9      	str	r1, [r7, #28]
 8006154:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	09db      	lsrs	r3, r3, #7
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	2b7f      	cmp	r3, #127	@ 0x7f
 8006166:	d8f0      	bhi.n	800614a <SEGGER_SYSVIEW_Start+0xce>
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	61fa      	str	r2, [r7, #28]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	2300      	movs	r3, #0
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	e00b      	b.n	800619a <SEGGER_SYSVIEW_Start+0x11e>
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	b2da      	uxtb	r2, r3
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	1c59      	adds	r1, r3, #1
 800618a:	6179      	str	r1, [r7, #20]
 800618c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	09db      	lsrs	r3, r3, #7
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b7f      	cmp	r3, #127	@ 0x7f
 800619e:	d8f0      	bhi.n	8006182 <SEGGER_SYSVIEW_Start+0x106>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	617a      	str	r2, [r7, #20]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80061b0:	2218      	movs	r2, #24
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff f929 	bl	800540c <_SendPacket>
      RECORD_END();
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80061c0:	4b08      	ldr	r3, [pc, #32]	@ (80061e4 <SEGGER_SYSVIEW_Start+0x168>)
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <SEGGER_SYSVIEW_Start+0x168>)
 80061ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061cc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80061ce:	f000 f9eb 	bl	80065a8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80061d2:	f000 f9b1 	bl	8006538 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80061d6:	f000 fd21 	bl	8006c1c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80061da:	bf00      	nop
 80061dc:	3730      	adds	r7, #48	@ 0x30
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20004590 	.word	0x20004590
 80061e8:	08006fbc 	.word	0x08006fbc
 80061ec:	200045c0 	.word	0x200045c0

080061f0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061f6:	f3ef 8311 	mrs	r3, BASEPRI
 80061fa:	f04f 0120 	mov.w	r1, #32
 80061fe:	f381 8811 	msr	BASEPRI, r1
 8006202:	607b      	str	r3, [r7, #4]
 8006204:	480b      	ldr	r0, [pc, #44]	@ (8006234 <SEGGER_SYSVIEW_Stop+0x44>)
 8006206:	f7ff f814 	bl	8005232 <_PreparePacket>
 800620a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800620c:	4b0a      	ldr	r3, [pc, #40]	@ (8006238 <SEGGER_SYSVIEW_Stop+0x48>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006214:	220b      	movs	r2, #11
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6838      	ldr	r0, [r7, #0]
 800621a:	f7ff f8f7 	bl	800540c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800621e:	4b06      	ldr	r3, [pc, #24]	@ (8006238 <SEGGER_SYSVIEW_Stop+0x48>)
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f383 8811 	msr	BASEPRI, r3
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	200045c0 	.word	0x200045c0
 8006238:	20004590 	.word	0x20004590

0800623c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800623c:	b580      	push	{r7, lr}
 800623e:	b08c      	sub	sp, #48	@ 0x30
 8006240:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006242:	f3ef 8311 	mrs	r3, BASEPRI
 8006246:	f04f 0120 	mov.w	r1, #32
 800624a:	f381 8811 	msr	BASEPRI, r1
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	4845      	ldr	r0, [pc, #276]	@ (8006368 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006252:	f7fe ffee 	bl	8005232 <_PreparePacket>
 8006256:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006260:	4b42      	ldr	r3, [pc, #264]	@ (800636c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006266:	e00b      	b.n	8006280 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626a:	b2da      	uxtb	r2, r3
 800626c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626e:	1c59      	adds	r1, r3, #1
 8006270:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006272:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627c:	09db      	lsrs	r3, r3, #7
 800627e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006282:	2b7f      	cmp	r3, #127	@ 0x7f
 8006284:	d8f0      	bhi.n	8006268 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800628c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006294:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
 800629a:	4b34      	ldr	r3, [pc, #208]	@ (800636c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	623b      	str	r3, [r7, #32]
 80062a0:	e00b      	b.n	80062ba <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	1c59      	adds	r1, r3, #1
 80062aa:	6279      	str	r1, [r7, #36]	@ 0x24
 80062ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	09db      	lsrs	r3, r3, #7
 80062b8:	623b      	str	r3, [r7, #32]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80062be:	d8f0      	bhi.n	80062a2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80062c6:	6a3a      	ldr	r2, [r7, #32]
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	4b25      	ldr	r3, [pc, #148]	@ (800636c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	e00b      	b.n	80062f4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	1c59      	adds	r1, r3, #1
 80062e4:	61f9      	str	r1, [r7, #28]
 80062e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	09db      	lsrs	r3, r3, #7
 80062f2:	61bb      	str	r3, [r7, #24]
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80062f8:	d8f0      	bhi.n	80062dc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	61fa      	str	r2, [r7, #28]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	2300      	movs	r3, #0
 8006310:	613b      	str	r3, [r7, #16]
 8006312:	e00b      	b.n	800632c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	1c59      	adds	r1, r3, #1
 800631c:	6179      	str	r1, [r7, #20]
 800631e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	09db      	lsrs	r3, r3, #7
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006330:	d8f0      	bhi.n	8006314 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	617a      	str	r2, [r7, #20]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006342:	2218      	movs	r2, #24
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	68b8      	ldr	r0, [r7, #8]
 8006348:	f7ff f860 	bl	800540c <_SendPacket>
  RECORD_END();
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006352:	4b06      	ldr	r3, [pc, #24]	@ (800636c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800635a:	4b04      	ldr	r3, [pc, #16]	@ (800636c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	4798      	blx	r3
  }
}
 8006360:	bf00      	nop
 8006362:	3730      	adds	r7, #48	@ 0x30
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	200045c0 	.word	0x200045c0
 800636c:	20004590 	.word	0x20004590

08006370 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006370:	b580      	push	{r7, lr}
 8006372:	b092      	sub	sp, #72	@ 0x48
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006378:	f3ef 8311 	mrs	r3, BASEPRI
 800637c:	f04f 0120 	mov.w	r1, #32
 8006380:	f381 8811 	msr	BASEPRI, r1
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	486a      	ldr	r0, [pc, #424]	@ (8006530 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006388:	f7fe ff53 	bl	8005232 <_PreparePacket>
 800638c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	647b      	str	r3, [r7, #68]	@ 0x44
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4b66      	ldr	r3, [pc, #408]	@ (8006534 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80063a2:	e00b      	b.n	80063bc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80063a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063aa:	1c59      	adds	r1, r3, #1
 80063ac:	6479      	str	r1, [r7, #68]	@ 0x44
 80063ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063b8:	09db      	lsrs	r3, r3, #7
 80063ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80063bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063be:	2b7f      	cmp	r3, #127	@ 0x7f
 80063c0:	d8f0      	bhi.n	80063a4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80063c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80063c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063dc:	e00b      	b.n	80063f6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80063de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063e4:	1c59      	adds	r1, r3, #1
 80063e6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80063e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f2:	09db      	lsrs	r3, r3, #7
 80063f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80063fa:	d8f0      	bhi.n	80063de <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80063fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800640a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	4619      	mov	r1, r3
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f7fe fed3 	bl	80051c0 <_EncodeStr>
 800641a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800641c:	2209      	movs	r2, #9
 800641e:	68f9      	ldr	r1, [r7, #12]
 8006420:	6938      	ldr	r0, [r7, #16]
 8006422:	f7fe fff3 	bl	800540c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	637b      	str	r3, [r7, #52]	@ 0x34
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b40      	ldr	r3, [pc, #256]	@ (8006534 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	633b      	str	r3, [r7, #48]	@ 0x30
 800643a:	e00b      	b.n	8006454 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	b2da      	uxtb	r2, r3
 8006440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006442:	1c59      	adds	r1, r3, #1
 8006444:	6379      	str	r1, [r7, #52]	@ 0x34
 8006446:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006450:	09db      	lsrs	r3, r3, #7
 8006452:	633b      	str	r3, [r7, #48]	@ 0x30
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	2b7f      	cmp	r3, #127	@ 0x7f
 8006458:	d8f0      	bhi.n	800643c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800645a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006468:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006474:	e00b      	b.n	800648e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006478:	b2da      	uxtb	r2, r3
 800647a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647c:	1c59      	adds	r1, r3, #1
 800647e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006480:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648a:	09db      	lsrs	r3, r3, #7
 800648c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800648e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006490:	2b7f      	cmp	r3, #127	@ 0x7f
 8006492:	d8f0      	bhi.n	8006476 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800649a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	e00b      	b.n	80064c8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80064ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	09db      	lsrs	r3, r3, #7
 80064c6:	623b      	str	r3, [r7, #32]
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80064cc:	d8f0      	bhi.n	80064b0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80064d4:	6a3a      	ldr	r2, [r7, #32]
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	e00b      	b.n	8006502 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	1c59      	adds	r1, r3, #1
 80064f2:	61f9      	str	r1, [r7, #28]
 80064f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	09db      	lsrs	r3, r3, #7
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b7f      	cmp	r3, #127	@ 0x7f
 8006506:	d8f0      	bhi.n	80064ea <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	61fa      	str	r2, [r7, #28]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006518:	2215      	movs	r2, #21
 800651a:	68f9      	ldr	r1, [r7, #12]
 800651c:	6938      	ldr	r0, [r7, #16]
 800651e:	f7fe ff75 	bl	800540c <_SendPacket>
  RECORD_END();
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f383 8811 	msr	BASEPRI, r3
}
 8006528:	bf00      	nop
 800652a:	3748      	adds	r7, #72	@ 0x48
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	200045c0 	.word	0x200045c0
 8006534:	20004590 	.word	0x20004590

08006538 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800653c:	4b07      	ldr	r3, [pc, #28]	@ (800655c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006544:	4b05      	ldr	r3, [pc, #20]	@ (800655c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800654e:	4b03      	ldr	r3, [pc, #12]	@ (800655c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4798      	blx	r3
  }
}
 8006556:	bf00      	nop
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20004590 	.word	0x20004590

08006560 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006568:	f3ef 8311 	mrs	r3, BASEPRI
 800656c:	f04f 0120 	mov.w	r1, #32
 8006570:	f381 8811 	msr	BASEPRI, r1
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	480b      	ldr	r0, [pc, #44]	@ (80065a4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006578:	f7fe fe5b 	bl	8005232 <_PreparePacket>
 800657c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800657e:	2280      	movs	r2, #128	@ 0x80
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	6938      	ldr	r0, [r7, #16]
 8006584:	f7fe fe1c 	bl	80051c0 <_EncodeStr>
 8006588:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800658a:	220e      	movs	r2, #14
 800658c:	68f9      	ldr	r1, [r7, #12]
 800658e:	6938      	ldr	r0, [r7, #16]
 8006590:	f7fe ff3c 	bl	800540c <_SendPacket>
  RECORD_END();
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f383 8811 	msr	BASEPRI, r3
}
 800659a:	bf00      	nop
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200045c0 	.word	0x200045c0

080065a8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80065ae:	4b15      	ldr	r3, [pc, #84]	@ (8006604 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d01a      	beq.n	80065ec <SEGGER_SYSVIEW_RecordSystime+0x44>
 80065b6:	4b13      	ldr	r3, [pc, #76]	@ (8006604 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d015      	beq.n	80065ec <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80065c0:	4b10      	ldr	r3, [pc, #64]	@ (8006604 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4798      	blx	r3
 80065c8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065cc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80065ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	000a      	movs	r2, r1
 80065dc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065de:	4613      	mov	r3, r2
 80065e0:	461a      	mov	r2, r3
 80065e2:	4621      	mov	r1, r4
 80065e4:	200d      	movs	r0, #13
 80065e6:	f7ff fcef 	bl	8005fc8 <SEGGER_SYSVIEW_RecordU32x2>
 80065ea:	e006      	b.n	80065fa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80065ec:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4619      	mov	r1, r3
 80065f2:	200c      	movs	r0, #12
 80065f4:	f7ff fcac 	bl	8005f50 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd90      	pop	{r4, r7, pc}
 8006602:	bf00      	nop
 8006604:	20004590 	.word	0x20004590
 8006608:	e0001004 	.word	0xe0001004

0800660c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006612:	f3ef 8311 	mrs	r3, BASEPRI
 8006616:	f04f 0120 	mov.w	r1, #32
 800661a:	f381 8811 	msr	BASEPRI, r1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	4819      	ldr	r0, [pc, #100]	@ (8006688 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006622:	f7fe fe06 	bl	8005232 <_PreparePacket>
 8006626:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800662c:	4b17      	ldr	r3, [pc, #92]	@ (800668c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006634:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	e00b      	b.n	8006658 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	1c59      	adds	r1, r3, #1
 8006648:	6179      	str	r1, [r7, #20]
 800664a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	09db      	lsrs	r3, r3, #7
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2b7f      	cmp	r3, #127	@ 0x7f
 800665c:	d8f0      	bhi.n	8006640 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	617a      	str	r2, [r7, #20]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800666e:	2202      	movs	r2, #2
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	68b8      	ldr	r0, [r7, #8]
 8006674:	f7fe feca 	bl	800540c <_SendPacket>
  RECORD_END();
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f383 8811 	msr	BASEPRI, r3
}
 800667e:	bf00      	nop
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200045c0 	.word	0x200045c0
 800668c:	e000ed04 	.word	0xe000ed04

08006690 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006696:	f3ef 8311 	mrs	r3, BASEPRI
 800669a:	f04f 0120 	mov.w	r1, #32
 800669e:	f381 8811 	msr	BASEPRI, r1
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	4807      	ldr	r0, [pc, #28]	@ (80066c4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80066a6:	f7fe fdc4 	bl	8005232 <_PreparePacket>
 80066aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80066ac:	2203      	movs	r2, #3
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6838      	ldr	r0, [r7, #0]
 80066b2:	f7fe feab 	bl	800540c <_SendPacket>
  RECORD_END();
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f383 8811 	msr	BASEPRI, r3
}
 80066bc:	bf00      	nop
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	200045c0 	.word	0x200045c0

080066c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066ce:	f3ef 8311 	mrs	r3, BASEPRI
 80066d2:	f04f 0120 	mov.w	r1, #32
 80066d6:	f381 8811 	msr	BASEPRI, r1
 80066da:	607b      	str	r3, [r7, #4]
 80066dc:	4807      	ldr	r0, [pc, #28]	@ (80066fc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80066de:	f7fe fda8 	bl	8005232 <_PreparePacket>
 80066e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80066e4:	2212      	movs	r2, #18
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6838      	ldr	r0, [r7, #0]
 80066ea:	f7fe fe8f 	bl	800540c <_SendPacket>
  RECORD_END();
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f383 8811 	msr	BASEPRI, r3
}
 80066f4:	bf00      	nop
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	200045c0 	.word	0x200045c0

08006700 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006708:	f3ef 8311 	mrs	r3, BASEPRI
 800670c:	f04f 0120 	mov.w	r1, #32
 8006710:	f381 8811 	msr	BASEPRI, r1
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	4817      	ldr	r0, [pc, #92]	@ (8006774 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006718:	f7fe fd8b 	bl	8005232 <_PreparePacket>
 800671c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	e00b      	b.n	8006744 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	1c59      	adds	r1, r3, #1
 8006734:	61f9      	str	r1, [r7, #28]
 8006736:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	09db      	lsrs	r3, r3, #7
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	2b7f      	cmp	r3, #127	@ 0x7f
 8006748:	d8f0      	bhi.n	800672c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	61fa      	str	r2, [r7, #28]
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800675a:	221c      	movs	r2, #28
 800675c:	68f9      	ldr	r1, [r7, #12]
 800675e:	6938      	ldr	r0, [r7, #16]
 8006760:	f7fe fe54 	bl	800540c <_SendPacket>
  RECORD_END();
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f383 8811 	msr	BASEPRI, r3
}
 800676a:	bf00      	nop
 800676c:	3720      	adds	r7, #32
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200045c0 	.word	0x200045c0

08006778 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b08a      	sub	sp, #40	@ 0x28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006782:	f3ef 8311 	mrs	r3, BASEPRI
 8006786:	f04f 0120 	mov.w	r1, #32
 800678a:	f381 8811 	msr	BASEPRI, r1
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	4824      	ldr	r0, [pc, #144]	@ (8006824 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006792:	f7fe fd4e 	bl	8005232 <_PreparePacket>
 8006796:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	623b      	str	r3, [r7, #32]
 80067a4:	e00b      	b.n	80067be <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	1c59      	adds	r1, r3, #1
 80067ae:	6279      	str	r1, [r7, #36]	@ 0x24
 80067b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	09db      	lsrs	r3, r3, #7
 80067bc:	623b      	str	r3, [r7, #32]
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80067c2:	d8f0      	bhi.n	80067a6 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80067ca:	6a3a      	ldr	r2, [r7, #32]
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	e00b      	b.n	80067f6 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	1c59      	adds	r1, r3, #1
 80067e6:	61f9      	str	r1, [r7, #28]
 80067e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	09db      	lsrs	r3, r3, #7
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067fa:	d8f0      	bhi.n	80067de <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	61fa      	str	r2, [r7, #28]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800680c:	221c      	movs	r2, #28
 800680e:	68f9      	ldr	r1, [r7, #12]
 8006810:	6938      	ldr	r0, [r7, #16]
 8006812:	f7fe fdfb 	bl	800540c <_SendPacket>
  RECORD_END();
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f383 8811 	msr	BASEPRI, r3
}
 800681c:	bf00      	nop
 800681e:	3728      	adds	r7, #40	@ 0x28
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	200045c0 	.word	0x200045c0

08006828 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800682e:	f3ef 8311 	mrs	r3, BASEPRI
 8006832:	f04f 0120 	mov.w	r1, #32
 8006836:	f381 8811 	msr	BASEPRI, r1
 800683a:	607b      	str	r3, [r7, #4]
 800683c:	4807      	ldr	r0, [pc, #28]	@ (800685c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800683e:	f7fe fcf8 	bl	8005232 <_PreparePacket>
 8006842:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006844:	2211      	movs	r2, #17
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6838      	ldr	r0, [r7, #0]
 800684a:	f7fe fddf 	bl	800540c <_SendPacket>
  RECORD_END();
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f383 8811 	msr	BASEPRI, r3
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	200045c0 	.word	0x200045c0

08006860 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006868:	f3ef 8311 	mrs	r3, BASEPRI
 800686c:	f04f 0120 	mov.w	r1, #32
 8006870:	f381 8811 	msr	BASEPRI, r1
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	4819      	ldr	r0, [pc, #100]	@ (80068dc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006878:	f7fe fcdb 	bl	8005232 <_PreparePacket>
 800687c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006882:	4b17      	ldr	r3, [pc, #92]	@ (80068e0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	e00b      	b.n	80068ae <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	b2da      	uxtb	r2, r3
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	1c59      	adds	r1, r3, #1
 800689e:	61f9      	str	r1, [r7, #28]
 80068a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	09db      	lsrs	r3, r3, #7
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80068b2:	d8f0      	bhi.n	8006896 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	61fa      	str	r2, [r7, #28]
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80068c4:	2208      	movs	r2, #8
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	6938      	ldr	r0, [r7, #16]
 80068ca:	f7fe fd9f 	bl	800540c <_SendPacket>
  RECORD_END();
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f383 8811 	msr	BASEPRI, r3
}
 80068d4:	bf00      	nop
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	200045c0 	.word	0x200045c0
 80068e0:	20004590 	.word	0x20004590

080068e4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068ec:	f3ef 8311 	mrs	r3, BASEPRI
 80068f0:	f04f 0120 	mov.w	r1, #32
 80068f4:	f381 8811 	msr	BASEPRI, r1
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	4819      	ldr	r0, [pc, #100]	@ (8006960 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80068fc:	f7fe fc99 	bl	8005232 <_PreparePacket>
 8006900:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006906:	4b17      	ldr	r3, [pc, #92]	@ (8006964 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	61bb      	str	r3, [r7, #24]
 8006918:	e00b      	b.n	8006932 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	b2da      	uxtb	r2, r3
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	1c59      	adds	r1, r3, #1
 8006922:	61f9      	str	r1, [r7, #28]
 8006924:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	09db      	lsrs	r3, r3, #7
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b7f      	cmp	r3, #127	@ 0x7f
 8006936:	d8f0      	bhi.n	800691a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	61fa      	str	r2, [r7, #28]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006948:	2204      	movs	r2, #4
 800694a:	68f9      	ldr	r1, [r7, #12]
 800694c:	6938      	ldr	r0, [r7, #16]
 800694e:	f7fe fd5d 	bl	800540c <_SendPacket>
  RECORD_END();
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f383 8811 	msr	BASEPRI, r3
}
 8006958:	bf00      	nop
 800695a:	3720      	adds	r7, #32
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	200045c0 	.word	0x200045c0
 8006964:	20004590 	.word	0x20004590

08006968 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006970:	f3ef 8311 	mrs	r3, BASEPRI
 8006974:	f04f 0120 	mov.w	r1, #32
 8006978:	f381 8811 	msr	BASEPRI, r1
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	4819      	ldr	r0, [pc, #100]	@ (80069e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006980:	f7fe fc57 	bl	8005232 <_PreparePacket>
 8006984:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800698a:	4b17      	ldr	r3, [pc, #92]	@ (80069e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	e00b      	b.n	80069b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	1c59      	adds	r1, r3, #1
 80069a6:	61f9      	str	r1, [r7, #28]
 80069a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	09db      	lsrs	r3, r3, #7
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80069ba:	d8f0      	bhi.n	800699e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	61fa      	str	r2, [r7, #28]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80069cc:	2206      	movs	r2, #6
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	6938      	ldr	r0, [r7, #16]
 80069d2:	f7fe fd1b 	bl	800540c <_SendPacket>
  RECORD_END();
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f383 8811 	msr	BASEPRI, r3
}
 80069dc:	bf00      	nop
 80069de:	3720      	adds	r7, #32
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	200045c0 	.word	0x200045c0
 80069e8:	20004590 	.word	0x20004590

080069ec <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	@ 0x28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80069f6:	f3ef 8311 	mrs	r3, BASEPRI
 80069fa:	f04f 0120 	mov.w	r1, #32
 80069fe:	f381 8811 	msr	BASEPRI, r1
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	4827      	ldr	r0, [pc, #156]	@ (8006aa4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006a06:	f7fe fc14 	bl	8005232 <_PreparePacket>
 8006a0a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a10:	4b25      	ldr	r3, [pc, #148]	@ (8006aa8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	623b      	str	r3, [r7, #32]
 8006a22:	e00b      	b.n	8006a3c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	1c59      	adds	r1, r3, #1
 8006a2c:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	09db      	lsrs	r3, r3, #7
 8006a3a:	623b      	str	r3, [r7, #32]
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a40:	d8f0      	bhi.n	8006a24 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a48:	6a3a      	ldr	r2, [r7, #32]
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	61bb      	str	r3, [r7, #24]
 8006a5a:	e00b      	b.n	8006a74 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	61f9      	str	r1, [r7, #28]
 8006a66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	09db      	lsrs	r3, r3, #7
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a78:	d8f0      	bhi.n	8006a5c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	61fa      	str	r2, [r7, #28]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006a8a:	2207      	movs	r2, #7
 8006a8c:	68f9      	ldr	r1, [r7, #12]
 8006a8e:	6938      	ldr	r0, [r7, #16]
 8006a90:	f7fe fcbc 	bl	800540c <_SendPacket>
  RECORD_END();
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f383 8811 	msr	BASEPRI, r3
}
 8006a9a:	bf00      	nop
 8006a9c:	3728      	adds	r7, #40	@ 0x28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	200045c0 	.word	0x200045c0
 8006aa8:	20004590 	.word	0x20004590

08006aac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006ab4:	4b04      	ldr	r3, [pc, #16]	@ (8006ac8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	1ad3      	subs	r3, r2, r3
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	20004590 	.word	0x20004590

08006acc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08c      	sub	sp, #48	@ 0x30
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006ad6:	4b40      	ldr	r3, [pc, #256]	@ (8006bd8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d077      	beq.n	8006bce <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006ade:	4b3e      	ldr	r3, [pc, #248]	@ (8006bd8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ae8:	e008      	b.n	8006afc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d007      	beq.n	8006b06 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	3301      	adds	r3, #1
 8006afa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d3f2      	bcc.n	8006aea <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b04:	e000      	b.n	8006b08 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b06:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d055      	beq.n	8006bba <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b12:	f04f 0120 	mov.w	r1, #32
 8006b16:	f381 8811 	msr	BASEPRI, r1
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	482f      	ldr	r0, [pc, #188]	@ (8006bdc <SEGGER_SYSVIEW_SendModule+0x110>)
 8006b1e:	f7fe fb88 	bl	8005232 <_PreparePacket>
 8006b22:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	623b      	str	r3, [r7, #32]
 8006b30:	e00b      	b.n	8006b4a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	1c59      	adds	r1, r3, #1
 8006b3a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b40:	b2d2      	uxtb	r2, r2
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	09db      	lsrs	r3, r3, #7
 8006b48:	623b      	str	r3, [r7, #32]
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b4e:	d8f0      	bhi.n	8006b32 <SEGGER_SYSVIEW_SendModule+0x66>
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b56:	6a3a      	ldr	r2, [r7, #32]
 8006b58:	b2d2      	uxtb	r2, r2
 8006b5a:	701a      	strb	r2, [r3, #0]
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	e00b      	b.n	8006b84 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	1c59      	adds	r1, r3, #1
 8006b74:	61f9      	str	r1, [r7, #28]
 8006b76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	09db      	lsrs	r3, r3, #7
 8006b82:	61bb      	str	r3, [r7, #24]
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b88:	d8f0      	bhi.n	8006b6c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	61fa      	str	r2, [r7, #28]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2280      	movs	r2, #128	@ 0x80
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f7fe fb0c 	bl	80051c0 <_EncodeStr>
 8006ba8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006baa:	2216      	movs	r2, #22
 8006bac:	68f9      	ldr	r1, [r7, #12]
 8006bae:	6938      	ldr	r0, [r7, #16]
 8006bb0:	f7fe fc2c 	bl	800540c <_SendPacket>
      RECORD_END();
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d006      	beq.n	8006bce <SEGGER_SYSVIEW_SendModule+0x102>
 8006bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4798      	blx	r3
    }
  }
}
 8006bce:	bf00      	nop
 8006bd0:	3730      	adds	r7, #48	@ 0x30
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	200045b8 	.word	0x200045b8
 8006bdc:	200045c0 	.word	0x200045c0

08006be0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006be6:	4b0c      	ldr	r3, [pc, #48]	@ (8006c18 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00f      	beq.n	8006c0e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006bee:	4b0a      	ldr	r3, [pc, #40]	@ (8006c18 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1f2      	bne.n	8006bf4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	200045b8 	.word	0x200045b8

08006c1c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006c22:	f3ef 8311 	mrs	r3, BASEPRI
 8006c26:	f04f 0120 	mov.w	r1, #32
 8006c2a:	f381 8811 	msr	BASEPRI, r1
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	4817      	ldr	r0, [pc, #92]	@ (8006c90 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006c32:	f7fe fafe 	bl	8005232 <_PreparePacket>
 8006c36:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	4b14      	ldr	r3, [pc, #80]	@ (8006c94 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	e00b      	b.n	8006c60 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	1c59      	adds	r1, r3, #1
 8006c50:	6179      	str	r1, [r7, #20]
 8006c52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	09db      	lsrs	r3, r3, #7
 8006c5e:	613b      	str	r3, [r7, #16]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c64:	d8f0      	bhi.n	8006c48 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	617a      	str	r2, [r7, #20]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006c76:	221b      	movs	r2, #27
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	68b8      	ldr	r0, [r7, #8]
 8006c7c:	f7fe fbc6 	bl	800540c <_SendPacket>
  RECORD_END();
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f383 8811 	msr	BASEPRI, r3
}
 8006c86:	bf00      	nop
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	200045c0 	.word	0x200045c0
 8006c94:	200045bc 	.word	0x200045bc

08006c98 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006c98:	b40f      	push	{r0, r1, r2, r3}
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006ca0:	f107 0314 	add.w	r3, r7, #20
 8006ca4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006ca6:	1d3b      	adds	r3, r7, #4
 8006ca8:	461a      	mov	r2, r3
 8006caa:	2100      	movs	r1, #0
 8006cac:	6938      	ldr	r0, [r7, #16]
 8006cae:	f7fe febd 	bl	8005a2c <_VPrintTarget>
  va_end(ParamList);
}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cbc:	b004      	add	sp, #16
 8006cbe:	4770      	bx	lr

08006cc0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	@ 0x28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cc8:	f3ef 8311 	mrs	r3, BASEPRI
 8006ccc:	f04f 0120 	mov.w	r1, #32
 8006cd0:	f381 8811 	msr	BASEPRI, r1
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	4827      	ldr	r0, [pc, #156]	@ (8006d74 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006cd8:	f7fe faab 	bl	8005232 <_PreparePacket>
 8006cdc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cde:	2280      	movs	r2, #128	@ 0x80
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	6938      	ldr	r0, [r7, #16]
 8006ce4:	f7fe fa6c 	bl	80051c0 <_EncodeStr>
 8006ce8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cee:	2301      	movs	r3, #1
 8006cf0:	623b      	str	r3, [r7, #32]
 8006cf2:	e00b      	b.n	8006d0c <SEGGER_SYSVIEW_Warn+0x4c>
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	1c59      	adds	r1, r3, #1
 8006cfc:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	09db      	lsrs	r3, r3, #7
 8006d0a:	623b      	str	r3, [r7, #32]
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d10:	d8f0      	bhi.n	8006cf4 <SEGGER_SYSVIEW_Warn+0x34>
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d18:	6a3a      	ldr	r2, [r7, #32]
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	61fb      	str	r3, [r7, #28]
 8006d26:	2300      	movs	r3, #0
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	e00b      	b.n	8006d44 <SEGGER_SYSVIEW_Warn+0x84>
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	1c59      	adds	r1, r3, #1
 8006d34:	61f9      	str	r1, [r7, #28]
 8006d36:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	09db      	lsrs	r3, r3, #7
 8006d42:	61bb      	str	r3, [r7, #24]
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d48:	d8f0      	bhi.n	8006d2c <SEGGER_SYSVIEW_Warn+0x6c>
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	61fa      	str	r2, [r7, #28]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006d5a:	221a      	movs	r2, #26
 8006d5c:	68f9      	ldr	r1, [r7, #12]
 8006d5e:	6938      	ldr	r0, [r7, #16]
 8006d60:	f7fe fb54 	bl	800540c <_SendPacket>
  RECORD_END();
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f383 8811 	msr	BASEPRI, r3
}
 8006d6a:	bf00      	nop
 8006d6c:	3728      	adds	r7, #40	@ 0x28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	200045c0 	.word	0x200045c0

08006d78 <memcmp>:
 8006d78:	b510      	push	{r4, lr}
 8006d7a:	3901      	subs	r1, #1
 8006d7c:	4402      	add	r2, r0
 8006d7e:	4290      	cmp	r0, r2
 8006d80:	d101      	bne.n	8006d86 <memcmp+0xe>
 8006d82:	2000      	movs	r0, #0
 8006d84:	e005      	b.n	8006d92 <memcmp+0x1a>
 8006d86:	7803      	ldrb	r3, [r0, #0]
 8006d88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	d001      	beq.n	8006d94 <memcmp+0x1c>
 8006d90:	1b18      	subs	r0, r3, r4
 8006d92:	bd10      	pop	{r4, pc}
 8006d94:	3001      	adds	r0, #1
 8006d96:	e7f2      	b.n	8006d7e <memcmp+0x6>

08006d98 <memset>:
 8006d98:	4402      	add	r2, r0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d100      	bne.n	8006da2 <memset+0xa>
 8006da0:	4770      	bx	lr
 8006da2:	f803 1b01 	strb.w	r1, [r3], #1
 8006da6:	e7f9      	b.n	8006d9c <memset+0x4>

08006da8 <__libc_init_array>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	4d0d      	ldr	r5, [pc, #52]	@ (8006de0 <__libc_init_array+0x38>)
 8006dac:	4c0d      	ldr	r4, [pc, #52]	@ (8006de4 <__libc_init_array+0x3c>)
 8006dae:	1b64      	subs	r4, r4, r5
 8006db0:	10a4      	asrs	r4, r4, #2
 8006db2:	2600      	movs	r6, #0
 8006db4:	42a6      	cmp	r6, r4
 8006db6:	d109      	bne.n	8006dcc <__libc_init_array+0x24>
 8006db8:	4d0b      	ldr	r5, [pc, #44]	@ (8006de8 <__libc_init_array+0x40>)
 8006dba:	4c0c      	ldr	r4, [pc, #48]	@ (8006dec <__libc_init_array+0x44>)
 8006dbc:	f000 f826 	bl	8006e0c <_init>
 8006dc0:	1b64      	subs	r4, r4, r5
 8006dc2:	10a4      	asrs	r4, r4, #2
 8006dc4:	2600      	movs	r6, #0
 8006dc6:	42a6      	cmp	r6, r4
 8006dc8:	d105      	bne.n	8006dd6 <__libc_init_array+0x2e>
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd0:	4798      	blx	r3
 8006dd2:	3601      	adds	r6, #1
 8006dd4:	e7ee      	b.n	8006db4 <__libc_init_array+0xc>
 8006dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dda:	4798      	blx	r3
 8006ddc:	3601      	adds	r6, #1
 8006dde:	e7f2      	b.n	8006dc6 <__libc_init_array+0x1e>
 8006de0:	08006fe0 	.word	0x08006fe0
 8006de4:	08006fe0 	.word	0x08006fe0
 8006de8:	08006fe0 	.word	0x08006fe0
 8006dec:	08006fe4 	.word	0x08006fe4

08006df0 <memcpy>:
 8006df0:	440a      	add	r2, r1
 8006df2:	4291      	cmp	r1, r2
 8006df4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006df8:	d100      	bne.n	8006dfc <memcpy+0xc>
 8006dfa:	4770      	bx	lr
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e06:	4291      	cmp	r1, r2
 8006e08:	d1f9      	bne.n	8006dfe <memcpy+0xe>
 8006e0a:	bd10      	pop	{r4, pc}

08006e0c <_init>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr

08006e18 <_fini>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr
