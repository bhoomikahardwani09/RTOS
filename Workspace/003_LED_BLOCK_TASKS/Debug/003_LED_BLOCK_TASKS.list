
003_LED_BLOCK_TASKS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c34  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08006dd4  08006dd4  00007dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f88  08006f88  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f88  08006f88  00007f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f90  08006f90  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f90  08006f90  00007f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f94  08006f94  00007f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006f98  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004694  20000010  08006fa8  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200046a4  08006fa8  000086a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015399  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003087  00000000  00000000  0001d3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00020460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f4b  00000000  00000000  00021838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a187  00000000  00000000  00022783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015355  00000000  00000000  0003c90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac0e0  00000000  00000000  00051c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdd3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005370  00000000  00000000  000fdd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000dc  00000000  00000000  001030f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006dbc 	.word	0x08006dbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006dbc 	.word	0x08006dbc

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200030d0 	.word	0x200030d0

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000288:	f000 b988 	b.w	800059c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	468e      	mov	lr, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	4688      	mov	r8, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d962      	bls.n	8000380 <__udivmoddi4+0xdc>
 80002ba:	fab2 f682 	clz	r6, r2
 80002be:	b14e      	cbz	r6, 80002d4 <__udivmoddi4+0x30>
 80002c0:	f1c6 0320 	rsb	r3, r6, #32
 80002c4:	fa01 f806 	lsl.w	r8, r1, r6
 80002c8:	fa20 f303 	lsr.w	r3, r0, r3
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	ea43 0808 	orr.w	r8, r3, r8
 80002d2:	40b4      	lsls	r4, r6
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f fc87 	uxth.w	ip, r7
 80002dc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f8:	f080 80ea 	bcs.w	80004d0 <__udivmoddi4+0x22c>
 80002fc:	429a      	cmp	r2, r3
 80002fe:	f240 80e7 	bls.w	80004d0 <__udivmoddi4+0x22c>
 8000302:	3902      	subs	r1, #2
 8000304:	443b      	add	r3, r7
 8000306:	1a9a      	subs	r2, r3, r2
 8000308:	b2a3      	uxth	r3, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb00 fc0c 	mul.w	ip, r0, ip
 800031a:	459c      	cmp	ip, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x8e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000324:	f080 80d6 	bcs.w	80004d4 <__udivmoddi4+0x230>
 8000328:	459c      	cmp	ip, r3
 800032a:	f240 80d3 	bls.w	80004d4 <__udivmoddi4+0x230>
 800032e:	443b      	add	r3, r7
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000336:	eba3 030c 	sub.w	r3, r3, ip
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa2>
 800033e:	40f3      	lsrs	r3, r6
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xb6>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb0>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa2>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x14c>
 8000362:	4573      	cmp	r3, lr
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xc8>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 8105 	bhi.w	8000576 <__udivmoddi4+0x2d2>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000372:	2001      	movs	r0, #1
 8000374:	4690      	mov	r8, r2
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e5      	beq.n	8000346 <__udivmoddi4+0xa2>
 800037a:	e9c5 4800 	strd	r4, r8, [r5]
 800037e:	e7e2      	b.n	8000346 <__udivmoddi4+0xa2>
 8000380:	2a00      	cmp	r2, #0
 8000382:	f000 8090 	beq.w	80004a6 <__udivmoddi4+0x202>
 8000386:	fab2 f682 	clz	r6, r2
 800038a:	2e00      	cmp	r6, #0
 800038c:	f040 80a4 	bne.w	80004d8 <__udivmoddi4+0x234>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	0c03      	lsrs	r3, r0, #16
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	b280      	uxth	r0, r0
 800039a:	b2bc      	uxth	r4, r7
 800039c:	2101      	movs	r1, #1
 800039e:	fbb2 fcfe 	udiv	ip, r2, lr
 80003a2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003aa:	fb04 f20c 	mul.w	r2, r4, ip
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d907      	bls.n	80003c2 <__udivmoddi4+0x11e>
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b8:	d202      	bcs.n	80003c0 <__udivmoddi4+0x11c>
 80003ba:	429a      	cmp	r2, r3
 80003bc:	f200 80e0 	bhi.w	8000580 <__udivmoddi4+0x2dc>
 80003c0:	46c4      	mov	ip, r8
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003cc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003d0:	fb02 f404 	mul.w	r4, r2, r4
 80003d4:	429c      	cmp	r4, r3
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x144>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x142>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f200 80ca 	bhi.w	800057a <__udivmoddi4+0x2d6>
 80003e6:	4602      	mov	r2, r0
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x98>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa0e f401 	lsl.w	r4, lr, r1
 8000400:	fa20 f306 	lsr.w	r3, r0, r6
 8000404:	fa2e fe06 	lsr.w	lr, lr, r6
 8000408:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800040c:	4323      	orrs	r3, r4
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	fa1f fc87 	uxth.w	ip, r7
 8000416:	fbbe f0f9 	udiv	r0, lr, r9
 800041a:	0c1c      	lsrs	r4, r3, #16
 800041c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000420:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000424:	fb00 fe0c 	mul.w	lr, r0, ip
 8000428:	45a6      	cmp	lr, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d909      	bls.n	8000444 <__udivmoddi4+0x1a0>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000436:	f080 809c 	bcs.w	8000572 <__udivmoddi4+0x2ce>
 800043a:	45a6      	cmp	lr, r4
 800043c:	f240 8099 	bls.w	8000572 <__udivmoddi4+0x2ce>
 8000440:	3802      	subs	r0, #2
 8000442:	443c      	add	r4, r7
 8000444:	eba4 040e 	sub.w	r4, r4, lr
 8000448:	fa1f fe83 	uxth.w	lr, r3
 800044c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000450:	fb09 4413 	mls	r4, r9, r3, r4
 8000454:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000458:	fb03 fc0c 	mul.w	ip, r3, ip
 800045c:	45a4      	cmp	ip, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x1ce>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000466:	f080 8082 	bcs.w	800056e <__udivmoddi4+0x2ca>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d97f      	bls.n	800056e <__udivmoddi4+0x2ca>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000476:	eba4 040c 	sub.w	r4, r4, ip
 800047a:	fba0 ec02 	umull	lr, ip, r0, r2
 800047e:	4564      	cmp	r4, ip
 8000480:	4673      	mov	r3, lr
 8000482:	46e1      	mov	r9, ip
 8000484:	d362      	bcc.n	800054c <__udivmoddi4+0x2a8>
 8000486:	d05f      	beq.n	8000548 <__udivmoddi4+0x2a4>
 8000488:	b15d      	cbz	r5, 80004a2 <__udivmoddi4+0x1fe>
 800048a:	ebb8 0203 	subs.w	r2, r8, r3
 800048e:	eb64 0409 	sbc.w	r4, r4, r9
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	fa22 f301 	lsr.w	r3, r2, r1
 800049a:	431e      	orrs	r6, r3
 800049c:	40cc      	lsrs	r4, r1
 800049e:	e9c5 6400 	strd	r6, r4, [r5]
 80004a2:	2100      	movs	r1, #0
 80004a4:	e74f      	b.n	8000346 <__udivmoddi4+0xa2>
 80004a6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004aa:	0c01      	lsrs	r1, r0, #16
 80004ac:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004b0:	b280      	uxth	r0, r0
 80004b2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b6:	463b      	mov	r3, r7
 80004b8:	4638      	mov	r0, r7
 80004ba:	463c      	mov	r4, r7
 80004bc:	46b8      	mov	r8, r7
 80004be:	46be      	mov	lr, r7
 80004c0:	2620      	movs	r6, #32
 80004c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c6:	eba2 0208 	sub.w	r2, r2, r8
 80004ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ce:	e766      	b.n	800039e <__udivmoddi4+0xfa>
 80004d0:	4601      	mov	r1, r0
 80004d2:	e718      	b.n	8000306 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e72c      	b.n	8000332 <__udivmoddi4+0x8e>
 80004d8:	f1c6 0220 	rsb	r2, r6, #32
 80004dc:	fa2e f302 	lsr.w	r3, lr, r2
 80004e0:	40b7      	lsls	r7, r6
 80004e2:	40b1      	lsls	r1, r6
 80004e4:	fa20 f202 	lsr.w	r2, r0, r2
 80004e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004ec:	430a      	orrs	r2, r1
 80004ee:	fbb3 f8fe 	udiv	r8, r3, lr
 80004f2:	b2bc      	uxth	r4, r7
 80004f4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f8:	0c11      	lsrs	r1, r2, #16
 80004fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fe:	fb08 f904 	mul.w	r9, r8, r4
 8000502:	40b0      	lsls	r0, r6
 8000504:	4589      	cmp	r9, r1
 8000506:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800050a:	b280      	uxth	r0, r0
 800050c:	d93e      	bls.n	800058c <__udivmoddi4+0x2e8>
 800050e:	1879      	adds	r1, r7, r1
 8000510:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000514:	d201      	bcs.n	800051a <__udivmoddi4+0x276>
 8000516:	4589      	cmp	r9, r1
 8000518:	d81f      	bhi.n	800055a <__udivmoddi4+0x2b6>
 800051a:	eba1 0109 	sub.w	r1, r1, r9
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	fb0e 1119 	mls	r1, lr, r9, r1
 800052a:	b292      	uxth	r2, r2
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	4542      	cmp	r2, r8
 8000532:	d229      	bcs.n	8000588 <__udivmoddi4+0x2e4>
 8000534:	18ba      	adds	r2, r7, r2
 8000536:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800053a:	d2c4      	bcs.n	80004c6 <__udivmoddi4+0x222>
 800053c:	4542      	cmp	r2, r8
 800053e:	d2c2      	bcs.n	80004c6 <__udivmoddi4+0x222>
 8000540:	f1a9 0102 	sub.w	r1, r9, #2
 8000544:	443a      	add	r2, r7
 8000546:	e7be      	b.n	80004c6 <__udivmoddi4+0x222>
 8000548:	45f0      	cmp	r8, lr
 800054a:	d29d      	bcs.n	8000488 <__udivmoddi4+0x1e4>
 800054c:	ebbe 0302 	subs.w	r3, lr, r2
 8000550:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000554:	3801      	subs	r0, #1
 8000556:	46e1      	mov	r9, ip
 8000558:	e796      	b.n	8000488 <__udivmoddi4+0x1e4>
 800055a:	eba7 0909 	sub.w	r9, r7, r9
 800055e:	4449      	add	r1, r9
 8000560:	f1a8 0c02 	sub.w	ip, r8, #2
 8000564:	fbb1 f9fe 	udiv	r9, r1, lr
 8000568:	fb09 f804 	mul.w	r8, r9, r4
 800056c:	e7db      	b.n	8000526 <__udivmoddi4+0x282>
 800056e:	4673      	mov	r3, lr
 8000570:	e77f      	b.n	8000472 <__udivmoddi4+0x1ce>
 8000572:	4650      	mov	r0, sl
 8000574:	e766      	b.n	8000444 <__udivmoddi4+0x1a0>
 8000576:	4608      	mov	r0, r1
 8000578:	e6fd      	b.n	8000376 <__udivmoddi4+0xd2>
 800057a:	443b      	add	r3, r7
 800057c:	3a02      	subs	r2, #2
 800057e:	e733      	b.n	80003e8 <__udivmoddi4+0x144>
 8000580:	f1ac 0c02 	sub.w	ip, ip, #2
 8000584:	443b      	add	r3, r7
 8000586:	e71c      	b.n	80003c2 <__udivmoddi4+0x11e>
 8000588:	4649      	mov	r1, r9
 800058a:	e79c      	b.n	80004c6 <__udivmoddi4+0x222>
 800058c:	eba1 0109 	sub.w	r1, r1, r9
 8000590:	46c4      	mov	ip, r8
 8000592:	fbb1 f9fe 	udiv	r9, r1, lr
 8000596:	fb09 f804 	mul.w	r8, r9, r4
 800059a:	e7c4      	b.n	8000526 <__udivmoddi4+0x282>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	@ 0x28
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 faa1 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f877 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8d3 	bl	8000758 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //enable the cycle count//
  DWT_CTRL |= (1 << 0);
 80005b2:	4b30      	ldr	r3, [pc, #192]	@ (8000674 <main+0xd4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000674 <main+0xd4>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6013      	str	r3, [r2, #0]

//  SEGGER_UART_init(50000);

  //calling the APIs to start recording
  SEGGER_SYSVIEW_Conf();
 80005be:	f004 fae1 	bl	8004b84 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005c2:	f005 fd33 	bl	800602c <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led1_handler, "Task-1", configMINIMAL_STACK_SIZE * 2, "Executing task-1", 2, &task1_handler);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2302      	movs	r3, #2
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <main+0xd8>)
 80005d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005d6:	4929      	ldr	r1, [pc, #164]	@ (800067c <main+0xdc>)
 80005d8:	4829      	ldr	r0, [pc, #164]	@ (8000680 <main+0xe0>)
 80005da:	f002 f899 	bl	8002710 <xTaskCreate>
 80005de:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00b      	beq.n	80005fe <main+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <main+0x5a>

  status = xTaskCreate(led2_handler, "Task-2", configMINIMAL_STACK_SIZE * 2, "Executing task-2", 2, &task2_handler);
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	2302      	movs	r3, #2
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <main+0xe4>)
 800060a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800060e:	491e      	ldr	r1, [pc, #120]	@ (8000688 <main+0xe8>)
 8000610:	481e      	ldr	r0, [pc, #120]	@ (800068c <main+0xec>)
 8000612:	f002 f87d 	bl	8002710 <xTaskCreate>
 8000616:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d00b      	beq.n	8000636 <main+0x96>
    __asm volatile
 800061e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000622:	f383 8811 	msr	BASEPRI, r3
 8000626:	f3bf 8f6f 	isb	sy
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	617b      	str	r3, [r7, #20]
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	e7fd      	b.n	8000632 <main+0x92>

  status = xTaskCreate(led3_handler, "Task-3", configMINIMAL_STACK_SIZE * 2, "Executing task-3", 2, &task3_handler);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2302      	movs	r3, #2
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <main+0xf0>)
 8000640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000644:	4913      	ldr	r1, [pc, #76]	@ (8000694 <main+0xf4>)
 8000646:	4814      	ldr	r0, [pc, #80]	@ (8000698 <main+0xf8>)
 8000648:	f002 f862 	bl	8002710 <xTaskCreate>
 800064c:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00b      	beq.n	800066c <main+0xcc>
    __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	613b      	str	r3, [r7, #16]
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <main+0xc8>

  //Starting the FreeRTOS Scheduler//
  vTaskStartScheduler();
 800066c:	f002 fa62 	bl	8002b34 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <main+0xd0>
 8000674:	e0001000 	.word	0xe0001000
 8000678:	08006dd4 	.word	0x08006dd4
 800067c:	08006de8 	.word	0x08006de8
 8000680:	08000811 	.word	0x08000811
 8000684:	08006df0 	.word	0x08006df0
 8000688:	08006e04 	.word	0x08006e04
 800068c:	08000841 	.word	0x08000841
 8000690:	08006e0c 	.word	0x08006e0c
 8000694:	08006e20 	.word	0x08006e20
 8000698:	08000871 	.word	0x08000871

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 fb4c 	bl	8006d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <SystemClock_Config+0xb4>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SystemClock_Config+0xb4>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xb4>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <SystemClock_Config+0xb8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000754 <SystemClock_Config+0xb8>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <SystemClock_Config+0xb8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fcc9 	bl	80010a4 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000718:	f000 f8d1 	bl	80008be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f000 ff2c 	bl	8001594 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000742:	f000 f8bc 	bl	80008be <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	@ 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a1c      	ldr	r2, [pc, #112]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_GPIO_Init+0xac>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ac:	4816      	ldr	r0, [pc, #88]	@ (8000808 <MX_GPIO_Init+0xb0>)
 80007ae:	f000 fc45 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80007b8:	4814      	ldr	r0, [pc, #80]	@ (800080c <MX_GPIO_Init+0xb4>)
 80007ba:	f000 fc3f 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	@ (8000808 <MX_GPIO_Init+0xb0>)
 80007d8:	f000 faac 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007dc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_GPIO_Init+0xb4>)
 80007f6:	f000 fa9d 	bl	8000d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020800 	.word	0x40020800
 800080c:	40020400 	.word	0x40020400

08000810 <led1_handler>:

/* USER CODE BEGIN 4 */
static void led1_handler(void* parameters)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <led1_handler+0x28>)
 800081a:	f006 fa15 	bl	8006c48 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800081e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <led1_handler+0x2c>)
 8000824:	f000 fc23 	bl	800106e <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000828:	f04f 0064 	mov.w	r0, #100	@ 0x64
 800082c:	f04f 0100 	mov.w	r1, #0
 8000830:	f002 f8dc 	bl	80029ec <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000834:	bf00      	nop
 8000836:	e7ef      	b.n	8000818 <led1_handler+0x8>
 8000838:	08006e28 	.word	0x08006e28
 800083c:	40020800 	.word	0x40020800

08000840 <led2_handler>:
//		taskYIELD();
	}
}
static void led2_handler(void* parameters)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling B13 Pin");
 8000848:	4807      	ldr	r0, [pc, #28]	@ (8000868 <led2_handler+0x28>)
 800084a:	f006 f9fd 	bl	8006c48 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800084e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <led2_handler+0x2c>)
 8000854:	f000 fc0b 	bl	800106e <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(800));
 8000858:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800085c:	f04f 0100 	mov.w	r1, #0
 8000860:	f002 f8c4 	bl	80029ec <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling B13 Pin");
 8000864:	bf00      	nop
 8000866:	e7ef      	b.n	8000848 <led2_handler+0x8>
 8000868:	08006e3c 	.word	0x08006e3c
 800086c:	40020400 	.word	0x40020400

08000870 <led3_handler>:
//		taskYIELD();
	}
}
static void led3_handler(void* parameters)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling B14 Pin");
 8000878:	4807      	ldr	r0, [pc, #28]	@ (8000898 <led3_handler+0x28>)
 800087a:	f006 f9e5 	bl	8006c48 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800087e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <led3_handler+0x2c>)
 8000884:	f000 fbf3 	bl	800106e <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(400));
 8000888:	f04f 0028 	mov.w	r0, #40	@ 0x28
 800088c:	f04f 0100 	mov.w	r1, #0
 8000890:	f002 f8ac 	bl	80029ec <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling B14 Pin");
 8000894:	bf00      	nop
 8000896:	e7ef      	b.n	8000878 <led3_handler+0x8>
 8000898:	08006e50 	.word	0x08006e50
 800089c:	40020400 	.word	0x40020400

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008b2:	f000 f93d 	bl	8000b30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c2:	b672      	cpsid	i
}
 80008c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c6:	bf00      	nop
 80008c8:	e7fd      	b.n	80008c6 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008da:	4a0f      	ldr	r2, [pc, #60]	@ (8000918 <HAL_MspInit+0x4c>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	4a08      	ldr	r2, [pc, #32]	@ (8000918 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800090a:	f003 fd03 	bl	8004314 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	@ 0x38
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	4b34      	ldr	r3, [pc, #208]	@ (8000a04 <HAL_InitTick+0xe8>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000934:	4a33      	ldr	r2, [pc, #204]	@ (8000a04 <HAL_InitTick+0xe8>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6413      	str	r3, [r2, #64]	@ 0x40
 800093c:	4b31      	ldr	r3, [pc, #196]	@ (8000a04 <HAL_InitTick+0xe8>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000948:	f107 0210 	add.w	r2, r7, #16
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f000 ffea 	bl	800192c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800095c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800095e:	2b00      	cmp	r3, #0
 8000960:	d103      	bne.n	800096a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000962:	f000 ffcf 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 8000966:	6378      	str	r0, [r7, #52]	@ 0x34
 8000968:	e004      	b.n	8000974 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800096a:	f000 ffcb 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 800096e:	4603      	mov	r3, r0
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000976:	4a24      	ldr	r2, [pc, #144]	@ (8000a08 <HAL_InitTick+0xec>)
 8000978:	fba2 2303 	umull	r2, r3, r2, r3
 800097c:	0c9b      	lsrs	r3, r3, #18
 800097e:	3b01      	subs	r3, #1
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000982:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <HAL_InitTick+0xf0>)
 8000984:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000988:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800098a:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <HAL_InitTick+0xf0>)
 800098c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000990:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000992:	4a1e      	ldr	r2, [pc, #120]	@ (8000a0c <HAL_InitTick+0xf0>)
 8000994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000996:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000998:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <HAL_InitTick+0xf0>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_InitTick+0xf0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <HAL_InitTick+0xf0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80009aa:	4818      	ldr	r0, [pc, #96]	@ (8000a0c <HAL_InitTick+0xf0>)
 80009ac:	f000 fff0 	bl	8001990 <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d11b      	bne.n	80009f6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80009be:	4813      	ldr	r0, [pc, #76]	@ (8000a0c <HAL_InitTick+0xf0>)
 80009c0:	f001 f840 	bl	8001a44 <HAL_TIM_Base_Start_IT>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d111      	bne.n	80009f6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009d2:	201c      	movs	r0, #28
 80009d4:	f000 f9a0 	bl	8000d18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b0f      	cmp	r3, #15
 80009dc:	d808      	bhi.n	80009f0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80009de:	2200      	movs	r2, #0
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	201c      	movs	r0, #28
 80009e4:	f000 f97c 	bl	8000ce0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e8:	4a09      	ldr	r2, [pc, #36]	@ (8000a10 <HAL_InitTick+0xf4>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	e002      	b.n	80009f6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3738      	adds	r7, #56	@ 0x38
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	431bde83 	.word	0x431bde83
 8000a0c:	2000002c 	.word	0x2000002c
 8000a10:	20000004 	.word	0x20000004

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <NMI_Handler+0x4>

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <SysTick_Handler>:
void SysTick_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a4e:	f002 fec9 	bl	80037e4 <xTaskGetSchedulerState>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d001      	beq.n	8000a5c <SysTick_Handler+0x12>
    {
        xPortSysTickHandler();
 8000a58:	f003 fd5e 	bl	8004518 <xPortSysTickHandler>
    }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <TIM2_IRQHandler+0x10>)
 8000a66:	f001 f84f 	bl	8001b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000002c 	.word	0x2000002c

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9c:	f7ff ffea 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f006 f947 	bl	8006d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fd69 	bl	80005a0 <main>
  bx  lr    
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000adc:	08006f98 	.word	0x08006f98
  ldr r2, =_sbss
 8000ae0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ae4:	200046a4 	.word	0x200046a4

08000ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <HAL_Init+0x40>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_Init+0x40>)
 8000b02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <HAL_Init+0x40>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f8d8 	bl	8000cca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	200f      	movs	r0, #15
 8000b1c:	f7ff fefe 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fed4 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000074 	.word	0x20000074

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000074 	.word	0x20000074

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	4907      	ldr	r1, [pc, #28]	@ (8000c0c <__NVIC_EnableIRQ+0x38>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	@ (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	@ (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	@ 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	@ 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ff4c 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf2:	f7ff ff61 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000cf6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	68b9      	ldr	r1, [r7, #8]
 8000cfc:	6978      	ldr	r0, [r7, #20]
 8000cfe:	f7ff ffb1 	bl	8000c64 <NVIC_EncodePriority>
 8000d02:	4602      	mov	r2, r0
 8000d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff80 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff54 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	e159      	b.n	8001004 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	f040 8148 	bne.w	8000ffe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d005      	beq.n	8000d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d130      	bne.n	8000de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	f003 0201 	and.w	r2, r3, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d017      	beq.n	8000e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d123      	bne.n	8000e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	08da      	lsrs	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	220f      	movs	r2, #15
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	691a      	ldr	r2, [r3, #16]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	08da      	lsrs	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	69b9      	ldr	r1, [r7, #24]
 8000e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0203 	and.w	r2, r3, #3
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 80a2 	beq.w	8000ffe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b57      	ldr	r3, [pc, #348]	@ (800101c <HAL_GPIO_Init+0x2e8>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	4a56      	ldr	r2, [pc, #344]	@ (800101c <HAL_GPIO_Init+0x2e8>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eca:	4b54      	ldr	r3, [pc, #336]	@ (800101c <HAL_GPIO_Init+0x2e8>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed6:	4a52      	ldr	r2, [pc, #328]	@ (8001020 <HAL_GPIO_Init+0x2ec>)
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a49      	ldr	r2, [pc, #292]	@ (8001024 <HAL_GPIO_Init+0x2f0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d019      	beq.n	8000f36 <HAL_GPIO_Init+0x202>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a48      	ldr	r2, [pc, #288]	@ (8001028 <HAL_GPIO_Init+0x2f4>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0x1fe>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a47      	ldr	r2, [pc, #284]	@ (800102c <HAL_GPIO_Init+0x2f8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00d      	beq.n	8000f2e <HAL_GPIO_Init+0x1fa>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a46      	ldr	r2, [pc, #280]	@ (8001030 <HAL_GPIO_Init+0x2fc>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d007      	beq.n	8000f2a <HAL_GPIO_Init+0x1f6>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a45      	ldr	r2, [pc, #276]	@ (8001034 <HAL_GPIO_Init+0x300>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_GPIO_Init+0x1f2>
 8000f22:	2304      	movs	r3, #4
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f26:	2307      	movs	r3, #7
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f36:	2300      	movs	r3, #0
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f48:	4935      	ldr	r1, [pc, #212]	@ (8001020 <HAL_GPIO_Init+0x2ec>)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f56:	4b38      	ldr	r3, [pc, #224]	@ (8001038 <HAL_GPIO_Init+0x304>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001038 <HAL_GPIO_Init+0x304>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f80:	4b2d      	ldr	r3, [pc, #180]	@ (8001038 <HAL_GPIO_Init+0x304>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa4:	4a24      	ldr	r2, [pc, #144]	@ (8001038 <HAL_GPIO_Init+0x304>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000faa:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <HAL_GPIO_Init+0x304>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fce:	4a1a      	ldr	r2, [pc, #104]	@ (8001038 <HAL_GPIO_Init+0x304>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <HAL_GPIO_Init+0x304>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <HAL_GPIO_Init+0x304>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	f67f aea2 	bls.w	8000d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3724      	adds	r7, #36	@ 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40013800 	.word	0x40013800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	40020800 	.word	0x40020800
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40021000 	.word	0x40021000
 8001038:	40013c00 	.word	0x40013c00

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001058:	e003      	b.n	8001062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001080:	887a      	ldrh	r2, [r7, #2]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4013      	ands	r3, r2
 8001086:	041a      	lsls	r2, r3, #16
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43d9      	mvns	r1, r3
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	400b      	ands	r3, r1
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e267      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d075      	beq.n	80011ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010c2:	4b88      	ldr	r3, [pc, #544]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d00c      	beq.n	80010e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ce:	4b85      	ldr	r3, [pc, #532]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d112      	bne.n	8001100 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010da:	4b82      	ldr	r3, [pc, #520]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010e6:	d10b      	bne.n	8001100 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	4b7e      	ldr	r3, [pc, #504]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d05b      	beq.n	80011ac <HAL_RCC_OscConfig+0x108>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d157      	bne.n	80011ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e242      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001108:	d106      	bne.n	8001118 <HAL_RCC_OscConfig+0x74>
 800110a:	4b76      	ldr	r3, [pc, #472]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a75      	ldr	r2, [pc, #468]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e01d      	b.n	8001154 <HAL_RCC_OscConfig+0xb0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0x98>
 8001122:	4b70      	ldr	r3, [pc, #448]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6f      	ldr	r2, [pc, #444]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b6d      	ldr	r3, [pc, #436]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6c      	ldr	r2, [pc, #432]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e00b      	b.n	8001154 <HAL_RCC_OscConfig+0xb0>
 800113c:	4b69      	ldr	r3, [pc, #420]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a68      	ldr	r2, [pc, #416]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b66      	ldr	r3, [pc, #408]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a65      	ldr	r2, [pc, #404]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fcfc 	bl	8000b58 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fcf8 	bl	8000b58 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	@ 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e207      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b5b      	ldr	r3, [pc, #364]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0xc0>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fce8 	bl	8000b58 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fce4 	bl	8000b58 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	@ 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e1f3      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	4b51      	ldr	r3, [pc, #324]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0xe8>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d063      	beq.n	8001282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ba:	4b4a      	ldr	r3, [pc, #296]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b47      	ldr	r3, [pc, #284]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d11c      	bne.n	800120c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d2:	4b44      	ldr	r3, [pc, #272]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d116      	bne.n	800120c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	4b41      	ldr	r3, [pc, #260]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x152>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e1c7      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b3b      	ldr	r3, [pc, #236]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4937      	ldr	r1, [pc, #220]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	e03a      	b.n	8001282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001214:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <HAL_RCC_OscConfig+0x244>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff fc9d 	bl	8000b58 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fc99 	bl	8000b58 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1a8      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001240:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4925      	ldr	r1, [pc, #148]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e015      	b.n	8001282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <HAL_RCC_OscConfig+0x244>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fc7c 	bl	8000b58 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fc78 	bl	8000b58 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e187      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d036      	beq.n	80012fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d016      	beq.n	80012c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_RCC_OscConfig+0x248>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff fc5c 	bl	8000b58 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fc58 	bl	8000b58 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e167      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80012b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x200>
 80012c2:	e01b      	b.n	80012fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_RCC_OscConfig+0x248>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fc45 	bl	8000b58 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	e00e      	b.n	80012f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff fc41 	bl	8000b58 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d907      	bls.n	80012f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e150      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
 80012e4:	40023800 	.word	0x40023800
 80012e8:	42470000 	.word	0x42470000
 80012ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	4b88      	ldr	r3, [pc, #544]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ea      	bne.n	80012d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 8097 	beq.w	8001438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130e:	4b81      	ldr	r3, [pc, #516]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10f      	bne.n	800133a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b7d      	ldr	r3, [pc, #500]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	4a7c      	ldr	r2, [pc, #496]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	@ 0x40
 800132a:	4b7a      	ldr	r3, [pc, #488]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133a:	4b77      	ldr	r3, [pc, #476]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d118      	bne.n	8001378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001346:	4b74      	ldr	r3, [pc, #464]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a73      	ldr	r2, [pc, #460]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001352:	f7ff fc01 	bl	8000b58 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135a:	f7ff fbfd 	bl	8000b58 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e10c      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136c:	4b6a      	ldr	r3, [pc, #424]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x2ea>
 8001380:	4b64      	ldr	r3, [pc, #400]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001384:	4a63      	ldr	r2, [pc, #396]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6713      	str	r3, [r2, #112]	@ 0x70
 800138c:	e01c      	b.n	80013c8 <HAL_RCC_OscConfig+0x324>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x30c>
 8001396:	4b5f      	ldr	r3, [pc, #380]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139a:	4a5e      	ldr	r2, [pc, #376]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0x324>
 80013b0:	4b58      	ldr	r3, [pc, #352]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b4:	4a57      	ldr	r2, [pc, #348]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80013bc:	4b55      	ldr	r3, [pc, #340]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c0:	4a54      	ldr	r2, [pc, #336]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d015      	beq.n	80013fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fbc2 	bl	8000b58 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d8:	f7ff fbbe 	bl	8000b58 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e0cb      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ee:	4b49      	ldr	r3, [pc, #292]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0ee      	beq.n	80013d8 <HAL_RCC_OscConfig+0x334>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fbac 	bl	8000b58 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f7ff fba8 	bl	8000b58 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e0b5      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141a:	4b3e      	ldr	r3, [pc, #248]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800141c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ee      	bne.n	8001404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142c:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	4a38      	ldr	r2, [pc, #224]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001436:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80a1 	beq.w	8001584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001442:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d05c      	beq.n	8001508 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d141      	bne.n	80014da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <HAL_RCC_OscConfig+0x478>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fb7c 	bl	8000b58 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fb78 	bl	8000b58 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e087      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001476:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69da      	ldr	r2, [r3, #28]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001490:	019b      	lsls	r3, r3, #6
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	3b01      	subs	r3, #1
 800149c:	041b      	lsls	r3, r3, #16
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	491b      	ldr	r1, [pc, #108]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <HAL_RCC_OscConfig+0x478>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb51 	bl	8000b58 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fb4d 	bl	8000b58 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e05c      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x416>
 80014d8:	e054      	b.n	8001584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <HAL_RCC_OscConfig+0x478>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb3a 	bl	8000b58 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fb36 	bl	8000b58 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e045      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x444>
 8001506:	e03d      	b.n	8001584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e038      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000
 800151c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_RCC_OscConfig+0x4ec>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d028      	beq.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d121      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d11a      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001550:	4013      	ands	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001558:	4293      	cmp	r3, r2
 800155a:	d111      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001566:	085b      	lsrs	r3, r3, #1
 8001568:	3b01      	subs	r3, #1
 800156a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0cc      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b68      	ldr	r3, [pc, #416]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d90c      	bls.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b65      	ldr	r3, [pc, #404]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b63      	ldr	r3, [pc, #396]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b8      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e8:	4b59      	ldr	r3, [pc, #356]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a58      	ldr	r2, [pc, #352]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001600:	4b53      	ldr	r3, [pc, #332]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a52      	ldr	r2, [pc, #328]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800160a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160c:	4b50      	ldr	r3, [pc, #320]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	494d      	ldr	r1, [pc, #308]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d044      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d119      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e07f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d003      	beq.n	8001652 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	2b03      	cmp	r3, #3
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	4b3f      	ldr	r3, [pc, #252]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	4b3b      	ldr	r3, [pc, #236]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e067      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001672:	4b37      	ldr	r3, [pc, #220]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f023 0203 	bic.w	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4934      	ldr	r1, [pc, #208]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001684:	f7ff fa68 	bl	8000b58 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168c:	f7ff fa64 	bl	8000b58 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e04f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 020c 	and.w	r2, r3, #12
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1eb      	bne.n	800168c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b4:	4b25      	ldr	r3, [pc, #148]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d20c      	bcs.n	80016dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b22      	ldr	r3, [pc, #136]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e032      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4916      	ldr	r1, [pc, #88]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	490e      	ldr	r1, [pc, #56]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800171a:	f000 f821 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 800171e:	4602      	mov	r2, r0
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	490a      	ldr	r1, [pc, #40]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	5ccb      	ldrb	r3, [r1, r3]
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f8ee 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00
 8001750:	40023800 	.word	0x40023800
 8001754:	08006f34 	.word	0x08006f34
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001764:	b090      	sub	sp, #64	@ 0x40
 8001766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001778:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d00d      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001784:	2b08      	cmp	r3, #8
 8001786:	f200 80a1 	bhi.w	80018cc <HAL_RCC_GetSysClockFreq+0x16c>
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x34>
 800178e:	2b04      	cmp	r3, #4
 8001790:	d003      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x3a>
 8001792:	e09b      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b53      	ldr	r3, [pc, #332]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001796:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001798:	e09b      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179a:	4b53      	ldr	r3, [pc, #332]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800179c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800179e:	e098      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a0:	4b4f      	ldr	r3, [pc, #316]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017aa:	4b4d      	ldr	r3, [pc, #308]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d028      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b6:	4b4a      	ldr	r3, [pc, #296]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	099b      	lsrs	r3, r3, #6
 80017bc:	2200      	movs	r2, #0
 80017be:	623b      	str	r3, [r7, #32]
 80017c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017c8:	2100      	movs	r1, #0
 80017ca:	4b47      	ldr	r3, [pc, #284]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80017cc:	fb03 f201 	mul.w	r2, r3, r1
 80017d0:	2300      	movs	r3, #0
 80017d2:	fb00 f303 	mul.w	r3, r0, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	4a43      	ldr	r2, [pc, #268]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80017da:	fba0 1202 	umull	r1, r2, r0, r2
 80017de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017e0:	460a      	mov	r2, r1
 80017e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017e6:	4413      	add	r3, r2
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ec:	2200      	movs	r2, #0
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	61fa      	str	r2, [r7, #28]
 80017f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017fa:	f7fe fd3b 	bl	8000274 <__aeabi_uldivmod>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4613      	mov	r3, r2
 8001804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001806:	e053      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001808:	4b35      	ldr	r3, [pc, #212]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	099b      	lsrs	r3, r3, #6
 800180e:	2200      	movs	r2, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	617a      	str	r2, [r7, #20]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800181a:	f04f 0b00 	mov.w	fp, #0
 800181e:	4652      	mov	r2, sl
 8001820:	465b      	mov	r3, fp
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f04f 0100 	mov.w	r1, #0
 800182a:	0159      	lsls	r1, r3, #5
 800182c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001830:	0150      	lsls	r0, r2, #5
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ebb2 080a 	subs.w	r8, r2, sl
 800183a:	eb63 090b 	sbc.w	r9, r3, fp
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800184a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800184e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001852:	ebb2 0408 	subs.w	r4, r2, r8
 8001856:	eb63 0509 	sbc.w	r5, r3, r9
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	00eb      	lsls	r3, r5, #3
 8001864:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001868:	00e2      	lsls	r2, r4, #3
 800186a:	4614      	mov	r4, r2
 800186c:	461d      	mov	r5, r3
 800186e:	eb14 030a 	adds.w	r3, r4, sl
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	eb45 030b 	adc.w	r3, r5, fp
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001886:	4629      	mov	r1, r5
 8001888:	028b      	lsls	r3, r1, #10
 800188a:	4621      	mov	r1, r4
 800188c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001890:	4621      	mov	r1, r4
 8001892:	028a      	lsls	r2, r1, #10
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800189a:	2200      	movs	r2, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	60fa      	str	r2, [r7, #12]
 80018a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018a4:	f7fe fce6 	bl	8000274 <__aeabi_uldivmod>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4613      	mov	r3, r2
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	0c1b      	lsrs	r3, r3, #16
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	3301      	adds	r3, #1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80018c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ca:	e002      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80018ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3740      	adds	r7, #64	@ 0x40
 80018d8:	46bd      	mov	sp, r7
 80018da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	017d7840 	.word	0x017d7840

080018ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <HAL_RCC_GetHCLKFreq+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000000 	.word	0x20000000

08001904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001908:	f7ff fff0 	bl	80018ec <HAL_RCC_GetHCLKFreq>
 800190c:	4602      	mov	r2, r0
 800190e:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	0a9b      	lsrs	r3, r3, #10
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	4903      	ldr	r1, [pc, #12]	@ (8001928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	08006f44 	.word	0x08006f44

0800192c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	220f      	movs	r2, #15
 800193a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_RCC_GetClockConfig+0x5c>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <HAL_RCC_GetClockConfig+0x5c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001954:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <HAL_RCC_GetClockConfig+0x5c>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <HAL_RCC_GetClockConfig+0x5c>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <HAL_RCC_GetClockConfig+0x60>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0207 	and.w	r2, r3, #7
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40023c00 	.word	0x40023c00

08001990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e041      	b.n	8001a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f839 	bl	8001a2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3304      	adds	r3, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f000 f9b2 	bl	8001d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d001      	beq.n	8001a5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e044      	b.n	8001ae6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a1e      	ldr	r2, [pc, #120]	@ (8001af4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d018      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x6c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a86:	d013      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x6c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8001af8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00e      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x6c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <HAL_TIM_Base_Start_IT+0xb8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d009      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x6c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <HAL_TIM_Base_Start_IT+0xbc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d004      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x6c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a16      	ldr	r2, [pc, #88]	@ (8001b04 <HAL_TIM_Base_Start_IT+0xc0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d111      	bne.n	8001ad4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d010      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad2:	e007      	b.n	8001ae4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40000400 	.word	0x40000400
 8001afc:	40000800 	.word	0x40000800
 8001b00:	40000c00 	.word	0x40000c00
 8001b04:	40014000 	.word	0x40014000

08001b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d020      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01b      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0202 	mvn.w	r2, #2
 8001b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f8d2 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 8001b58:	e005      	b.n	8001b66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8c4 	bl	8001ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f8d5 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d020      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01b      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f06f 0204 	mvn.w	r2, #4
 8001b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f8ac 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 8001ba4:	e005      	b.n	8001bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f89e 	bl	8001ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f8af 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d020      	beq.n	8001c04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01b      	beq.n	8001c04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0208 	mvn.w	r2, #8
 8001bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f886 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 8001bf0:	e005      	b.n	8001bfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f878 	bl	8001ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f889 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d020      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01b      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0210 	mvn.w	r2, #16
 8001c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2208      	movs	r2, #8
 8001c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f860 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 8001c3c:	e005      	b.n	8001c4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f852 	bl	8001ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f863 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0201 	mvn.w	r2, #1
 8001c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7fe fe16 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00c      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8e0 	bl	8001e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00c      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f834 	bl	8001d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0220 	mvn.w	r2, #32
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8b2 	bl	8001e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a37      	ldr	r2, [pc, #220]	@ (8001e28 <TIM_Base_SetConfig+0xf0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00f      	beq.n	8001d70 <TIM_Base_SetConfig+0x38>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d56:	d00b      	beq.n	8001d70 <TIM_Base_SetConfig+0x38>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a34      	ldr	r2, [pc, #208]	@ (8001e2c <TIM_Base_SetConfig+0xf4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <TIM_Base_SetConfig+0x38>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a33      	ldr	r2, [pc, #204]	@ (8001e30 <TIM_Base_SetConfig+0xf8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <TIM_Base_SetConfig+0x38>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a32      	ldr	r2, [pc, #200]	@ (8001e34 <TIM_Base_SetConfig+0xfc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d108      	bne.n	8001d82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a28      	ldr	r2, [pc, #160]	@ (8001e28 <TIM_Base_SetConfig+0xf0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01b      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d90:	d017      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a25      	ldr	r2, [pc, #148]	@ (8001e2c <TIM_Base_SetConfig+0xf4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a24      	ldr	r2, [pc, #144]	@ (8001e30 <TIM_Base_SetConfig+0xf8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00f      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a23      	ldr	r2, [pc, #140]	@ (8001e34 <TIM_Base_SetConfig+0xfc>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00b      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a22      	ldr	r2, [pc, #136]	@ (8001e38 <TIM_Base_SetConfig+0x100>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a21      	ldr	r2, [pc, #132]	@ (8001e3c <TIM_Base_SetConfig+0x104>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d003      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a20      	ldr	r2, [pc, #128]	@ (8001e40 <TIM_Base_SetConfig+0x108>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d108      	bne.n	8001dd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e28 <TIM_Base_SetConfig+0xf0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d103      	bne.n	8001e02 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f043 0204 	orr.w	r2, r3, #4
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	601a      	str	r2, [r3, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	40000800 	.word	0x40000800
 8001e34:	40000c00 	.word	0x40000c00
 8001e38:	40014000 	.word	0x40014000
 8001e3c:	40014400 	.word	0x40014400
 8001e40:	40014800 	.word	0x40014800

08001e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f103 0208 	add.w	r2, r3, #8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e88:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f103 0208 	add.w	r2, r3, #8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	611a      	str	r2, [r3, #16]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f103 0208 	add.w	r2, r3, #8
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	615a      	str	r2, [r3, #20]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8001ea6:	f240 1019 	movw	r0, #281	@ 0x119
 8001eaa:	f004 fc01 	bl	80066b0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	615a      	str	r2, [r3, #20]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8001ec4:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001ec8:	f004 fbf2 	bl	80066b0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	e9c7 2302 	strd	r2, r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ef0:	bf08      	it	eq
 8001ef2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8001ef6:	d103      	bne.n	8001f00 <vListInsert+0x2c>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e010      	b.n	8001f22 <vListInsert+0x4e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3308      	adds	r3, #8
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	e002      	b.n	8001f0e <vListInsert+0x3a>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f1a:	4290      	cmp	r0, r2
 8001f1c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001f20:	d2f2      	bcs.n	8001f08 <vListInsert+0x34>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	60da      	str	r2, [r3, #12]
    pxNewListItem->pxPrevious = pxIterator;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	60da      	str	r2, [r3, #12]
    pxIterator->pxNext = pxNewListItem;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	615a      	str	r2, [r3, #20]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8001f4e:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8001f52:	f004 fbad 	bl	80066b0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	68d2      	ldr	r2, [r2, #12]
 8001f74:	60da      	str	r2, [r3, #12]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6892      	ldr	r2, [r2, #8]
 8001f7e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d103      	bne.n	8001f92 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	615a      	str	r2, [r3, #20]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	1e5a      	subs	r2, r3, #1
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f240 101d 	movw	r0, #285	@ 0x11d
 8001fac:	f004 fbbc 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <xQueueGenericReset+0x30>
    __asm volatile
 8001fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fd8:	f383 8811 	msr	BASEPRI, r3
 8001fdc:	f3bf 8f6f 	isb	sy
 8001fe0:	f3bf 8f4f 	dsb	sy
 8001fe4:	60fb      	str	r3, [r7, #12]
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d05d      	beq.n	80020ae <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    if( ( pxQueue != NULL ) &&
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d059      	beq.n	80020ae <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	2100      	movs	r1, #0
 8002004:	fba3 2302 	umull	r2, r3, r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d000      	beq.n	800200e <xQueueGenericReset+0x52>
 800200c:	2101      	movs	r1, #1
 800200e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002010:	2b00      	cmp	r3, #0
 8002012:	d14c      	bne.n	80020ae <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002014:	f002 f9ec 	bl	80043f0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	6939      	ldr	r1, [r7, #16]
 8002022:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	441a      	add	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2200      	movs	r2, #0
 8002032:	641a      	str	r2, [r3, #64]	@ 0x40
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	3b01      	subs	r3, #1
 8002046:	6939      	ldr	r1, [r7, #16]
 8002048:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	441a      	add	r2, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	22ff      	movs	r2, #255	@ 0xff
 8002058:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxQueue->cTxLock = queueUNLOCKED;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	22ff      	movs	r2, #255	@ 0xff
 8002060:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

            if( xNewQueue == pdFALSE )
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d114      	bne.n	8002094 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d01a      	beq.n	80020a8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	3310      	adds	r3, #16
 8002076:	4618      	mov	r0, r3
 8002078:	f001 f946 	bl	8003308 <xTaskRemoveFromEventList>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d012      	beq.n	80020a8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <xQueueGenericReset+0x128>)
 8002084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	f3bf 8f6f 	isb	sy
 8002092:	e009      	b.n	80020a8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	3310      	adds	r3, #16
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fee7 	bl	8001e6c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	3328      	adds	r3, #40	@ 0x28
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fee2 	bl	8001e6c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80020a8:	f002 f9d4 	bl	8004454 <vPortExitCritical>
 80020ac:	e001      	b.n	80020b2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <xQueueGenericReset+0x114>
    __asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	60bb      	str	r3, [r7, #8]
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	4619      	mov	r1, r3
 80020d4:	2096      	movs	r0, #150	@ 0x96
 80020d6:	f004 fb27 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80020da:	697b      	ldr	r3, [r7, #20]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	e000ed04 	.word	0xe000ed04

080020e8 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	@ 0x30
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 8002100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002104:	f383 8811 	msr	BASEPRI, r3
 8002108:	f3bf 8f6f 	isb	sy
 800210c:	f3bf 8f4f 	dsb	sy
 8002110:	623b      	str	r3, [r7, #32]
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d031      	beq.n	8002182 <xQueueGenericCreateStatic+0x9a>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d02e      	beq.n	8002182 <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d028      	beq.n	8002182 <xQueueGenericCreateStatic+0x9a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d122      	bne.n	8002182 <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800213c:	2350      	movs	r3, #80	@ 0x50
 800213e:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b50      	cmp	r3, #80	@ 0x50
 8002144:	d00b      	beq.n	800215e <xQueueGenericCreateStatic+0x76>
    __asm volatile
 8002146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800214a:	f383 8811 	msr	BASEPRI, r3
 800214e:	f3bf 8f6f 	isb	sy
 8002152:	f3bf 8f4f 	dsb	sy
 8002156:	61fb      	str	r3, [r7, #28]
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	e7fd      	b.n	800215a <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 800215e:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	2201      	movs	r2, #1
 8002168:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800216c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f81e 	bl	80021bc <prvInitialiseNewQueue>
 8002180:	e00e      	b.n	80021a0 <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 8002188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	61bb      	str	r3, [r7, #24]
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 fc5a 	bl	8006a5c <SEGGER_SYSVIEW_ShrinkId>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4619      	mov	r1, r3
 80021ac:	2097      	movs	r0, #151	@ 0x97
 80021ae:	f004 fabb 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80021b4:	4618      	mov	r0, r3
 80021b6:	3728      	adds	r7, #40	@ 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d103      	bne.n	80021d8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e002      	b.n	80021de <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	645a      	str	r2, [r3, #68]	@ 0x44
    pxNewQueue->uxItemSize = uxItemSize;
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	649a      	str	r2, [r3, #72]	@ 0x48
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021ea:	2101      	movs	r1, #1
 80021ec:	69b8      	ldr	r0, [r7, #24]
 80021ee:	f7ff fee5 	bl	8001fbc <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08e      	sub	sp, #56	@ 0x38
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	e9c7 2300 	strd	r2, r3, [r7]
    BaseType_t xEntryTimeSet = pdFALSE;
 800220a:	2300      	movs	r3, #0
 800220c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <xQueueReceive+0x34>
    __asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <xQueueReceive+0x30>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <xQueueReceive+0x42>
 8002236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <xQueueReceive+0x46>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <xQueueReceive+0x48>
 8002242:	2300      	movs	r3, #0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <xQueueReceive+0x64>
    __asm volatile
 8002248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800225a:	bf00      	nop
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <xQueueReceive+0x60>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002260:	f001 fac0 	bl	80037e4 <xTaskGetSchedulerState>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <xQueueReceive+0x76>
 800226a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800226e:	4313      	orrs	r3, r2
 8002270:	d101      	bne.n	8002276 <xQueueReceive+0x7a>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <xQueueReceive+0x7c>
 8002276:	2300      	movs	r3, #0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <xQueueReceive+0x98>
    __asm volatile
 800227c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002280:	f383 8811 	msr	BASEPRI, r3
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	623b      	str	r3, [r7, #32]
}
 800228e:	bf00      	nop
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <xQueueReceive+0x94>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002294:	f002 f8ac 	bl	80043f0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800229e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d023      	beq.n	80022ec <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022a8:	f000 f89c 	bl	80023e4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80022ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ae:	1e5a      	subs	r2, r3, #1
 80022b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b2:	641a      	str	r2, [r3, #64]	@ 0x40

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00f      	beq.n	80022dc <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022be:	3310      	adds	r3, #16
 80022c0:	4618      	mov	r0, r3
 80022c2:	f001 f821 	bl	8003308 <xTaskRemoveFromEventList>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <xQueueReceive+0xe0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022cc:	4b44      	ldr	r3, [pc, #272]	@ (80023e0 <xQueueReceive+0x1e4>)
 80022ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f3bf 8f4f 	dsb	sy
 80022d8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80022dc:	f002 f8ba 	bl	8004454 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80022e0:	2101      	movs	r1, #1
 80022e2:	20a4      	movs	r0, #164	@ 0xa4
 80022e4:	f004 fa20 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e074      	b.n	80023d6 <xQueueReceive+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80022ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	d107      	bne.n	8002304 <xQueueReceive+0x108>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80022f4:	f002 f8ae 	bl	8004454 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80022f8:	2100      	movs	r1, #0
 80022fa:	20a4      	movs	r0, #164	@ 0xa4
 80022fc:	f004 fa14 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002300:	2300      	movs	r3, #0
 8002302:	e068      	b.n	80023d6 <xQueueReceive+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	4618      	mov	r0, r3
 8002310:	f001 f8dc 	bl	80034cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002314:	2301      	movs	r3, #1
 8002316:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002318:	f002 f89c 	bl	8004454 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800231c:	f000 fc6a 	bl	8002bf4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002320:	f002 f866 	bl	80043f0 <vPortEnterCritical>
 8002324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002326:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800232a:	b25b      	sxtb	r3, r3
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002330:	d103      	bne.n	800233a <xQueueReceive+0x13e>
 8002332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002334:	2200      	movs	r2, #0
 8002336:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002340:	b25b      	sxtb	r3, r3
 8002342:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002346:	d103      	bne.n	8002350 <xQueueReceive+0x154>
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	2200      	movs	r2, #0
 800234c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8002350:	f002 f880 	bl	8004454 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002354:	463a      	mov	r2, r7
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f001 f8cf 	bl	8003500 <xTaskCheckForTimeOut>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d125      	bne.n	80023b4 <xQueueReceive+0x1b8>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002368:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800236a:	f000 f8b3 	bl	80024d4 <prvIsQueueEmpty>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d019      	beq.n	80023a8 <xQueueReceive+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002376:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800237a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800237e:	4608      	mov	r0, r1
 8002380:	f000 ff4a 	bl	8003218 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002386:	f000 f853 	bl	8002430 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800238a:	f000 fc41 	bl	8002c10 <xTaskResumeAll>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	f47f af7f 	bne.w	8002294 <xQueueReceive+0x98>
                {
                    taskYIELD_WITHIN_API();
 8002396:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <xQueueReceive+0x1e4>)
 8002398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	e775      	b.n	8002294 <xQueueReceive+0x98>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80023a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023aa:	f000 f841 	bl	8002430 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80023ae:	f000 fc2f 	bl	8002c10 <xTaskResumeAll>
 80023b2:	e76f      	b.n	8002294 <xQueueReceive+0x98>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80023b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023b6:	f000 f83b 	bl	8002430 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80023ba:	f000 fc29 	bl	8002c10 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023c0:	f000 f888 	bl	80024d4 <prvIsQueueEmpty>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f43f af64 	beq.w	8002294 <xQueueReceive+0x98>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80023cc:	2100      	movs	r1, #0
 80023ce:	20a4      	movs	r0, #164	@ 0xa4
 80023d0:	f004 f9aa 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80023d4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3738      	adds	r7, #56	@ 0x38
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	e000ed04 	.word	0xe000ed04

080023e4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d018      	beq.n	8002428 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023fe:	441a      	add	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	429a      	cmp	r2, r3
 800240e:	d303      	bcc.n	8002418 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68d9      	ldr	r1, [r3, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002420:	461a      	mov	r2, r3
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	f004 fcbc 	bl	8006da0 <memcpy>
    }
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002438:	f001 ffda 	bl	80043f0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002442:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002444:	e011      	b.n	800246a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3328      	adds	r3, #40	@ 0x28
 8002452:	4618      	mov	r0, r3
 8002454:	f000 ff58 	bl	8003308 <xTaskRemoveFromEventList>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800245e:	f001 f8df 	bl	8003620 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	3b01      	subs	r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	2b00      	cmp	r3, #0
 8002470:	dce9      	bgt.n	8002446 <prvUnlockQueue+0x16>
 8002472:	e000      	b.n	8002476 <prvUnlockQueue+0x46>
                    break;
 8002474:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	22ff      	movs	r2, #255	@ 0xff
 800247a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    }
    taskEXIT_CRITICAL();
 800247e:	f001 ffe9 	bl	8004454 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002482:	f001 ffb5 	bl	80043f0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800248c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800248e:	e011      	b.n	80024b4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d012      	beq.n	80024be <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3310      	adds	r3, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f000 ff33 	bl	8003308 <xTaskRemoveFromEventList>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80024a8:	f001 f8ba 	bl	8003620 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80024ac:	7bbb      	ldrb	r3, [r7, #14]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	dce9      	bgt.n	8002490 <prvUnlockQueue+0x60>
 80024bc:	e000      	b.n	80024c0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80024be:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	22ff      	movs	r2, #255	@ 0xff
 80024c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    }
    taskEXIT_CRITICAL();
 80024c8:	f001 ffc4 	bl	8004454 <vPortExitCritical>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80024dc:	f001 ff88 	bl	80043f0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80024e8:	2301      	movs	r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e001      	b.n	80024f2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80024f2:	f001 ffaf 	bl	8004454 <vPortExitCritical>

    return xReturn;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	e9c7 2300 	strd	r2, r3, [r7]
        Queue_t * const pxQueue = xQueue;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002510:	f001 ff6e 	bl	80043f0 <vPortEnterCritical>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800251a:	b25b      	sxtb	r3, r3
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002520:	d103      	bne.n	800252a <vQueueWaitForMessageRestricted+0x2a>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002530:	b25b      	sxtb	r3, r3
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002536:	d103      	bne.n	8002540 <vQueueWaitForMessageRestricted+0x40>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8002540:	f001 ff88 	bl	8004454 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <vQueueWaitForMessageRestricted+0x60>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800255a:	4608      	mov	r0, r1
 800255c:	f000 fe86 	bl	800326c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002560:	6978      	ldr	r0, [r7, #20]
 8002562:	f7ff ff65 	bl	8002430 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002566:	20b9      	movs	r0, #185	@ 0xb9
 8002568:	f004 f8a2 	bl	80066b0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800256c:	bf00      	nop
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8002574:	b580      	push	{r7, lr}
 8002576:	b08e      	sub	sp, #56	@ 0x38
 8002578:	af04      	add	r7, sp, #16
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8002582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10b      	bne.n	80025a0 <prvCreateStaticTask+0x2c>
    __asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	623b      	str	r3, [r7, #32]
}
 800259a:	bf00      	nop
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80025a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10b      	bne.n	80025be <prvCreateStaticTask+0x4a>
    __asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	61fb      	str	r3, [r7, #28]
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	e7fd      	b.n	80025ba <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80025be:	2360      	movs	r3, #96	@ 0x60
 80025c0:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b60      	cmp	r3, #96	@ 0x60
 80025c6:	d00b      	beq.n	80025e0 <prvCreateStaticTask+0x6c>
    __asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	61bb      	str	r3, [r7, #24]
}
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 80025e0:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80025e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01f      	beq.n	8002628 <prvCreateStaticTask+0xb4>
 80025e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01c      	beq.n	8002628 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 80025ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80025f2:	2260      	movs	r2, #96	@ 0x60
 80025f4:	2100      	movs	r1, #0
 80025f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025f8:	f004 fba6 	bl	8006d48 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002600:	63da      	str	r2, [r3, #60]	@ 0x3c

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	2202      	movs	r2, #2
 8002606:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800260a:	2300      	movs	r3, #0
 800260c:	9303      	str	r3, [sp, #12]
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f89d 	bl	8002760 <prvInitialiseNewTask>
 8002626:	e001      	b.n	800262c <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800262e:	4618      	mov	r0, r3
 8002630:	3728      	adds	r7, #40	@ 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8002636:	b580      	push	{r7, lr}
 8002638:	b08a      	sub	sp, #40	@ 0x28
 800263a:	af04      	add	r7, sp, #16
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	9303      	str	r3, [sp, #12]
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	9302      	str	r3, [sp, #8]
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f7ff ff87 	bl	8002574 <prvCreateStaticTask>
 8002666:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f000 f908 	bl	8002884 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4618      	mov	r0, r3
 8002678:	f004 f9f0 	bl	8006a5c <SEGGER_SYSVIEW_ShrinkId>
 800267c:	4603      	mov	r3, r0
 800267e:	4619      	mov	r1, r3
 8002680:	20bf      	movs	r0, #191	@ 0xbf
 8002682:	f004 f851 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002686:	693b      	ldr	r3, [r7, #16]
    }
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af04      	add	r7, sp, #16
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 ffd4 	bl	8004650 <pvPortMalloc>
 80026a8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80026b0:	2060      	movs	r0, #96	@ 0x60
 80026b2:	f001 ffcd 	bl	8004650 <pvPortMalloc>
 80026b6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80026be:	2260      	movs	r2, #96	@ 0x60
 80026c0:	2100      	movs	r1, #0
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f004 fb40 	bl	8006d48 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026ce:	e005      	b.n	80026dc <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80026d0:	6938      	ldr	r0, [r7, #16]
 80026d2:	f002 f8ef 	bl	80048b4 <vPortFree>
 80026d6:	e001      	b.n	80026dc <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d011      	beq.n	8002706 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026ea:	2300      	movs	r3, #0
 80026ec:	9303      	str	r3, [sp, #12]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	9302      	str	r3, [sp, #8]
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f82d 	bl	8002760 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002706:	697b      	ldr	r3, [r7, #20]
    }
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7ff ffaf 	bl	8002690 <prvCreateTask>
 8002732:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800273a:	6938      	ldr	r0, [r7, #16]
 800273c:	f000 f8a2 	bl	8002884 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002740:	2301      	movs	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	e002      	b.n	800274c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800274a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	4619      	mov	r1, r3
 8002750:	20c2      	movs	r0, #194	@ 0xc2
 8002752:	f003 ffe9 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002756:	697b      	ldr	r3, [r7, #20]
    }
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002764:	b088      	sub	sp, #32
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800277a:	3b01      	subs	r3, #1
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f023 0307 	bic.w	r3, r3, #7
 8002788:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <prvInitialiseNewTask+0x4c>
    __asm volatile
 8002794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	617b      	str	r3, [r7, #20]
}
 80027a6:	bf00      	nop
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <prvInitialiseNewTask+0x48>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01e      	beq.n	80027f0 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	e012      	b.n	80027de <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	7819      	ldrb	r1, [r3, #0]
 80027c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	3340      	adds	r3, #64	@ 0x40
 80027c8:	460a      	mov	r2, r1
 80027ca:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	3301      	adds	r3, #1
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2b0f      	cmp	r3, #15
 80027e2:	d9e9      	bls.n	80027b8 <prvInitialiseNewTask+0x58>
 80027e4:	e000      	b.n	80027e8 <prvInitialiseNewTask+0x88>
            {
                break;
 80027e6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80027e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80027f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d90b      	bls.n	800280e <prvInitialiseNewTask+0xae>
    __asm volatile
 80027f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	613b      	str	r3, [r7, #16]
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	e7fd      	b.n	800280a <prvInitialiseNewTask+0xaa>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002810:	2b04      	cmp	r3, #4
 8002812:	d901      	bls.n	8002818 <prvInitialiseNewTask+0xb8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002814:	2304      	movs	r3, #4
 8002816:	63bb      	str	r3, [r7, #56]	@ 0x38
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800281a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800281c:	639a      	str	r2, [r3, #56]	@ 0x38
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800281e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002822:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002826:	3308      	adds	r3, #8
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fb44 	bl	8001eb6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800282e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002830:	3320      	adds	r3, #32
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fb3f 	bl	8001eb6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800283a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800283c:	619a      	str	r2, [r3, #24]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800283e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002840:	2200      	movs	r2, #0
 8002842:	461c      	mov	r4, r3
 8002844:	4615      	mov	r5, r2
 8002846:	2300      	movs	r3, #0
 8002848:	f1d4 0805 	rsbs	r8, r4, #5
 800284c:	eb63 0905 	sbc.w	r9, r3, r5
 8002850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002852:	e9c3 8908 	strd	r8, r9, [r3, #32]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002858:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800285a:	631a      	str	r2, [r3, #48]	@ 0x30
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	69b8      	ldr	r0, [r7, #24]
 8002862:	f001 fbd7 	bl	8004014 <pxPortInitialiseStack>
 8002866:	4602      	mov	r2, r0
 8002868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800286a:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800286c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002876:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002878:	bf00      	nop
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002884 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af02      	add	r7, sp, #8
 800288a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800288c:	f001 fdb0 	bl	80043f0 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002890:	4b4f      	ldr	r3, [pc, #316]	@ (80029d0 <prvAddNewTaskToReadyList+0x14c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	4a4e      	ldr	r2, [pc, #312]	@ (80029d0 <prvAddNewTaskToReadyList+0x14c>)
 8002898:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800289a:	4b4e      	ldr	r3, [pc, #312]	@ (80029d4 <prvAddNewTaskToReadyList+0x150>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80028a2:	4a4c      	ldr	r2, [pc, #304]	@ (80029d4 <prvAddNewTaskToReadyList+0x150>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028a8:	4b49      	ldr	r3, [pc, #292]	@ (80029d0 <prvAddNewTaskToReadyList+0x14c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d110      	bne.n	80028d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80028b0:	f000 feda 	bl	8003668 <prvInitialiseTaskLists>
 80028b4:	e00d      	b.n	80028d2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80028b6:	4b48      	ldr	r3, [pc, #288]	@ (80029d8 <prvAddNewTaskToReadyList+0x154>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028be:	4b45      	ldr	r3, [pc, #276]	@ (80029d4 <prvAddNewTaskToReadyList+0x150>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d802      	bhi.n	80028d2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80028cc:	4a41      	ldr	r2, [pc, #260]	@ (80029d4 <prvAddNewTaskToReadyList+0x150>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80028d2:	4b42      	ldr	r3, [pc, #264]	@ (80029dc <prvAddNewTaskToReadyList+0x158>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3301      	adds	r3, #1
 80028d8:	4a40      	ldr	r2, [pc, #256]	@ (80029dc <prvAddNewTaskToReadyList+0x158>)
 80028da:	6013      	str	r3, [r2, #0]
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <prvAddNewTaskToReadyList+0x8c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 ff93 	bl	8006810 <SEGGER_SYSVIEW_OnTaskCreate>
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fa:	461d      	mov	r5, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461c      	mov	r4, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002906:	1ae3      	subs	r3, r4, r3
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	462b      	mov	r3, r5
 800290c:	f002 f9f6 	bl	8004cfc <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4618      	mov	r0, r3
 8002914:	f004 f800 	bl	8006918 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800291c:	4b30      	ldr	r3, [pc, #192]	@ (80029e0 <prvAddNewTaskToReadyList+0x15c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d903      	bls.n	800292c <prvAddNewTaskToReadyList+0xa8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	4a2d      	ldr	r2, [pc, #180]	@ (80029e0 <prvAddNewTaskToReadyList+0x15c>)
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002930:	492c      	ldr	r1, [pc, #176]	@ (80029e4 <prvAddNewTaskToReadyList+0x160>)
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	3304      	adds	r3, #4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	611a      	str	r2, [r3, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	615a      	str	r2, [r3, #20]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f103 0208 	add.w	r2, r3, #8
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4a1c      	ldr	r2, [pc, #112]	@ (80029e4 <prvAddNewTaskToReadyList+0x160>)
 8002972:	441a      	add	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	61da      	str	r2, [r3, #28]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800297c:	4919      	ldr	r1, [pc, #100]	@ (80029e4 <prvAddNewTaskToReadyList+0x160>)
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800298e:	1c59      	adds	r1, r3, #1
 8002990:	4814      	ldr	r0, [pc, #80]	@ (80029e4 <prvAddNewTaskToReadyList+0x160>)
 8002992:	4613      	mov	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4403      	add	r3, r0
 800299c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800299e:	f001 fd59 	bl	8004454 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80029a2:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <prvAddNewTaskToReadyList+0x154>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00e      	beq.n	80029c8 <prvAddNewTaskToReadyList+0x144>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <prvAddNewTaskToReadyList+0x150>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d207      	bcs.n	80029c8 <prvAddNewTaskToReadyList+0x144>
 80029b8:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <prvAddNewTaskToReadyList+0x164>)
 80029ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bdb0      	pop	{r4, r5, r7, pc}
 80029d0:	20000180 	.word	0x20000180
 80029d4:	20000078 	.word	0x20000078
 80029d8:	20000194 	.word	0x20000194
 80029dc:	200001a8 	.word	0x200001a8
 80029e0:	20000190 	.word	0x20000190
 80029e4:	20000080 	.word	0x20000080
 80029e8:	e000ed04 	.word	0xe000ed04

080029ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	e9c7 0100 	strd	r0, r1, [r7]
        BaseType_t xAlreadyYielded = pdFALSE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80029fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	d019      	beq.n	8002a36 <vTaskDelay+0x4a>
        {
            vTaskSuspendAll();
 8002a02:	f000 f8f7 	bl	8002bf4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002a06:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <vTaskDelay+0x70>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d00b      	beq.n	8002a26 <vTaskDelay+0x3a>
    __asm volatile
 8002a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	60bb      	str	r3, [r7, #8]
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	e7fd      	b.n	8002a22 <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a26:	2200      	movs	r2, #0
 8002a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a2c:	f000 fefc 	bl	8003828 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002a30:	f000 f8ee 	bl	8002c10 <xTaskResumeAll>
 8002a34:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <vTaskDelay+0x60>
        {
            taskYIELD_WITHIN_API();
 8002a3c:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <vTaskDelay+0x74>)
 8002a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8002a4c:	20c5      	movs	r0, #197	@ 0xc5
 8002a4e:	f003 fe2f 	bl	80066b0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200001bc 	.word	0x200001bc
 8002a60:	e000ed04 	.word	0xe000ed04

08002a64 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b090      	sub	sp, #64	@ 0x40
 8002a68:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a76:	e013      	b.n	8002aa0 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002a78:	4a2b      	ldr	r2, [pc, #172]	@ (8002b28 <prvCreateIdleTasks+0xc4>)
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	4413      	add	r3, r2
 8002a7e:	7819      	ldrb	r1, [r3, #0]
 8002a80:	f107 0210 	add.w	r2, r7, #16
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	4413      	add	r3, r2
 8002a88:	460a      	mov	r2, r1
 8002a8a:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002a8c:	f107 0210 	add.w	r2, r7, #16
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	dde8      	ble.n	8002a78 <prvCreateIdleTasks+0x14>
 8002aa6:	e000      	b.n	8002aaa <prvCreateIdleTasks+0x46>
        {
            break;
 8002aa8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aae:	e031      	b.n	8002b14 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b2c <prvCreateIdleTasks+0xc8>)
 8002ab2:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8002abc:	1d3a      	adds	r2, r7, #4
 8002abe:	f107 0108 	add.w	r1, r7, #8
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 ff44 	bl	8003954 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	f107 0110 	add.w	r1, r7, #16
 8002ad6:	9202      	str	r2, [sp, #8]
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a38      	ldr	r0, [r7, #32]
 8002ae4:	f7ff fda7 	bl	8002636 <xTaskCreateStatic>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4911      	ldr	r1, [pc, #68]	@ (8002b30 <prvCreateIdleTasks+0xcc>)
 8002aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002af2:	4a0f      	ldr	r2, [pc, #60]	@ (8002b30 <prvCreateIdleTasks+0xcc>)
 8002af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 8002afe:	2301      	movs	r3, #1
 8002b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b02:	e001      	b.n	8002b08 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b10:	3301      	adds	r3, #1
 8002b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	ddca      	ble.n	8002ab0 <prvCreateIdleTasks+0x4c>
 8002b1a:	e000      	b.n	8002b1e <prvCreateIdleTasks+0xba>
        {
            break;
 8002b1c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3730      	adds	r7, #48	@ 0x30
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	08006e64 	.word	0x08006e64
 8002b2c:	08003639 	.word	0x08003639
 8002b30:	200001b8 	.word	0x200001b8

08002b34 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002b3a:	f7ff ff93 	bl	8002a64 <prvCreateIdleTasks>
 8002b3e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d102      	bne.n	8002b4c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002b46:	f000 ff39 	bl	80039bc <xTimerCreateTimerTask>
 8002b4a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d12b      	bne.n	8002baa <vTaskStartScheduler+0x76>
    __asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	60bb      	str	r3, [r7, #8]
}
 8002b64:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b66:	491d      	ldr	r1, [pc, #116]	@ (8002bdc <vTaskStartScheduler+0xa8>)
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b70:	e9c1 2300 	strd	r2, r3, [r1]
        xSchedulerRunning = pdTRUE;
 8002b74:	4b1a      	ldr	r3, [pc, #104]	@ (8002be0 <vTaskStartScheduler+0xac>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b7a:	491a      	ldr	r1, [pc, #104]	@ (8002be4 <vTaskStartScheduler+0xb0>)
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9c1 2300 	strd	r2, r3, [r1]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b88:	4b17      	ldr	r3, [pc, #92]	@ (8002be8 <vTaskStartScheduler+0xb4>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b17      	ldr	r3, [pc, #92]	@ (8002bec <vTaskStartScheduler+0xb8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d102      	bne.n	8002b9a <vTaskStartScheduler+0x66>
 8002b94:	f003 fe20 	bl	80067d8 <SEGGER_SYSVIEW_OnIdle>
 8002b98:	e004      	b.n	8002ba4 <vTaskStartScheduler+0x70>
 8002b9a:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <vTaskStartScheduler+0xb8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 fe78 	bl	8006894 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002ba4:	f001 fac6 	bl	8004134 <xPortStartScheduler>
 8002ba8:	e00f      	b.n	8002bca <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bb0:	d10b      	bne.n	8002bca <vTaskStartScheduler+0x96>
    __asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	607b      	str	r3, [r7, #4]
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002bca:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <vTaskStartScheduler+0xbc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002bce:	20cd      	movs	r0, #205	@ 0xcd
 8002bd0:	f003 fd6e 	bl	80066b0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	200001b0 	.word	0x200001b0
 8002be0:	20000194 	.word	0x20000194
 8002be4:	20000188 	.word	0x20000188
 8002be8:	200001b8 	.word	0x200001b8
 8002bec:	20000078 	.word	0x20000078
 8002bf0:	08006f4c 	.word	0x08006f4c

08002bf4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <vTaskSuspendAll+0x18>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	4a03      	ldr	r2, [pc, #12]	@ (8002c0c <vTaskSuspendAll+0x18>)
 8002c00:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002c02:	20cf      	movs	r0, #207	@ 0xcf
 8002c04:	f003 fd54 	bl	80066b0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200001bc 	.word	0x200001bc

08002c10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c10:	b5b0      	push	{r4, r5, r7, lr}
 8002c12:	b08a      	sub	sp, #40	@ 0x28
 8002c14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	623b      	str	r3, [r7, #32]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002c1e:	f001 fbe7 	bl	80043f0 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002c26:	4b81      	ldr	r3, [pc, #516]	@ (8002e2c <xTaskResumeAll+0x21c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10b      	bne.n	8002c46 <xTaskResumeAll+0x36>
    __asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	607b      	str	r3, [r7, #4]
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	e7fd      	b.n	8002c42 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002c46:	4b79      	ldr	r3, [pc, #484]	@ (8002e2c <xTaskResumeAll+0x21c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	4a77      	ldr	r2, [pc, #476]	@ (8002e2c <xTaskResumeAll+0x21c>)
 8002c4e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002c50:	4b76      	ldr	r3, [pc, #472]	@ (8002e2c <xTaskResumeAll+0x21c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 80dc 	bne.w	8002e12 <xTaskResumeAll+0x202>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c5a:	4b75      	ldr	r3, [pc, #468]	@ (8002e30 <xTaskResumeAll+0x220>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80d7 	beq.w	8002e12 <xTaskResumeAll+0x202>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c64:	e094      	b.n	8002d90 <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c66:	4b73      	ldr	r3, [pc, #460]	@ (8002e34 <xTaskResumeAll+0x224>)
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	3320      	adds	r3, #32
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d103      	bne.n	8002c9c <xTaskResumeAll+0x8c>
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	1e5a      	subs	r2, r3, #1
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb8:	6952      	ldr	r2, [r2, #20]
 8002cba:	60da      	str	r2, [r3, #12]
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc2:	6912      	ldr	r2, [r2, #16]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	3308      	adds	r3, #8
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d103      	bne.n	8002cda <xTaskResumeAll+0xca>
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	2200      	movs	r2, #0
 8002cde:	61da      	str	r2, [r3, #28]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fe13 	bl	8006918 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cf6:	4b50      	ldr	r3, [pc, #320]	@ (8002e38 <xTaskResumeAll+0x228>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d903      	bls.n	8002d06 <xTaskResumeAll+0xf6>
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d02:	4a4d      	ldr	r2, [pc, #308]	@ (8002e38 <xTaskResumeAll+0x228>)
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d0a:	494c      	ldr	r1, [pc, #304]	@ (8002e3c <xTaskResumeAll+0x22c>)
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	440b      	add	r3, r1
 8002d16:	3304      	adds	r3, #4
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	611a      	str	r2, [r3, #16]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	615a      	str	r2, [r3, #20]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d30:	3208      	adds	r2, #8
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d36:	f103 0208 	add.w	r2, r3, #8
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e3c <xTaskResumeAll+0x22c>)
 8002d4c:	441a      	add	r2, r3
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	61da      	str	r2, [r3, #28]
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d56:	4939      	ldr	r1, [pc, #228]	@ (8002e3c <xTaskResumeAll+0x22c>)
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d68:	1c59      	adds	r1, r3, #1
 8002d6a:	4834      	ldr	r0, [pc, #208]	@ (8002e3c <xTaskResumeAll+0x22c>)
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4403      	add	r3, r0
 8002d76:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d7c:	4b30      	ldr	r3, [pc, #192]	@ (8002e40 <xTaskResumeAll+0x230>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d904      	bls.n	8002d90 <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002d86:	4a2f      	ldr	r2, [pc, #188]	@ (8002e44 <xTaskResumeAll+0x234>)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d90:	4b28      	ldr	r3, [pc, #160]	@ (8002e34 <xTaskResumeAll+0x224>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f47f af66 	bne.w	8002c66 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002da0:	f000 fd00 	bl	80037a4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002da4:	4b28      	ldr	r3, [pc, #160]	@ (8002e48 <xTaskResumeAll+0x238>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	e9c7 2306 	strd	r2, r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002dae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	d01b      	beq.n	8002dee <xTaskResumeAll+0x1de>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002db6:	f000 f891 	bl	8002edc <xTaskIncrementTick>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <xTaskResumeAll+0x1ba>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002dc0:	4a20      	ldr	r2, [pc, #128]	@ (8002e44 <xTaskResumeAll+0x234>)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dce:	1e54      	subs	r4, r2, #1
 8002dd0:	f143 35ff 	adc.w	r5, r3, #4294967295	@ 0xffffffff
 8002dd4:	e9c7 4506 	strd	r4, r5, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	d1ea      	bne.n	8002db6 <xTaskResumeAll+0x1a6>

                            xPendedTicks = 0;
 8002de0:	4919      	ldr	r1, [pc, #100]	@ (8002e48 <xTaskResumeAll+0x238>)
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	e9c1 2300 	strd	r2, r3, [r1]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002dee:	4a15      	ldr	r2, [pc, #84]	@ (8002e44 <xTaskResumeAll+0x234>)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <xTaskResumeAll+0x202>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	623b      	str	r3, [r7, #32]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002dfe:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <xTaskResumeAll+0x230>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <xTaskResumeAll+0x23c>)
 8002e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e12:	f001 fb1f 	bl	8004454 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	20d0      	movs	r0, #208	@ 0xd0
 8002e1c:	f003 fc84 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002e20:	6a3b      	ldr	r3, [r7, #32]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3728      	adds	r7, #40	@ 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200001bc 	.word	0x200001bc
 8002e30:	20000180 	.word	0x20000180
 8002e34:	20000130 	.word	0x20000130
 8002e38:	20000190 	.word	0x20000190
 8002e3c:	20000080 	.word	0x20000080
 8002e40:	20000078 	.word	0x20000078
 8002e44:	200001a0 	.word	0x200001a0
 8002e48:	20000198 	.word	0x20000198
 8002e4c:	e000ed04 	.word	0xe000ed04

08002e50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
 8002e56:	f001 facb 	bl	80043f0 <vPortEnterCritical>
    {
        xTicks = xTickCount;
 8002e5a:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <xTaskGetTickCount+0x30>)
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	e9c7 2300 	strd	r2, r3, [r7]
    }
    portTICK_TYPE_EXIT_CRITICAL();
 8002e64:	f001 faf6 	bl	8004454 <vPortExitCritical>

    traceRETURN_xTaskGetTickCount( xTicks );
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	20d1      	movs	r0, #209	@ 0xd1
 8002e6e:	f003 fc5b 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8002e72:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000188 	.word	0x20000188

08002e84 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e8a:	f001 fb9f 	bl	80045cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8002e8e:	f3ef 8211 	mrs	r2, BASEPRI
 8002e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	60ba      	str	r2, [r7, #8]
 8002ea4:	607b      	str	r3, [r7, #4]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8002ea6:	68bb      	ldr	r3, [r7, #8]

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002ea8:	61fb      	str	r3, [r7, #28]
    {
        xReturn = xTickCount;
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <xTaskGetTickCountFromISR+0x54>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002ebe:	bf00      	nop
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	20d2      	movs	r0, #210	@ 0xd2
 8002ec6:	f003 fc2f 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002eca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000188 	.word	0x20000188

08002edc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002edc:	b5b0      	push	{r4, r5, r7, lr}
 8002ede:	b08c      	sub	sp, #48	@ 0x30
 8002ee0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002ee6:	4b8a      	ldr	r3, [pc, #552]	@ (8003110 <xTaskIncrementTick+0x234>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 80fd 	bne.w	80030ea <xTaskIncrementTick+0x20e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ef0:	4b88      	ldr	r3, [pc, #544]	@ (8003114 <xTaskIncrementTick+0x238>)
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	1c54      	adds	r4, r2, #1
 8002ef8:	f143 0500 	adc.w	r5, r3, #0
 8002efc:	e9c7 4508 	strd	r4, r5, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f00:	4984      	ldr	r1, [pc, #528]	@ (8003114 <xTaskIncrementTick+0x238>)
 8002f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f06:	e9c1 2300 	strd	r2, r3, [r1]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	d121      	bne.n	8002f56 <xTaskIncrementTick+0x7a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f12:	4b81      	ldr	r3, [pc, #516]	@ (8003118 <xTaskIncrementTick+0x23c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00b      	beq.n	8002f34 <xTaskIncrementTick+0x58>
    __asm volatile
 8002f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	603b      	str	r3, [r7, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <xTaskIncrementTick+0x54>
 8002f34:	4b78      	ldr	r3, [pc, #480]	@ (8003118 <xTaskIncrementTick+0x23c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	4b78      	ldr	r3, [pc, #480]	@ (800311c <xTaskIncrementTick+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a76      	ldr	r2, [pc, #472]	@ (8003118 <xTaskIncrementTick+0x23c>)
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4a76      	ldr	r2, [pc, #472]	@ (800311c <xTaskIncrementTick+0x240>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b75      	ldr	r3, [pc, #468]	@ (8003120 <xTaskIncrementTick+0x244>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	4a74      	ldr	r2, [pc, #464]	@ (8003120 <xTaskIncrementTick+0x244>)
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	f000 fc27 	bl	80037a4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f56:	4b73      	ldr	r3, [pc, #460]	@ (8003124 <xTaskIncrementTick+0x248>)
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f60:	4290      	cmp	r0, r2
 8002f62:	eb71 0303 	sbcs.w	r3, r1, r3
 8002f66:	f0c0 80b9 	bcc.w	80030dc <xTaskIncrementTick+0x200>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f6a:	4b6b      	ldr	r3, [pc, #428]	@ (8003118 <xTaskIncrementTick+0x23c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <xTaskIncrementTick+0xa8>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002f74:	496b      	ldr	r1, [pc, #428]	@ (8003124 <xTaskIncrementTick+0x248>)
 8002f76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f7e:	e9c1 2300 	strd	r2, r3, [r1]
                    break;
 8002f82:	e0ab      	b.n	80030dc <xTaskIncrementTick+0x200>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f84:	4b64      	ldr	r3, [pc, #400]	@ (8003118 <xTaskIncrementTick+0x23c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f94:	e9c7 2304 	strd	r2, r3, [r7, #16]

                    if( xConstTickCount < xItemValue )
 8002f98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fa0:	4290      	cmp	r0, r2
 8002fa2:	eb71 0303 	sbcs.w	r3, r1, r3
 8002fa6:	d205      	bcs.n	8002fb4 <xTaskIncrementTick+0xd8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002fa8:	495e      	ldr	r1, [pc, #376]	@ (8003124 <xTaskIncrementTick+0x248>)
 8002faa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fae:	e9c1 2300 	strd	r2, r3, [r1]
                        break;
 8002fb2:	e093      	b.n	80030dc <xTaskIncrementTick+0x200>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	6952      	ldr	r2, [r2, #20]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	6912      	ldr	r2, [r2, #16]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d103      	bne.n	8002fe2 <xTaskIncrementTick+0x106>
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	61da      	str	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	1e5a      	subs	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01e      	beq.n	8003038 <xTaskIncrementTick+0x15c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	3320      	adds	r3, #32
 800301c:	429a      	cmp	r2, r3
 800301e:	d103      	bne.n	8003028 <xTaskIncrementTick+0x14c>
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2200      	movs	r2, #0
 800302c:	635a      	str	r2, [r3, #52]	@ 0x34
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	1e5a      	subs	r2, r3, #1
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4618      	mov	r0, r3
 800303c:	f003 fc6c 	bl	8006918 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003044:	4b38      	ldr	r3, [pc, #224]	@ (8003128 <xTaskIncrementTick+0x24c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d903      	bls.n	8003054 <xTaskIncrementTick+0x178>
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003050:	4a35      	ldr	r2, [pc, #212]	@ (8003128 <xTaskIncrementTick+0x24c>)
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003058:	4934      	ldr	r1, [pc, #208]	@ (800312c <xTaskIncrementTick+0x250>)
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	440b      	add	r3, r1
 8003064:	3304      	adds	r3, #4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	611a      	str	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	615a      	str	r2, [r3, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	3208      	adds	r2, #8
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f103 0208 	add.w	r2, r3, #8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4a24      	ldr	r2, [pc, #144]	@ (800312c <xTaskIncrementTick+0x250>)
 800309a:	441a      	add	r2, r3
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	61da      	str	r2, [r3, #28]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a4:	4921      	ldr	r1, [pc, #132]	@ (800312c <xTaskIncrementTick+0x250>)
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030b6:	1c59      	adds	r1, r3, #1
 80030b8:	481c      	ldr	r0, [pc, #112]	@ (800312c <xTaskIncrementTick+0x250>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4403      	add	r3, r0
 80030c4:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ca:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <xTaskIncrementTick+0x254>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d0:	429a      	cmp	r2, r3
 80030d2:	f67f af4a 	bls.w	8002f6a <xTaskIncrementTick+0x8e>
                            {
                                xSwitchRequired = pdTRUE;
 80030d6:	2301      	movs	r3, #1
 80030d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030da:	e746      	b.n	8002f6a <xTaskIncrementTick+0x8e>
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80030dc:	4b15      	ldr	r3, [pc, #84]	@ (8003134 <xTaskIncrementTick+0x258>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <xTaskIncrementTick+0x220>
                {
                    xSwitchRequired = pdTRUE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030e8:	e008      	b.n	80030fc <xTaskIncrementTick+0x220>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80030ea:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <xTaskIncrementTick+0x25c>)
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	1c50      	adds	r0, r2, #1
 80030f2:	f143 0100 	adc.w	r1, r3, #0
 80030f6:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <xTaskIncrementTick+0x25c>)
 80030f8:	e9c3 0100 	strd	r0, r1, [r3]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80030fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fe:	4619      	mov	r1, r3
 8003100:	20db      	movs	r0, #219	@ 0xdb
 8003102:	f003 fb11 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003108:	4618      	mov	r0, r3
 800310a:	3730      	adds	r7, #48	@ 0x30
 800310c:	46bd      	mov	sp, r7
 800310e:	bdb0      	pop	{r4, r5, r7, pc}
 8003110:	200001bc 	.word	0x200001bc
 8003114:	20000188 	.word	0x20000188
 8003118:	20000128 	.word	0x20000128
 800311c:	2000012c 	.word	0x2000012c
 8003120:	200001a4 	.word	0x200001a4
 8003124:	200001b0 	.word	0x200001b0
 8003128:	20000190 	.word	0x20000190
 800312c:	20000080 	.word	0x20000080
 8003130:	20000078 	.word	0x20000078
 8003134:	200001a0 	.word	0x200001a0
 8003138:	20000198 	.word	0x20000198

0800313c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003142:	4b2f      	ldr	r3, [pc, #188]	@ (8003200 <vTaskSwitchContext+0xc4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800314a:	4b2e      	ldr	r3, [pc, #184]	@ (8003204 <vTaskSwitchContext+0xc8>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003150:	e051      	b.n	80031f6 <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 8003152:	4b2c      	ldr	r3, [pc, #176]	@ (8003204 <vTaskSwitchContext+0xc8>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003158:	4b2b      	ldr	r3, [pc, #172]	@ (8003208 <vTaskSwitchContext+0xcc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e011      	b.n	8003184 <vTaskSwitchContext+0x48>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10b      	bne.n	800317e <vTaskSwitchContext+0x42>
    __asm volatile
 8003166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316a:	f383 8811 	msr	BASEPRI, r3
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	f3bf 8f4f 	dsb	sy
 8003176:	607b      	str	r3, [r7, #4]
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	e7fd      	b.n	800317a <vTaskSwitchContext+0x3e>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3b01      	subs	r3, #1
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	4921      	ldr	r1, [pc, #132]	@ (800320c <vTaskSwitchContext+0xd0>)
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4613      	mov	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	440b      	add	r3, r1
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0e3      	beq.n	8003160 <vTaskSwitchContext+0x24>
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4a1a      	ldr	r2, [pc, #104]	@ (800320c <vTaskSwitchContext+0xd0>)
 80031a4:	4413      	add	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3308      	adds	r3, #8
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d103      	bne.n	80031c6 <vTaskSwitchContext+0x8a>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	4a10      	ldr	r2, [pc, #64]	@ (8003210 <vTaskSwitchContext+0xd4>)
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003208 <vTaskSwitchContext+0xcc>)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80031d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003214 <vTaskSwitchContext+0xd8>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b0d      	ldr	r3, [pc, #52]	@ (8003210 <vTaskSwitchContext+0xd4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d102      	bne.n	80031e8 <vTaskSwitchContext+0xac>
 80031e2:	f003 faf9 	bl	80067d8 <SEGGER_SYSVIEW_OnIdle>
 80031e6:	e004      	b.n	80031f2 <vTaskSwitchContext+0xb6>
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <vTaskSwitchContext+0xd4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fb51 	bl	8006894 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80031f2:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <vTaskSwitchContext+0xd4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
    }
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200001bc 	.word	0x200001bc
 8003204:	200001a0 	.word	0x200001a0
 8003208:	20000190 	.word	0x20000190
 800320c:	20000080 	.word	0x20000080
 8003210:	20000078 	.word	0x20000078
 8003214:	200001b8 	.word	0x200001b8

08003218 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	e9c7 2300 	strd	r2, r3, [r7]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10b      	bne.n	8003242 <vTaskPlaceOnEventList+0x2a>
    __asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	617b      	str	r3, [r7, #20]
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	e7fd      	b.n	800323e <vTaskPlaceOnEventList+0x26>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <vTaskPlaceOnEventList+0x50>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3320      	adds	r3, #32
 8003248:	4619      	mov	r1, r3
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7fe fe42 	bl	8001ed4 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003250:	2201      	movs	r2, #1
 8003252:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003256:	f000 fae7 	bl	8003828 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 800325a:	20e1      	movs	r0, #225	@ 0xe1
 800325c:	f003 fa28 	bl	80066b0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003260:	bf00      	nop
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000078 	.word	0x20000078

0800326c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	e9c7 2300 	strd	r2, r3, [r7]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10b      	bne.n	8003296 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	613b      	str	r3, [r7, #16]
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	e7fd      	b.n	8003292 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	4b19      	ldr	r3, [pc, #100]	@ (8003304 <vTaskPlaceOnEventListRestricted+0x98>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80032a4:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <vTaskPlaceOnEventListRestricted+0x98>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	68d2      	ldr	r2, [r2, #12]
 80032ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032ae:	4b15      	ldr	r3, [pc, #84]	@ (8003304 <vTaskPlaceOnEventListRestricted+0x98>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	3220      	adds	r2, #32
 80032b8:	609a      	str	r2, [r3, #8]
 80032ba:	4b12      	ldr	r3, [pc, #72]	@ (8003304 <vTaskPlaceOnEventListRestricted+0x98>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f103 0220 	add.w	r2, r3, #32
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <vTaskPlaceOnEventListRestricted+0x98>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <vTaskPlaceOnEventListRestricted+0x7e>
        {
            xTicksToWait = portMAX_DELAY;
 80032de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032e6:	e9c7 2300 	strd	r2, r3, [r7]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032ea:	6a3a      	ldr	r2, [r7, #32]
 80032ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032f0:	f000 fa9a 	bl	8003828 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80032f4:	20e3      	movs	r0, #227	@ 0xe3
 80032f6:	f003 f9db 	bl	80066b0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000078 	.word	0x20000078

08003308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	@ 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	60fb      	str	r3, [r7, #12]
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	e7fd      	b.n	8003332 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003340:	6a3a      	ldr	r2, [r7, #32]
 8003342:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334a:	6a3a      	ldr	r2, [r7, #32]
 800334c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	3320      	adds	r3, #32
 8003358:	429a      	cmp	r2, r3
 800335a:	d103      	bne.n	8003364 <xTaskRemoveFromEventList+0x5c>
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	2200      	movs	r2, #0
 8003368:	635a      	str	r2, [r3, #52]	@ 0x34
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	1e5a      	subs	r2, r3, #1
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003374:	4b4f      	ldr	r3, [pc, #316]	@ (80034b4 <xTaskRemoveFromEventList+0x1ac>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d166      	bne.n	800344a <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	6a3a      	ldr	r2, [r7, #32]
 8003388:	6952      	ldr	r2, [r2, #20]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	6a3a      	ldr	r2, [r7, #32]
 8003392:	6912      	ldr	r2, [r2, #16]
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	3308      	adds	r3, #8
 800339e:	429a      	cmp	r2, r3
 80033a0:	d103      	bne.n	80033aa <xTaskRemoveFromEventList+0xa2>
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	2200      	movs	r2, #0
 80033ae:	61da      	str	r2, [r3, #28]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	1e5a      	subs	r2, r3, #1
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	4618      	mov	r0, r3
 80033be:	f003 faab 	bl	8006918 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033c6:	4b3c      	ldr	r3, [pc, #240]	@ (80034b8 <xTaskRemoveFromEventList+0x1b0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d903      	bls.n	80033d6 <xTaskRemoveFromEventList+0xce>
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d2:	4a39      	ldr	r2, [pc, #228]	@ (80034b8 <xTaskRemoveFromEventList+0x1b0>)
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033da:	4938      	ldr	r1, [pc, #224]	@ (80034bc <xTaskRemoveFromEventList+0x1b4>)
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	440b      	add	r3, r1
 80033e6:	3304      	adds	r3, #4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	611a      	str	r2, [r3, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	615a      	str	r2, [r3, #20]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	6a3a      	ldr	r2, [r7, #32]
 8003400:	3208      	adds	r2, #8
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	f103 0208 	add.w	r2, r3, #8
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4a28      	ldr	r2, [pc, #160]	@ (80034bc <xTaskRemoveFromEventList+0x1b4>)
 800341c:	441a      	add	r2, r3
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	61da      	str	r2, [r3, #28]
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003426:	4925      	ldr	r1, [pc, #148]	@ (80034bc <xTaskRemoveFromEventList+0x1b4>)
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	440b      	add	r3, r1
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6a3a      	ldr	r2, [r7, #32]
 8003436:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003438:	1c59      	adds	r1, r3, #1
 800343a:	4820      	ldr	r0, [pc, #128]	@ (80034bc <xTaskRemoveFromEventList+0x1b4>)
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4403      	add	r3, r0
 8003446:	6019      	str	r1, [r3, #0]
 8003448:	e01b      	b.n	8003482 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800344a:	4b1d      	ldr	r3, [pc, #116]	@ (80034c0 <xTaskRemoveFromEventList+0x1b8>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	629a      	str	r2, [r3, #40]	@ 0x28
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	6a3a      	ldr	r2, [r7, #32]
 8003464:	3220      	adds	r2, #32
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	f103 0220 	add.w	r2, r3, #32
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	4a12      	ldr	r2, [pc, #72]	@ (80034c0 <xTaskRemoveFromEventList+0x1b8>)
 8003476:	635a      	str	r2, [r3, #52]	@ 0x34
 8003478:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <xTaskRemoveFromEventList+0x1b8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	4a10      	ldr	r2, [pc, #64]	@ (80034c0 <xTaskRemoveFromEventList+0x1b8>)
 8003480:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003486:	4b0f      	ldr	r3, [pc, #60]	@ (80034c4 <xTaskRemoveFromEventList+0x1bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348c:	429a      	cmp	r2, r3
 800348e:	d905      	bls.n	800349c <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003490:	2301      	movs	r3, #1
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003494:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <xTaskRemoveFromEventList+0x1c0>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e001      	b.n	80034a0 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 800349c:	2300      	movs	r3, #0
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	4619      	mov	r1, r3
 80034a4:	20e4      	movs	r0, #228	@ 0xe4
 80034a6:	f003 f93f 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3728      	adds	r7, #40	@ 0x28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	200001bc 	.word	0x200001bc
 80034b8:	20000190 	.word	0x20000190
 80034bc:	20000080 	.word	0x20000080
 80034c0:	20000130 	.word	0x20000130
 80034c4:	20000078 	.word	0x20000078
 80034c8:	200001a0 	.word	0x200001a0

080034cc <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034d4:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <vTaskInternalSetTimeOutState+0x2c>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80034dc:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <vTaskInternalSetTimeOutState+0x30>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	e9c1 2302 	strd	r2, r3, [r1, #8]

    traceRETURN_vTaskInternalSetTimeOutState();
 80034e8:	20e7      	movs	r0, #231	@ 0xe7
 80034ea:	f003 f8e1 	bl	80066b0 <SEGGER_SYSVIEW_RecordEndCall>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200001a4 	.word	0x200001a4
 80034fc:	20000188 	.word	0x20000188

08003500 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003500:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003504:	b08a      	sub	sp, #40	@ 0x28
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <xTaskCheckForTimeOut+0x2a>
    __asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	60fb      	str	r3, [r7, #12]
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	e7fd      	b.n	8003526 <xTaskCheckForTimeOut+0x26>
    configASSERT( pxTicksToWait );
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <xTaskCheckForTimeOut+0x48>
    __asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	60bb      	str	r3, [r7, #8]
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <xTaskCheckForTimeOut+0x44>

    taskENTER_CRITICAL();
 8003548:	f000 ff52 	bl	80043f0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800354c:	4b32      	ldr	r3, [pc, #200]	@ (8003618 <xTaskCheckForTimeOut+0x118>)
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	e9c7 2306 	strd	r2, r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800355c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003560:	ebb0 0802 	subs.w	r8, r0, r2
 8003564:	eb61 0903 	sbc.w	r9, r1, r3
 8003568:	e9c7 8904 	strd	r8, r9, [r7, #16]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003576:	bf08      	it	eq
 8003578:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 800357c:	d102      	bne.n	8003584 <xTaskCheckForTimeOut+0x84>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
 8003582:	e03b      	b.n	80035fc <xTaskCheckForTimeOut+0xfc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b24      	ldr	r3, [pc, #144]	@ (800361c <xTaskCheckForTimeOut+0x11c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d012      	beq.n	80035b6 <xTaskCheckForTimeOut+0xb6>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003596:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800359a:	4290      	cmp	r0, r2
 800359c:	eb71 0303 	sbcs.w	r3, r1, r3
 80035a0:	d309      	bcc.n	80035b6 <xTaskCheckForTimeOut+0xb6>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035a2:	2301      	movs	r3, #1
 80035a4:	627b      	str	r3, [r7, #36]	@ 0x24
            *pxTicksToWait = ( TickType_t ) 0;
 80035a6:	6839      	ldr	r1, [r7, #0]
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9c1 2300 	strd	r2, r3, [r1]
 80035b4:	e022      	b.n	80035fc <xTaskCheckForTimeOut+0xfc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035c0:	4290      	cmp	r0, r2
 80035c2:	eb71 0303 	sbcs.w	r3, r1, r3
 80035c6:	d210      	bcs.n	80035ea <xTaskCheckForTimeOut+0xea>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035d2:	1a84      	subs	r4, r0, r2
 80035d4:	eb61 0503 	sbc.w	r5, r1, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	e9c3 4500 	strd	r4, r5, [r3]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ff74 	bl	80034cc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e8:	e008      	b.n	80035fc <xTaskCheckForTimeOut+0xfc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035ea:	6839      	ldr	r1, [r7, #0]
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9c1 2300 	strd	r2, r3, [r1]
            xReturn = pdTRUE;
 80035f8:	2301      	movs	r3, #1
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    taskEXIT_CRITICAL();
 80035fc:	f000 ff2a 	bl	8004454 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	4619      	mov	r1, r3
 8003604:	20e8      	movs	r0, #232	@ 0xe8
 8003606:	f003 f88f 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800360c:	4618      	mov	r0, r3
 800360e:	3728      	adds	r7, #40	@ 0x28
 8003610:	46bd      	mov	sp, r7
 8003612:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003616:	bf00      	nop
 8003618:	20000188 	.word	0x20000188
 800361c:	200001a4 	.word	0x200001a4

08003620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003624:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <vTaskMissedYield+0x14>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800362a:	20e9      	movs	r0, #233	@ 0xe9
 800362c:	f003 f840 	bl	80066b0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	200001a0 	.word	0x200001a0

08003638 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003640:	f000 f852 	bl	80036e8 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003644:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <prvIdleTask+0x28>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d9f9      	bls.n	8003640 <prvIdleTask+0x8>
            {
                taskYIELD();
 800364c:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <prvIdleTask+0x2c>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800365c:	e7f0      	b.n	8003640 <prvIdleTask+0x8>
 800365e:	bf00      	nop
 8003660:	20000080 	.word	0x20000080
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800366e:	2300      	movs	r3, #0
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	e00c      	b.n	800368e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4a12      	ldr	r2, [pc, #72]	@ (80036c8 <prvInitialiseTaskLists+0x60>)
 8003680:	4413      	add	r3, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fbf2 	bl	8001e6c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3301      	adds	r3, #1
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b04      	cmp	r3, #4
 8003692:	d9ef      	bls.n	8003674 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003694:	480d      	ldr	r0, [pc, #52]	@ (80036cc <prvInitialiseTaskLists+0x64>)
 8003696:	f7fe fbe9 	bl	8001e6c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800369a:	480d      	ldr	r0, [pc, #52]	@ (80036d0 <prvInitialiseTaskLists+0x68>)
 800369c:	f7fe fbe6 	bl	8001e6c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036a0:	480c      	ldr	r0, [pc, #48]	@ (80036d4 <prvInitialiseTaskLists+0x6c>)
 80036a2:	f7fe fbe3 	bl	8001e6c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80036a6:	480c      	ldr	r0, [pc, #48]	@ (80036d8 <prvInitialiseTaskLists+0x70>)
 80036a8:	f7fe fbe0 	bl	8001e6c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80036ac:	480b      	ldr	r0, [pc, #44]	@ (80036dc <prvInitialiseTaskLists+0x74>)
 80036ae:	f7fe fbdd 	bl	8001e6c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <prvInitialiseTaskLists+0x78>)
 80036b4:	4a05      	ldr	r2, [pc, #20]	@ (80036cc <prvInitialiseTaskLists+0x64>)
 80036b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036b8:	4b0a      	ldr	r3, [pc, #40]	@ (80036e4 <prvInitialiseTaskLists+0x7c>)
 80036ba:	4a05      	ldr	r2, [pc, #20]	@ (80036d0 <prvInitialiseTaskLists+0x68>)
 80036bc:	601a      	str	r2, [r3, #0]
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000080 	.word	0x20000080
 80036cc:	200000f8 	.word	0x200000f8
 80036d0:	20000110 	.word	0x20000110
 80036d4:	20000130 	.word	0x20000130
 80036d8:	20000148 	.word	0x20000148
 80036dc:	20000168 	.word	0x20000168
 80036e0:	20000128 	.word	0x20000128
 80036e4:	2000012c 	.word	0x2000012c

080036e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ee:	e019      	b.n	8003724 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80036f0:	f000 fe7e 	bl	80043f0 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80036f4:	4b10      	ldr	r3, [pc, #64]	@ (8003738 <prvCheckTasksWaitingTermination+0x50>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3308      	adds	r3, #8
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe fc2c 	bl	8001f5e <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003706:	4b0d      	ldr	r3, [pc, #52]	@ (800373c <prvCheckTasksWaitingTermination+0x54>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3b01      	subs	r3, #1
 800370c:	4a0b      	ldr	r2, [pc, #44]	@ (800373c <prvCheckTasksWaitingTermination+0x54>)
 800370e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <prvCheckTasksWaitingTermination+0x58>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3b01      	subs	r3, #1
 8003716:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <prvCheckTasksWaitingTermination+0x58>)
 8003718:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800371a:	f000 fe9b 	bl	8004454 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f810 	bl	8003744 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003724:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <prvCheckTasksWaitingTermination+0x58>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e1      	bne.n	80036f0 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000148 	.word	0x20000148
 800373c:	20000180 	.word	0x20000180
 8003740:	20000160 	.word	0x20000160

08003744 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003752:	2b00      	cmp	r3, #0
 8003754:	d108      	bne.n	8003768 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375a:	4618      	mov	r0, r3
 800375c:	f001 f8aa 	bl	80048b4 <vPortFree>
                vPortFree( pxTCB );
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f001 f8a7 	bl	80048b4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003766:	e019      	b.n	800379c <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800376e:	2b01      	cmp	r3, #1
 8003770:	d103      	bne.n	800377a <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f001 f89e 	bl	80048b4 <vPortFree>
    }
 8003778:	e010      	b.n	800379c <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003780:	2b02      	cmp	r3, #2
 8003782:	d00b      	beq.n	800379c <prvDeleteTCB+0x58>
    __asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	60fb      	str	r3, [r7, #12]
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <prvDeleteTCB+0x54>
    }
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a8:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <prvResetNextTaskUnblockTime+0x38>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d107      	bne.n	80037c2 <prvResetNextTaskUnblockTime+0x1e>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037b2:	490b      	ldr	r1, [pc, #44]	@ (80037e0 <prvResetNextTaskUnblockTime+0x3c>)
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037bc:	e9c1 2300 	strd	r2, r3, [r1]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80037c0:	e007      	b.n	80037d2 <prvResetNextTaskUnblockTime+0x2e>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037c2:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <prvResetNextTaskUnblockTime+0x38>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	4904      	ldr	r1, [pc, #16]	@ (80037e0 <prvResetNextTaskUnblockTime+0x3c>)
 80037ce:	e9c1 2300 	strd	r2, r3, [r1]
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20000128 	.word	0x20000128
 80037e0:	200001b0 	.word	0x200001b0

080037e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80037ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003820 <xTaskGetSchedulerState+0x3c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037f2:	2301      	movs	r3, #1
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	e008      	b.n	800380a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80037f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003824 <xTaskGetSchedulerState+0x40>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003800:	2302      	movs	r3, #2
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	e001      	b.n	800380a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4619      	mov	r1, r3
 800380e:	20f5      	movs	r0, #245	@ 0xf5
 8003810:	f002 ff8a 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003814:	687b      	ldr	r3, [r7, #4]
    }
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000194 	.word	0x20000194
 8003824:	200001bc 	.word	0x200001bc

08003828 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003828:	b5b0      	push	{r4, r5, r7, lr}
 800382a:	b08c      	sub	sp, #48	@ 0x30
 800382c:	af00      	add	r7, sp, #0
 800382e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003834:	4b41      	ldr	r3, [pc, #260]	@ (800393c <prvAddCurrentTaskToDelayedList+0x114>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    List_t * const pxDelayedList = pxDelayedTaskList;
 800383e:	4b40      	ldr	r3, [pc, #256]	@ (8003940 <prvAddCurrentTaskToDelayedList+0x118>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003844:	4b3f      	ldr	r3, [pc, #252]	@ (8003944 <prvAddCurrentTaskToDelayedList+0x11c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	623b      	str	r3, [r7, #32]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800384a:	4b3f      	ldr	r3, [pc, #252]	@ (8003948 <prvAddCurrentTaskToDelayedList+0x120>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3308      	adds	r3, #8
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fb84 	bl	8001f5e <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800385e:	bf08      	it	eq
 8003860:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8003864:	d125      	bne.n	80038b2 <prvAddCurrentTaskToDelayedList+0x8a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d022      	beq.n	80038b2 <prvAddCurrentTaskToDelayedList+0x8a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800386c:	4b37      	ldr	r3, [pc, #220]	@ (800394c <prvAddCurrentTaskToDelayedList+0x124>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	4b35      	ldr	r3, [pc, #212]	@ (8003948 <prvAddCurrentTaskToDelayedList+0x120>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	611a      	str	r2, [r3, #16]
 800387a:	4b33      	ldr	r3, [pc, #204]	@ (8003948 <prvAddCurrentTaskToDelayedList+0x120>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	615a      	str	r2, [r3, #20]
 8003884:	4b30      	ldr	r3, [pc, #192]	@ (8003948 <prvAddCurrentTaskToDelayedList+0x120>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	3208      	adds	r2, #8
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	4b2d      	ldr	r3, [pc, #180]	@ (8003948 <prvAddCurrentTaskToDelayedList+0x120>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f103 0208 	add.w	r2, r3, #8
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	4b2a      	ldr	r3, [pc, #168]	@ (8003948 <prvAddCurrentTaskToDelayedList+0x120>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2a      	ldr	r2, [pc, #168]	@ (800394c <prvAddCurrentTaskToDelayedList+0x124>)
 80038a2:	61da      	str	r2, [r3, #28]
 80038a4:	4b29      	ldr	r3, [pc, #164]	@ (800394c <prvAddCurrentTaskToDelayedList+0x124>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a28      	ldr	r2, [pc, #160]	@ (800394c <prvAddCurrentTaskToDelayedList+0x124>)
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80038b0:	e03f      	b.n	8003932 <prvAddCurrentTaskToDelayedList+0x10a>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80038b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ba:	1884      	adds	r4, r0, r2
 80038bc:	eb41 0503 	adc.w	r5, r1, r3
 80038c0:	e9c7 4504 	strd	r4, r5, [r7, #16]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038c4:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <prvAddCurrentTaskToDelayedList+0x120>)
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
            if( xTimeToWake < xConstTickCount )
 80038d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038d8:	4290      	cmp	r0, r2
 80038da:	eb71 0303 	sbcs.w	r3, r1, r3
 80038de:	d20d      	bcs.n	80038fc <prvAddCurrentTaskToDelayedList+0xd4>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80038e0:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <prvAddCurrentTaskToDelayedList+0x120>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2104      	movs	r1, #4
 80038e6:	4618      	mov	r0, r3
 80038e8:	f003 f858 	bl	800699c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80038ec:	4b16      	ldr	r3, [pc, #88]	@ (8003948 <prvAddCurrentTaskToDelayedList+0x120>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3308      	adds	r3, #8
 80038f2:	4619      	mov	r1, r3
 80038f4:	6a38      	ldr	r0, [r7, #32]
 80038f6:	f7fe faed 	bl	8001ed4 <vListInsert>
}
 80038fa:	e01a      	b.n	8003932 <prvAddCurrentTaskToDelayedList+0x10a>
                traceMOVED_TASK_TO_DELAYED_LIST();
 80038fc:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <prvAddCurrentTaskToDelayedList+0x120>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2104      	movs	r1, #4
 8003902:	4618      	mov	r0, r3
 8003904:	f003 f84a 	bl	800699c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003908:	4b0f      	ldr	r3, [pc, #60]	@ (8003948 <prvAddCurrentTaskToDelayedList+0x120>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3308      	adds	r3, #8
 800390e:	4619      	mov	r1, r3
 8003910:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003912:	f7fe fadf 	bl	8001ed4 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003916:	4b0e      	ldr	r3, [pc, #56]	@ (8003950 <prvAddCurrentTaskToDelayedList+0x128>)
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003920:	4290      	cmp	r0, r2
 8003922:	eb71 0303 	sbcs.w	r3, r1, r3
 8003926:	d204      	bcs.n	8003932 <prvAddCurrentTaskToDelayedList+0x10a>
                    xNextTaskUnblockTime = xTimeToWake;
 8003928:	4909      	ldr	r1, [pc, #36]	@ (8003950 <prvAddCurrentTaskToDelayedList+0x128>)
 800392a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800392e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003932:	bf00      	nop
 8003934:	3730      	adds	r7, #48	@ 0x30
 8003936:	46bd      	mov	sp, r7
 8003938:	bdb0      	pop	{r4, r5, r7, pc}
 800393a:	bf00      	nop
 800393c:	20000188 	.word	0x20000188
 8003940:	20000128 	.word	0x20000128
 8003944:	2000012c 	.word	0x2000012c
 8003948:	20000078 	.word	0x20000078
 800394c:	20000168 	.word	0x20000168
 8003950:	200001b0 	.word	0x200001b0

08003954 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a07      	ldr	r2, [pc, #28]	@ (8003980 <vApplicationGetIdleTaskMemory+0x2c>)
 8003964:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4a06      	ldr	r2, [pc, #24]	@ (8003984 <vApplicationGetIdleTaskMemory+0x30>)
 800396a:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2280      	movs	r2, #128	@ 0x80
 8003970:	601a      	str	r2, [r3, #0]
    }
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	200001c0 	.word	0x200001c0
 8003984:	20000220 	.word	0x20000220

08003988 <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4a07      	ldr	r2, [pc, #28]	@ (80039b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003998:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4a06      	ldr	r2, [pc, #24]	@ (80039b8 <vApplicationGetTimerTaskMemory+0x30>)
 800399e:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2280      	movs	r2, #128	@ 0x80
 80039a4:	601a      	str	r2, [r3, #0]
    }
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000420 	.word	0x20000420
 80039b8:	20000480 	.word	0x20000480

080039bc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	@ 0x28
 80039c0:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039c6:	f000 faf1 	bl	8003fac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039ca:	4b20      	ldr	r3, [pc, #128]	@ (8003a4c <xTimerCreateTimerTask+0x90>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d021      	beq.n	8003a16 <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 80039da:	1d3a      	adds	r2, r7, #4
 80039dc:	f107 0108 	add.w	r1, r7, #8
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ffcf 	bl	8003988 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	9202      	str	r2, [sp, #8]
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	2304      	movs	r3, #4
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2300      	movs	r3, #0
 80039fa:	460a      	mov	r2, r1
 80039fc:	4914      	ldr	r1, [pc, #80]	@ (8003a50 <xTimerCreateTimerTask+0x94>)
 80039fe:	4815      	ldr	r0, [pc, #84]	@ (8003a54 <xTimerCreateTimerTask+0x98>)
 8003a00:	f7fe fe19 	bl	8002636 <xTaskCreateStatic>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4a14      	ldr	r2, [pc, #80]	@ (8003a58 <xTimerCreateTimerTask+0x9c>)
 8003a08:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8003a0a:	4b13      	ldr	r3, [pc, #76]	@ (8003a58 <xTimerCreateTimerTask+0x9c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8003a12:	2301      	movs	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <xTimerCreateTimerTask+0x78>
    __asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	613b      	str	r3, [r7, #16]
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	4619      	mov	r1, r3
 8003a38:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003a3c:	f002 fe74 	bl	8006728 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003a40:	697b      	ldr	r3, [r7, #20]
    }
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200006b8 	.word	0x200006b8
 8003a50:	08006e6c 	.word	0x08006e6c
 8003a54:	08003b35 	.word	0x08003b35
 8003a58:	200006bc 	.word	0x200006bc

08003a5c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003a5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a60:	b088      	sub	sp, #32
 8003a62:	af04      	add	r7, sp, #16
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	e9c7 2300 	strd	r2, r3, [r7]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a6a:	e00d      	b.n	8003a88 <prvReloadTimer+0x2c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a76:	1884      	adds	r4, r0, r2
 8003a78:	eb41 0503 	adc.w	r5, r1, r3
 8003a7c:	e9c7 4500 	strd	r4, r5, [r7]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a92:	eb10 0802 	adds.w	r8, r0, r2
 8003a96:	eb41 0903 	adc.w	r9, r1, r3
 8003a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003aa6:	e9cd 2300 	strd	r2, r3, [sp]
 8003aaa:	4642      	mov	r2, r8
 8003aac:	464b      	mov	r3, r9
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f906 	bl	8003cc0 <prvInsertTimerInActiveList>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1d8      	bne.n	8003a6c <prvReloadTimer+0x10>
        }
    }
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003ac8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003ad2:	e9c7 2300 	strd	r2, r3, [r7]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ad6:	4b16      	ldr	r3, [pc, #88]	@ (8003b30 <prvProcessExpiredTimer+0x68>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fa3a 	bl	8001f5e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d009      	beq.n	8003b0c <prvProcessExpiredTimer+0x44>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003afc:	e9cd 2300 	strd	r2, r3, [sp]
 8003b00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b04:	6978      	ldr	r0, [r7, #20]
 8003b06:	f7ff ffa9 	bl	8003a5c <prvReloadTimer>
 8003b0a:	e008      	b.n	8003b1e <prvProcessExpiredTimer+0x56>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b22:	6978      	ldr	r0, [r7, #20]
 8003b24:	4798      	blx	r3
    }
 8003b26:	bf00      	nop
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200006b0 	.word	0x200006b0

08003b34 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b3c:	f107 030c 	add.w	r3, r7, #12
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f869 	bl	8003c18 <prvGetNextExpireTime>
 8003b46:	e9c7 0104 	strd	r0, r1, [r7, #16]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b52:	f000 f805 	bl	8003b60 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b56:	f000 f909 	bl	8003d6c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b5a:	bf00      	nop
 8003b5c:	e7ee      	b.n	8003b3c <prvTimerTask+0x8>
	...

08003b60 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b62:	b08b      	sub	sp, #44	@ 0x2c
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b6c:	f7ff f842 	bl	8002bf4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 f87b 	bl	8003c70 <prvSampleTimeNow>
 8003b7a:	e9c7 0106 	strd	r0, r1, [r7, #24]

            if( xTimerListsWereSwitched == pdFALSE )
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d13d      	bne.n	8003c00 <prvProcessTimerOrBlockTask+0xa0>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d110      	bne.n	8003bac <prvProcessTimerOrBlockTask+0x4c>
 8003b8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b92:	4290      	cmp	r0, r2
 8003b94:	eb71 0303 	sbcs.w	r3, r1, r3
 8003b98:	d308      	bcc.n	8003bac <prvProcessTimerOrBlockTask+0x4c>
                {
                    ( void ) xTaskResumeAll();
 8003b9a:	f7ff f839 	bl	8002c10 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ba6:	f7ff ff8f 	bl	8003ac8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003baa:	e02b      	b.n	8003c04 <prvProcessTimerOrBlockTask+0xa4>
                    if( xListWasEmpty != pdFALSE )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <prvProcessTimerOrBlockTask+0x64>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bb2:	4b16      	ldr	r3, [pc, #88]	@ (8003c0c <prvProcessTimerOrBlockTask+0xac>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <prvProcessTimerOrBlockTask+0x60>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <prvProcessTimerOrBlockTask+0x62>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	607b      	str	r3, [r7, #4]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bc4:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <prvProcessTimerOrBlockTask+0xb0>)
 8003bc6:	681e      	ldr	r6, [r3, #0]
 8003bc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd0:	1a84      	subs	r4, r0, r2
 8003bd2:	eb61 0503 	sbc.w	r5, r1, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	4622      	mov	r2, r4
 8003bdc:	462b      	mov	r3, r5
 8003bde:	4630      	mov	r0, r6
 8003be0:	f7fe fc8e 	bl	8002500 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003be4:	f7ff f814 	bl	8002c10 <xTaskResumeAll>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <prvProcessTimerOrBlockTask+0xa4>
                        taskYIELD_WITHIN_API();
 8003bee:	4b09      	ldr	r3, [pc, #36]	@ (8003c14 <prvProcessTimerOrBlockTask+0xb4>)
 8003bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	f3bf 8f6f 	isb	sy
    }
 8003bfe:	e001      	b.n	8003c04 <prvProcessTimerOrBlockTask+0xa4>
                ( void ) xTaskResumeAll();
 8003c00:	f7ff f806 	bl	8002c10 <xTaskResumeAll>
    }
 8003c04:	bf00      	nop
 8003c06:	3724      	adds	r7, #36	@ 0x24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0c:	200006b4 	.word	0x200006b4
 8003c10:	200006b8 	.word	0x200006b8
 8003c14:	e000ed04 	.word	0xe000ed04

08003c18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c20:	4b12      	ldr	r3, [pc, #72]	@ (8003c6c <prvGetNextExpireTime+0x54>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <prvGetNextExpireTime+0x16>
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	e000      	b.n	8003c30 <prvGetNextExpireTime+0x18>
 8003c2e:	2200      	movs	r2, #0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <prvGetNextExpireTime+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <prvGetNextExpireTime+0x54>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003c4a:	e005      	b.n	8003c58 <prvGetNextExpireTime+0x40>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9c7 2302 	strd	r2, r3, [r7, #8]
        }

        return xNextExpireTime;
 8003c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	200006b0 	.word	0x200006b0

08003c70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003c78:	f7ff f8ea 	bl	8002e50 <xTaskGetTickCount>
 8003c7c:	e9c7 0102 	strd	r0, r1, [r7, #8]

        if( xTimeNow < xLastTime )
 8003c80:	4b0e      	ldr	r3, [pc, #56]	@ (8003cbc <prvSampleTimeNow+0x4c>)
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c8a:	4290      	cmp	r0, r2
 8003c8c:	eb71 0303 	sbcs.w	r3, r1, r3
 8003c90:	d205      	bcs.n	8003c9e <prvSampleTimeNow+0x2e>
        {
            prvSwitchTimerLists();
 8003c92:	f000 f961 	bl	8003f58 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e002      	b.n	8003ca4 <prvSampleTimeNow+0x34>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ca4:	4905      	ldr	r1, [pc, #20]	@ (8003cbc <prvSampleTimeNow+0x4c>)
 8003ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003caa:	e9c1 2300 	strd	r2, r3, [r1]

        return xTimeNow;
 8003cae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200006c0 	.word	0x200006c0

08003cc0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003cc0:	b5b0      	push	{r4, r5, r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	e9c7 2300 	strd	r2, r3, [r7]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cd0:	68f9      	ldr	r1, [r7, #12]
 8003cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cd6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	619a      	str	r2, [r3, #24]

        if( xNextExpiryTime <= xTimeNow )
 8003ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ce8:	4290      	cmp	r0, r2
 8003cea:	eb71 0303 	sbcs.w	r3, r1, r3
 8003cee:	d319      	bcc.n	8003d24 <prvInsertTimerInActiveList+0x64>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003cf0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003cf4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003cf8:	1a84      	subs	r4, r0, r2
 8003cfa:	eb61 0503 	sbc.w	r5, r1, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d04:	4294      	cmp	r4, r2
 8003d06:	eb75 0303 	sbcs.w	r3, r5, r3
 8003d0a:	d302      	bcc.n	8003d12 <prvInsertTimerInActiveList+0x52>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	e023      	b.n	8003d5a <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d12:	4b14      	ldr	r3, [pc, #80]	@ (8003d64 <prvInsertTimerInActiveList+0xa4>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3308      	adds	r3, #8
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	f7fe f8d9 	bl	8001ed4 <vListInsert>
 8003d22:	e01a      	b.n	8003d5a <prvInsertTimerInActiveList+0x9a>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003d2c:	4290      	cmp	r0, r2
 8003d2e:	eb71 0303 	sbcs.w	r3, r1, r3
 8003d32:	d20a      	bcs.n	8003d4a <prvInsertTimerInActiveList+0x8a>
 8003d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003d3c:	4290      	cmp	r0, r2
 8003d3e:	eb71 0303 	sbcs.w	r3, r1, r3
 8003d42:	d302      	bcc.n	8003d4a <prvInsertTimerInActiveList+0x8a>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e007      	b.n	8003d5a <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d4a:	4b07      	ldr	r3, [pc, #28]	@ (8003d68 <prvInsertTimerInActiveList+0xa8>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3308      	adds	r3, #8
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f7fe f8bd 	bl	8001ed4 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d5a:	697b      	ldr	r3, [r7, #20]
    }
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bdb0      	pop	{r4, r5, r7, pc}
 8003d64:	200006b4 	.word	0x200006b4
 8003d68:	200006b0 	.word	0x200006b0

08003d6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d70:	b092      	sub	sp, #72	@ 0x48
 8003d72:	af04      	add	r7, sp, #16
        DaemonTaskMessage_t xMessage = { 0 };
 8003d74:	f107 0308 	add.w	r3, r7, #8
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	611a      	str	r2, [r3, #16]
 8003d84:	615a      	str	r2, [r3, #20]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003d86:	e0d0      	b.n	8003f2a <prvProcessReceivedCommands+0x1be>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f2c0 80cd 	blt.w	8003f2a <prvProcessReceivedCommands+0x1be>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	637b      	str	r3, [r7, #52]	@ 0x34

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <prvProcessReceivedCommands+0x3a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9e:	3308      	adds	r3, #8
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe f8dc 	bl	8001f5e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff61 	bl	8003c70 <prvSampleTimeNow>
 8003dae:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

                switch( xMessage.xMessageID )
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	f200 80b4 	bhi.w	8003f24 <prvProcessReceivedCommands+0x1b8>
 8003dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc4 <prvProcessReceivedCommands+0x58>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003de9 	.word	0x08003de9
 8003dc8:	08003de9 	.word	0x08003de9
 8003dcc:	08003e7b 	.word	0x08003e7b
 8003dd0:	08003e8f 	.word	0x08003e8f
 8003dd4:	08003efb 	.word	0x08003efb
 8003dd8:	08003de9 	.word	0x08003de9
 8003ddc:	08003de9 	.word	0x08003de9
 8003de0:	08003e7b 	.word	0x08003e7b
 8003de4:	08003e8f 	.word	0x08003e8f
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e04:	1884      	adds	r4, r0, r2
 8003e06:	eb41 0503 	adc.w	r5, r1, r3
 8003e0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e16:	e9cd 2300 	strd	r2, r3, [sp]
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e20:	f7ff ff4e 	bl	8003cc0 <prvInsertTimerInActiveList>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d07e      	beq.n	8003f28 <prvProcessReceivedCommands+0x1bc>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d012      	beq.n	8003e5e <prvProcessReceivedCommands+0xf2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003e38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e42:	eb10 0802 	adds.w	r8, r0, r2
 8003e46:	eb41 0903 	adc.w	r9, r1, r3
 8003e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e4e:	e9cd 2300 	strd	r2, r3, [sp]
 8003e52:	4642      	mov	r2, r8
 8003e54:	464b      	mov	r3, r9
 8003e56:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e58:	f7ff fe00 	bl	8003a5c <prvReloadTimer>
 8003e5c:	e008      	b.n	8003e70 <prvProcessReceivedCommands+0x104>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e76:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003e78:	e056      	b.n	8003f28 <prvProcessReceivedCommands+0x1bc>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 8003e8c:	e04d      	b.n	8003f2a <prvProcessReceivedCommands+0x1be>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ea0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ea4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ea6:	e9c1 2308 	strd	r2, r3, [r1, #32]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	d10b      	bne.n	8003ecc <prvProcessReceivedCommands+0x160>
    __asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ece:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ed6:	eb10 0a02 	adds.w	sl, r0, r2
 8003eda:	eb41 0b03 	adc.w	fp, r1, r3
 8003ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ee2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003eea:	e9cd 2300 	strd	r2, r3, [sp]
 8003eee:	4652      	mov	r2, sl
 8003ef0:	465b      	mov	r3, fp
 8003ef2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ef4:	f7ff fee4 	bl	8003cc0 <prvInsertTimerInActiveList>
                        break;
 8003ef8:	e017      	b.n	8003f2a <prvProcessReceivedCommands+0x1be>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <prvProcessReceivedCommands+0x1a4>
                            {
                                vPortFree( pxTimer );
 8003f08:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f0a:	f000 fcd3 	bl	80048b4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f0e:	e00c      	b.n	8003f2a <prvProcessReceivedCommands+0x1be>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 8003f22:	e002      	b.n	8003f2a <prvProcessReceivedCommands+0x1be>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003f24:	bf00      	nop
 8003f26:	e000      	b.n	8003f2a <prvProcessReceivedCommands+0x1be>
                        break;
 8003f28:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f54 <prvProcessReceivedCommands+0x1e8>)
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	f107 0108 	add.w	r1, r7, #8
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	f7fe f95f 	bl	80021fc <xQueueReceive>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f47f af21 	bne.w	8003d88 <prvProcessReceivedCommands+0x1c>
                }
            }
        }
    }
 8003f46:	bf00      	nop
 8003f48:	bf00      	nop
 8003f4a:	3738      	adds	r7, #56	@ 0x38
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f52:	bf00      	nop
 8003f54:	200006b8 	.word	0x200006b8

08003f58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f5e:	e00e      	b.n	8003f7e <prvSwitchTimerLists+0x26>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f60:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <prvSwitchTimerLists+0x4c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	e9c7 2300 	strd	r2, r3, [r7]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003f6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f7a:	f7ff fda5 	bl	8003ac8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f7e:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <prvSwitchTimerLists+0x4c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1eb      	bne.n	8003f60 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003f88:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <prvSwitchTimerLists+0x4c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f8e:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <prvSwitchTimerLists+0x50>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a04      	ldr	r2, [pc, #16]	@ (8003fa4 <prvSwitchTimerLists+0x4c>)
 8003f94:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f96:	4a04      	ldr	r2, [pc, #16]	@ (8003fa8 <prvSwitchTimerLists+0x50>)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6013      	str	r3, [r2, #0]
    }
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200006b0 	.word	0x200006b0
 8003fa8:	200006b4 	.word	0x200006b4

08003fac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003fb2:	f000 fa1d 	bl	80043f0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003fb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <prvCheckForValidListAndQueue+0x4c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <prvCheckForValidListAndQueue+0x40>
            {
                vListInitialise( &xActiveTimerList1 );
 8003fbe:	480f      	ldr	r0, [pc, #60]	@ (8003ffc <prvCheckForValidListAndQueue+0x50>)
 8003fc0:	f7fd ff54 	bl	8001e6c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003fc4:	480e      	ldr	r0, [pc, #56]	@ (8004000 <prvCheckForValidListAndQueue+0x54>)
 8003fc6:	f7fd ff51 	bl	8001e6c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003fca:	4b0e      	ldr	r3, [pc, #56]	@ (8004004 <prvCheckForValidListAndQueue+0x58>)
 8003fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8003ffc <prvCheckForValidListAndQueue+0x50>)
 8003fce:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <prvCheckForValidListAndQueue+0x5c>)
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8004000 <prvCheckForValidListAndQueue+0x54>)
 8003fd4:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	4b0c      	ldr	r3, [pc, #48]	@ (800400c <prvCheckForValidListAndQueue+0x60>)
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8004010 <prvCheckForValidListAndQueue+0x64>)
 8003fde:	2118      	movs	r1, #24
 8003fe0:	200a      	movs	r0, #10
 8003fe2:	f7fe f881 	bl	80020e8 <xQueueGenericCreateStatic>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4a03      	ldr	r2, [pc, #12]	@ (8003ff8 <prvCheckForValidListAndQueue+0x4c>)
 8003fea:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fec:	f000 fa32 	bl	8004454 <vPortExitCritical>
    }
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200006b8 	.word	0x200006b8
 8003ffc:	20000680 	.word	0x20000680
 8004000:	20000698 	.word	0x20000698
 8004004:	200006b0 	.word	0x200006b0
 8004008:	200006b4 	.word	0x200006b4
 800400c:	200007b8 	.word	0x200007b8
 8004010:	200006c8 	.word	0x200006c8

08004014 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3b04      	subs	r3, #4
 8004024:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800402c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3b04      	subs	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b04      	subs	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004044:	4a0c      	ldr	r2, [pc, #48]	@ (8004078 <pxPortInitialiseStack+0x64>)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3b14      	subs	r3, #20
 800404e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b04      	subs	r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f06f 0202 	mvn.w	r2, #2
 8004062:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3b20      	subs	r3, #32
 8004068:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800406a:	68fb      	ldr	r3, [r7, #12]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	0800407d 	.word	0x0800407d

0800407c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <prvTaskExitError+0x58>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800408e:	d00b      	beq.n	80040a8 <prvTaskExitError+0x2c>
    __asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <prvTaskExitError+0x28>
    __asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	60bb      	str	r3, [r7, #8]
}
 80040ba:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040bc:	bf00      	nop
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0fc      	beq.n	80040be <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	2000000c 	.word	0x2000000c
	...

080040e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040e0:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <pxCurrentTCBConst2>)
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	6808      	ldr	r0, [r1, #0]
 80040e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ea:	f380 8809 	msr	PSP, r0
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8811 	msr	BASEPRI, r0
 80040fa:	4770      	bx	lr
 80040fc:	f3af 8000 	nop.w

08004100 <pxCurrentTCBConst2>:
 8004100:	20000078 	.word	0x20000078
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop

08004108 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004108:	4808      	ldr	r0, [pc, #32]	@ (800412c <prvPortStartFirstTask+0x24>)
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	6800      	ldr	r0, [r0, #0]
 800410e:	f380 8808 	msr	MSP, r0
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8814 	msr	CONTROL, r0
 800411a:	b662      	cpsie	i
 800411c:	b661      	cpsie	f
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	df00      	svc	0
 8004128:	bf00      	nop
 800412a:	0000      	.short	0x0000
 800412c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop

08004134 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08c      	sub	sp, #48	@ 0x30
 8004138:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800413a:	4b69      	ldr	r3, [pc, #420]	@ (80042e0 <xPortStartScheduler+0x1ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a69      	ldr	r2, [pc, #420]	@ (80042e4 <xPortStartScheduler+0x1b0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10b      	bne.n	800415c <xPortStartScheduler+0x28>
    __asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	623b      	str	r3, [r7, #32]
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	e7fd      	b.n	8004158 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800415c:	4b60      	ldr	r3, [pc, #384]	@ (80042e0 <xPortStartScheduler+0x1ac>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a61      	ldr	r2, [pc, #388]	@ (80042e8 <xPortStartScheduler+0x1b4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10b      	bne.n	800417e <xPortStartScheduler+0x4a>
    __asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	e7fd      	b.n	800417a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800417e:	4b5b      	ldr	r3, [pc, #364]	@ (80042ec <xPortStartScheduler+0x1b8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004186:	332c      	adds	r3, #44	@ 0x2c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a59      	ldr	r2, [pc, #356]	@ (80042f0 <xPortStartScheduler+0x1bc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00b      	beq.n	80041a8 <xPortStartScheduler+0x74>
    __asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	61fb      	str	r3, [r7, #28]
}
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	e7fd      	b.n	80041a4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80041a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041aa:	3338      	adds	r3, #56	@ 0x38
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a51      	ldr	r2, [pc, #324]	@ (80042f4 <xPortStartScheduler+0x1c0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00b      	beq.n	80041cc <xPortStartScheduler+0x98>
    __asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	61bb      	str	r3, [r7, #24]
}
 80041c6:	bf00      	nop
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041d0:	4b49      	ldr	r3, [pc, #292]	@ (80042f8 <xPortStartScheduler+0x1c4>)
 80041d2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80041d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041de:	22ff      	movs	r2, #255	@ 0xff
 80041e0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	4b41      	ldr	r3, [pc, #260]	@ (80042fc <xPortStartScheduler+0x1c8>)
 80041f6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80041f8:	4b40      	ldr	r3, [pc, #256]	@ (80042fc <xPortStartScheduler+0x1c8>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <xPortStartScheduler+0xe4>
    __asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	617b      	str	r3, [r7, #20]
}
 8004212:	bf00      	nop
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004222:	2b00      	cmp	r3, #0
 8004224:	d013      	beq.n	800424e <xPortStartScheduler+0x11a>
    __asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	613b      	str	r3, [r7, #16]
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	e7fd      	b.n	800423a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3301      	adds	r3, #1
 8004242:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	b2db      	uxtb	r3, r3
 800424c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004256:	2b80      	cmp	r3, #128	@ 0x80
 8004258:	d0f1      	beq.n	800423e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d103      	bne.n	8004268 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004260:	4b27      	ldr	r3, [pc, #156]	@ (8004300 <xPortStartScheduler+0x1cc>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e004      	b.n	8004272 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f1c3 0307 	rsb	r3, r3, #7
 800426e:	4a24      	ldr	r2, [pc, #144]	@ (8004300 <xPortStartScheduler+0x1cc>)
 8004270:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004272:	4b23      	ldr	r3, [pc, #140]	@ (8004300 <xPortStartScheduler+0x1cc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	4a21      	ldr	r2, [pc, #132]	@ (8004300 <xPortStartScheduler+0x1cc>)
 800427a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800427c:	4b20      	ldr	r3, [pc, #128]	@ (8004300 <xPortStartScheduler+0x1cc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004284:	4a1e      	ldr	r2, [pc, #120]	@ (8004300 <xPortStartScheduler+0x1cc>)
 8004286:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	b2da      	uxtb	r2, r3
 800428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004290:	4b1c      	ldr	r3, [pc, #112]	@ (8004304 <xPortStartScheduler+0x1d0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1b      	ldr	r2, [pc, #108]	@ (8004304 <xPortStartScheduler+0x1d0>)
 8004296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800429a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800429c:	4b19      	ldr	r3, [pc, #100]	@ (8004304 <xPortStartScheduler+0x1d0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a18      	ldr	r2, [pc, #96]	@ (8004304 <xPortStartScheduler+0x1d0>)
 80042a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042a6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80042a8:	4b17      	ldr	r3, [pc, #92]	@ (8004308 <xPortStartScheduler+0x1d4>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042ae:	f000 f95d 	bl	800456c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042b2:	4b16      	ldr	r3, [pc, #88]	@ (800430c <xPortStartScheduler+0x1d8>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80042b8:	f000 f97c 	bl	80045b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042bc:	4b14      	ldr	r3, [pc, #80]	@ (8004310 <xPortStartScheduler+0x1dc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a13      	ldr	r2, [pc, #76]	@ (8004310 <xPortStartScheduler+0x1dc>)
 80042c2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80042c6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80042c8:	f7ff ff1e 	bl	8004108 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042cc:	f7fe ff36 	bl	800313c <vTaskSwitchContext>
    prvTaskExitError();
 80042d0:	f7ff fed4 	bl	800407c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3730      	adds	r7, #48	@ 0x30
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	e000ed00 	.word	0xe000ed00
 80042e4:	410fc271 	.word	0x410fc271
 80042e8:	410fc270 	.word	0x410fc270
 80042ec:	e000ed08 	.word	0xe000ed08
 80042f0:	080040e1 	.word	0x080040e1
 80042f4:	080044b1 	.word	0x080044b1
 80042f8:	e000e400 	.word	0xe000e400
 80042fc:	20000808 	.word	0x20000808
 8004300:	2000080c 	.word	0x2000080c
 8004304:	e000ed20 	.word	0xe000ed20
 8004308:	e000ed1c 	.word	0xe000ed1c
 800430c:	2000000c 	.word	0x2000000c
 8004310:	e000ef34 	.word	0xe000ef34

08004314 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800431a:	4b2f      	ldr	r3, [pc, #188]	@ (80043d8 <vInitPrioGroupValue+0xc4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2f      	ldr	r2, [pc, #188]	@ (80043dc <vInitPrioGroupValue+0xc8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d10b      	bne.n	800433c <vInitPrioGroupValue+0x28>
    __asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	60fb      	str	r3, [r7, #12]
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800433c:	4b26      	ldr	r3, [pc, #152]	@ (80043d8 <vInitPrioGroupValue+0xc4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a27      	ldr	r2, [pc, #156]	@ (80043e0 <vInitPrioGroupValue+0xcc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d10b      	bne.n	800435e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	613b      	str	r3, [r7, #16]
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	e7fd      	b.n	800435a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800435e:	4b21      	ldr	r3, [pc, #132]	@ (80043e4 <vInitPrioGroupValue+0xd0>)
 8004360:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	22ff      	movs	r2, #255	@ 0xff
 800436e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004380:	b2da      	uxtb	r2, r3
 8004382:	4b19      	ldr	r3, [pc, #100]	@ (80043e8 <vInitPrioGroupValue+0xd4>)
 8004384:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004386:	4b19      	ldr	r3, [pc, #100]	@ (80043ec <vInitPrioGroupValue+0xd8>)
 8004388:	2207      	movs	r2, #7
 800438a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800438c:	e009      	b.n	80043a2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800438e:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <vInitPrioGroupValue+0xd8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3b01      	subs	r3, #1
 8004394:	4a15      	ldr	r2, [pc, #84]	@ (80043ec <vInitPrioGroupValue+0xd8>)
 8004396:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043aa:	2b80      	cmp	r3, #128	@ 0x80
 80043ac:	d0ef      	beq.n	800438e <vInitPrioGroupValue+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043ae:	4b0f      	ldr	r3, [pc, #60]	@ (80043ec <vInitPrioGroupValue+0xd8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	4a0d      	ldr	r2, [pc, #52]	@ (80043ec <vInitPrioGroupValue+0xd8>)
 80043b6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043b8:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <vInitPrioGroupValue+0xd8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043c0:	4a0a      	ldr	r2, [pc, #40]	@ (80043ec <vInitPrioGroupValue+0xd8>)
 80043c2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00
 80043dc:	410fc271 	.word	0x410fc271
 80043e0:	410fc270 	.word	0x410fc270
 80043e4:	e000e400 	.word	0xe000e400
 80043e8:	20000808 	.word	0x20000808
 80043ec:	2000080c 	.word	0x2000080c

080043f0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
    __asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	607b      	str	r3, [r7, #4]
}
 8004408:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800440a:	4b10      	ldr	r3, [pc, #64]	@ (800444c <vPortEnterCritical+0x5c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3301      	adds	r3, #1
 8004410:	4a0e      	ldr	r2, [pc, #56]	@ (800444c <vPortEnterCritical+0x5c>)
 8004412:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004414:	4b0d      	ldr	r3, [pc, #52]	@ (800444c <vPortEnterCritical+0x5c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d110      	bne.n	800443e <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800441c:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <vPortEnterCritical+0x60>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <vPortEnterCritical+0x4e>
    __asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	603b      	str	r3, [r7, #0]
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <vPortEnterCritical+0x4a>
    }
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	2000000c 	.word	0x2000000c
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800445a:	4b12      	ldr	r3, [pc, #72]	@ (80044a4 <vPortExitCritical+0x50>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10b      	bne.n	800447a <vPortExitCritical+0x26>
    __asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	607b      	str	r3, [r7, #4]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800447a:	4b0a      	ldr	r3, [pc, #40]	@ (80044a4 <vPortExitCritical+0x50>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3b01      	subs	r3, #1
 8004480:	4a08      	ldr	r2, [pc, #32]	@ (80044a4 <vPortExitCritical+0x50>)
 8004482:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004484:	4b07      	ldr	r3, [pc, #28]	@ (80044a4 <vPortExitCritical+0x50>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <vPortExitCritical+0x44>
 800448c:	2300      	movs	r3, #0
 800448e:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	f383 8811 	msr	BASEPRI, r3
}
 8004496:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	2000000c 	.word	0x2000000c
	...

080044b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f01e 0f10 	tst.w	lr, #16
 80044c0:	bf08      	it	eq
 80044c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	6010      	str	r0, [r2, #0]
 80044cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80044d4:	f380 8811 	msr	BASEPRI, r0
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f7fe fe2c 	bl	800313c <vTaskSwitchContext>
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f380 8811 	msr	BASEPRI, r0
 80044ec:	bc09      	pop	{r0, r3}
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	6808      	ldr	r0, [r1, #0]
 80044f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f6:	f01e 0f10 	tst.w	lr, #16
 80044fa:	bf08      	it	eq
 80044fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004500:	f380 8809 	msr	PSP, r0
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst>:
 8004510:	20000078 	.word	0x20000078
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
    __asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
}
 8004530:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004532:	f002 f843 	bl	80065bc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004536:	f7fe fcd1 	bl	8002edc <xTaskIncrementTick>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d006      	beq.n	800454e <xPortSysTickHandler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004540:	f002 f89a 	bl	8006678 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004544:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <xPortSysTickHandler+0x50>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e001      	b.n	8004552 <xPortSysTickHandler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800454e:	f002 f877 	bl	8006640 <SEGGER_SYSVIEW_RecordExitISR>
 8004552:	2300      	movs	r3, #0
 8004554:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f383 8811 	msr	BASEPRI, r3
}
 800455c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004570:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <vPortSetupTimerInterrupt+0x38>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800457c:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <vPortSetupTimerInterrupt+0x3c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0a      	ldr	r2, [pc, #40]	@ (80045ac <vPortSetupTimerInterrupt+0x40>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	4a09      	ldr	r2, [pc, #36]	@ (80045b0 <vPortSetupTimerInterrupt+0x44>)
 800458a:	3b01      	subs	r3, #1
 800458c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800458e:	4b04      	ldr	r3, [pc, #16]	@ (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000e010 	.word	0xe000e010
 80045a4:	e000e018 	.word	0xe000e018
 80045a8:	20000000 	.word	0x20000000
 80045ac:	51eb851f 	.word	0x51eb851f
 80045b0:	e000e014 	.word	0xe000e014

080045b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80045b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80045c4 <vPortEnableVFP+0x10>
 80045b8:	6801      	ldr	r1, [r0, #0]
 80045ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80045be:	6001      	str	r1, [r0, #0]
 80045c0:	4770      	bx	lr
 80045c2:	0000      	.short	0x0000
 80045c4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop

080045cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045d2:	f3ef 8305 	mrs	r3, IPSR
 80045d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	d915      	bls.n	800460a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045de:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <vPortValidateInterruptPriority+0x74>)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045e8:	4b16      	ldr	r3, [pc, #88]	@ (8004644 <vPortValidateInterruptPriority+0x78>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	7afa      	ldrb	r2, [r7, #11]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d20b      	bcs.n	800460a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	607b      	str	r3, [r7, #4]
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800460a:	4b0f      	ldr	r3, [pc, #60]	@ (8004648 <vPortValidateInterruptPriority+0x7c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004612:	4b0e      	ldr	r3, [pc, #56]	@ (800464c <vPortValidateInterruptPriority+0x80>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d90b      	bls.n	8004632 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	603b      	str	r3, [r7, #0]
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	e7fd      	b.n	800462e <vPortValidateInterruptPriority+0x62>
    }
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	e000e3f0 	.word	0xe000e3f0
 8004644:	20000808 	.word	0x20000808
 8004648:	e000ed0c 	.word	0xe000ed0c
 800464c:	2000080c 	.word	0x2000080c

08004650 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	@ 0x38
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d022      	beq.n	80046a8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004662:	2308      	movs	r3, #8
 8004664:	43db      	mvns	r3, r3
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d81b      	bhi.n	80046a4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800466c:	2208      	movs	r2, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	2b00      	cmp	r3, #0
 800467c:	d014      	beq.n	80046a8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	f1c3 0308 	rsb	r3, r3, #8
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	43db      	mvns	r3, r3
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d804      	bhi.n	800469e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	4413      	add	r3, r2
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	e004      	b.n	80046a8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	e001      	b.n	80046a8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80046a8:	f7fe faa4 	bl	8002bf4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80046ac:	4b7a      	ldr	r3, [pc, #488]	@ (8004898 <pvPortMalloc+0x248>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80046b4:	f000 f984 	bl	80049c0 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f2c0 80d3 	blt.w	8004866 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80cf 	beq.w	8004866 <pvPortMalloc+0x216>
 80046c8:	4b74      	ldr	r3, [pc, #464]	@ (800489c <pvPortMalloc+0x24c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	f200 80c9 	bhi.w	8004866 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80046d4:	4b72      	ldr	r3, [pc, #456]	@ (80048a0 <pvPortMalloc+0x250>)
 80046d6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80046d8:	4b71      	ldr	r3, [pc, #452]	@ (80048a0 <pvPortMalloc+0x250>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80046de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e0:	4a70      	ldr	r2, [pc, #448]	@ (80048a4 <pvPortMalloc+0x254>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d305      	bcc.n	80046f2 <pvPortMalloc+0xa2>
 80046e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e8:	4a6f      	ldr	r2, [pc, #444]	@ (80048a8 <pvPortMalloc+0x258>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d801      	bhi.n	80046f2 <pvPortMalloc+0xa2>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <pvPortMalloc+0xa4>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d129      	bne.n	800474c <pvPortMalloc+0xfc>
    __asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	623b      	str	r3, [r7, #32]
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004712:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800471a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471c:	4a61      	ldr	r2, [pc, #388]	@ (80048a4 <pvPortMalloc+0x254>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d305      	bcc.n	800472e <pvPortMalloc+0xde>
 8004722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004724:	4a60      	ldr	r2, [pc, #384]	@ (80048a8 <pvPortMalloc+0x258>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d801      	bhi.n	800472e <pvPortMalloc+0xde>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <pvPortMalloc+0xe0>
 800472e:	2300      	movs	r3, #0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <pvPortMalloc+0xfc>
    __asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	61fb      	str	r3, [r7, #28]
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800474c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	429a      	cmp	r2, r3
 8004754:	d903      	bls.n	800475e <pvPortMalloc+0x10e>
 8004756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1d8      	bne.n	8004710 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800475e:	4b4e      	ldr	r3, [pc, #312]	@ (8004898 <pvPortMalloc+0x248>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004764:	429a      	cmp	r2, r3
 8004766:	d07e      	beq.n	8004866 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2208      	movs	r2, #8
 800476e:	4413      	add	r3, r2
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004774:	4a4b      	ldr	r2, [pc, #300]	@ (80048a4 <pvPortMalloc+0x254>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d305      	bcc.n	8004786 <pvPortMalloc+0x136>
 800477a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477c:	4a4a      	ldr	r2, [pc, #296]	@ (80048a8 <pvPortMalloc+0x258>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d801      	bhi.n	8004786 <pvPortMalloc+0x136>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <pvPortMalloc+0x138>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <pvPortMalloc+0x154>
    __asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	61bb      	str	r3, [r7, #24]
}
 800479e:	bf00      	nop
 80047a0:	bf00      	nop
 80047a2:	e7fd      	b.n	80047a0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d90b      	bls.n	80047ce <pvPortMalloc+0x17e>
    __asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	617b      	str	r3, [r7, #20]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	1ad2      	subs	r2, r2, r3
 80047d6:	2308      	movs	r3, #8
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	429a      	cmp	r2, r3
 80047dc:	d924      	bls.n	8004828 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4413      	add	r3, r2
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <pvPortMalloc+0x1b8>
    __asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	613b      	str	r3, [r7, #16]
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004826:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004828:	4b1c      	ldr	r3, [pc, #112]	@ (800489c <pvPortMalloc+0x24c>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	4a1a      	ldr	r2, [pc, #104]	@ (800489c <pvPortMalloc+0x24c>)
 8004834:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004836:	4b19      	ldr	r3, [pc, #100]	@ (800489c <pvPortMalloc+0x24c>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b1c      	ldr	r3, [pc, #112]	@ (80048ac <pvPortMalloc+0x25c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d203      	bcs.n	800484a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004842:	4b16      	ldr	r3, [pc, #88]	@ (800489c <pvPortMalloc+0x24c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a19      	ldr	r2, [pc, #100]	@ (80048ac <pvPortMalloc+0x25c>)
 8004848:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800484a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004854:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800485c:	4b14      	ldr	r3, [pc, #80]	@ (80048b0 <pvPortMalloc+0x260>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	4a13      	ldr	r2, [pc, #76]	@ (80048b0 <pvPortMalloc+0x260>)
 8004864:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004866:	f7fe f9d3 	bl	8002c10 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800486a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <pvPortMalloc+0x23c>
    __asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	60fb      	str	r3, [r7, #12]
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <pvPortMalloc+0x238>
    return pvReturn;
 800488c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800488e:	4618      	mov	r0, r3
 8004890:	3738      	adds	r7, #56	@ 0x38
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20003018 	.word	0x20003018
 800489c:	2000301c 	.word	0x2000301c
 80048a0:	20003010 	.word	0x20003010
 80048a4:	20000810 	.word	0x20000810
 80048a8:	2000300f 	.word	0x2000300f
 80048ac:	20003020 	.word	0x20003020
 80048b0:	20003024 	.word	0x20003024

080048b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d070      	beq.n	80049a8 <vPortFree+0xf4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80048c6:	2308      	movs	r3, #8
 80048c8:	425b      	negs	r3, r3
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	4a36      	ldr	r2, [pc, #216]	@ (80049b0 <vPortFree+0xfc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d305      	bcc.n	80048e8 <vPortFree+0x34>
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	4a35      	ldr	r2, [pc, #212]	@ (80049b4 <vPortFree+0x100>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d801      	bhi.n	80048e8 <vPortFree+0x34>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <vPortFree+0x36>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <vPortFree+0x52>
    __asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	617b      	str	r3, [r7, #20]
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	e7fd      	b.n	8004902 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	db0b      	blt.n	8004926 <vPortFree+0x72>
    __asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	613b      	str	r3, [r7, #16]
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	e7fd      	b.n	8004922 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <vPortFree+0x92>
    __asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	60fb      	str	r3, [r7, #12]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	da2c      	bge.n	80049a8 <vPortFree+0xf4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d128      	bne.n	80049a8 <vPortFree+0xf4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	605a      	str	r2, [r3, #4]
                #if ( configHEAP_CLEAR_MEMORY_ON_FREE == 1 )
                {
                    /* Check for underflow as this can occur if xBlockSize is
                     * overwritten in a heap block. */
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2208      	movs	r2, #8
 8004968:	4293      	cmp	r3, r2
 800496a:	d30a      	bcc.n	8004982 <vPortFree+0xce>
                    {
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
 800496c:	2208      	movs	r2, #8
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	1898      	adds	r0, r3, r2
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2208      	movs	r2, #8
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	461a      	mov	r2, r3
 800497c:	2100      	movs	r1, #0
 800497e:	f002 f9e3 	bl	8006d48 <memset>
                    }
                }
                #endif

                vTaskSuspendAll();
 8004982:	f7fe f937 	bl	8002bf4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <vPortFree+0x104>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4413      	add	r3, r2
 8004990:	4a09      	ldr	r2, [pc, #36]	@ (80049b8 <vPortFree+0x104>)
 8004992:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004994:	69b8      	ldr	r0, [r7, #24]
 8004996:	f000 f86d 	bl	8004a74 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800499a:	4b08      	ldr	r3, [pc, #32]	@ (80049bc <vPortFree+0x108>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3301      	adds	r3, #1
 80049a0:	4a06      	ldr	r2, [pc, #24]	@ (80049bc <vPortFree+0x108>)
 80049a2:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80049a4:	f7fe f934 	bl	8002c10 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80049a8:	bf00      	nop
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000810 	.word	0x20000810
 80049b4:	2000300f 	.word	0x2000300f
 80049b8:	2000301c 	.word	0x2000301c
 80049bc:	20003028 	.word	0x20003028

080049c0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049c6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80049ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80049cc:	4b24      	ldr	r3, [pc, #144]	@ (8004a60 <prvHeapInit+0xa0>)
 80049ce:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00c      	beq.n	80049f4 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3307      	adds	r3, #7
 80049de:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0307 	bic.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004a60 <prvHeapInit+0xa0>)
 80049f0:	4413      	add	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a64 <prvHeapInit+0xa4>)
 80049f8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80049fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004a64 <prvHeapInit+0xa4>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4413      	add	r3, r2
 8004a06:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004a08:	2208      	movs	r2, #8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f023 0307 	bic.w	r3, r3, #7
 8004a16:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a13      	ldr	r2, [pc, #76]	@ (8004a68 <prvHeapInit+0xa8>)
 8004a1c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a1e:	4b12      	ldr	r3, [pc, #72]	@ (8004a68 <prvHeapInit+0xa8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2200      	movs	r2, #0
 8004a24:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004a26:	4b10      	ldr	r3, [pc, #64]	@ (8004a68 <prvHeapInit+0xa8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	1ad2      	subs	r2, r2, r3
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <prvHeapInit+0xa8>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4a08      	ldr	r2, [pc, #32]	@ (8004a6c <prvHeapInit+0xac>)
 8004a4a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4a07      	ldr	r2, [pc, #28]	@ (8004a70 <prvHeapInit+0xb0>)
 8004a52:	6013      	str	r3, [r2, #0]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	20000810 	.word	0x20000810
 8004a64:	20003010 	.word	0x20003010
 8004a68:	20003018 	.word	0x20003018
 8004a6c:	20003020 	.word	0x20003020
 8004a70:	2000301c 	.word	0x2000301c

08004a74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004a7c:	4b36      	ldr	r3, [pc, #216]	@ (8004b58 <prvInsertBlockIntoFreeList+0xe4>)
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e002      	b.n	8004a88 <prvInsertBlockIntoFreeList+0x14>
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d8f7      	bhi.n	8004a82 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	4a30      	ldr	r2, [pc, #192]	@ (8004b58 <prvInsertBlockIntoFreeList+0xe4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d018      	beq.n	8004acc <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8004b5c <prvInsertBlockIntoFreeList+0xe8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d305      	bcc.n	8004aae <prvInsertBlockIntoFreeList+0x3a>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b60 <prvInsertBlockIntoFreeList+0xec>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d801      	bhi.n	8004aae <prvInsertBlockIntoFreeList+0x3a>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <prvInsertBlockIntoFreeList+0x3c>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60fb      	str	r3, [r7, #12]
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d108      	bne.n	8004af0 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	441a      	add	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	441a      	add	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d118      	bne.n	8004b36 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4b16      	ldr	r3, [pc, #88]	@ (8004b64 <prvInsertBlockIntoFreeList+0xf0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d00d      	beq.n	8004b2c <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	441a      	add	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e008      	b.n	8004b3e <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b64 <prvInsertBlockIntoFreeList+0xf0>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	e003      	b.n	8004b3e <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d002      	beq.n	8004b4c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	20003010 	.word	0x20003010
 8004b5c:	20000810 	.word	0x20000810
 8004b60:	2000300f 	.word	0x2000300f
 8004b64:	20003018 	.word	0x20003018

08004b68 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b6c:	4803      	ldr	r0, [pc, #12]	@ (8004b7c <_cbSendSystemDesc+0x14>)
 8004b6e:	f001 fccf 	bl	8006510 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b72:	4803      	ldr	r0, [pc, #12]	@ (8004b80 <_cbSendSystemDesc+0x18>)
 8004b74:	f001 fccc 	bl	8006510 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b78:	bf00      	nop
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08006e74 	.word	0x08006e74
 8004b80:	08006eb0 	.word	0x08006eb0

08004b84 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b88:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b92:	4a06      	ldr	r2, [pc, #24]	@ (8004bac <SEGGER_SYSVIEW_Conf+0x28>)
 8004b94:	f001 f942 	bl	8005e1c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b98:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004b9c:	f001 f982 	bl	8005ea4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ba0:	bf00      	nop
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20000000 	.word	0x20000000
 8004ba8:	08004b69 	.word	0x08004b69
 8004bac:	08006f50 	.word	0x08006f50

08004bb0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	e033      	b.n	8004c24 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004bbc:	491e      	ldr	r1, [pc, #120]	@ (8004c38 <_cbSendTaskList+0x88>)
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	491a      	ldr	r1, [pc, #104]	@ (8004c38 <_cbSendTaskList+0x88>)
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	3304      	adds	r3, #4
 8004bdc:	6819      	ldr	r1, [r3, #0]
 8004bde:	4c16      	ldr	r4, [pc, #88]	@ (8004c38 <_cbSendTaskList+0x88>)
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4423      	add	r3, r4
 8004bec:	3308      	adds	r3, #8
 8004bee:	681c      	ldr	r4, [r3, #0]
 8004bf0:	4d11      	ldr	r5, [pc, #68]	@ (8004c38 <_cbSendTaskList+0x88>)
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	442b      	add	r3, r5
 8004bfe:	330c      	adds	r3, #12
 8004c00:	681d      	ldr	r5, [r3, #0]
 8004c02:	4e0d      	ldr	r6, [pc, #52]	@ (8004c38 <_cbSendTaskList+0x88>)
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4433      	add	r3, r6
 8004c10:	3310      	adds	r3, #16
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	462b      	mov	r3, r5
 8004c18:	4622      	mov	r2, r4
 8004c1a:	f000 f8d7 	bl	8004dcc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3301      	adds	r3, #1
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <_cbSendTaskList+0x8c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d3c6      	bcc.n	8004bbc <_cbSendTaskList+0xc>
  }
}
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c38:	2000302c 	.word	0x2000302c
 8004c3c:	200030cc 	.word	0x200030cc

08004c40 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c48:	f7fe f91c 	bl	8002e84 <xTaskGetTickCountFromISR>
 8004c4c:	e9c7 0104 	strd	r0, r1, [r7, #16]
  Time *= portTICK_PERIOD_MS;
 8004c50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c54:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004c58:	f04f 0000 	mov.w	r0, #0
 8004c5c:	f04f 0100 	mov.w	r1, #0
 8004c60:	0099      	lsls	r1, r3, #2
 8004c62:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004c66:	0090      	lsls	r0, r2, #2
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	eb12 0801 	adds.w	r8, r2, r1
 8004c72:	68f9      	ldr	r1, [r7, #12]
 8004c74:	eb43 0901 	adc.w	r9, r3, r1
 8004c78:	eb18 0308 	adds.w	r3, r8, r8
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	eb49 0309 	adc.w	r3, r9, r9
 8004c82:	607b      	str	r3, [r7, #4]
 8004c84:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004c88:	e9c7 8904 	strd	r8, r9, [r7, #16]
  Time *= 1000;
 8004c8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	f04f 0800 	mov.w	r8, #0
 8004c98:	f04f 0900 	mov.w	r9, #0
 8004c9c:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8004ca0:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8004ca4:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8004ca8:	4642      	mov	r2, r8
 8004caa:	464b      	mov	r3, r9
 8004cac:	1a14      	subs	r4, r2, r0
 8004cae:	eb63 0501 	sbc.w	r5, r3, r1
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	00ab      	lsls	r3, r5, #2
 8004cbc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004cc0:	00a2      	lsls	r2, r4, #2
 8004cc2:	4614      	mov	r4, r2
 8004cc4:	461d      	mov	r5, r3
 8004cc6:	eb14 0a00 	adds.w	sl, r4, r0
 8004cca:	eb45 0b01 	adc.w	fp, r5, r1
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce2:	4692      	mov	sl, r2
 8004ce4:	469b      	mov	fp, r3
 8004ce6:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  return Time;
 8004cea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004cfc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004d0a:	2205      	movs	r2, #5
 8004d0c:	492b      	ldr	r1, [pc, #172]	@ (8004dbc <SYSVIEW_AddTask+0xc0>)
 8004d0e:	68b8      	ldr	r0, [r7, #8]
 8004d10:	f002 f80a 	bl	8006d28 <memcmp>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d04b      	beq.n	8004db2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d1a:	4b29      	ldr	r3, [pc, #164]	@ (8004dc0 <SYSVIEW_AddTask+0xc4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b07      	cmp	r3, #7
 8004d20:	d903      	bls.n	8004d2a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d22:	4828      	ldr	r0, [pc, #160]	@ (8004dc4 <SYSVIEW_AddTask+0xc8>)
 8004d24:	f001 ffa4 	bl	8006c70 <SEGGER_SYSVIEW_Warn>
    return;
 8004d28:	e044      	b.n	8004db4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d2a:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <SYSVIEW_AddTask+0xc4>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4926      	ldr	r1, [pc, #152]	@ (8004dc8 <SYSVIEW_AddTask+0xcc>)
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d3e:	4b20      	ldr	r3, [pc, #128]	@ (8004dc0 <SYSVIEW_AddTask+0xc4>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4921      	ldr	r1, [pc, #132]	@ (8004dc8 <SYSVIEW_AddTask+0xcc>)
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	3304      	adds	r3, #4
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d54:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc0 <SYSVIEW_AddTask+0xc4>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	491b      	ldr	r1, [pc, #108]	@ (8004dc8 <SYSVIEW_AddTask+0xcc>)
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	3308      	adds	r3, #8
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d6a:	4b15      	ldr	r3, [pc, #84]	@ (8004dc0 <SYSVIEW_AddTask+0xc4>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4916      	ldr	r1, [pc, #88]	@ (8004dc8 <SYSVIEW_AddTask+0xcc>)
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d80:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc0 <SYSVIEW_AddTask+0xc4>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4910      	ldr	r1, [pc, #64]	@ (8004dc8 <SYSVIEW_AddTask+0xcc>)
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3310      	adds	r3, #16
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d96:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc0 <SYSVIEW_AddTask+0xc4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	4a08      	ldr	r2, [pc, #32]	@ (8004dc0 <SYSVIEW_AddTask+0xc4>)
 8004d9e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f80e 	bl	8004dcc <SYSVIEW_SendTaskInfo>
 8004db0:	e000      	b.n	8004db4 <SYSVIEW_AddTask+0xb8>
    return;
 8004db2:	bf00      	nop

}
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	08006ec0 	.word	0x08006ec0
 8004dc0:	200030cc 	.word	0x200030cc
 8004dc4:	08006ec8 	.word	0x08006ec8
 8004dc8:	2000302c 	.word	0x2000302c

08004dcc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	@ 0x28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004dda:	f107 0310 	add.w	r3, r7, #16
 8004dde:	2218      	movs	r2, #24
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 ffb0 	bl	8006d48 <memset>
  TaskInfo.TaskID     = TaskID;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfa:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004dfc:	f107 0310 	add.w	r3, r7, #16
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 fa8d 	bl	8006320 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004e06:	bf00      	nop
 8004e08:	3728      	adds	r7, #40	@ 0x28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004e16:	4b26      	ldr	r3, [pc, #152]	@ (8004eb0 <_DoInit+0xa0>)
 8004e18:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004e1a:	22a8      	movs	r2, #168	@ 0xa8
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	6838      	ldr	r0, [r7, #0]
 8004e20:	f001 ff92 	bl	8006d48 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2203      	movs	r2, #3
 8004e28:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	4a20      	ldr	r2, [pc, #128]	@ (8004eb4 <_DoInit+0xa4>)
 8004e34:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb8 <_DoInit+0xa8>)
 8004e3a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e42:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2200      	movs	r2, #0
 8004e48:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	4a16      	ldr	r2, [pc, #88]	@ (8004eb4 <_DoInit+0xa4>)
 8004e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	4a17      	ldr	r2, [pc, #92]	@ (8004ebc <_DoInit+0xac>)
 8004e60:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2210      	movs	r2, #16
 8004e66:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2200      	movs	r2, #0
 8004e78:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e7a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e7e:	2300      	movs	r3, #0
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	e00c      	b.n	8004e9e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f1c3 030f 	rsb	r3, r3, #15
 8004e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec0 <_DoInit+0xb0>)
 8004e8c:	5cd1      	ldrb	r1, [r2, r3]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4413      	add	r3, r2
 8004e94:	460a      	mov	r2, r1
 8004e96:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b0f      	cmp	r3, #15
 8004ea2:	d9ef      	bls.n	8004e84 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004ea4:	f3bf 8f5f 	dmb	sy
}
 8004ea8:	bf00      	nop
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	200030d0 	.word	0x200030d0
 8004eb4:	08006f18 	.word	0x08006f18
 8004eb8:	20003178 	.word	0x20003178
 8004ebc:	20003578 	.word	0x20003578
 8004ec0:	08006f58 	.word	0x08006f58

08004ec4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08c      	sub	sp, #48	@ 0x30
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8004fcc <SEGGER_RTT_ReadNoLock+0x108>)
 8004ed2:	623b      	str	r3, [r7, #32]
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b53      	cmp	r3, #83	@ 0x53
 8004edc:	d001      	beq.n	8004ee2 <SEGGER_RTT_ReadNoLock+0x1e>
 8004ede:	f7ff ff97 	bl	8004e10 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4413      	add	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	3360      	adds	r3, #96	@ 0x60
 8004eee:	4a37      	ldr	r2, [pc, #220]	@ (8004fcc <SEGGER_RTT_ReadNoLock+0x108>)
 8004ef0:	4413      	add	r3, r2
 8004ef2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f04:	2300      	movs	r3, #0
 8004f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d92b      	bls.n	8004f68 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	bf28      	it	cs
 8004f22:	4613      	movcs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2c:	4413      	add	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	6939      	ldr	r1, [r7, #16]
 8004f34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f36:	f001 ff33 	bl	8006da0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	4413      	add	r3, r2
 8004f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d101      	bne.n	8004f68 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f64:	2300      	movs	r3, #0
 8004f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4293      	cmp	r3, r2
 8004f76:	bf28      	it	cs
 8004f78:	4613      	movcs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d019      	beq.n	8004fb6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f88:	4413      	add	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	6939      	ldr	r1, [r7, #16]
 8004f90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f92:	f001 ff05 	bl	8006da0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3730      	adds	r7, #48	@ 0x30
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	200030d0 	.word	0x200030d0

08004fd0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004fde:	4b3d      	ldr	r3, [pc, #244]	@ (80050d4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b53      	cmp	r3, #83	@ 0x53
 8004fea:	d001      	beq.n	8004ff0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004fec:	f7ff ff10 	bl	8004e10 <_DoInit>
  SEGGER_RTT_LOCK();
 8004ff0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff4:	f04f 0120 	mov.w	r1, #32
 8004ff8:	f381 8811 	msr	BASEPRI, r1
 8004ffc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ffe:	4b35      	ldr	r3, [pc, #212]	@ (80050d4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005000:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005006:	6939      	ldr	r1, [r7, #16]
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	4613      	mov	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	440b      	add	r3, r1
 8005016:	3304      	adds	r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d008      	beq.n	8005030 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	3301      	adds	r3, #1
 8005022:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	429a      	cmp	r2, r3
 800502c:	dbeb      	blt.n	8005006 <SEGGER_RTT_AllocUpBuffer+0x36>
 800502e:	e000      	b.n	8005032 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005030:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	429a      	cmp	r2, r3
 800503a:	da3f      	bge.n	80050bc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800503c:	6939      	ldr	r1, [r7, #16]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	4613      	mov	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	4413      	add	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	440b      	add	r3, r1
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005050:	6939      	ldr	r1, [r7, #16]
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	4613      	mov	r3, r2
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4413      	add	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	440b      	add	r3, r1
 8005060:	3304      	adds	r3, #4
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005066:	6939      	ldr	r1, [r7, #16]
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	4613      	mov	r3, r2
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	4413      	add	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	440b      	add	r3, r1
 8005074:	3320      	adds	r3, #32
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800507a:	6939      	ldr	r1, [r7, #16]
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	4613      	mov	r3, r2
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	4413      	add	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	440b      	add	r3, r1
 8005088:	3328      	adds	r3, #40	@ 0x28
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800508e:	6939      	ldr	r1, [r7, #16]
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	4613      	mov	r3, r2
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4413      	add	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	440b      	add	r3, r1
 800509c:	3324      	adds	r3, #36	@ 0x24
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80050a2:	6939      	ldr	r1, [r7, #16]
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	4613      	mov	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	440b      	add	r3, r1
 80050b0:	332c      	adds	r3, #44	@ 0x2c
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050b6:	f3bf 8f5f 	dmb	sy
 80050ba:	e002      	b.n	80050c2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80050bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050c0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80050c8:	69fb      	ldr	r3, [r7, #28]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200030d0 	.word	0x200030d0

080050d8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	@ 0x28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80050e6:	4b21      	ldr	r3, [pc, #132]	@ (800516c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80050e8:	623b      	str	r3, [r7, #32]
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b53      	cmp	r3, #83	@ 0x53
 80050f2:	d001      	beq.n	80050f8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80050f4:	f7ff fe8c 	bl	8004e10 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050f8:	4b1c      	ldr	r3, [pc, #112]	@ (800516c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80050fa:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d82c      	bhi.n	800515c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005102:	f3ef 8311 	mrs	r3, BASEPRI
 8005106:	f04f 0120 	mov.w	r1, #32
 800510a:	f381 8811 	msr	BASEPRI, r1
 800510e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4613      	mov	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4413      	add	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	3360      	adds	r3, #96	@ 0x60
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2200      	movs	r2, #0
 800513e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2200      	movs	r2, #0
 8005144:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800514a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800514c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005156:	2300      	movs	r3, #0
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
 800515a:	e002      	b.n	8005162 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800515c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005164:	4618      	mov	r0, r3
 8005166:	3728      	adds	r7, #40	@ 0x28
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	200030d0 	.word	0x200030d0

08005170 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d105      	bne.n	800518e <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	60fa      	str	r2, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	e022      	b.n	80051d4 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	60fa      	str	r2, [r7, #12]
 8005198:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b80      	cmp	r3, #128	@ 0x80
 800519e:	d90a      	bls.n	80051b6 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80051a0:	2380      	movs	r3, #128	@ 0x80
 80051a2:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80051a4:	e007      	b.n	80051b6 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	1c53      	adds	r3, r2, #1
 80051aa:	60bb      	str	r3, [r7, #8]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	1c59      	adds	r1, r3, #1
 80051b0:	60f9      	str	r1, [r7, #12]
 80051b2:	7812      	ldrb	r2, [r2, #0]
 80051b4:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	1e5a      	subs	r2, r3, #1
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <_EncodeStr+0x58>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1ee      	bne.n	80051a6 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80051d4:	68fb      	ldr	r3, [r7, #12]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3307      	adds	r3, #7
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005202:	4b34      	ldr	r3, [pc, #208]	@ (80052d4 <_HandleIncomingPacket+0xd8>)
 8005204:	7e1b      	ldrb	r3, [r3, #24]
 8005206:	4618      	mov	r0, r3
 8005208:	1cfb      	adds	r3, r7, #3
 800520a:	2201      	movs	r2, #1
 800520c:	4619      	mov	r1, r3
 800520e:	f7ff fe59 	bl	8004ec4 <SEGGER_RTT_ReadNoLock>
 8005212:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d057      	beq.n	80052ca <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	2b80      	cmp	r3, #128	@ 0x80
 800521e:	d031      	beq.n	8005284 <_HandleIncomingPacket+0x88>
 8005220:	2b80      	cmp	r3, #128	@ 0x80
 8005222:	dc40      	bgt.n	80052a6 <_HandleIncomingPacket+0xaa>
 8005224:	2b07      	cmp	r3, #7
 8005226:	dc15      	bgt.n	8005254 <_HandleIncomingPacket+0x58>
 8005228:	2b00      	cmp	r3, #0
 800522a:	dd3c      	ble.n	80052a6 <_HandleIncomingPacket+0xaa>
 800522c:	3b01      	subs	r3, #1
 800522e:	2b06      	cmp	r3, #6
 8005230:	d839      	bhi.n	80052a6 <_HandleIncomingPacket+0xaa>
 8005232:	a201      	add	r2, pc, #4	@ (adr r2, 8005238 <_HandleIncomingPacket+0x3c>)
 8005234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005238:	0800525b 	.word	0x0800525b
 800523c:	08005261 	.word	0x08005261
 8005240:	08005267 	.word	0x08005267
 8005244:	0800526d 	.word	0x0800526d
 8005248:	08005273 	.word	0x08005273
 800524c:	08005279 	.word	0x08005279
 8005250:	0800527f 	.word	0x0800527f
 8005254:	2b7f      	cmp	r3, #127	@ 0x7f
 8005256:	d033      	beq.n	80052c0 <_HandleIncomingPacket+0xc4>
 8005258:	e025      	b.n	80052a6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800525a:	f000 fee7 	bl	800602c <SEGGER_SYSVIEW_Start>
      break;
 800525e:	e034      	b.n	80052ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005260:	f000 ff9e 	bl	80061a0 <SEGGER_SYSVIEW_Stop>
      break;
 8005264:	e031      	b.n	80052ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005266:	f001 f977 	bl	8006558 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800526a:	e02e      	b.n	80052ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800526c:	f001 f93c 	bl	80064e8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005270:	e02b      	b.n	80052ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005272:	f000 ffbb 	bl	80061ec <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005276:	e028      	b.n	80052ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005278:	f001 fca8 	bl	8006bcc <SEGGER_SYSVIEW_SendNumModules>
      break;
 800527c:	e025      	b.n	80052ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800527e:	f001 fc87 	bl	8006b90 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005282:	e022      	b.n	80052ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005284:	4b13      	ldr	r3, [pc, #76]	@ (80052d4 <_HandleIncomingPacket+0xd8>)
 8005286:	7e1b      	ldrb	r3, [r3, #24]
 8005288:	4618      	mov	r0, r3
 800528a:	1cfb      	adds	r3, r7, #3
 800528c:	2201      	movs	r2, #1
 800528e:	4619      	mov	r1, r3
 8005290:	f7ff fe18 	bl	8004ec4 <SEGGER_RTT_ReadNoLock>
 8005294:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d013      	beq.n	80052c4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 fbec 	bl	8006a7c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80052a4:	e00e      	b.n	80052c4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	b25b      	sxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	da0c      	bge.n	80052c8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052ae:	4b09      	ldr	r3, [pc, #36]	@ (80052d4 <_HandleIncomingPacket+0xd8>)
 80052b0:	7e1b      	ldrb	r3, [r3, #24]
 80052b2:	4618      	mov	r0, r3
 80052b4:	1cfb      	adds	r3, r7, #3
 80052b6:	2201      	movs	r2, #1
 80052b8:	4619      	mov	r1, r3
 80052ba:	f7ff fe03 	bl	8004ec4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80052be:	e003      	b.n	80052c8 <_HandleIncomingPacket+0xcc>
      break;
 80052c0:	bf00      	nop
 80052c2:	e002      	b.n	80052ca <_HandleIncomingPacket+0xce>
      break;
 80052c4:	bf00      	nop
 80052c6:	e000      	b.n	80052ca <_HandleIncomingPacket+0xce>
      break;
 80052c8:	bf00      	nop
    }
  }
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20004590 	.word	0x20004590

080052d8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	@ 0x30
 80052dc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80052de:	2301      	movs	r3, #1
 80052e0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	3301      	adds	r3, #1
 80052e6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ec:	4b31      	ldr	r3, [pc, #196]	@ (80053b4 <_TrySendOverflowPacket+0xdc>)
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052f2:	e00b      	b.n	800530c <_TrySendOverflowPacket+0x34>
 80052f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fa:	1c59      	adds	r1, r3, #1
 80052fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80052fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005308:	09db      	lsrs	r3, r3, #7
 800530a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005310:	d8f0      	bhi.n	80052f4 <_TrySendOverflowPacket+0x1c>
 8005312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005318:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005320:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005322:	4b25      	ldr	r3, [pc, #148]	@ (80053b8 <_TrySendOverflowPacket+0xe0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005328:	4b22      	ldr	r3, [pc, #136]	@ (80053b4 <_TrySendOverflowPacket+0xdc>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	623b      	str	r3, [r7, #32]
 800533a:	e00b      	b.n	8005354 <_TrySendOverflowPacket+0x7c>
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	b2da      	uxtb	r2, r3
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	1c59      	adds	r1, r3, #1
 8005344:	6279      	str	r1, [r7, #36]	@ 0x24
 8005346:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	09db      	lsrs	r3, r3, #7
 8005352:	623b      	str	r3, [r7, #32]
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	2b7f      	cmp	r3, #127	@ 0x7f
 8005358:	d8f0      	bhi.n	800533c <_TrySendOverflowPacket+0x64>
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005360:	6a3a      	ldr	r2, [r7, #32]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800536a:	4b12      	ldr	r3, [pc, #72]	@ (80053b4 <_TrySendOverflowPacket+0xdc>)
 800536c:	785b      	ldrb	r3, [r3, #1]
 800536e:	4618      	mov	r0, r3
 8005370:	1d3b      	adds	r3, r7, #4
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	461a      	mov	r2, r3
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	4619      	mov	r1, r3
 800537c:	f7fa ff30 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005380:	4603      	mov	r3, r0
 8005382:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800538a:	4a0a      	ldr	r2, [pc, #40]	@ (80053b4 <_TrySendOverflowPacket+0xdc>)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005390:	4b08      	ldr	r3, [pc, #32]	@ (80053b4 <_TrySendOverflowPacket+0xdc>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	3b01      	subs	r3, #1
 8005396:	b2da      	uxtb	r2, r3
 8005398:	4b06      	ldr	r3, [pc, #24]	@ (80053b4 <_TrySendOverflowPacket+0xdc>)
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e004      	b.n	80053a8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800539e:	4b05      	ldr	r3, [pc, #20]	@ (80053b4 <_TrySendOverflowPacket+0xdc>)
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	3301      	adds	r3, #1
 80053a4:	4a03      	ldr	r2, [pc, #12]	@ (80053b4 <_TrySendOverflowPacket+0xdc>)
 80053a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80053a8:	693b      	ldr	r3, [r7, #16]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3730      	adds	r7, #48	@ 0x30
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20004590 	.word	0x20004590
 80053b8:	e0001004 	.word	0xe0001004

080053bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08a      	sub	sp, #40	@ 0x28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80053c8:	4b98      	ldr	r3, [pc, #608]	@ (800562c <_SendPacket+0x270>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d010      	beq.n	80053f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80053d0:	4b96      	ldr	r3, [pc, #600]	@ (800562c <_SendPacket+0x270>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 812d 	beq.w	8005634 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80053da:	4b94      	ldr	r3, [pc, #592]	@ (800562c <_SendPacket+0x270>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d109      	bne.n	80053f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80053e2:	f7ff ff79 	bl	80052d8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80053e6:	4b91      	ldr	r3, [pc, #580]	@ (800562c <_SendPacket+0x270>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	f040 8124 	bne.w	8005638 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80053f0:	e001      	b.n	80053f6 <_SendPacket+0x3a>
    goto Send;
 80053f2:	bf00      	nop
 80053f4:	e000      	b.n	80053f8 <_SendPacket+0x3c>
Send:
 80053f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b1f      	cmp	r3, #31
 80053fc:	d809      	bhi.n	8005412 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80053fe:	4b8b      	ldr	r3, [pc, #556]	@ (800562c <_SendPacket+0x270>)
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 8115 	bne.w	800563c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b17      	cmp	r3, #23
 8005416:	d807      	bhi.n	8005428 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3b01      	subs	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	e0c4      	b.n	80055b2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b7f      	cmp	r3, #127	@ 0x7f
 8005434:	d912      	bls.n	800545c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	09da      	lsrs	r2, r3, #7
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3b01      	subs	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	3a01      	subs	r2, #1
 800544e:	60fa      	str	r2, [r7, #12]
 8005450:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005454:	b2da      	uxtb	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	e006      	b.n	800546a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3b01      	subs	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b7e      	cmp	r3, #126	@ 0x7e
 800546e:	d807      	bhi.n	8005480 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3b01      	subs	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	b2da      	uxtb	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e098      	b.n	80055b2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005486:	d212      	bcs.n	80054ae <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	09da      	lsrs	r2, r3, #7
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3b01      	subs	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	3a01      	subs	r2, #1
 80054a0:	60fa      	str	r2, [r7, #12]
 80054a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	e081      	b.n	80055b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054b4:	d21d      	bcs.n	80054f2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	0b9a      	lsrs	r2, r3, #14
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3b01      	subs	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	09db      	lsrs	r3, r3, #7
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	3a01      	subs	r2, #1
 80054d0:	60fa      	str	r2, [r7, #12]
 80054d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	3a01      	subs	r2, #1
 80054e4:	60fa      	str	r2, [r7, #12]
 80054e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	e05f      	b.n	80055b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054f8:	d228      	bcs.n	800554c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	0d5a      	lsrs	r2, r3, #21
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3b01      	subs	r3, #1
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	0b9b      	lsrs	r3, r3, #14
 800550e:	b2db      	uxtb	r3, r3
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	3a01      	subs	r2, #1
 8005514:	60fa      	str	r2, [r7, #12]
 8005516:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800551a:	b2da      	uxtb	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	09db      	lsrs	r3, r3, #7
 8005524:	b2db      	uxtb	r3, r3
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	3a01      	subs	r2, #1
 800552a:	60fa      	str	r2, [r7, #12]
 800552c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	3a01      	subs	r2, #1
 800553e:	60fa      	str	r2, [r7, #12]
 8005540:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	e032      	b.n	80055b2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0f1a      	lsrs	r2, r3, #28
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3b01      	subs	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	0d5b      	lsrs	r3, r3, #21
 8005560:	b2db      	uxtb	r3, r3
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	3a01      	subs	r2, #1
 8005566:	60fa      	str	r2, [r7, #12]
 8005568:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0b9b      	lsrs	r3, r3, #14
 8005576:	b2db      	uxtb	r3, r3
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	3a01      	subs	r2, #1
 800557c:	60fa      	str	r2, [r7, #12]
 800557e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005582:	b2da      	uxtb	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	09db      	lsrs	r3, r3, #7
 800558c:	b2db      	uxtb	r3, r3
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	3a01      	subs	r2, #1
 8005592:	60fa      	str	r2, [r7, #12]
 8005594:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005598:	b2da      	uxtb	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	3a01      	subs	r2, #1
 80055a6:	60fa      	str	r2, [r7, #12]
 80055a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005630 <_SendPacket+0x274>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055b8:	4b1c      	ldr	r3, [pc, #112]	@ (800562c <_SendPacket+0x270>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	623b      	str	r3, [r7, #32]
 80055ca:	e00b      	b.n	80055e4 <_SendPacket+0x228>
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d2:	1c59      	adds	r1, r3, #1
 80055d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80055d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	09db      	lsrs	r3, r3, #7
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80055e8:	d8f0      	bhi.n	80055cc <_SendPacket+0x210>
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80055f0:	6a3a      	ldr	r2, [r7, #32]
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80055fa:	4b0c      	ldr	r3, [pc, #48]	@ (800562c <_SendPacket+0x270>)
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	4618      	mov	r0, r3
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	461a      	mov	r2, r3
 8005608:	68f9      	ldr	r1, [r7, #12]
 800560a:	f7fa fde9 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800560e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005616:	4a05      	ldr	r2, [pc, #20]	@ (800562c <_SendPacket+0x270>)
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	60d3      	str	r3, [r2, #12]
 800561c:	e00f      	b.n	800563e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800561e:	4b03      	ldr	r3, [pc, #12]	@ (800562c <_SendPacket+0x270>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	3301      	adds	r3, #1
 8005624:	b2da      	uxtb	r2, r3
 8005626:	4b01      	ldr	r3, [pc, #4]	@ (800562c <_SendPacket+0x270>)
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e008      	b.n	800563e <_SendPacket+0x282>
 800562c:	20004590 	.word	0x20004590
 8005630:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005634:	bf00      	nop
 8005636:	e002      	b.n	800563e <_SendPacket+0x282>
      goto SendDone;
 8005638:	bf00      	nop
 800563a:	e000      	b.n	800563e <_SendPacket+0x282>
      goto SendDone;
 800563c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800563e:	4b14      	ldr	r3, [pc, #80]	@ (8005690 <_SendPacket+0x2d4>)
 8005640:	7e1b      	ldrb	r3, [r3, #24]
 8005642:	4619      	mov	r1, r3
 8005644:	4a13      	ldr	r2, [pc, #76]	@ (8005694 <_SendPacket+0x2d8>)
 8005646:	460b      	mov	r3, r1
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	440b      	add	r3, r1
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4413      	add	r3, r2
 8005650:	336c      	adds	r3, #108	@ 0x6c
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4b0e      	ldr	r3, [pc, #56]	@ (8005690 <_SendPacket+0x2d4>)
 8005656:	7e1b      	ldrb	r3, [r3, #24]
 8005658:	4618      	mov	r0, r3
 800565a:	490e      	ldr	r1, [pc, #56]	@ (8005694 <_SendPacket+0x2d8>)
 800565c:	4603      	mov	r3, r0
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	4403      	add	r3, r0
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	440b      	add	r3, r1
 8005666:	3370      	adds	r3, #112	@ 0x70
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d00b      	beq.n	8005686 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800566e:	4b08      	ldr	r3, [pc, #32]	@ (8005690 <_SendPacket+0x2d4>)
 8005670:	789b      	ldrb	r3, [r3, #2]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d107      	bne.n	8005686 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005676:	4b06      	ldr	r3, [pc, #24]	@ (8005690 <_SendPacket+0x2d4>)
 8005678:	2201      	movs	r2, #1
 800567a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800567c:	f7ff fdbe 	bl	80051fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005680:	4b03      	ldr	r3, [pc, #12]	@ (8005690 <_SendPacket+0x2d4>)
 8005682:	2200      	movs	r2, #0
 8005684:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005686:	bf00      	nop
 8005688:	3728      	adds	r7, #40	@ 0x28
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20004590 	.word	0x20004590
 8005694:	200030d0 	.word	0x200030d0

08005698 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	@ 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	3301      	adds	r3, #1
 80056ae:	2b80      	cmp	r3, #128	@ 0x80
 80056b0:	d80a      	bhi.n	80056c8 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	1c59      	adds	r1, r3, #1
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6051      	str	r1, [r2, #4]
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b80      	cmp	r3, #128	@ 0x80
 80056ce:	d15a      	bne.n	8005786 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	623b      	str	r3, [r7, #32]
 80056f0:	e00b      	b.n	800570a <_StoreChar+0x72>
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	1c59      	adds	r1, r3, #1
 80056fa:	6279      	str	r1, [r7, #36]	@ 0x24
 80056fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	09db      	lsrs	r3, r3, #7
 8005708:	623b      	str	r3, [r7, #32]
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	2b7f      	cmp	r3, #127	@ 0x7f
 800570e:	d8f0      	bhi.n	80056f2 <_StoreChar+0x5a>
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	627a      	str	r2, [r7, #36]	@ 0x24
 8005716:	6a3a      	ldr	r2, [r7, #32]
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	2300      	movs	r3, #0
 8005726:	61bb      	str	r3, [r7, #24]
 8005728:	e00b      	b.n	8005742 <_StoreChar+0xaa>
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	1c59      	adds	r1, r3, #1
 8005732:	61f9      	str	r1, [r7, #28]
 8005734:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	09db      	lsrs	r3, r3, #7
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b7f      	cmp	r3, #127	@ 0x7f
 8005746:	d8f0      	bhi.n	800572a <_StoreChar+0x92>
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	61fa      	str	r2, [r7, #28]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	221a      	movs	r2, #26
 800575e:	6939      	ldr	r1, [r7, #16]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fe2b 	bl	80053bc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fd39 	bl	80051e2 <_PreparePacket>
 8005770:	4602      	mov	r2, r0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	611a      	str	r2, [r3, #16]
  }
}
 8005786:	bf00      	nop
 8005788:	3728      	adds	r7, #40	@ 0x28
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	@ 0x28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80057a2:	2301      	movs	r3, #1
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80057a6:	2301      	movs	r3, #1
 80057a8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80057aa:	e007      	b.n	80057bc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80057ac:	6a3a      	ldr	r2, [r7, #32]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	623b      	str	r3, [r7, #32]
    Width++;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3301      	adds	r3, #1
 80057ba:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d2f3      	bcs.n	80057ac <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d901      	bls.n	80057d0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80057d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d000      	beq.n	80057dc <_PrintUnsigned+0x4c>
 80057da:	e01f      	b.n	800581c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01c      	beq.n	800581c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80057e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <_PrintUnsigned+0x68>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d102      	bne.n	80057f8 <_PrintUnsigned+0x68>
        c = '0';
 80057f2:	2330      	movs	r3, #48	@ 0x30
 80057f4:	76fb      	strb	r3, [r7, #27]
 80057f6:	e001      	b.n	80057fc <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80057f8:	2320      	movs	r3, #32
 80057fa:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057fc:	e007      	b.n	800580e <_PrintUnsigned+0x7e>
        FieldWidth--;
 80057fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005800:	3b01      	subs	r3, #1
 8005802:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005804:	7efb      	ldrb	r3, [r7, #27]
 8005806:	4619      	mov	r1, r3
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7ff ff45 	bl	8005698 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <_PrintUnsigned+0x8c>
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005818:	429a      	cmp	r2, r3
 800581a:	d3f0      	bcc.n	80057fe <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d903      	bls.n	800582a <_PrintUnsigned+0x9a>
      NumDigits--;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	3b01      	subs	r3, #1
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	e009      	b.n	800583e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d200      	bcs.n	800583e <_PrintUnsigned+0xae>
        break;
 800583c:	e005      	b.n	800584a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	fb02 f303 	mul.w	r3, r2, r3
 8005846:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005848:	e7e8      	b.n	800581c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005852:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005862:	4a15      	ldr	r2, [pc, #84]	@ (80058b8 <_PrintUnsigned+0x128>)
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4413      	add	r3, r2
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	4619      	mov	r1, r3
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff ff13 	bl	8005698 <_StoreChar>
    Digit /= Base;
 8005872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e3      	bne.n	800584a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d011      	beq.n	80058b0 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 800588c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00e      	beq.n	80058b0 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005892:	e006      	b.n	80058a2 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	3b01      	subs	r3, #1
 8005898:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800589a:	2120      	movs	r1, #32
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff fefb 	bl	8005698 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <_PrintUnsigned+0x120>
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d3f1      	bcc.n	8005894 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80058b0:	bf00      	nop
 80058b2:	3728      	adds	r7, #40	@ 0x28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	08006f78 	.word	0x08006f78

080058bc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bfb8      	it	lt
 80058d0:	425b      	neglt	r3, r3
 80058d2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80058d8:	e007      	b.n	80058ea <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	fb92 f3f3 	sdiv	r3, r2, r3
 80058e2:	613b      	str	r3, [r7, #16]
    Width++;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	3301      	adds	r3, #1
 80058e8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	daf3      	bge.n	80058da <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d901      	bls.n	80058fe <_PrintInt+0x42>
    Width = NumDigits;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <_PrintInt+0x5e>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	db04      	blt.n	8005914 <_PrintInt+0x58>
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <_PrintInt+0x5e>
    FieldWidth--;
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	3b01      	subs	r3, #1
 8005918:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <_PrintInt+0x6e>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d016      	beq.n	8005958 <_PrintInt+0x9c>
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d111      	bne.n	8005958 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800593a:	e006      	b.n	800594a <_PrintInt+0x8e>
        FieldWidth--;
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	3b01      	subs	r3, #1
 8005940:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005942:	2120      	movs	r1, #32
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7ff fea7 	bl	8005698 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <_PrintInt+0x9c>
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	429a      	cmp	r2, r3
 8005956:	d3f1      	bcc.n	800593c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	da07      	bge.n	800596e <_PrintInt+0xb2>
    v = -v;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	425b      	negs	r3, r3
 8005962:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005964:	212d      	movs	r1, #45	@ 0x2d
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7ff fe96 	bl	8005698 <_StoreChar>
 800596c:	e008      	b.n	8005980 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005978:	212b      	movs	r1, #43	@ 0x2b
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff fe8c 	bl	8005698 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d019      	beq.n	80059be <_PrintInt+0x102>
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d114      	bne.n	80059be <_PrintInt+0x102>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d111      	bne.n	80059be <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00e      	beq.n	80059be <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059a0:	e006      	b.n	80059b0 <_PrintInt+0xf4>
        FieldWidth--;
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80059a8:	2130      	movs	r1, #48	@ 0x30
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f7ff fe74 	bl	8005698 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <_PrintInt+0x102>
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d3f1      	bcc.n	80059a2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f7ff fedf 	bl	8005790 <_PrintUnsigned>
}
 80059d2:	bf00      	nop
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b098      	sub	sp, #96	@ 0x60
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80059e8:	f3ef 8311 	mrs	r3, BASEPRI
 80059ec:	f04f 0120 	mov.w	r1, #32
 80059f0:	f381 8811 	msr	BASEPRI, r1
 80059f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059f6:	48b7      	ldr	r0, [pc, #732]	@ (8005cd4 <_VPrintTarget+0x2f8>)
 80059f8:	f7ff fbf3 	bl	80051e2 <_PreparePacket>
 80059fc:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80059fe:	4bb5      	ldr	r3, [pc, #724]	@ (8005cd4 <_VPrintTarget+0x2f8>)
 8005a00:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005a02:	2300      	movs	r3, #0
 8005a04:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a08:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005a22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 81a8 	beq.w	8005d7c <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a30:	2b25      	cmp	r3, #37	@ 0x25
 8005a32:	f040 8195 	bne.w	8005d60 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005a36:	2300      	movs	r3, #0
 8005a38:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005a46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a4a:	3b23      	subs	r3, #35	@ 0x23
 8005a4c:	2b0d      	cmp	r3, #13
 8005a4e:	d83f      	bhi.n	8005ad0 <_VPrintTarget+0xf4>
 8005a50:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <_VPrintTarget+0x7c>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005ac1 	.word	0x08005ac1
 8005a5c:	08005ad1 	.word	0x08005ad1
 8005a60:	08005ad1 	.word	0x08005ad1
 8005a64:	08005ad1 	.word	0x08005ad1
 8005a68:	08005ad1 	.word	0x08005ad1
 8005a6c:	08005ad1 	.word	0x08005ad1
 8005a70:	08005ad1 	.word	0x08005ad1
 8005a74:	08005ad1 	.word	0x08005ad1
 8005a78:	08005ab1 	.word	0x08005ab1
 8005a7c:	08005ad1 	.word	0x08005ad1
 8005a80:	08005a91 	.word	0x08005a91
 8005a84:	08005ad1 	.word	0x08005ad1
 8005a88:	08005ad1 	.word	0x08005ad1
 8005a8c:	08005aa1 	.word	0x08005aa1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005a90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e01a      	b.n	8005ad6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa2:	f043 0302 	orr.w	r3, r3, #2
 8005aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e012      	b.n	8005ad6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ab2:	f043 0304 	orr.w	r3, r3, #4
 8005ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3301      	adds	r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e00a      	b.n	8005ad6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ac2:	f043 0308 	orr.w	r3, r3, #8
 8005ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3301      	adds	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	e002      	b.n	8005ad6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ad4:	bf00      	nop
        }
      } while (v);
 8005ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1b0      	bne.n	8005a3e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005adc:	2300      	movs	r3, #0
 8005ade:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005aec:	2b2f      	cmp	r3, #47	@ 0x2f
 8005aee:	d912      	bls.n	8005b16 <_VPrintTarget+0x13a>
 8005af0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005af4:	2b39      	cmp	r3, #57	@ 0x39
 8005af6:	d80e      	bhi.n	8005b16 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b0e:	4413      	add	r3, r2
 8005b10:	3b30      	subs	r3, #48	@ 0x30
 8005b12:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005b14:	e7e4      	b.n	8005ae0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005b16:	2300      	movs	r3, #0
 8005b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005b22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b26:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b28:	d11d      	bne.n	8005b66 <_VPrintTarget+0x18a>
        sFormat++;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005b38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b3e:	d912      	bls.n	8005b66 <_VPrintTarget+0x18a>
 8005b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b44:	2b39      	cmp	r3, #57	@ 0x39
 8005b46:	d80e      	bhi.n	8005b66 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005b4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b5e:	4413      	add	r3, r2
 8005b60:	3b30      	subs	r3, #48	@ 0x30
 8005b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005b64:	e7e4      	b.n	8005b30 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005b6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b72:	2b6c      	cmp	r3, #108	@ 0x6c
 8005b74:	d003      	beq.n	8005b7e <_VPrintTarget+0x1a2>
 8005b76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b7a:	2b68      	cmp	r3, #104	@ 0x68
 8005b7c:	d107      	bne.n	8005b8e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005b8c:	e7ef      	b.n	8005b6e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005b8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b92:	2b25      	cmp	r3, #37	@ 0x25
 8005b94:	f000 80d8 	beq.w	8005d48 <_VPrintTarget+0x36c>
 8005b98:	2b25      	cmp	r3, #37	@ 0x25
 8005b9a:	f2c0 80dc 	blt.w	8005d56 <_VPrintTarget+0x37a>
 8005b9e:	2b78      	cmp	r3, #120	@ 0x78
 8005ba0:	f300 80d9 	bgt.w	8005d56 <_VPrintTarget+0x37a>
 8005ba4:	2b58      	cmp	r3, #88	@ 0x58
 8005ba6:	f2c0 80d6 	blt.w	8005d56 <_VPrintTarget+0x37a>
 8005baa:	3b58      	subs	r3, #88	@ 0x58
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	f200 80d2 	bhi.w	8005d56 <_VPrintTarget+0x37a>
 8005bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <_VPrintTarget+0x1dc>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005caf 	.word	0x08005caf
 8005bbc:	08005d57 	.word	0x08005d57
 8005bc0:	08005d57 	.word	0x08005d57
 8005bc4:	08005d57 	.word	0x08005d57
 8005bc8:	08005d57 	.word	0x08005d57
 8005bcc:	08005d57 	.word	0x08005d57
 8005bd0:	08005d57 	.word	0x08005d57
 8005bd4:	08005d57 	.word	0x08005d57
 8005bd8:	08005d57 	.word	0x08005d57
 8005bdc:	08005d57 	.word	0x08005d57
 8005be0:	08005d57 	.word	0x08005d57
 8005be4:	08005c3d 	.word	0x08005c3d
 8005be8:	08005c63 	.word	0x08005c63
 8005bec:	08005d57 	.word	0x08005d57
 8005bf0:	08005d57 	.word	0x08005d57
 8005bf4:	08005d57 	.word	0x08005d57
 8005bf8:	08005d57 	.word	0x08005d57
 8005bfc:	08005d57 	.word	0x08005d57
 8005c00:	08005d57 	.word	0x08005d57
 8005c04:	08005d57 	.word	0x08005d57
 8005c08:	08005d57 	.word	0x08005d57
 8005c0c:	08005d57 	.word	0x08005d57
 8005c10:	08005d57 	.word	0x08005d57
 8005c14:	08005d57 	.word	0x08005d57
 8005c18:	08005d23 	.word	0x08005d23
 8005c1c:	08005d57 	.word	0x08005d57
 8005c20:	08005d57 	.word	0x08005d57
 8005c24:	08005cd9 	.word	0x08005cd9
 8005c28:	08005d57 	.word	0x08005d57
 8005c2c:	08005c89 	.word	0x08005c89
 8005c30:	08005d57 	.word	0x08005d57
 8005c34:	08005d57 	.word	0x08005d57
 8005c38:	08005caf 	.word	0x08005caf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	1d19      	adds	r1, r3, #4
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6011      	str	r1, [r2, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005c50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005c54:	f107 0310 	add.w	r3, r7, #16
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff fd1c 	bl	8005698 <_StoreChar>
        break;
 8005c60:	e07a      	b.n	8005d58 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	1d19      	adds	r1, r3, #4
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6011      	str	r1, [r2, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c70:	f107 0010 	add.w	r0, r7, #16
 8005c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c7e:	220a      	movs	r2, #10
 8005c80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c82:	f7ff fe1b 	bl	80058bc <_PrintInt>
        break;
 8005c86:	e067      	b.n	8005d58 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	1d19      	adds	r1, r3, #4
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6011      	str	r1, [r2, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c98:	f107 0010 	add.w	r0, r7, #16
 8005c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c9e:	9301      	str	r3, [sp, #4]
 8005ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca6:	220a      	movs	r2, #10
 8005ca8:	f7ff fd72 	bl	8005790 <_PrintUnsigned>
        break;
 8005cac:	e054      	b.n	8005d58 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	1d19      	adds	r1, r3, #4
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6011      	str	r1, [r2, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005cbc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cbe:	f107 0010 	add.w	r0, r7, #16
 8005cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ccc:	2210      	movs	r2, #16
 8005cce:	f7ff fd5f 	bl	8005790 <_PrintUnsigned>
        break;
 8005cd2:	e041      	b.n	8005d58 <_VPrintTarget+0x37c>
 8005cd4:	200045c0 	.word	0x200045c0
      case 's':
        s = va_arg(*pParamList, const char*);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	1d19      	adds	r1, r3, #4
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6011      	str	r1, [r2, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8005ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <_VPrintTarget+0x314>
          s = "(null)";
 8005cec:	4b4a      	ldr	r3, [pc, #296]	@ (8005e18 <_VPrintTarget+0x43c>)
 8005cee:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8005cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8005cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005d06:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005d0a:	f107 0310 	add.w	r3, r7, #16
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff fcc1 	bl	8005698 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d1a:	d9e9      	bls.n	8005cf0 <_VPrintTarget+0x314>
        break;
 8005d1c:	e01c      	b.n	8005d58 <_VPrintTarget+0x37c>
            break;
 8005d1e:	bf00      	nop
        break;
 8005d20:	e01a      	b.n	8005d58 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	1d19      	adds	r1, r3, #4
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6011      	str	r1, [r2, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005d30:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d32:	f107 0010 	add.w	r0, r7, #16
 8005d36:	2300      	movs	r3, #0
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	2308      	movs	r3, #8
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	2308      	movs	r3, #8
 8005d40:	2210      	movs	r2, #16
 8005d42:	f7ff fd25 	bl	8005790 <_PrintUnsigned>
        break;
 8005d46:	e007      	b.n	8005d58 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005d48:	f107 0310 	add.w	r3, r7, #16
 8005d4c:	2125      	movs	r1, #37	@ 0x25
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fca2 	bl	8005698 <_StoreChar>
        break;
 8005d54:	e000      	b.n	8005d58 <_VPrintTarget+0x37c>
      default:
        break;
 8005d56:	bf00      	nop
      }
      sFormat++;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e007      	b.n	8005d70 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005d60:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005d64:	f107 0310 	add.w	r3, r7, #16
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fc94 	bl	8005698 <_StoreChar>
    }
  } while (*sFormat);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f47f ae4d 	bne.w	8005a14 <_VPrintTarget+0x38>
 8005d7a:	e000      	b.n	8005d7e <_VPrintTarget+0x3a2>
      break;
 8005d7c:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d041      	beq.n	8005e08 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005d84:	6a3a      	ldr	r2, [r7, #32]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d94:	e00b      	b.n	8005dae <_VPrintTarget+0x3d2>
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d9c:	1c59      	adds	r1, r3, #1
 8005d9e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005da0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005daa:	09db      	lsrs	r3, r3, #7
 8005dac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005db2:	d8f0      	bhi.n	8005d96 <_VPrintTarget+0x3ba>
 8005db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005dba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc2:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dc8:	2300      	movs	r3, #0
 8005dca:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dcc:	e00b      	b.n	8005de6 <_VPrintTarget+0x40a>
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd4:	1c59      	adds	r1, r3, #1
 8005dd6:	6379      	str	r1, [r7, #52]	@ 0x34
 8005dd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de2:	09db      	lsrs	r3, r3, #7
 8005de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dea:	d8f0      	bhi.n	8005dce <_VPrintTarget+0x3f2>
 8005dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	637a      	str	r2, [r7, #52]	@ 0x34
 8005df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfa:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	6979      	ldr	r1, [r7, #20]
 8005e00:	221a      	movs	r2, #26
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fada 	bl	80053bc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005e0e:	bf00      	nop
 8005e10:	3758      	adds	r7, #88	@ 0x58
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	08006f24 	.word	0x08006f24

08005e1c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e30:	4917      	ldr	r1, [pc, #92]	@ (8005e90 <SEGGER_SYSVIEW_Init+0x74>)
 8005e32:	4818      	ldr	r0, [pc, #96]	@ (8005e94 <SEGGER_SYSVIEW_Init+0x78>)
 8005e34:	f7ff f8cc 	bl	8004fd0 <SEGGER_RTT_AllocUpBuffer>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	4b16      	ldr	r3, [pc, #88]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e3e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005e40:	4b15      	ldr	r3, [pc, #84]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e42:	785a      	ldrb	r2, [r3, #1]
 8005e44:	4b14      	ldr	r3, [pc, #80]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e46:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e48:	4b13      	ldr	r3, [pc, #76]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e4a:	7e1b      	ldrb	r3, [r3, #24]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	2308      	movs	r3, #8
 8005e54:	4a11      	ldr	r2, [pc, #68]	@ (8005e9c <SEGGER_SYSVIEW_Init+0x80>)
 8005e56:	490f      	ldr	r1, [pc, #60]	@ (8005e94 <SEGGER_SYSVIEW_Init+0x78>)
 8005e58:	f7ff f93e 	bl	80050d8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e62:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea0 <SEGGER_SYSVIEW_Init+0x84>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a0c      	ldr	r2, [pc, #48]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e68:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e70:	4a09      	ldr	r2, [pc, #36]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e76:	4a08      	ldr	r2, [pc, #32]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e7c:	4a06      	ldr	r2, [pc, #24]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e82:	4b05      	ldr	r3, [pc, #20]	@ (8005e98 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e88:	bf00      	nop
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20003588 	.word	0x20003588
 8005e94:	08006f2c 	.word	0x08006f2c
 8005e98:	20004590 	.word	0x20004590
 8005e9c:	20004588 	.word	0x20004588
 8005ea0:	e0001004 	.word	0xe0001004

08005ea4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005eac:	4a04      	ldr	r2, [pc, #16]	@ (8005ec0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6113      	str	r3, [r2, #16]
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20004590 	.word	0x20004590

08005ec4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed0:	f04f 0120 	mov.w	r1, #32
 8005ed4:	f381 8811 	msr	BASEPRI, r1
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	4808      	ldr	r0, [pc, #32]	@ (8005efc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005edc:	f7ff f981 	bl	80051e2 <_PreparePacket>
 8005ee0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	68b8      	ldr	r0, [r7, #8]
 8005ee8:	f7ff fa68 	bl	80053bc <_SendPacket>
  RECORD_END();
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f383 8811 	msr	BASEPRI, r3
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	200045c0 	.word	0x200045c0

08005f00 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f0e:	f04f 0120 	mov.w	r1, #32
 8005f12:	f381 8811 	msr	BASEPRI, r1
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	4816      	ldr	r0, [pc, #88]	@ (8005f74 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005f1a:	f7ff f962 	bl	80051e2 <_PreparePacket>
 8005f1e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	61fb      	str	r3, [r7, #28]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e00b      	b.n	8005f46 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	1c59      	adds	r1, r3, #1
 8005f36:	61f9      	str	r1, [r7, #28]
 8005f38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	09db      	lsrs	r3, r3, #7
 8005f44:	61bb      	str	r3, [r7, #24]
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f4a:	d8f0      	bhi.n	8005f2e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	61fa      	str	r2, [r7, #28]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	68f9      	ldr	r1, [r7, #12]
 8005f60:	6938      	ldr	r0, [r7, #16]
 8005f62:	f7ff fa2b 	bl	80053bc <_SendPacket>
  RECORD_END();
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f383 8811 	msr	BASEPRI, r3
}
 8005f6c:	bf00      	nop
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	200045c0 	.word	0x200045c0

08005f78 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08c      	sub	sp, #48	@ 0x30
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f84:	f3ef 8311 	mrs	r3, BASEPRI
 8005f88:	f04f 0120 	mov.w	r1, #32
 8005f8c:	f381 8811 	msr	BASEPRI, r1
 8005f90:	61fb      	str	r3, [r7, #28]
 8005f92:	4825      	ldr	r0, [pc, #148]	@ (8006028 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f94:	f7ff f925 	bl	80051e2 <_PreparePacket>
 8005f98:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fa6:	e00b      	b.n	8005fc0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005fb2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbc:	09db      	lsrs	r3, r3, #7
 8005fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fc4:	d8f0      	bhi.n	8005fa8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	623b      	str	r3, [r7, #32]
 8005fde:	e00b      	b.n	8005ff8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	1c59      	adds	r1, r3, #1
 8005fe8:	6279      	str	r1, [r7, #36]	@ 0x24
 8005fea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	09db      	lsrs	r3, r3, #7
 8005ff6:	623b      	str	r3, [r7, #32]
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ffc:	d8f0      	bhi.n	8005fe0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	627a      	str	r2, [r7, #36]	@ 0x24
 8006004:	6a3a      	ldr	r2, [r7, #32]
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	6979      	ldr	r1, [r7, #20]
 8006012:	69b8      	ldr	r0, [r7, #24]
 8006014:	f7ff f9d2 	bl	80053bc <_SendPacket>
  RECORD_END();
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f383 8811 	msr	BASEPRI, r3
}
 800601e:	bf00      	nop
 8006020:	3730      	adds	r7, #48	@ 0x30
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	200045c0 	.word	0x200045c0

0800602c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800602c:	b580      	push	{r7, lr}
 800602e:	b08c      	sub	sp, #48	@ 0x30
 8006030:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006032:	4b58      	ldr	r3, [pc, #352]	@ (8006194 <SEGGER_SYSVIEW_Start+0x168>)
 8006034:	2201      	movs	r2, #1
 8006036:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006038:	f3ef 8311 	mrs	r3, BASEPRI
 800603c:	f04f 0120 	mov.w	r1, #32
 8006040:	f381 8811 	msr	BASEPRI, r1
 8006044:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006046:	4b53      	ldr	r3, [pc, #332]	@ (8006194 <SEGGER_SYSVIEW_Start+0x168>)
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	220a      	movs	r2, #10
 800604c:	4952      	ldr	r1, [pc, #328]	@ (8006198 <SEGGER_SYSVIEW_Start+0x16c>)
 800604e:	4618      	mov	r0, r3
 8006050:	f7fa f8c6 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800605a:	200a      	movs	r0, #10
 800605c:	f7ff ff32 	bl	8005ec4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006060:	f3ef 8311 	mrs	r3, BASEPRI
 8006064:	f04f 0120 	mov.w	r1, #32
 8006068:	f381 8811 	msr	BASEPRI, r1
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	484b      	ldr	r0, [pc, #300]	@ (800619c <SEGGER_SYSVIEW_Start+0x170>)
 8006070:	f7ff f8b7 	bl	80051e2 <_PreparePacket>
 8006074:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800607e:	4b45      	ldr	r3, [pc, #276]	@ (8006194 <SEGGER_SYSVIEW_Start+0x168>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006084:	e00b      	b.n	800609e <SEGGER_SYSVIEW_Start+0x72>
 8006086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006088:	b2da      	uxtb	r2, r3
 800608a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608c:	1c59      	adds	r1, r3, #1
 800608e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006090:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609a:	09db      	lsrs	r3, r3, #7
 800609c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a2:	d8f0      	bhi.n	8006086 <SEGGER_SYSVIEW_Start+0x5a>
 80060a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060b8:	4b36      	ldr	r3, [pc, #216]	@ (8006194 <SEGGER_SYSVIEW_Start+0x168>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	623b      	str	r3, [r7, #32]
 80060be:	e00b      	b.n	80060d8 <SEGGER_SYSVIEW_Start+0xac>
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c6:	1c59      	adds	r1, r3, #1
 80060c8:	6279      	str	r1, [r7, #36]	@ 0x24
 80060ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	09db      	lsrs	r3, r3, #7
 80060d6:	623b      	str	r3, [r7, #32]
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	2b7f      	cmp	r3, #127	@ 0x7f
 80060dc:	d8f0      	bhi.n	80060c0 <SEGGER_SYSVIEW_Start+0x94>
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80060e4:	6a3a      	ldr	r2, [r7, #32]
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	4b28      	ldr	r3, [pc, #160]	@ (8006194 <SEGGER_SYSVIEW_Start+0x168>)
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e00b      	b.n	8006112 <SEGGER_SYSVIEW_Start+0xe6>
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	1c59      	adds	r1, r3, #1
 8006102:	61f9      	str	r1, [r7, #28]
 8006104:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	09db      	lsrs	r3, r3, #7
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b7f      	cmp	r3, #127	@ 0x7f
 8006116:	d8f0      	bhi.n	80060fa <SEGGER_SYSVIEW_Start+0xce>
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	61fa      	str	r2, [r7, #28]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	2300      	movs	r3, #0
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	e00b      	b.n	800614a <SEGGER_SYSVIEW_Start+0x11e>
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	1c59      	adds	r1, r3, #1
 800613a:	6179      	str	r1, [r7, #20]
 800613c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	09db      	lsrs	r3, r3, #7
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2b7f      	cmp	r3, #127	@ 0x7f
 800614e:	d8f0      	bhi.n	8006132 <SEGGER_SYSVIEW_Start+0x106>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	617a      	str	r2, [r7, #20]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006160:	2218      	movs	r2, #24
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff f929 	bl	80053bc <_SendPacket>
      RECORD_END();
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006170:	4b08      	ldr	r3, [pc, #32]	@ (8006194 <SEGGER_SYSVIEW_Start+0x168>)
 8006172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006178:	4b06      	ldr	r3, [pc, #24]	@ (8006194 <SEGGER_SYSVIEW_Start+0x168>)
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800617e:	f000 f9eb 	bl	8006558 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006182:	f000 f9b1 	bl	80064e8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006186:	f000 fd21 	bl	8006bcc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800618a:	bf00      	nop
 800618c:	3730      	adds	r7, #48	@ 0x30
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20004590 	.word	0x20004590
 8006198:	08006f6c 	.word	0x08006f6c
 800619c:	200045c0 	.word	0x200045c0

080061a0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061a6:	f3ef 8311 	mrs	r3, BASEPRI
 80061aa:	f04f 0120 	mov.w	r1, #32
 80061ae:	f381 8811 	msr	BASEPRI, r1
 80061b2:	607b      	str	r3, [r7, #4]
 80061b4:	480b      	ldr	r0, [pc, #44]	@ (80061e4 <SEGGER_SYSVIEW_Stop+0x44>)
 80061b6:	f7ff f814 	bl	80051e2 <_PreparePacket>
 80061ba:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80061bc:	4b0a      	ldr	r3, [pc, #40]	@ (80061e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80061c4:	220b      	movs	r2, #11
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6838      	ldr	r0, [r7, #0]
 80061ca:	f7ff f8f7 	bl	80053bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80061ce:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f383 8811 	msr	BASEPRI, r3
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	200045c0 	.word	0x200045c0
 80061e8:	20004590 	.word	0x20004590

080061ec <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08c      	sub	sp, #48	@ 0x30
 80061f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061f2:	f3ef 8311 	mrs	r3, BASEPRI
 80061f6:	f04f 0120 	mov.w	r1, #32
 80061fa:	f381 8811 	msr	BASEPRI, r1
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	4845      	ldr	r0, [pc, #276]	@ (8006318 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006202:	f7fe ffee 	bl	80051e2 <_PreparePacket>
 8006206:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006210:	4b42      	ldr	r3, [pc, #264]	@ (800631c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006216:	e00b      	b.n	8006230 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621a:	b2da      	uxtb	r2, r3
 800621c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621e:	1c59      	adds	r1, r3, #1
 8006220:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006222:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622c:	09db      	lsrs	r3, r3, #7
 800622e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	2b7f      	cmp	r3, #127	@ 0x7f
 8006234:	d8f0      	bhi.n	8006218 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800623c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006244:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
 800624a:	4b34      	ldr	r3, [pc, #208]	@ (800631c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	623b      	str	r3, [r7, #32]
 8006250:	e00b      	b.n	800626a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	b2da      	uxtb	r2, r3
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	1c59      	adds	r1, r3, #1
 800625a:	6279      	str	r1, [r7, #36]	@ 0x24
 800625c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	09db      	lsrs	r3, r3, #7
 8006268:	623b      	str	r3, [r7, #32]
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	2b7f      	cmp	r3, #127	@ 0x7f
 800626e:	d8f0      	bhi.n	8006252 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	627a      	str	r2, [r7, #36]	@ 0x24
 8006276:	6a3a      	ldr	r2, [r7, #32]
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	61fb      	str	r3, [r7, #28]
 8006284:	4b25      	ldr	r3, [pc, #148]	@ (800631c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	e00b      	b.n	80062a4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	b2da      	uxtb	r2, r3
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	1c59      	adds	r1, r3, #1
 8006294:	61f9      	str	r1, [r7, #28]
 8006296:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	09db      	lsrs	r3, r3, #7
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80062a8:	d8f0      	bhi.n	800628c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	61fa      	str	r2, [r7, #28]
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	2300      	movs	r3, #0
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	e00b      	b.n	80062dc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	1c59      	adds	r1, r3, #1
 80062cc:	6179      	str	r1, [r7, #20]
 80062ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	09db      	lsrs	r3, r3, #7
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b7f      	cmp	r3, #127	@ 0x7f
 80062e0:	d8f0      	bhi.n	80062c4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	617a      	str	r2, [r7, #20]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80062f2:	2218      	movs	r2, #24
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	68b8      	ldr	r0, [r7, #8]
 80062f8:	f7ff f860 	bl	80053bc <_SendPacket>
  RECORD_END();
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006302:	4b06      	ldr	r3, [pc, #24]	@ (800631c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800630a:	4b04      	ldr	r3, [pc, #16]	@ (800631c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630e:	4798      	blx	r3
  }
}
 8006310:	bf00      	nop
 8006312:	3730      	adds	r7, #48	@ 0x30
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	200045c0 	.word	0x200045c0
 800631c:	20004590 	.word	0x20004590

08006320 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b092      	sub	sp, #72	@ 0x48
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006328:	f3ef 8311 	mrs	r3, BASEPRI
 800632c:	f04f 0120 	mov.w	r1, #32
 8006330:	f381 8811 	msr	BASEPRI, r1
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	486a      	ldr	r0, [pc, #424]	@ (80064e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006338:	f7fe ff53 	bl	80051e2 <_PreparePacket>
 800633c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	647b      	str	r3, [r7, #68]	@ 0x44
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	4b66      	ldr	r3, [pc, #408]	@ (80064e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	643b      	str	r3, [r7, #64]	@ 0x40
 8006352:	e00b      	b.n	800636c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006356:	b2da      	uxtb	r2, r3
 8006358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800635a:	1c59      	adds	r1, r3, #1
 800635c:	6479      	str	r1, [r7, #68]	@ 0x44
 800635e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006368:	09db      	lsrs	r3, r3, #7
 800636a:	643b      	str	r3, [r7, #64]	@ 0x40
 800636c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800636e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006370:	d8f0      	bhi.n	8006354 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	647a      	str	r2, [r7, #68]	@ 0x44
 8006378:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006380:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800638c:	e00b      	b.n	80063a6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800638e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006390:	b2da      	uxtb	r2, r3
 8006392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006394:	1c59      	adds	r1, r3, #1
 8006396:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006398:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	701a      	strb	r2, [r3, #0]
 80063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a2:	09db      	lsrs	r3, r3, #7
 80063a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80063aa:	d8f0      	bhi.n	800638e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80063ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80063b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ba:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	4619      	mov	r1, r3
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7fe fed3 	bl	8005170 <_EncodeStr>
 80063ca:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80063cc:	2209      	movs	r2, #9
 80063ce:	68f9      	ldr	r1, [r7, #12]
 80063d0:	6938      	ldr	r0, [r7, #16]
 80063d2:	f7fe fff3 	bl	80053bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b40      	ldr	r3, [pc, #256]	@ (80064e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ea:	e00b      	b.n	8006404 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80063ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f2:	1c59      	adds	r1, r3, #1
 80063f4:	6379      	str	r1, [r7, #52]	@ 0x34
 80063f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	09db      	lsrs	r3, r3, #7
 8006402:	633b      	str	r3, [r7, #48]	@ 0x30
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	2b7f      	cmp	r3, #127	@ 0x7f
 8006408:	d8f0      	bhi.n	80063ec <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800640a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006418:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006424:	e00b      	b.n	800643e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	b2da      	uxtb	r2, r3
 800642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006430:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	09db      	lsrs	r3, r3, #7
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	2b7f      	cmp	r3, #127	@ 0x7f
 8006442:	d8f0      	bhi.n	8006426 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800644a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006452:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	627b      	str	r3, [r7, #36]	@ 0x24
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	623b      	str	r3, [r7, #32]
 800645e:	e00b      	b.n	8006478 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	b2da      	uxtb	r2, r3
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	1c59      	adds	r1, r3, #1
 8006468:	6279      	str	r1, [r7, #36]	@ 0x24
 800646a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	09db      	lsrs	r3, r3, #7
 8006476:	623b      	str	r3, [r7, #32]
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	2b7f      	cmp	r3, #127	@ 0x7f
 800647c:	d8f0      	bhi.n	8006460 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	627a      	str	r2, [r7, #36]	@ 0x24
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	61fb      	str	r3, [r7, #28]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	e00b      	b.n	80064b2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	b2da      	uxtb	r2, r3
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	1c59      	adds	r1, r3, #1
 80064a2:	61f9      	str	r1, [r7, #28]
 80064a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	09db      	lsrs	r3, r3, #7
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80064b6:	d8f0      	bhi.n	800649a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	61fa      	str	r2, [r7, #28]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80064c8:	2215      	movs	r2, #21
 80064ca:	68f9      	ldr	r1, [r7, #12]
 80064cc:	6938      	ldr	r0, [r7, #16]
 80064ce:	f7fe ff75 	bl	80053bc <_SendPacket>
  RECORD_END();
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f383 8811 	msr	BASEPRI, r3
}
 80064d8:	bf00      	nop
 80064da:	3748      	adds	r7, #72	@ 0x48
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	200045c0 	.word	0x200045c0
 80064e4:	20004590 	.word	0x20004590

080064e8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80064ec:	4b07      	ldr	r3, [pc, #28]	@ (800650c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d008      	beq.n	8006506 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80064fe:	4b03      	ldr	r3, [pc, #12]	@ (800650c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	4798      	blx	r3
  }
}
 8006506:	bf00      	nop
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20004590 	.word	0x20004590

08006510 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006518:	f3ef 8311 	mrs	r3, BASEPRI
 800651c:	f04f 0120 	mov.w	r1, #32
 8006520:	f381 8811 	msr	BASEPRI, r1
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	480b      	ldr	r0, [pc, #44]	@ (8006554 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006528:	f7fe fe5b 	bl	80051e2 <_PreparePacket>
 800652c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800652e:	2280      	movs	r2, #128	@ 0x80
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	6938      	ldr	r0, [r7, #16]
 8006534:	f7fe fe1c 	bl	8005170 <_EncodeStr>
 8006538:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800653a:	220e      	movs	r2, #14
 800653c:	68f9      	ldr	r1, [r7, #12]
 800653e:	6938      	ldr	r0, [r7, #16]
 8006540:	f7fe ff3c 	bl	80053bc <_SendPacket>
  RECORD_END();
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f383 8811 	msr	BASEPRI, r3
}
 800654a:	bf00      	nop
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200045c0 	.word	0x200045c0

08006558 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800655e:	4b15      	ldr	r3, [pc, #84]	@ (80065b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01a      	beq.n	800659c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006566:	4b13      	ldr	r3, [pc, #76]	@ (80065b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006570:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4798      	blx	r3
 8006578:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800657c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800657e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	000a      	movs	r2, r1
 800658c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800658e:	4613      	mov	r3, r2
 8006590:	461a      	mov	r2, r3
 8006592:	4621      	mov	r1, r4
 8006594:	200d      	movs	r0, #13
 8006596:	f7ff fcef 	bl	8005f78 <SEGGER_SYSVIEW_RecordU32x2>
 800659a:	e006      	b.n	80065aa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800659c:	4b06      	ldr	r3, [pc, #24]	@ (80065b8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4619      	mov	r1, r3
 80065a2:	200c      	movs	r0, #12
 80065a4:	f7ff fcac 	bl	8005f00 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80065a8:	bf00      	nop
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd90      	pop	{r4, r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20004590 	.word	0x20004590
 80065b8:	e0001004 	.word	0xe0001004

080065bc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065c2:	f3ef 8311 	mrs	r3, BASEPRI
 80065c6:	f04f 0120 	mov.w	r1, #32
 80065ca:	f381 8811 	msr	BASEPRI, r1
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	4819      	ldr	r0, [pc, #100]	@ (8006638 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80065d2:	f7fe fe06 	bl	80051e2 <_PreparePacket>
 80065d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80065dc:	4b17      	ldr	r3, [pc, #92]	@ (800663c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	e00b      	b.n	8006608 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	1c59      	adds	r1, r3, #1
 80065f8:	6179      	str	r1, [r7, #20]
 80065fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	09db      	lsrs	r3, r3, #7
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b7f      	cmp	r3, #127	@ 0x7f
 800660c:	d8f0      	bhi.n	80065f0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	617a      	str	r2, [r7, #20]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800661e:	2202      	movs	r2, #2
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	68b8      	ldr	r0, [r7, #8]
 8006624:	f7fe feca 	bl	80053bc <_SendPacket>
  RECORD_END();
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f383 8811 	msr	BASEPRI, r3
}
 800662e:	bf00      	nop
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	200045c0 	.word	0x200045c0
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006646:	f3ef 8311 	mrs	r3, BASEPRI
 800664a:	f04f 0120 	mov.w	r1, #32
 800664e:	f381 8811 	msr	BASEPRI, r1
 8006652:	607b      	str	r3, [r7, #4]
 8006654:	4807      	ldr	r0, [pc, #28]	@ (8006674 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006656:	f7fe fdc4 	bl	80051e2 <_PreparePacket>
 800665a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800665c:	2203      	movs	r2, #3
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6838      	ldr	r0, [r7, #0]
 8006662:	f7fe feab 	bl	80053bc <_SendPacket>
  RECORD_END();
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f383 8811 	msr	BASEPRI, r3
}
 800666c:	bf00      	nop
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	200045c0 	.word	0x200045c0

08006678 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800667e:	f3ef 8311 	mrs	r3, BASEPRI
 8006682:	f04f 0120 	mov.w	r1, #32
 8006686:	f381 8811 	msr	BASEPRI, r1
 800668a:	607b      	str	r3, [r7, #4]
 800668c:	4807      	ldr	r0, [pc, #28]	@ (80066ac <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800668e:	f7fe fda8 	bl	80051e2 <_PreparePacket>
 8006692:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006694:	2212      	movs	r2, #18
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6838      	ldr	r0, [r7, #0]
 800669a:	f7fe fe8f 	bl	80053bc <_SendPacket>
  RECORD_END();
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f383 8811 	msr	BASEPRI, r3
}
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	200045c0 	.word	0x200045c0

080066b0 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066b8:	f3ef 8311 	mrs	r3, BASEPRI
 80066bc:	f04f 0120 	mov.w	r1, #32
 80066c0:	f381 8811 	msr	BASEPRI, r1
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	4817      	ldr	r0, [pc, #92]	@ (8006724 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 80066c8:	f7fe fd8b 	bl	80051e2 <_PreparePacket>
 80066cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	61fb      	str	r3, [r7, #28]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	61bb      	str	r3, [r7, #24]
 80066da:	e00b      	b.n	80066f4 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	1c59      	adds	r1, r3, #1
 80066e4:	61f9      	str	r1, [r7, #28]
 80066e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	09db      	lsrs	r3, r3, #7
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80066f8:	d8f0      	bhi.n	80066dc <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	61fa      	str	r2, [r7, #28]
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800670a:	221c      	movs	r2, #28
 800670c:	68f9      	ldr	r1, [r7, #12]
 800670e:	6938      	ldr	r0, [r7, #16]
 8006710:	f7fe fe54 	bl	80053bc <_SendPacket>
  RECORD_END();
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f383 8811 	msr	BASEPRI, r3
}
 800671a:	bf00      	nop
 800671c:	3720      	adds	r7, #32
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	200045c0 	.word	0x200045c0

08006728 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	@ 0x28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006732:	f3ef 8311 	mrs	r3, BASEPRI
 8006736:	f04f 0120 	mov.w	r1, #32
 800673a:	f381 8811 	msr	BASEPRI, r1
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	4824      	ldr	r0, [pc, #144]	@ (80067d4 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006742:	f7fe fd4e 	bl	80051e2 <_PreparePacket>
 8006746:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	623b      	str	r3, [r7, #32]
 8006754:	e00b      	b.n	800676e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	1c59      	adds	r1, r3, #1
 800675e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006760:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	09db      	lsrs	r3, r3, #7
 800676c:	623b      	str	r3, [r7, #32]
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	2b7f      	cmp	r3, #127	@ 0x7f
 8006772:	d8f0      	bhi.n	8006756 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	627a      	str	r2, [r7, #36]	@ 0x24
 800677a:	6a3a      	ldr	r2, [r7, #32]
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	e00b      	b.n	80067a6 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	b2da      	uxtb	r2, r3
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	1c59      	adds	r1, r3, #1
 8006796:	61f9      	str	r1, [r7, #28]
 8006798:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	09db      	lsrs	r3, r3, #7
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067aa:	d8f0      	bhi.n	800678e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	61fa      	str	r2, [r7, #28]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80067bc:	221c      	movs	r2, #28
 80067be:	68f9      	ldr	r1, [r7, #12]
 80067c0:	6938      	ldr	r0, [r7, #16]
 80067c2:	f7fe fdfb 	bl	80053bc <_SendPacket>
  RECORD_END();
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f383 8811 	msr	BASEPRI, r3
}
 80067cc:	bf00      	nop
 80067ce:	3728      	adds	r7, #40	@ 0x28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	200045c0 	.word	0x200045c0

080067d8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067de:	f3ef 8311 	mrs	r3, BASEPRI
 80067e2:	f04f 0120 	mov.w	r1, #32
 80067e6:	f381 8811 	msr	BASEPRI, r1
 80067ea:	607b      	str	r3, [r7, #4]
 80067ec:	4807      	ldr	r0, [pc, #28]	@ (800680c <SEGGER_SYSVIEW_OnIdle+0x34>)
 80067ee:	f7fe fcf8 	bl	80051e2 <_PreparePacket>
 80067f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80067f4:	2211      	movs	r2, #17
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6838      	ldr	r0, [r7, #0]
 80067fa:	f7fe fddf 	bl	80053bc <_SendPacket>
  RECORD_END();
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f383 8811 	msr	BASEPRI, r3
}
 8006804:	bf00      	nop
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	200045c0 	.word	0x200045c0

08006810 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006818:	f3ef 8311 	mrs	r3, BASEPRI
 800681c:	f04f 0120 	mov.w	r1, #32
 8006820:	f381 8811 	msr	BASEPRI, r1
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	4819      	ldr	r0, [pc, #100]	@ (800688c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006828:	f7fe fcdb 	bl	80051e2 <_PreparePacket>
 800682c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006832:	4b17      	ldr	r3, [pc, #92]	@ (8006890 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	61bb      	str	r3, [r7, #24]
 8006844:	e00b      	b.n	800685e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	61f9      	str	r1, [r7, #28]
 8006850:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	09db      	lsrs	r3, r3, #7
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b7f      	cmp	r3, #127	@ 0x7f
 8006862:	d8f0      	bhi.n	8006846 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	61fa      	str	r2, [r7, #28]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006874:	2208      	movs	r2, #8
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	6938      	ldr	r0, [r7, #16]
 800687a:	f7fe fd9f 	bl	80053bc <_SendPacket>
  RECORD_END();
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f383 8811 	msr	BASEPRI, r3
}
 8006884:	bf00      	nop
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	200045c0 	.word	0x200045c0
 8006890:	20004590 	.word	0x20004590

08006894 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800689c:	f3ef 8311 	mrs	r3, BASEPRI
 80068a0:	f04f 0120 	mov.w	r1, #32
 80068a4:	f381 8811 	msr	BASEPRI, r1
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	4819      	ldr	r0, [pc, #100]	@ (8006910 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80068ac:	f7fe fc99 	bl	80051e2 <_PreparePacket>
 80068b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068b6:	4b17      	ldr	r3, [pc, #92]	@ (8006914 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	e00b      	b.n	80068e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	1c59      	adds	r1, r3, #1
 80068d2:	61f9      	str	r1, [r7, #28]
 80068d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	09db      	lsrs	r3, r3, #7
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80068e6:	d8f0      	bhi.n	80068ca <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	61fa      	str	r2, [r7, #28]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80068f8:	2204      	movs	r2, #4
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	6938      	ldr	r0, [r7, #16]
 80068fe:	f7fe fd5d 	bl	80053bc <_SendPacket>
  RECORD_END();
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f383 8811 	msr	BASEPRI, r3
}
 8006908:	bf00      	nop
 800690a:	3720      	adds	r7, #32
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	200045c0 	.word	0x200045c0
 8006914:	20004590 	.word	0x20004590

08006918 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006920:	f3ef 8311 	mrs	r3, BASEPRI
 8006924:	f04f 0120 	mov.w	r1, #32
 8006928:	f381 8811 	msr	BASEPRI, r1
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	4819      	ldr	r0, [pc, #100]	@ (8006994 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006930:	f7fe fc57 	bl	80051e2 <_PreparePacket>
 8006934:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800693a:	4b17      	ldr	r3, [pc, #92]	@ (8006998 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	61bb      	str	r3, [r7, #24]
 800694c:	e00b      	b.n	8006966 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	1c59      	adds	r1, r3, #1
 8006956:	61f9      	str	r1, [r7, #28]
 8006958:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	09db      	lsrs	r3, r3, #7
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b7f      	cmp	r3, #127	@ 0x7f
 800696a:	d8f0      	bhi.n	800694e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	61fa      	str	r2, [r7, #28]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800697c:	2206      	movs	r2, #6
 800697e:	68f9      	ldr	r1, [r7, #12]
 8006980:	6938      	ldr	r0, [r7, #16]
 8006982:	f7fe fd1b 	bl	80053bc <_SendPacket>
  RECORD_END();
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f383 8811 	msr	BASEPRI, r3
}
 800698c:	bf00      	nop
 800698e:	3720      	adds	r7, #32
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	200045c0 	.word	0x200045c0
 8006998:	20004590 	.word	0x20004590

0800699c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	@ 0x28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80069a6:	f3ef 8311 	mrs	r3, BASEPRI
 80069aa:	f04f 0120 	mov.w	r1, #32
 80069ae:	f381 8811 	msr	BASEPRI, r1
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	4827      	ldr	r0, [pc, #156]	@ (8006a54 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80069b6:	f7fe fc14 	bl	80051e2 <_PreparePacket>
 80069ba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069c0:	4b25      	ldr	r3, [pc, #148]	@ (8006a58 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	e00b      	b.n	80069ec <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	1c59      	adds	r1, r3, #1
 80069dc:	6279      	str	r1, [r7, #36]	@ 0x24
 80069de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	09db      	lsrs	r3, r3, #7
 80069ea:	623b      	str	r3, [r7, #32]
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80069f0:	d8f0      	bhi.n	80069d4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80069f8:	6a3a      	ldr	r2, [r7, #32]
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	e00b      	b.n	8006a24 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	1c59      	adds	r1, r3, #1
 8006a14:	61f9      	str	r1, [r7, #28]
 8006a16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	09db      	lsrs	r3, r3, #7
 8006a22:	61bb      	str	r3, [r7, #24]
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a28:	d8f0      	bhi.n	8006a0c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	61fa      	str	r2, [r7, #28]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006a3a:	2207      	movs	r2, #7
 8006a3c:	68f9      	ldr	r1, [r7, #12]
 8006a3e:	6938      	ldr	r0, [r7, #16]
 8006a40:	f7fe fcbc 	bl	80053bc <_SendPacket>
  RECORD_END();
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f383 8811 	msr	BASEPRI, r3
}
 8006a4a:	bf00      	nop
 8006a4c:	3728      	adds	r7, #40	@ 0x28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	200045c0 	.word	0x200045c0
 8006a58:	20004590 	.word	0x20004590

08006a5c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006a64:	4b04      	ldr	r3, [pc, #16]	@ (8006a78 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	1ad3      	subs	r3, r2, r3
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	20004590 	.word	0x20004590

08006a7c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08c      	sub	sp, #48	@ 0x30
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006a86:	4b40      	ldr	r3, [pc, #256]	@ (8006b88 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d077      	beq.n	8006b7e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b88 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006a94:	2300      	movs	r3, #0
 8006a96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a98:	e008      	b.n	8006aac <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d3f2      	bcc.n	8006a9a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006ab4:	e000      	b.n	8006ab8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006ab6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d055      	beq.n	8006b6a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006abe:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac2:	f04f 0120 	mov.w	r1, #32
 8006ac6:	f381 8811 	msr	BASEPRI, r1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	482f      	ldr	r0, [pc, #188]	@ (8006b8c <SEGGER_SYSVIEW_SendModule+0x110>)
 8006ace:	f7fe fb88 	bl	80051e2 <_PreparePacket>
 8006ad2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	623b      	str	r3, [r7, #32]
 8006ae0:	e00b      	b.n	8006afa <SEGGER_SYSVIEW_SendModule+0x7e>
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	1c59      	adds	r1, r3, #1
 8006aea:	6279      	str	r1, [r7, #36]	@ 0x24
 8006aec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	09db      	lsrs	r3, r3, #7
 8006af8:	623b      	str	r3, [r7, #32]
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006afe:	d8f0      	bhi.n	8006ae2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b06:	6a3a      	ldr	r2, [r7, #32]
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	61fb      	str	r3, [r7, #28]
 8006b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	e00b      	b.n	8006b34 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	1c59      	adds	r1, r3, #1
 8006b24:	61f9      	str	r1, [r7, #28]
 8006b26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	09db      	lsrs	r3, r3, #7
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b38:	d8f0      	bhi.n	8006b1c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	61fa      	str	r2, [r7, #28]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2280      	movs	r2, #128	@ 0x80
 8006b50:	4619      	mov	r1, r3
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7fe fb0c 	bl	8005170 <_EncodeStr>
 8006b58:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006b5a:	2216      	movs	r2, #22
 8006b5c:	68f9      	ldr	r1, [r7, #12]
 8006b5e:	6938      	ldr	r0, [r7, #16]
 8006b60:	f7fe fc2c 	bl	80053bc <_SendPacket>
      RECORD_END();
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d006      	beq.n	8006b7e <SEGGER_SYSVIEW_SendModule+0x102>
 8006b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	4798      	blx	r3
    }
  }
}
 8006b7e:	bf00      	nop
 8006b80:	3730      	adds	r7, #48	@ 0x30
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	200045b8 	.word	0x200045b8
 8006b8c:	200045c0 	.word	0x200045c0

08006b90 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006b96:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00f      	beq.n	8006bbe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f2      	bne.n	8006ba4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	200045b8 	.word	0x200045b8

08006bcc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd6:	f04f 0120 	mov.w	r1, #32
 8006bda:	f381 8811 	msr	BASEPRI, r1
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	4817      	ldr	r0, [pc, #92]	@ (8006c40 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006be2:	f7fe fafe 	bl	80051e2 <_PreparePacket>
 8006be6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	4b14      	ldr	r3, [pc, #80]	@ (8006c44 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	613b      	str	r3, [r7, #16]
 8006bf6:	e00b      	b.n	8006c10 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	1c59      	adds	r1, r3, #1
 8006c00:	6179      	str	r1, [r7, #20]
 8006c02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	09db      	lsrs	r3, r3, #7
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c14:	d8f0      	bhi.n	8006bf8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	617a      	str	r2, [r7, #20]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006c26:	221b      	movs	r2, #27
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	68b8      	ldr	r0, [r7, #8]
 8006c2c:	f7fe fbc6 	bl	80053bc <_SendPacket>
  RECORD_END();
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f383 8811 	msr	BASEPRI, r3
}
 8006c36:	bf00      	nop
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	200045c0 	.word	0x200045c0
 8006c44:	200045bc 	.word	0x200045bc

08006c48 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006c48:	b40f      	push	{r0, r1, r2, r3}
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006c50:	f107 0314 	add.w	r3, r7, #20
 8006c54:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	6938      	ldr	r0, [r7, #16]
 8006c5e:	f7fe febd 	bl	80059dc <_VPrintTarget>
  va_end(ParamList);
}
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c6c:	b004      	add	sp, #16
 8006c6e:	4770      	bx	lr

08006c70 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08a      	sub	sp, #40	@ 0x28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c78:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7c:	f04f 0120 	mov.w	r1, #32
 8006c80:	f381 8811 	msr	BASEPRI, r1
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	4827      	ldr	r0, [pc, #156]	@ (8006d24 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006c88:	f7fe faab 	bl	80051e2 <_PreparePacket>
 8006c8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c8e:	2280      	movs	r2, #128	@ 0x80
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	6938      	ldr	r0, [r7, #16]
 8006c94:	f7fe fa6c 	bl	8005170 <_EncodeStr>
 8006c98:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	623b      	str	r3, [r7, #32]
 8006ca2:	e00b      	b.n	8006cbc <SEGGER_SYSVIEW_Warn+0x4c>
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	1c59      	adds	r1, r3, #1
 8006cac:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	09db      	lsrs	r3, r3, #7
 8006cba:	623b      	str	r3, [r7, #32]
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cc0:	d8f0      	bhi.n	8006ca4 <SEGGER_SYSVIEW_Warn+0x34>
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cc8:	6a3a      	ldr	r2, [r7, #32]
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	e00b      	b.n	8006cf4 <SEGGER_SYSVIEW_Warn+0x84>
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	61f9      	str	r1, [r7, #28]
 8006ce6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	09db      	lsrs	r3, r3, #7
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cf8:	d8f0      	bhi.n	8006cdc <SEGGER_SYSVIEW_Warn+0x6c>
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	61fa      	str	r2, [r7, #28]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006d0a:	221a      	movs	r2, #26
 8006d0c:	68f9      	ldr	r1, [r7, #12]
 8006d0e:	6938      	ldr	r0, [r7, #16]
 8006d10:	f7fe fb54 	bl	80053bc <_SendPacket>
  RECORD_END();
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f383 8811 	msr	BASEPRI, r3
}
 8006d1a:	bf00      	nop
 8006d1c:	3728      	adds	r7, #40	@ 0x28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200045c0 	.word	0x200045c0

08006d28 <memcmp>:
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	3901      	subs	r1, #1
 8006d2c:	4402      	add	r2, r0
 8006d2e:	4290      	cmp	r0, r2
 8006d30:	d101      	bne.n	8006d36 <memcmp+0xe>
 8006d32:	2000      	movs	r0, #0
 8006d34:	e005      	b.n	8006d42 <memcmp+0x1a>
 8006d36:	7803      	ldrb	r3, [r0, #0]
 8006d38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	d001      	beq.n	8006d44 <memcmp+0x1c>
 8006d40:	1b18      	subs	r0, r3, r4
 8006d42:	bd10      	pop	{r4, pc}
 8006d44:	3001      	adds	r0, #1
 8006d46:	e7f2      	b.n	8006d2e <memcmp+0x6>

08006d48 <memset>:
 8006d48:	4402      	add	r2, r0
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d100      	bne.n	8006d52 <memset+0xa>
 8006d50:	4770      	bx	lr
 8006d52:	f803 1b01 	strb.w	r1, [r3], #1
 8006d56:	e7f9      	b.n	8006d4c <memset+0x4>

08006d58 <__libc_init_array>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8006d90 <__libc_init_array+0x38>)
 8006d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8006d94 <__libc_init_array+0x3c>)
 8006d5e:	1b64      	subs	r4, r4, r5
 8006d60:	10a4      	asrs	r4, r4, #2
 8006d62:	2600      	movs	r6, #0
 8006d64:	42a6      	cmp	r6, r4
 8006d66:	d109      	bne.n	8006d7c <__libc_init_array+0x24>
 8006d68:	4d0b      	ldr	r5, [pc, #44]	@ (8006d98 <__libc_init_array+0x40>)
 8006d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8006d9c <__libc_init_array+0x44>)
 8006d6c:	f000 f826 	bl	8006dbc <_init>
 8006d70:	1b64      	subs	r4, r4, r5
 8006d72:	10a4      	asrs	r4, r4, #2
 8006d74:	2600      	movs	r6, #0
 8006d76:	42a6      	cmp	r6, r4
 8006d78:	d105      	bne.n	8006d86 <__libc_init_array+0x2e>
 8006d7a:	bd70      	pop	{r4, r5, r6, pc}
 8006d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d80:	4798      	blx	r3
 8006d82:	3601      	adds	r6, #1
 8006d84:	e7ee      	b.n	8006d64 <__libc_init_array+0xc>
 8006d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d8a:	4798      	blx	r3
 8006d8c:	3601      	adds	r6, #1
 8006d8e:	e7f2      	b.n	8006d76 <__libc_init_array+0x1e>
 8006d90:	08006f90 	.word	0x08006f90
 8006d94:	08006f90 	.word	0x08006f90
 8006d98:	08006f90 	.word	0x08006f90
 8006d9c:	08006f94 	.word	0x08006f94

08006da0 <memcpy>:
 8006da0:	440a      	add	r2, r1
 8006da2:	4291      	cmp	r1, r2
 8006da4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006da8:	d100      	bne.n	8006dac <memcpy+0xc>
 8006daa:	4770      	bx	lr
 8006dac:	b510      	push	{r4, lr}
 8006dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006db6:	4291      	cmp	r1, r2
 8006db8:	d1f9      	bne.n	8006dae <memcpy+0xe>
 8006dba:	bd10      	pop	{r4, pc}

08006dbc <_init>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr

08006dc8 <_fini>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr
