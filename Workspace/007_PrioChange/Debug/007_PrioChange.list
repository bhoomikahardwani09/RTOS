
007_PrioChange.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006888  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006a28  08006a28  00007a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b7c  08006b7c  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b7c  08006b7c  00007b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b84  08006b84  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b84  08006b84  00007b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b88  08006b88  00007b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006b8c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000469c  20000010  08006b9c  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200046ac  08006b9c  000086ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001574e  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f6  00000000  00000000  0001d78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00020888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f66  00000000  00000000  00021c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a187  00000000  00000000  00022be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154bf  00000000  00000000  0003cd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac171  00000000  00000000  0005222c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe39d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005400  00000000  00000000  000fe3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d7  00000000  00000000  001037e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a10 	.word	0x08006a10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006a10 	.word	0x08006a10

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200030d8 	.word	0x200030d8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000288:	f000 b988 	b.w	800059c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	468e      	mov	lr, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	4688      	mov	r8, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d962      	bls.n	8000380 <__udivmoddi4+0xdc>
 80002ba:	fab2 f682 	clz	r6, r2
 80002be:	b14e      	cbz	r6, 80002d4 <__udivmoddi4+0x30>
 80002c0:	f1c6 0320 	rsb	r3, r6, #32
 80002c4:	fa01 f806 	lsl.w	r8, r1, r6
 80002c8:	fa20 f303 	lsr.w	r3, r0, r3
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	ea43 0808 	orr.w	r8, r3, r8
 80002d2:	40b4      	lsls	r4, r6
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f fc87 	uxth.w	ip, r7
 80002dc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f8:	f080 80ea 	bcs.w	80004d0 <__udivmoddi4+0x22c>
 80002fc:	429a      	cmp	r2, r3
 80002fe:	f240 80e7 	bls.w	80004d0 <__udivmoddi4+0x22c>
 8000302:	3902      	subs	r1, #2
 8000304:	443b      	add	r3, r7
 8000306:	1a9a      	subs	r2, r3, r2
 8000308:	b2a3      	uxth	r3, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb00 fc0c 	mul.w	ip, r0, ip
 800031a:	459c      	cmp	ip, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x8e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000324:	f080 80d6 	bcs.w	80004d4 <__udivmoddi4+0x230>
 8000328:	459c      	cmp	ip, r3
 800032a:	f240 80d3 	bls.w	80004d4 <__udivmoddi4+0x230>
 800032e:	443b      	add	r3, r7
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000336:	eba3 030c 	sub.w	r3, r3, ip
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa2>
 800033e:	40f3      	lsrs	r3, r6
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xb6>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb0>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa2>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x14c>
 8000362:	4573      	cmp	r3, lr
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xc8>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 8105 	bhi.w	8000576 <__udivmoddi4+0x2d2>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000372:	2001      	movs	r0, #1
 8000374:	4690      	mov	r8, r2
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e5      	beq.n	8000346 <__udivmoddi4+0xa2>
 800037a:	e9c5 4800 	strd	r4, r8, [r5]
 800037e:	e7e2      	b.n	8000346 <__udivmoddi4+0xa2>
 8000380:	2a00      	cmp	r2, #0
 8000382:	f000 8090 	beq.w	80004a6 <__udivmoddi4+0x202>
 8000386:	fab2 f682 	clz	r6, r2
 800038a:	2e00      	cmp	r6, #0
 800038c:	f040 80a4 	bne.w	80004d8 <__udivmoddi4+0x234>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	0c03      	lsrs	r3, r0, #16
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	b280      	uxth	r0, r0
 800039a:	b2bc      	uxth	r4, r7
 800039c:	2101      	movs	r1, #1
 800039e:	fbb2 fcfe 	udiv	ip, r2, lr
 80003a2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003aa:	fb04 f20c 	mul.w	r2, r4, ip
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d907      	bls.n	80003c2 <__udivmoddi4+0x11e>
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b8:	d202      	bcs.n	80003c0 <__udivmoddi4+0x11c>
 80003ba:	429a      	cmp	r2, r3
 80003bc:	f200 80e0 	bhi.w	8000580 <__udivmoddi4+0x2dc>
 80003c0:	46c4      	mov	ip, r8
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003cc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003d0:	fb02 f404 	mul.w	r4, r2, r4
 80003d4:	429c      	cmp	r4, r3
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x144>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x142>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f200 80ca 	bhi.w	800057a <__udivmoddi4+0x2d6>
 80003e6:	4602      	mov	r2, r0
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x98>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa0e f401 	lsl.w	r4, lr, r1
 8000400:	fa20 f306 	lsr.w	r3, r0, r6
 8000404:	fa2e fe06 	lsr.w	lr, lr, r6
 8000408:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800040c:	4323      	orrs	r3, r4
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	fa1f fc87 	uxth.w	ip, r7
 8000416:	fbbe f0f9 	udiv	r0, lr, r9
 800041a:	0c1c      	lsrs	r4, r3, #16
 800041c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000420:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000424:	fb00 fe0c 	mul.w	lr, r0, ip
 8000428:	45a6      	cmp	lr, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d909      	bls.n	8000444 <__udivmoddi4+0x1a0>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000436:	f080 809c 	bcs.w	8000572 <__udivmoddi4+0x2ce>
 800043a:	45a6      	cmp	lr, r4
 800043c:	f240 8099 	bls.w	8000572 <__udivmoddi4+0x2ce>
 8000440:	3802      	subs	r0, #2
 8000442:	443c      	add	r4, r7
 8000444:	eba4 040e 	sub.w	r4, r4, lr
 8000448:	fa1f fe83 	uxth.w	lr, r3
 800044c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000450:	fb09 4413 	mls	r4, r9, r3, r4
 8000454:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000458:	fb03 fc0c 	mul.w	ip, r3, ip
 800045c:	45a4      	cmp	ip, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x1ce>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000466:	f080 8082 	bcs.w	800056e <__udivmoddi4+0x2ca>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d97f      	bls.n	800056e <__udivmoddi4+0x2ca>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000476:	eba4 040c 	sub.w	r4, r4, ip
 800047a:	fba0 ec02 	umull	lr, ip, r0, r2
 800047e:	4564      	cmp	r4, ip
 8000480:	4673      	mov	r3, lr
 8000482:	46e1      	mov	r9, ip
 8000484:	d362      	bcc.n	800054c <__udivmoddi4+0x2a8>
 8000486:	d05f      	beq.n	8000548 <__udivmoddi4+0x2a4>
 8000488:	b15d      	cbz	r5, 80004a2 <__udivmoddi4+0x1fe>
 800048a:	ebb8 0203 	subs.w	r2, r8, r3
 800048e:	eb64 0409 	sbc.w	r4, r4, r9
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	fa22 f301 	lsr.w	r3, r2, r1
 800049a:	431e      	orrs	r6, r3
 800049c:	40cc      	lsrs	r4, r1
 800049e:	e9c5 6400 	strd	r6, r4, [r5]
 80004a2:	2100      	movs	r1, #0
 80004a4:	e74f      	b.n	8000346 <__udivmoddi4+0xa2>
 80004a6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004aa:	0c01      	lsrs	r1, r0, #16
 80004ac:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004b0:	b280      	uxth	r0, r0
 80004b2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b6:	463b      	mov	r3, r7
 80004b8:	4638      	mov	r0, r7
 80004ba:	463c      	mov	r4, r7
 80004bc:	46b8      	mov	r8, r7
 80004be:	46be      	mov	lr, r7
 80004c0:	2620      	movs	r6, #32
 80004c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c6:	eba2 0208 	sub.w	r2, r2, r8
 80004ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ce:	e766      	b.n	800039e <__udivmoddi4+0xfa>
 80004d0:	4601      	mov	r1, r0
 80004d2:	e718      	b.n	8000306 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e72c      	b.n	8000332 <__udivmoddi4+0x8e>
 80004d8:	f1c6 0220 	rsb	r2, r6, #32
 80004dc:	fa2e f302 	lsr.w	r3, lr, r2
 80004e0:	40b7      	lsls	r7, r6
 80004e2:	40b1      	lsls	r1, r6
 80004e4:	fa20 f202 	lsr.w	r2, r0, r2
 80004e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004ec:	430a      	orrs	r2, r1
 80004ee:	fbb3 f8fe 	udiv	r8, r3, lr
 80004f2:	b2bc      	uxth	r4, r7
 80004f4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f8:	0c11      	lsrs	r1, r2, #16
 80004fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fe:	fb08 f904 	mul.w	r9, r8, r4
 8000502:	40b0      	lsls	r0, r6
 8000504:	4589      	cmp	r9, r1
 8000506:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800050a:	b280      	uxth	r0, r0
 800050c:	d93e      	bls.n	800058c <__udivmoddi4+0x2e8>
 800050e:	1879      	adds	r1, r7, r1
 8000510:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000514:	d201      	bcs.n	800051a <__udivmoddi4+0x276>
 8000516:	4589      	cmp	r9, r1
 8000518:	d81f      	bhi.n	800055a <__udivmoddi4+0x2b6>
 800051a:	eba1 0109 	sub.w	r1, r1, r9
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	fb0e 1119 	mls	r1, lr, r9, r1
 800052a:	b292      	uxth	r2, r2
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	4542      	cmp	r2, r8
 8000532:	d229      	bcs.n	8000588 <__udivmoddi4+0x2e4>
 8000534:	18ba      	adds	r2, r7, r2
 8000536:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800053a:	d2c4      	bcs.n	80004c6 <__udivmoddi4+0x222>
 800053c:	4542      	cmp	r2, r8
 800053e:	d2c2      	bcs.n	80004c6 <__udivmoddi4+0x222>
 8000540:	f1a9 0102 	sub.w	r1, r9, #2
 8000544:	443a      	add	r2, r7
 8000546:	e7be      	b.n	80004c6 <__udivmoddi4+0x222>
 8000548:	45f0      	cmp	r8, lr
 800054a:	d29d      	bcs.n	8000488 <__udivmoddi4+0x1e4>
 800054c:	ebbe 0302 	subs.w	r3, lr, r2
 8000550:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000554:	3801      	subs	r0, #1
 8000556:	46e1      	mov	r9, ip
 8000558:	e796      	b.n	8000488 <__udivmoddi4+0x1e4>
 800055a:	eba7 0909 	sub.w	r9, r7, r9
 800055e:	4449      	add	r1, r9
 8000560:	f1a8 0c02 	sub.w	ip, r8, #2
 8000564:	fbb1 f9fe 	udiv	r9, r1, lr
 8000568:	fb09 f804 	mul.w	r8, r9, r4
 800056c:	e7db      	b.n	8000526 <__udivmoddi4+0x282>
 800056e:	4673      	mov	r3, lr
 8000570:	e77f      	b.n	8000472 <__udivmoddi4+0x1ce>
 8000572:	4650      	mov	r0, sl
 8000574:	e766      	b.n	8000444 <__udivmoddi4+0x1a0>
 8000576:	4608      	mov	r0, r1
 8000578:	e6fd      	b.n	8000376 <__udivmoddi4+0xd2>
 800057a:	443b      	add	r3, r7
 800057c:	3a02      	subs	r2, #2
 800057e:	e733      	b.n	80003e8 <__udivmoddi4+0x144>
 8000580:	f1ac 0c02 	sub.w	ip, ip, #2
 8000584:	443b      	add	r3, r7
 8000586:	e71c      	b.n	80003c2 <__udivmoddi4+0x11e>
 8000588:	4649      	mov	r1, r9
 800058a:	e79c      	b.n	80004c6 <__udivmoddi4+0x222>
 800058c:	eba1 0109 	sub.w	r1, r1, r9
 8000590:	46c4      	mov	ip, r8
 8000592:	fbb1 f9fe 	udiv	r9, r1, lr
 8000596:	fb09 f804 	mul.w	r8, r9, r4
 800059a:	e7c4      	b.n	8000526 <__udivmoddi4+0x282>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fafd 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f859 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8b5 	bl	800071c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //enable the cycle count //
  DWT_CTRL |= (1 << 0);
 80005b2:	4b22      	ldr	r3, [pc, #136]	@ (800063c <main+0x9c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a21      	ldr	r2, [pc, #132]	@ (800063c <main+0x9c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005be:	f004 fc71 	bl	8004ea4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005c2:	f005 fb71 	bl	8005ca8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led1_handler, "Task - 1", configMINIMAL_STACK_SIZE * 2, "Executing task - 1", 3, &task1_handler);
 80005c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <main+0xa0>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2303      	movs	r3, #3
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <main+0xa4>)
 80005d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005d4:	491c      	ldr	r1, [pc, #112]	@ (8000648 <main+0xa8>)
 80005d6:	481d      	ldr	r0, [pc, #116]	@ (800064c <main+0xac>)
 80005d8:	f002 f93e 	bl	8002858 <xTaskCreate>
 80005dc:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d00b      	beq.n	80005fc <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e8:	f383 8811 	msr	BASEPRI, r3
 80005ec:	f3bf 8f6f 	isb	sy
 80005f0:	f3bf 8f4f 	dsb	sy
 80005f4:	60bb      	str	r3, [r7, #8]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <main+0x58>

  status = xTaskCreate(led2_handler, "Task - 2", configMINIMAL_STACK_SIZE * 2, "Executing task - 2", 2, &task2_handler);
 80005fc:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <main+0xb0>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2302      	movs	r3, #2
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <main+0xb4>)
 8000606:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800060a:	4913      	ldr	r1, [pc, #76]	@ (8000658 <main+0xb8>)
 800060c:	4813      	ldr	r0, [pc, #76]	@ (800065c <main+0xbc>)
 800060e:	f002 f923 	bl	8002858 <xTaskCreate>
 8000612:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00b      	beq.n	8000632 <main+0x92>
    __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	607b      	str	r3, [r7, #4]
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <main+0x8e>

  vTaskStartScheduler();
 8000632:	f002 fbfd 	bl	8002e30 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000636:	bf00      	nop
 8000638:	e7fd      	b.n	8000636 <main+0x96>
 800063a:	bf00      	nop
 800063c:	e0001000 	.word	0xe0001000
 8000640:	2000002c 	.word	0x2000002c
 8000644:	08006a28 	.word	0x08006a28
 8000648:	08006a3c 	.word	0x08006a3c
 800064c:	080008d1 	.word	0x080008d1
 8000650:	20000030 	.word	0x20000030
 8000654:	08006a48 	.word	0x08006a48
 8000658:	08006a5c 	.word	0x08006a5c
 800065c:	080008f5 	.word	0x080008f5

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	@ 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f994 	bl	800699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <SystemClock_Config+0xb4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <SystemClock_Config+0xb4>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <SystemClock_Config+0xb4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <SystemClock_Config+0xb8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <SystemClock_Config+0xb8>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <SystemClock_Config+0xb8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fd8b 	bl	80011ec <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006dc:	f000 f92b 	bl	8000936 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 ffee 	bl	80016dc <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000706:	f000 f916 	bl	8000936 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	@ 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b35      	ldr	r3, [pc, #212]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a34      	ldr	r2, [pc, #208]	@ (800080c <MX_GPIO_Init+0xf0>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b2e      	ldr	r3, [pc, #184]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a2d      	ldr	r2, [pc, #180]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b27      	ldr	r3, [pc, #156]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a26      	ldr	r2, [pc, #152]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b24      	ldr	r3, [pc, #144]	@ (800080c <MX_GPIO_Init+0xf0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800078c:	4820      	ldr	r0, [pc, #128]	@ (8000810 <MX_GPIO_Init+0xf4>)
 800078e:	f000 fcd5 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000798:	481e      	ldr	r0, [pc, #120]	@ (8000814 <MX_GPIO_Init+0xf8>)
 800079a:	f000 fccf 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	4816      	ldr	r0, [pc, #88]	@ (8000810 <MX_GPIO_Init+0xf4>)
 80007b8:	f000 fb3c 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007bc:	2301      	movs	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	4811      	ldr	r0, [pc, #68]	@ (8000818 <MX_GPIO_Init+0xfc>)
 80007d2:	f000 fb2f 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	4809      	ldr	r0, [pc, #36]	@ (8000814 <MX_GPIO_Init+0xf8>)
 80007f0:	f000 fb20 	bl	8000e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2106      	movs	r1, #6
 80007f8:	2006      	movs	r0, #6
 80007fa:	f000 faf1 	bl	8000de0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007fe:	2006      	movs	r0, #6
 8000800:	f000 fb0a 	bl	8000e18 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020800 	.word	0x40020800
 8000814:	40020400 	.word	0x40020400
 8000818:	40020000 	.word	0x40020000

0800081c <switch_priority>:

/* USER CODE BEGIN 4 */
void switch_priority(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
	UBaseType_t prio1, prio2;
	TaskHandle_t curr;
	BaseType_t switch_prio = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]

	portENTER_CRITICAL();
 8000826:	f003 ff73 	bl	8004710 <vPortEnterCritical>
	if(btn_status)
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <switch_priority+0x8c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d004      	beq.n	800083c <switch_priority+0x20>
	{
		btn_status = 0;
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <switch_priority+0x8c>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
		switch_prio = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
	}
	portEXIT_CRITICAL();
 800083c:	f003 ff9a 	bl	8004774 <vPortExitCritical>

	if(switch_prio)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d02c      	beq.n	80008a0 <switch_priority+0x84>
	{
//		t1 = xTaskGetHandle("Task - 1");
//		t2 = xTaskGetHandle("Task - 2");
		prio1 = uxTaskPriorityGet(task1_handler);
 8000846:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <switch_priority+0x90>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f002 f972 	bl	8002b34 <uxTaskPriorityGet>
 8000850:	60b8      	str	r0, [r7, #8]
		prio2 = uxTaskPriorityGet(task2_handler);
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <switch_priority+0x94>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f96c 	bl	8002b34 <uxTaskPriorityGet>
 800085c:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 800085e:	f003 f93f 	bl	8003ae0 <xTaskGetCurrentTaskHandle>
 8000862:	6038      	str	r0, [r7, #0]

		if(curr == task1_handler)
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <switch_priority+0x90>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	429a      	cmp	r2, r3
 800086c:	d10c      	bne.n	8000888 <switch_priority+0x6c>
		{
			vTaskPrioritySet(task1_handler, prio2);
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <switch_priority+0x90>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	4618      	mov	r0, r3
 8000876:	f002 f97b 	bl	8002b70 <vTaskPrioritySet>
			vTaskPrioritySet(task2_handler, prio1);
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <switch_priority+0x94>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	68b9      	ldr	r1, [r7, #8]
 8000880:	4618      	mov	r0, r3
 8000882:	f002 f975 	bl	8002b70 <vTaskPrioritySet>
			vTaskPrioritySet(task1_handler, prio2);
		}

	}

}
 8000886:	e00b      	b.n	80008a0 <switch_priority+0x84>
			vTaskPrioritySet(task2_handler, prio1);
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <switch_priority+0x94>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	4618      	mov	r0, r3
 8000890:	f002 f96e 	bl	8002b70 <vTaskPrioritySet>
			vTaskPrioritySet(task1_handler, prio2);
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <switch_priority+0x90>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	f002 f968 	bl	8002b70 <vTaskPrioritySet>
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000034 	.word	0x20000034
 80008ac:	2000002c 	.word	0x2000002c
 80008b0:	20000030 	.word	0x20000030

080008b4 <button_interrupt_handler>:
void button_interrupt_handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 80008b8:	f005 fcbe 	bl	8006238 <SEGGER_SYSVIEW_RecordEnterISR>
	btn_status = 1;
 80008bc:	4b03      	ldr	r3, [pc, #12]	@ (80008cc <button_interrupt_handler+0x18>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 80008c2:	f005 fcfb 	bl	80062bc <SEGGER_SYSVIEW_RecordExitISR>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000034 	.word	0x20000034

080008d0 <led1_handler>:
static void led1_handler(void* parameters)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	while(1)
	{	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <led1_handler+0x20>)
 80008de:	f000 fc46 	bl	800116e <HAL_GPIO_TogglePin>
//		vTaskDelay(pdMS_TO_TICKS(1000));
		HAL_Delay(150);
 80008e2:	2096      	movs	r0, #150	@ 0x96
 80008e4:	f000 f9a0 	bl	8000c28 <HAL_Delay>
		switch_priority();
 80008e8:	f7ff ff98 	bl	800081c <switch_priority>
	{	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008ec:	bf00      	nop
 80008ee:	e7f3      	b.n	80008d8 <led1_handler+0x8>
 80008f0:	40020800 	.word	0x40020800

080008f4 <led2_handler>:
	}
}

static void led2_handler(void* parameters)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80008fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <led2_handler+0x20>)
 8000902:	f000 fc34 	bl	800116e <HAL_GPIO_TogglePin>
//		vTaskDelay(pdMS_TO_TICKS(100));
		HAL_Delay(100);
 8000906:	2064      	movs	r0, #100	@ 0x64
 8000908:	f000 f98e 	bl	8000c28 <HAL_Delay>
		switch_priority();
 800090c:	f7ff ff86 	bl	800081c <switch_priority>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000910:	bf00      	nop
 8000912:	e7f3      	b.n	80008fc <led2_handler+0x8>
 8000914:	40020400 	.word	0x40020400

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800092a:	f000 f95d 	bl	8000be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093a:	b672      	cpsid	i
}
 800093c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093e:	bf00      	nop
 8000940:	e7fd      	b.n	800093e <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000958:	6453      	str	r3, [r2, #68]	@ 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000982:	f003 fe57 	bl	8004634 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	@ 0x38
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4b34      	ldr	r3, [pc, #208]	@ (8000a7c <HAL_InitTick+0xe8>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	4a33      	ldr	r2, [pc, #204]	@ (8000a7c <HAL_InitTick+0xe8>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b4:	4b31      	ldr	r3, [pc, #196]	@ (8000a7c <HAL_InitTick+0xe8>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c0:	f107 0210 	add.w	r2, r7, #16
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 f852 	bl	8001a74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d103      	bne.n	80009e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009da:	f001 f837 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 80009de:	6378      	str	r0, [r7, #52]	@ 0x34
 80009e0:	e004      	b.n	80009ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009e2:	f001 f833 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 80009e6:	4603      	mov	r3, r0
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009ee:	4a24      	ldr	r2, [pc, #144]	@ (8000a80 <HAL_InitTick+0xec>)
 80009f0:	fba2 2303 	umull	r2, r3, r2, r3
 80009f4:	0c9b      	lsrs	r3, r3, #18
 80009f6:	3b01      	subs	r3, #1
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009fa:	4b22      	ldr	r3, [pc, #136]	@ (8000a84 <HAL_InitTick+0xf0>)
 80009fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a00:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a02:	4b20      	ldr	r3, [pc, #128]	@ (8000a84 <HAL_InitTick+0xf0>)
 8000a04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a08:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a84 <HAL_InitTick+0xf0>)
 8000a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <HAL_InitTick+0xf0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <HAL_InitTick+0xf0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <HAL_InitTick+0xf0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000a22:	4818      	ldr	r0, [pc, #96]	@ (8000a84 <HAL_InitTick+0xf0>)
 8000a24:	f001 f858 	bl	8001ad8 <HAL_TIM_Base_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a2e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d11b      	bne.n	8000a6e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000a36:	4813      	ldr	r0, [pc, #76]	@ (8000a84 <HAL_InitTick+0xf0>)
 8000a38:	f001 f8a8 	bl	8001b8c <HAL_TIM_Base_Start_IT>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a42:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d111      	bne.n	8000a6e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a4a:	201c      	movs	r0, #28
 8000a4c:	f000 f9e4 	bl	8000e18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b0f      	cmp	r3, #15
 8000a54:	d808      	bhi.n	8000a68 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a56:	2200      	movs	r2, #0
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	201c      	movs	r0, #28
 8000a5c:	f000 f9c0 	bl	8000de0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a60:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <HAL_InitTick+0xf4>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e002      	b.n	8000a6e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3738      	adds	r7, #56	@ 0x38
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	20000038 	.word	0x20000038
 8000a88:	20000004 	.word	0x20000004

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <NMI_Handler+0x4>

08000a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
{
	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ac6:	f003 f821 	bl	8003b0c <xTaskGetSchedulerState>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d001      	beq.n	8000ad4 <SysTick_Handler+0x12>
	{
		xPortSysTickHandler();
 8000ad0:	f003 feb2 	bl	8004838 <xPortSysTickHandler>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	607b      	str	r3, [r7, #4]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f000 fb5e 	bl	80011a4 <HAL_GPIO_EXTI_IRQHandler>

  button_interrupt_handler();
 8000ae8:	f7ff fee4 	bl	80008b4 <button_interrupt_handler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00a      	beq.n	8000b08 <EXTI0_IRQHandler+0x30>
 8000af2:	f005 fbff 	bl	80062f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000af6:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <EXTI0_IRQHandler+0x3c>)
 8000af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	f3bf 8f4f 	dsb	sy
 8000b02:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b06:	e001      	b.n	8000b0c <EXTI0_IRQHandler+0x34>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b08:	f005 fbd8 	bl	80062bc <SEGGER_SYSVIEW_RecordExitISR>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	e000ed04 	.word	0xe000ed04

08000b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <TIM2_IRQHandler+0x10>)
 8000b1e:	f001 f897 	bl	8001c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000038 	.word	0x20000038

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b54:	f7ff ffea 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	@ (8000b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f005 ff15 	bl	80069ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fd0d 	bl	80005a0 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b94:	08006b8c 	.word	0x08006b8c
  ldr r2, =_sbss
 8000b98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b9c:	200046ac 	.word	0x200046ac

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	@ (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f8fc 	bl	8000dca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f7ff fede 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff feb4 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	@ (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000080 	.word	0x20000080

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000080 	.word	0x20000080

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff ffee 	bl	8000c10 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffde 	bl	8000c10 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	@ (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	@ (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	@ 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	@ 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff4c 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df2:	f7ff ff61 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000df6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f7ff ffb1 	bl	8000d64 <NVIC_EncodePriority>
 8000e02:	4602      	mov	r2, r0
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff80 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff54 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e159      	b.n	8001104 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8148 	bne.w	80010fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d005      	beq.n	8000e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d130      	bne.n	8000ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d017      	beq.n	8000f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80a2 	beq.w	80010fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b57      	ldr	r3, [pc, #348]	@ (800111c <HAL_GPIO_Init+0x2e8>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	4a56      	ldr	r2, [pc, #344]	@ (800111c <HAL_GPIO_Init+0x2e8>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fca:	4b54      	ldr	r3, [pc, #336]	@ (800111c <HAL_GPIO_Init+0x2e8>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd6:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <HAL_GPIO_Init+0x2ec>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a49      	ldr	r2, [pc, #292]	@ (8001124 <HAL_GPIO_Init+0x2f0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x202>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a48      	ldr	r2, [pc, #288]	@ (8001128 <HAL_GPIO_Init+0x2f4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x1fe>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a47      	ldr	r2, [pc, #284]	@ (800112c <HAL_GPIO_Init+0x2f8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x1fa>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a46      	ldr	r2, [pc, #280]	@ (8001130 <HAL_GPIO_Init+0x2fc>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x1f6>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a45      	ldr	r2, [pc, #276]	@ (8001134 <HAL_GPIO_Init+0x300>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x1f2>
 8001022:	2304      	movs	r3, #4
 8001024:	e008      	b.n	8001038 <HAL_GPIO_Init+0x204>
 8001026:	2307      	movs	r3, #7
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x204>
 800102a:	2303      	movs	r3, #3
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x204>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x204>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x204>
 8001036:	2300      	movs	r3, #0
 8001038:	69fa      	ldr	r2, [r7, #28]
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001048:	4935      	ldr	r1, [pc, #212]	@ (8001120 <HAL_GPIO_Init+0x2ec>)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b38      	ldr	r3, [pc, #224]	@ (8001138 <HAL_GPIO_Init+0x304>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107a:	4a2f      	ldr	r2, [pc, #188]	@ (8001138 <HAL_GPIO_Init+0x304>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001080:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <HAL_GPIO_Init+0x304>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a4:	4a24      	ldr	r2, [pc, #144]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010aa:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001138 <HAL_GPIO_Init+0x304>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3301      	adds	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	f67f aea2 	bls.w	8000e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40013800 	.word	0x40013800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40020800 	.word	0x40020800
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40021000 	.word	0x40021000
 8001138:	40013c00 	.word	0x40013c00

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800116e:	b480      	push	{r7}
 8001170:	b085      	sub	sp, #20
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001180:	887a      	ldrh	r2, [r7, #2]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4013      	ands	r3, r2
 8001186:	041a      	lsls	r2, r3, #16
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43d9      	mvns	r1, r3
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	400b      	ands	r3, r1
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f806 	bl	80011d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40013c00 	.word	0x40013c00

080011d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e267      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d075      	beq.n	80012f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800120a:	4b88      	ldr	r3, [pc, #544]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b04      	cmp	r3, #4
 8001214:	d00c      	beq.n	8001230 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001216:	4b85      	ldr	r3, [pc, #532]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800121e:	2b08      	cmp	r3, #8
 8001220:	d112      	bne.n	8001248 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001222:	4b82      	ldr	r3, [pc, #520]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800122a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800122e:	d10b      	bne.n	8001248 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001230:	4b7e      	ldr	r3, [pc, #504]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d05b      	beq.n	80012f4 <HAL_RCC_OscConfig+0x108>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d157      	bne.n	80012f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e242      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001250:	d106      	bne.n	8001260 <HAL_RCC_OscConfig+0x74>
 8001252:	4b76      	ldr	r3, [pc, #472]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a75      	ldr	r2, [pc, #468]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e01d      	b.n	800129c <HAL_RCC_OscConfig+0xb0>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x98>
 800126a:	4b70      	ldr	r3, [pc, #448]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6f      	ldr	r2, [pc, #444]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b6d      	ldr	r3, [pc, #436]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a6c      	ldr	r2, [pc, #432]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e00b      	b.n	800129c <HAL_RCC_OscConfig+0xb0>
 8001284:	4b69      	ldr	r3, [pc, #420]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a68      	ldr	r2, [pc, #416]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 800128a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b66      	ldr	r3, [pc, #408]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a65      	ldr	r2, [pc, #404]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fcb4 	bl	8000c10 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fcb0 	bl	8000c10 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	@ 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e207      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	4b5b      	ldr	r3, [pc, #364]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0xc0>
 80012ca:	e014      	b.n	80012f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fca0 	bl	8000c10 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fc9c 	bl	8000c10 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	@ 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1f3      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	4b51      	ldr	r3, [pc, #324]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0xe8>
 80012f2:	e000      	b.n	80012f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d063      	beq.n	80013ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001302:	4b4a      	ldr	r3, [pc, #296]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130e:	4b47      	ldr	r3, [pc, #284]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001316:	2b08      	cmp	r3, #8
 8001318:	d11c      	bne.n	8001354 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131a:	4b44      	ldr	r3, [pc, #272]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d116      	bne.n	8001354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	4b41      	ldr	r3, [pc, #260]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_RCC_OscConfig+0x152>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e1c7      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4b3b      	ldr	r3, [pc, #236]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4937      	ldr	r1, [pc, #220]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	e03a      	b.n	80013ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d020      	beq.n	800139e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800135c:	4b34      	ldr	r3, [pc, #208]	@ (8001430 <HAL_RCC_OscConfig+0x244>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001362:	f7ff fc55 	bl	8000c10 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136a:	f7ff fc51 	bl	8000c10 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e1a8      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001388:	4b28      	ldr	r3, [pc, #160]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4925      	ldr	r1, [pc, #148]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]
 800139c:	e015      	b.n	80013ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139e:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <HAL_RCC_OscConfig+0x244>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc34 	bl	8000c10 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff fc30 	bl	8000c10 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e187      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d036      	beq.n	8001444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d016      	beq.n	800140c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <HAL_RCC_OscConfig+0x248>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e4:	f7ff fc14 	bl	8000c10 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ec:	f7ff fc10 	bl	8000c10 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e167      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <HAL_RCC_OscConfig+0x240>)
 8001400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x200>
 800140a:	e01b      	b.n	8001444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <HAL_RCC_OscConfig+0x248>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fbfd 	bl	8000c10 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001418:	e00e      	b.n	8001438 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141a:	f7ff fbf9 	bl	8000c10 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d907      	bls.n	8001438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e150      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
 800142c:	40023800 	.word	0x40023800
 8001430:	42470000 	.word	0x42470000
 8001434:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001438:	4b88      	ldr	r3, [pc, #544]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 800143a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1ea      	bne.n	800141a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8097 	beq.w	8001580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001456:	4b81      	ldr	r3, [pc, #516]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10f      	bne.n	8001482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b7d      	ldr	r3, [pc, #500]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	4a7c      	ldr	r2, [pc, #496]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	@ 0x40
 8001472:	4b7a      	ldr	r3, [pc, #488]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800147e:	2301      	movs	r3, #1
 8001480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001482:	4b77      	ldr	r3, [pc, #476]	@ (8001660 <HAL_RCC_OscConfig+0x474>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148a:	2b00      	cmp	r3, #0
 800148c:	d118      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148e:	4b74      	ldr	r3, [pc, #464]	@ (8001660 <HAL_RCC_OscConfig+0x474>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a73      	ldr	r2, [pc, #460]	@ (8001660 <HAL_RCC_OscConfig+0x474>)
 8001494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149a:	f7ff fbb9 	bl	8000c10 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a2:	f7ff fbb5 	bl	8000c10 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e10c      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001660 <HAL_RCC_OscConfig+0x474>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x2ea>
 80014c8:	4b64      	ldr	r3, [pc, #400]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014cc:	4a63      	ldr	r2, [pc, #396]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d4:	e01c      	b.n	8001510 <HAL_RCC_OscConfig+0x324>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x30c>
 80014de:	4b5f      	ldr	r3, [pc, #380]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e2:	4a5e      	ldr	r2, [pc, #376]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ea:	4b5c      	ldr	r3, [pc, #368]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ee:	4a5b      	ldr	r2, [pc, #364]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0x324>
 80014f8:	4b58      	ldr	r3, [pc, #352]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fc:	4a57      	ldr	r2, [pc, #348]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	6713      	str	r3, [r2, #112]	@ 0x70
 8001504:	4b55      	ldr	r3, [pc, #340]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001508:	4a54      	ldr	r2, [pc, #336]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 800150a:	f023 0304 	bic.w	r3, r3, #4
 800150e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d015      	beq.n	8001544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001518:	f7ff fb7a 	bl	8000c10 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151e:	e00a      	b.n	8001536 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001520:	f7ff fb76 	bl	8000c10 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e0cb      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001536:	4b49      	ldr	r3, [pc, #292]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0ee      	beq.n	8001520 <HAL_RCC_OscConfig+0x334>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001544:	f7ff fb64 	bl	8000c10 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154a:	e00a      	b.n	8001562 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154c:	f7ff fb60 	bl	8000c10 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e0b5      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001562:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1ee      	bne.n	800154c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d105      	bne.n	8001580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001574:	4b39      	ldr	r3, [pc, #228]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	4a38      	ldr	r2, [pc, #224]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 800157a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800157e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80a1 	beq.w	80016cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800158a:	4b34      	ldr	r3, [pc, #208]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b08      	cmp	r3, #8
 8001594:	d05c      	beq.n	8001650 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d141      	bne.n	8001622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159e:	4b31      	ldr	r3, [pc, #196]	@ (8001664 <HAL_RCC_OscConfig+0x478>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb34 	bl	8000c10 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ac:	f7ff fb30 	bl	8000c10 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e087      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015be:	4b27      	ldr	r3, [pc, #156]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	019b      	lsls	r3, r3, #6
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e0:	085b      	lsrs	r3, r3, #1
 80015e2:	3b01      	subs	r3, #1
 80015e4:	041b      	lsls	r3, r3, #16
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	491b      	ldr	r1, [pc, #108]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_RCC_OscConfig+0x478>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fb09 	bl	8000c10 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001602:	f7ff fb05 	bl	8000c10 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e05c      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x416>
 8001620:	e054      	b.n	80016cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_RCC_OscConfig+0x478>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff faf2 	bl	8000c10 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff faee 	bl	8000c10 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e045      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_RCC_OscConfig+0x470>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x444>
 800164e:	e03d      	b.n	80016cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d107      	bne.n	8001668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e038      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
 800165c:	40023800 	.word	0x40023800
 8001660:	40007000 	.word	0x40007000
 8001664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <HAL_RCC_OscConfig+0x4ec>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d028      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d121      	bne.n	80016c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168e:	429a      	cmp	r2, r3
 8001690:	d11a      	bne.n	80016c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001698:	4013      	ands	r3, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800169e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d111      	bne.n	80016c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ae:	085b      	lsrs	r3, r3, #1
 80016b0:	3b01      	subs	r3, #1
 80016b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800

080016dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0cc      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f0:	4b68      	ldr	r3, [pc, #416]	@ (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d90c      	bls.n	8001718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b65      	ldr	r3, [pc, #404]	@ (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b63      	ldr	r3, [pc, #396]	@ (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0b8      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d020      	beq.n	8001766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001730:	4b59      	ldr	r3, [pc, #356]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4a58      	ldr	r2, [pc, #352]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800173a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001748:	4b53      	ldr	r3, [pc, #332]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a52      	ldr	r2, [pc, #328]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001754:	4b50      	ldr	r3, [pc, #320]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	494d      	ldr	r1, [pc, #308]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d044      	beq.n	80017fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b47      	ldr	r3, [pc, #284]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d119      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e07f      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d003      	beq.n	800179a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001796:	2b03      	cmp	r3, #3
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	4b3f      	ldr	r3, [pc, #252]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e06f      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e067      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ba:	4b37      	ldr	r3, [pc, #220]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f023 0203 	bic.w	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4934      	ldr	r1, [pc, #208]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017cc:	f7ff fa20 	bl	8000c10 <HAL_GetTick>
 80017d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d4:	f7ff fa1c 	bl	8000c10 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e04f      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 020c 	and.w	r2, r3, #12
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d1eb      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017fc:	4b25      	ldr	r3, [pc, #148]	@ (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d20c      	bcs.n	8001824 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e032      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4916      	ldr	r1, [pc, #88]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	490e      	ldr	r1, [pc, #56]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001862:	f000 f821 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
 8001866:	4602      	mov	r2, r0
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	490a      	ldr	r1, [pc, #40]	@ (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	5ccb      	ldrb	r3, [r1, r3]
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	4a09      	ldr	r2, [pc, #36]	@ (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff f886 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023c00 	.word	0x40023c00
 8001898:	40023800 	.word	0x40023800
 800189c:	08006b38 	.word	0x08006b38
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018ac:	b090      	sub	sp, #64	@ 0x40
 80018ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c0:	4b59      	ldr	r3, [pc, #356]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d00d      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x40>
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	f200 80a1 	bhi.w	8001a14 <HAL_RCC_GetSysClockFreq+0x16c>
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0x34>
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d003      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018da:	e09b      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018dc:	4b53      	ldr	r3, [pc, #332]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x184>)
 80018de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018e0:	e09b      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018e2:	4b53      	ldr	r3, [pc, #332]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x188>)
 80018e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018e6:	e098      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d028      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	099b      	lsrs	r3, r3, #6
 8001904:	2200      	movs	r2, #0
 8001906:	623b      	str	r3, [r7, #32]
 8001908:	627a      	str	r2, [r7, #36]	@ 0x24
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001910:	2100      	movs	r1, #0
 8001912:	4b47      	ldr	r3, [pc, #284]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001914:	fb03 f201 	mul.w	r2, r3, r1
 8001918:	2300      	movs	r3, #0
 800191a:	fb00 f303 	mul.w	r3, r0, r3
 800191e:	4413      	add	r3, r2
 8001920:	4a43      	ldr	r2, [pc, #268]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001922:	fba0 1202 	umull	r1, r2, r0, r2
 8001926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001928:	460a      	mov	r2, r1
 800192a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800192c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800192e:	4413      	add	r3, r2
 8001930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001934:	2200      	movs	r2, #0
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	61fa      	str	r2, [r7, #28]
 800193a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800193e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001942:	f7fe fc97 	bl	8000274 <__aeabi_uldivmod>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4613      	mov	r3, r2
 800194c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800194e:	e053      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001950:	4b35      	ldr	r3, [pc, #212]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	2200      	movs	r2, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	617a      	str	r2, [r7, #20]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001962:	f04f 0b00 	mov.w	fp, #0
 8001966:	4652      	mov	r2, sl
 8001968:	465b      	mov	r3, fp
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	0159      	lsls	r1, r3, #5
 8001974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001978:	0150      	lsls	r0, r2, #5
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	ebb2 080a 	subs.w	r8, r2, sl
 8001982:	eb63 090b 	sbc.w	r9, r3, fp
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001992:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001996:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800199a:	ebb2 0408 	subs.w	r4, r2, r8
 800199e:	eb63 0509 	sbc.w	r5, r3, r9
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	00eb      	lsls	r3, r5, #3
 80019ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b0:	00e2      	lsls	r2, r4, #3
 80019b2:	4614      	mov	r4, r2
 80019b4:	461d      	mov	r5, r3
 80019b6:	eb14 030a 	adds.w	r3, r4, sl
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	eb45 030b 	adc.w	r3, r5, fp
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ce:	4629      	mov	r1, r5
 80019d0:	028b      	lsls	r3, r1, #10
 80019d2:	4621      	mov	r1, r4
 80019d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d8:	4621      	mov	r1, r4
 80019da:	028a      	lsls	r2, r1, #10
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e2:	2200      	movs	r2, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	60fa      	str	r2, [r7, #12]
 80019e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ec:	f7fe fc42 	bl	8000274 <__aeabi_uldivmod>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4613      	mov	r3, r2
 80019f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x180>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	3301      	adds	r3, #1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a12:	e002      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3740      	adds	r7, #64	@ 0x40
 8001a20:	46bd      	mov	sp, r7
 8001a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	00f42400 	.word	0x00f42400
 8001a30:	017d7840 	.word	0x017d7840

08001a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000000 	.word	0x20000000

08001a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a50:	f7ff fff0 	bl	8001a34 <HAL_RCC_GetHCLKFreq>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	0a9b      	lsrs	r3, r3, #10
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	4903      	ldr	r1, [pc, #12]	@ (8001a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a62:	5ccb      	ldrb	r3, [r1, r3]
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	08006b48 	.word	0x08006b48

08001a74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	220f      	movs	r2, #15
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0203 	and.w	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	08db      	lsrs	r3, r3, #3
 8001aae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ab6:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <HAL_RCC_GetClockConfig+0x60>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0207 	and.w	r2, r3, #7
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	601a      	str	r2, [r3, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40023c00 	.word	0x40023c00

08001ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e041      	b.n	8001b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f839 	bl	8001b76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3304      	adds	r3, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f000 f9b2 	bl	8001e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d001      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e044      	b.n	8001c2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c3c <HAL_TIM_Base_Start_IT+0xb0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d018      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bce:	d013      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c40 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00e      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a19      	ldr	r2, [pc, #100]	@ (8001c44 <HAL_TIM_Base_Start_IT+0xb8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a17      	ldr	r2, [pc, #92]	@ (8001c48 <HAL_TIM_Base_Start_IT+0xbc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d004      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a16      	ldr	r2, [pc, #88]	@ (8001c4c <HAL_TIM_Base_Start_IT+0xc0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d111      	bne.n	8001c1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d010      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1a:	e007      	b.n	8001c2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40000400 	.word	0x40000400
 8001c44:	40000800 	.word	0x40000800
 8001c48:	40000c00 	.word	0x40000c00
 8001c4c:	40014000 	.word	0x40014000

08001c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d020      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01b      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0202 	mvn.w	r2, #2
 8001c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8d2 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
 8001ca0:	e005      	b.n	8001cae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8c4 	bl	8001e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8d5 	bl	8001e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d020      	beq.n	8001d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01b      	beq.n	8001d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0204 	mvn.w	r2, #4
 8001cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8ac 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
 8001cec:	e005      	b.n	8001cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f89e 	bl	8001e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f8af 	bl	8001e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d020      	beq.n	8001d4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01b      	beq.n	8001d4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0208 	mvn.w	r2, #8
 8001d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2204      	movs	r2, #4
 8001d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f886 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
 8001d38:	e005      	b.n	8001d46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f878 	bl	8001e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f889 	bl	8001e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d020      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01b      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0210 	mvn.w	r2, #16
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f860 	bl	8001e44 <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f852 	bl	8001e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f863 	bl	8001e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00c      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0201 	mvn.w	r2, #1
 8001db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7fe fdae 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8e0 	bl	8001fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00c      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f834 	bl	8001e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00c      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0220 	mvn.w	r2, #32
 8001e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8b2 	bl	8001f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a37      	ldr	r2, [pc, #220]	@ (8001f70 <TIM_Base_SetConfig+0xf0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00f      	beq.n	8001eb8 <TIM_Base_SetConfig+0x38>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e9e:	d00b      	beq.n	8001eb8 <TIM_Base_SetConfig+0x38>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a34      	ldr	r2, [pc, #208]	@ (8001f74 <TIM_Base_SetConfig+0xf4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d007      	beq.n	8001eb8 <TIM_Base_SetConfig+0x38>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a33      	ldr	r2, [pc, #204]	@ (8001f78 <TIM_Base_SetConfig+0xf8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <TIM_Base_SetConfig+0x38>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a32      	ldr	r2, [pc, #200]	@ (8001f7c <TIM_Base_SetConfig+0xfc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d108      	bne.n	8001eca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a28      	ldr	r2, [pc, #160]	@ (8001f70 <TIM_Base_SetConfig+0xf0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01b      	beq.n	8001f0a <TIM_Base_SetConfig+0x8a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ed8:	d017      	beq.n	8001f0a <TIM_Base_SetConfig+0x8a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a25      	ldr	r2, [pc, #148]	@ (8001f74 <TIM_Base_SetConfig+0xf4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <TIM_Base_SetConfig+0x8a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a24      	ldr	r2, [pc, #144]	@ (8001f78 <TIM_Base_SetConfig+0xf8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00f      	beq.n	8001f0a <TIM_Base_SetConfig+0x8a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a23      	ldr	r2, [pc, #140]	@ (8001f7c <TIM_Base_SetConfig+0xfc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00b      	beq.n	8001f0a <TIM_Base_SetConfig+0x8a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a22      	ldr	r2, [pc, #136]	@ (8001f80 <TIM_Base_SetConfig+0x100>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <TIM_Base_SetConfig+0x8a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <TIM_Base_SetConfig+0x104>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d003      	beq.n	8001f0a <TIM_Base_SetConfig+0x8a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a20      	ldr	r2, [pc, #128]	@ (8001f88 <TIM_Base_SetConfig+0x108>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d108      	bne.n	8001f1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f70 <TIM_Base_SetConfig+0xf0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d103      	bne.n	8001f4a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f043 0204 	orr.w	r2, r3, #4
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	601a      	str	r2, [r3, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40010000 	.word	0x40010000
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40000800 	.word	0x40000800
 8001f7c:	40000c00 	.word	0x40000c00
 8001f80:	40014000 	.word	0x40014000
 8001f84:	40014400 	.word	0x40014400
 8001f88:	40014800 	.word	0x40014800

08001f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f103 0208 	add.w	r2, r3, #8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fd0:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f103 0208 	add.w	r2, r3, #8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f103 0208 	add.w	r2, r3, #8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	615a      	str	r2, [r3, #20]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8001fee:	f240 1019 	movw	r0, #281	@ 0x119
 8001ff2:	f004 f99b 	bl	800632c <SEGGER_SYSVIEW_RecordEndCall>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800200c:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002010:	f004 f98c 	bl	800632c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	e9c7 2302 	strd	r2, r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002038:	bf08      	it	eq
 800203a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 800203e:	d103      	bne.n	8002048 <vListInsert+0x2c>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e010      	b.n	800206a <vListInsert+0x4e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3308      	adds	r3, #8
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e002      	b.n	8002056 <vListInsert+0x3a>
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002062:	4290      	cmp	r0, r2
 8002064:	eb71 0303 	sbcs.w	r3, r1, r3
 8002068:	d2f2      	bcs.n	8002050 <vListInsert+0x34>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	60da      	str	r2, [r3, #12]
    pxNewListItem->pxPrevious = pxIterator;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	60da      	str	r2, [r3, #12]
    pxIterator->pxNext = pxNewListItem;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	615a      	str	r2, [r3, #20]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002096:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 800209a:	f004 f947 	bl	800632c <SEGGER_SYSVIEW_RecordEndCall>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	68d2      	ldr	r2, [r2, #12]
 80020bc:	60da      	str	r2, [r3, #12]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6892      	ldr	r2, [r2, #8]
 80020c6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d103      	bne.n	80020da <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	1e5a      	subs	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	f240 101d 	movw	r0, #285	@ 0x11d
 80020f4:	f004 f956 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800210e:	2301      	movs	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <xQueueGenericReset+0x30>
    __asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	60fb      	str	r3, [r7, #12]
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d05d      	beq.n	80021f6 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    if( ( pxQueue != NULL ) &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d059      	beq.n	80021f6 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	2100      	movs	r1, #0
 800214c:	fba3 2302 	umull	r2, r3, r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d000      	beq.n	8002156 <xQueueGenericReset+0x52>
 8002154:	2101      	movs	r1, #1
 8002156:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d14c      	bne.n	80021f6 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 800215c:	f002 fad8 	bl	8004710 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002168:	6939      	ldr	r1, [r7, #16]
 800216a:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	441a      	add	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2200      	movs	r2, #0
 800217a:	641a      	str	r2, [r3, #64]	@ 0x40
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218c:	3b01      	subs	r3, #1
 800218e:	6939      	ldr	r1, [r7, #16]
 8002190:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	441a      	add	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	22ff      	movs	r2, #255	@ 0xff
 80021a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxQueue->cTxLock = queueUNLOCKED;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	22ff      	movs	r2, #255	@ 0xff
 80021a8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

            if( xNewQueue == pdFALSE )
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d114      	bne.n	80021dc <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01a      	beq.n	80021f0 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	3310      	adds	r3, #16
 80021be:	4618      	mov	r0, r3
 80021c0:	f001 fa20 	bl	8003604 <xTaskRemoveFromEventList>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d012      	beq.n	80021f0 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80021ca:	4b18      	ldr	r3, [pc, #96]	@ (800222c <xQueueGenericReset+0x128>)
 80021cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	e009      	b.n	80021f0 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	3310      	adds	r3, #16
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fee7 	bl	8001fb4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	3328      	adds	r3, #40	@ 0x28
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fee2 	bl	8001fb4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80021f0:	f002 fac0 	bl	8004774 <vPortExitCritical>
 80021f4:	e001      	b.n	80021fa <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10b      	bne.n	8002218 <xQueueGenericReset+0x114>
    __asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	60bb      	str	r3, [r7, #8]
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	4619      	mov	r1, r3
 800221c:	2096      	movs	r0, #150	@ 0x96
 800221e:	f004 f8c1 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002222:	697b      	ldr	r3, [r7, #20]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	e000ed04 	.word	0xe000ed04

08002230 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	@ 0x30
 8002234:	af02      	add	r7, sp, #8
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 8002248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	623b      	str	r3, [r7, #32]
}
 800225a:	bf00      	nop
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d031      	beq.n	80022ca <xQueueGenericCreateStatic+0x9a>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d02e      	beq.n	80022ca <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d028      	beq.n	80022ca <xQueueGenericCreateStatic+0x9a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d122      	bne.n	80022ca <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8002284:	2350      	movs	r3, #80	@ 0x50
 8002286:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2b50      	cmp	r3, #80	@ 0x50
 800228c:	d00b      	beq.n	80022a6 <xQueueGenericCreateStatic+0x76>
    __asm volatile
 800228e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	61fb      	str	r3, [r7, #28]
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	e7fd      	b.n	80022a2 <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 80022a6:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022b4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f81e 	bl	8002304 <prvInitialiseNewQueue>
 80022c8:	e00e      	b.n	80022e8 <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 80022d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	61bb      	str	r3, [r7, #24]
}
 80022e2:	bf00      	nop
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	4618      	mov	r0, r3
 80022ec:	f004 f9f4 	bl	80066d8 <SEGGER_SYSVIEW_ShrinkId>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	2097      	movs	r0, #151	@ 0x97
 80022f6:	f004 f855 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80022fc:	4618      	mov	r0, r3
 80022fe:	3728      	adds	r7, #40	@ 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d103      	bne.n	8002320 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e002      	b.n	8002326 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	645a      	str	r2, [r3, #68]	@ 0x44
    pxNewQueue->uxItemSize = uxItemSize;
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	649a      	str	r2, [r3, #72]	@ 0x48
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002332:	2101      	movs	r1, #1
 8002334:	69b8      	ldr	r0, [r7, #24]
 8002336:	f7ff fee5 	bl	8002104 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08e      	sub	sp, #56	@ 0x38
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	e9c7 2300 	strd	r2, r3, [r7]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002352:	2300      	movs	r3, #0
 8002354:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800235a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <xQueueReceive+0x34>
    __asm volatile
 8002360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002372:	bf00      	nop
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <xQueueReceive+0x30>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <xQueueReceive+0x42>
 800237e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <xQueueReceive+0x46>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <xQueueReceive+0x48>
 800238a:	2300      	movs	r3, #0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10b      	bne.n	80023a8 <xQueueReceive+0x64>
    __asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <xQueueReceive+0x60>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023a8:	f001 fbb0 	bl	8003b0c <xTaskGetSchedulerState>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <xQueueReceive+0x76>
 80023b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	d101      	bne.n	80023be <xQueueReceive+0x7a>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <xQueueReceive+0x7c>
 80023be:	2300      	movs	r3, #0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10b      	bne.n	80023dc <xQueueReceive+0x98>
    __asm volatile
 80023c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	623b      	str	r3, [r7, #32]
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <xQueueReceive+0x94>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80023dc:	f002 f998 	bl	8004710 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d023      	beq.n	8002434 <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023f0:	f000 f89c 	bl	800252c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80023f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00f      	beq.n	8002424 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002406:	3310      	adds	r3, #16
 8002408:	4618      	mov	r0, r3
 800240a:	f001 f8fb 	bl	8003604 <xTaskRemoveFromEventList>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <xQueueReceive+0xe0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002414:	4b44      	ldr	r3, [pc, #272]	@ (8002528 <xQueueReceive+0x1e4>)
 8002416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002424:	f002 f9a6 	bl	8004774 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002428:	2101      	movs	r1, #1
 800242a:	20a4      	movs	r0, #164	@ 0xa4
 800242c:	f003 ffba 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002430:	2301      	movs	r3, #1
 8002432:	e074      	b.n	800251e <xQueueReceive+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002438:	4313      	orrs	r3, r2
 800243a:	d107      	bne.n	800244c <xQueueReceive+0x108>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800243c:	f002 f99a 	bl	8004774 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002440:	2100      	movs	r1, #0
 8002442:	20a4      	movs	r0, #164	@ 0xa4
 8002444:	f003 ffae 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002448:	2300      	movs	r3, #0
 800244a:	e068      	b.n	800251e <xQueueReceive+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 800244c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4618      	mov	r0, r3
 8002458:	f001 f9b6 	bl	80037c8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800245c:	2301      	movs	r3, #1
 800245e:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002460:	f002 f988 	bl	8004774 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002464:	f000 fd44 	bl	8002ef0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002468:	f002 f952 	bl	8004710 <vPortEnterCritical>
 800246c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002472:	b25b      	sxtb	r3, r3
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002478:	d103      	bne.n	8002482 <xQueueReceive+0x13e>
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	2200      	movs	r2, #0
 800247e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8002482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002484:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002488:	b25b      	sxtb	r3, r3
 800248a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800248e:	d103      	bne.n	8002498 <xQueueReceive+0x154>
 8002490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002492:	2200      	movs	r2, #0
 8002494:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8002498:	f002 f96c 	bl	8004774 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800249c:	463a      	mov	r2, r7
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 f9a9 	bl	80037fc <xTaskCheckForTimeOut>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d125      	bne.n	80024fc <xQueueReceive+0x1b8>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024b2:	f000 f8b3 	bl	800261c <prvIsQueueEmpty>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d019      	beq.n	80024f0 <xQueueReceive+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024be:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80024c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c6:	4608      	mov	r0, r1
 80024c8:	f001 f824 	bl	8003514 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80024cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024ce:	f000 f853 	bl	8002578 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80024d2:	f000 fd1b 	bl	8002f0c <xTaskResumeAll>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f47f af7f 	bne.w	80023dc <xQueueReceive+0x98>
                {
                    taskYIELD_WITHIN_API();
 80024de:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <xQueueReceive+0x1e4>)
 80024e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	e775      	b.n	80023dc <xQueueReceive+0x98>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80024f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024f2:	f000 f841 	bl	8002578 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80024f6:	f000 fd09 	bl	8002f0c <xTaskResumeAll>
 80024fa:	e76f      	b.n	80023dc <xQueueReceive+0x98>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80024fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024fe:	f000 f83b 	bl	8002578 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002502:	f000 fd03 	bl	8002f0c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002506:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002508:	f000 f888 	bl	800261c <prvIsQueueEmpty>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f43f af64 	beq.w	80023dc <xQueueReceive+0x98>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002514:	2100      	movs	r1, #0
 8002516:	20a4      	movs	r0, #164	@ 0xa4
 8002518:	f003 ff44 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800251c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800251e:	4618      	mov	r0, r3
 8002520:	3738      	adds	r7, #56	@ 0x38
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000ed04 	.word	0xe000ed04

0800252c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253a:	2b00      	cmp	r3, #0
 800253c:	d018      	beq.n	8002570 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002546:	441a      	add	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	d303      	bcc.n	8002560 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68d9      	ldr	r1, [r3, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002568:	461a      	mov	r2, r3
 800256a:	6838      	ldr	r0, [r7, #0]
 800256c:	f004 fa42 	bl	80069f4 <memcpy>
    }
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002580:	f002 f8c6 	bl	8004710 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800258a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800258c:	e011      	b.n	80025b2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002592:	2b00      	cmp	r3, #0
 8002594:	d012      	beq.n	80025bc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3328      	adds	r3, #40	@ 0x28
 800259a:	4618      	mov	r0, r3
 800259c:	f001 f832 	bl	8003604 <xTaskRemoveFromEventList>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80025a6:	f001 f9b9 	bl	800391c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	dce9      	bgt.n	800258e <prvUnlockQueue+0x16>
 80025ba:	e000      	b.n	80025be <prvUnlockQueue+0x46>
                    break;
 80025bc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	22ff      	movs	r2, #255	@ 0xff
 80025c2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    }
    taskEXIT_CRITICAL();
 80025c6:	f002 f8d5 	bl	8004774 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80025ca:	f002 f8a1 	bl	8004710 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80025d4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80025d6:	e011      	b.n	80025fc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d012      	beq.n	8002606 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3310      	adds	r3, #16
 80025e4:	4618      	mov	r0, r3
 80025e6:	f001 f80d 	bl	8003604 <xTaskRemoveFromEventList>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80025f0:	f001 f994 	bl	800391c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80025f4:	7bbb      	ldrb	r3, [r7, #14]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80025fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002600:	2b00      	cmp	r3, #0
 8002602:	dce9      	bgt.n	80025d8 <prvUnlockQueue+0x60>
 8002604:	e000      	b.n	8002608 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002606:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	22ff      	movs	r2, #255	@ 0xff
 800260c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    }
    taskEXIT_CRITICAL();
 8002610:	f002 f8b0 	bl	8004774 <vPortExitCritical>
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002624:	f002 f874 	bl	8004710 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002630:	2301      	movs	r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	e001      	b.n	800263a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800263a:	f002 f89b 	bl	8004774 <vPortExitCritical>

    return xReturn;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	e9c7 2300 	strd	r2, r3, [r7]
        Queue_t * const pxQueue = xQueue;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002658:	f002 f85a 	bl	8004710 <vPortEnterCritical>
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002662:	b25b      	sxtb	r3, r3
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002668:	d103      	bne.n	8002672 <vQueueWaitForMessageRestricted+0x2a>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002678:	b25b      	sxtb	r3, r3
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800267e:	d103      	bne.n	8002688 <vQueueWaitForMessageRestricted+0x40>
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8002688:	f002 f874 	bl	8004774 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <vQueueWaitForMessageRestricted+0x60>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026a2:	4608      	mov	r0, r1
 80026a4:	f000 ff60 	bl	8003568 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80026a8:	6978      	ldr	r0, [r7, #20]
 80026aa:	f7ff ff65 	bl	8002578 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 80026ae:	20b9      	movs	r0, #185	@ 0xb9
 80026b0:	f003 fe3c 	bl	800632c <SEGGER_SYSVIEW_RecordEndCall>
    }
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	@ 0x38
 80026c0:	af04      	add	r7, sp, #16
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 80026ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10b      	bne.n	80026e8 <prvCreateStaticTask+0x2c>
    __asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	623b      	str	r3, [r7, #32]
}
 80026e2:	bf00      	nop
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80026e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <prvCreateStaticTask+0x4a>
    __asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	61fb      	str	r3, [r7, #28]
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	e7fd      	b.n	8002702 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8002706:	2360      	movs	r3, #96	@ 0x60
 8002708:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b60      	cmp	r3, #96	@ 0x60
 800270e:	d00b      	beq.n	8002728 <prvCreateStaticTask+0x6c>
    __asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	61bb      	str	r3, [r7, #24]
}
 8002722:	bf00      	nop
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8002728:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800272a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01f      	beq.n	8002770 <prvCreateStaticTask+0xb4>
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01c      	beq.n	8002770 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800273a:	2260      	movs	r2, #96	@ 0x60
 800273c:	2100      	movs	r1, #0
 800273e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002740:	f004 f92c 	bl	800699c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002748:	63da      	str	r2, [r3, #60]	@ 0x3c

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	2202      	movs	r2, #2
 800274e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002752:	2300      	movs	r3, #0
 8002754:	9303      	str	r3, [sp, #12]
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	9302      	str	r3, [sp, #8]
 800275a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f89d 	bl	80028a8 <prvInitialiseNewTask>
 800276e:	e001      	b.n	8002774 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002776:	4618      	mov	r0, r3
 8002778:	3728      	adds	r7, #40	@ 0x28
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800277e:	b580      	push	{r7, lr}
 8002780:	b08a      	sub	sp, #40	@ 0x28
 8002782:	af04      	add	r7, sp, #16
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	9303      	str	r3, [sp, #12]
 8002796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff ff87 	bl	80026bc <prvCreateStaticTask>
 80027ae:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f000 f908 	bl	80029cc <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 ff8a 	bl	80066d8 <SEGGER_SYSVIEW_ShrinkId>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4619      	mov	r1, r3
 80027c8:	20bf      	movs	r0, #191	@ 0xbf
 80027ca:	f003 fdeb 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80027ce:	693b      	ldr	r3, [r7, #16]
    }
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	@ 0x28
 80027dc:	af04      	add	r7, sp, #16
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f002 f8c0 	bl	8004970 <pvPortMalloc>
 80027f0:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80027f8:	2060      	movs	r0, #96	@ 0x60
 80027fa:	f002 f8b9 	bl	8004970 <pvPortMalloc>
 80027fe:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002806:	2260      	movs	r2, #96	@ 0x60
 8002808:	2100      	movs	r1, #0
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f004 f8c6 	bl	800699c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002816:	e005      	b.n	8002824 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002818:	6938      	ldr	r0, [r7, #16]
 800281a:	f002 f9db 	bl	8004bd4 <vPortFree>
 800281e:	e001      	b.n	8002824 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d011      	beq.n	800284e <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002832:	2300      	movs	r3, #0
 8002834:	9303      	str	r3, [sp, #12]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f82d 	bl	80028a8 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800284e:	697b      	ldr	r3, [r7, #20]
    }
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f7ff ffaf 	bl	80027d8 <prvCreateTask>
 800287a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002882:	6938      	ldr	r0, [r7, #16]
 8002884:	f000 f8a2 	bl	80029cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002888:	2301      	movs	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e002      	b.n	8002894 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002892:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	4619      	mov	r1, r3
 8002898:	20c2      	movs	r0, #194	@ 0xc2
 800289a:	f003 fd83 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800289e:	697b      	ldr	r3, [r7, #20]
    }
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028ac:	b088      	sub	sp, #32
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80028b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028c2:	3b01      	subs	r3, #1
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f023 0307 	bic.w	r3, r3, #7
 80028d0:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <prvInitialiseNewTask+0x4c>
    __asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	617b      	str	r3, [r7, #20]
}
 80028ee:	bf00      	nop
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <prvInitialiseNewTask+0x48>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01e      	beq.n	8002938 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	e012      	b.n	8002926 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4413      	add	r3, r2
 8002906:	7819      	ldrb	r1, [r3, #0]
 8002908:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	4413      	add	r3, r2
 800290e:	3340      	adds	r3, #64	@ 0x40
 8002910:	460a      	mov	r2, r1
 8002912:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	3301      	adds	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d9e9      	bls.n	8002900 <prvInitialiseNewTask+0x58>
 800292c:	e000      	b.n	8002930 <prvInitialiseNewTask+0x88>
            {
                break;
 800292e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002932:	2200      	movs	r2, #0
 8002934:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293a:	2b04      	cmp	r3, #4
 800293c:	d90b      	bls.n	8002956 <prvInitialiseNewTask+0xae>
    __asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	613b      	str	r3, [r7, #16]
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	e7fd      	b.n	8002952 <prvInitialiseNewTask+0xaa>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002958:	2b04      	cmp	r3, #4
 800295a:	d901      	bls.n	8002960 <prvInitialiseNewTask+0xb8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800295c:	2304      	movs	r3, #4
 800295e:	63bb      	str	r3, [r7, #56]	@ 0x38
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002962:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002964:	639a      	str	r2, [r3, #56]	@ 0x38
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002968:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800296a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800296c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800296e:	3308      	adds	r3, #8
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fb44 	bl	8001ffe <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002978:	3320      	adds	r3, #32
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fb3f 	bl	8001ffe <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002982:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002984:	619a      	str	r2, [r3, #24]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002988:	2200      	movs	r2, #0
 800298a:	461c      	mov	r4, r3
 800298c:	4615      	mov	r5, r2
 800298e:	2300      	movs	r3, #0
 8002990:	f1d4 0805 	rsbs	r8, r4, #5
 8002994:	eb63 0905 	sbc.w	r9, r3, r5
 8002998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800299a:	e9c3 8908 	strd	r8, r9, [r3, #32]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800299e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029a2:	631a      	str	r2, [r3, #48]	@ 0x30
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	68f9      	ldr	r1, [r7, #12]
 80029a8:	69b8      	ldr	r0, [r7, #24]
 80029aa:	f001 fcc7 	bl	800433c <pxPortInitialiseStack>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029b2:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80029b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029be:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029c0:	bf00      	nop
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080029cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80029cc:	b5b0      	push	{r4, r5, r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80029d4:	f001 fe9c 	bl	8004710 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80029d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002b18 <prvAddNewTaskToReadyList+0x14c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	4a4e      	ldr	r2, [pc, #312]	@ (8002b18 <prvAddNewTaskToReadyList+0x14c>)
 80029e0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80029e2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b1c <prvAddNewTaskToReadyList+0x150>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80029ea:	4a4c      	ldr	r2, [pc, #304]	@ (8002b1c <prvAddNewTaskToReadyList+0x150>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029f0:	4b49      	ldr	r3, [pc, #292]	@ (8002b18 <prvAddNewTaskToReadyList+0x14c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d110      	bne.n	8002a1a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80029f8:	f000 ffb4 	bl	8003964 <prvInitialiseTaskLists>
 80029fc:	e00d      	b.n	8002a1a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80029fe:	4b48      	ldr	r3, [pc, #288]	@ (8002b20 <prvAddNewTaskToReadyList+0x154>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a06:	4b45      	ldr	r3, [pc, #276]	@ (8002b1c <prvAddNewTaskToReadyList+0x150>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d802      	bhi.n	8002a1a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002a14:	4a41      	ldr	r2, [pc, #260]	@ (8002b1c <prvAddNewTaskToReadyList+0x150>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002a1a:	4b42      	ldr	r3, [pc, #264]	@ (8002b24 <prvAddNewTaskToReadyList+0x158>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	4a40      	ldr	r2, [pc, #256]	@ (8002b24 <prvAddNewTaskToReadyList+0x158>)
 8002a22:	6013      	str	r3, [r2, #0]
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <prvAddNewTaskToReadyList+0x8c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 fd2d 	bl	800648c <SEGGER_SYSVIEW_OnTaskCreate>
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a42:	461d      	mov	r5, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461c      	mov	r4, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4e:	1ae3      	subs	r3, r4, r3
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	462b      	mov	r3, r5
 8002a54:	f002 fae2 	bl	800501c <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fd9a 	bl	8006594 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a64:	4b30      	ldr	r3, [pc, #192]	@ (8002b28 <prvAddNewTaskToReadyList+0x15c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d903      	bls.n	8002a74 <prvAddNewTaskToReadyList+0xa8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	4a2d      	ldr	r2, [pc, #180]	@ (8002b28 <prvAddNewTaskToReadyList+0x15c>)
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a78:	492c      	ldr	r1, [pc, #176]	@ (8002b2c <prvAddNewTaskToReadyList+0x160>)
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	3304      	adds	r3, #4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	615a      	str	r2, [r3, #20]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	3208      	adds	r2, #8
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f103 0208 	add.w	r2, r3, #8
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	60da      	str	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b2c <prvAddNewTaskToReadyList+0x160>)
 8002aba:	441a      	add	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	61da      	str	r2, [r3, #28]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ac4:	4919      	ldr	r1, [pc, #100]	@ (8002b2c <prvAddNewTaskToReadyList+0x160>)
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ad6:	1c59      	adds	r1, r3, #1
 8002ad8:	4814      	ldr	r0, [pc, #80]	@ (8002b2c <prvAddNewTaskToReadyList+0x160>)
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4403      	add	r3, r0
 8002ae4:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002ae6:	f001 fe45 	bl	8004774 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002aea:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <prvAddNewTaskToReadyList+0x154>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <prvAddNewTaskToReadyList+0x144>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <prvAddNewTaskToReadyList+0x150>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d207      	bcs.n	8002b10 <prvAddNewTaskToReadyList+0x144>
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <prvAddNewTaskToReadyList+0x164>)
 8002b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bdb0      	pop	{r4, r5, r7, pc}
 8002b18:	20000188 	.word	0x20000188
 8002b1c:	20000084 	.word	0x20000084
 8002b20:	2000019c 	.word	0x2000019c
 8002b24:	200001b0 	.word	0x200001b0
 8002b28:	20000198 	.word	0x20000198
 8002b2c:	20000088 	.word	0x20000088
 8002b30:	e000ed04 	.word	0xe000ed04

08002b34 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        traceENTER_uxTaskPriorityGet( xTask );

        taskENTER_CRITICAL();
 8002b3c:	f001 fde8 	bl	8004710 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <uxTaskPriorityGet+0x18>
 8002b46:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <uxTaskPriorityGet+0x38>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	e000      	b.n	8002b4e <uxTaskPriorityGet+0x1a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b54:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002b56:	f001 fe0d 	bl	8004774 <vPortExitCritical>

        traceRETURN_uxTaskPriorityGet( uxReturn );
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	20c7      	movs	r0, #199	@ 0xc7
 8002b5e:	f003 fc21 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 8002b62:	68bb      	ldr	r3, [r7, #8]
    }
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000084 	.word	0x20000084

08002b70 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002b70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b74:	b08a      	sub	sp, #40	@ 0x28
 8002b76:	af02      	add	r7, sp, #8
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
            BaseType_t xYieldForTask = pdFALSE;
        #endif

        traceENTER_vTaskPrioritySet( xTask, uxNewPriority );

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d90b      	bls.n	8002b9e <vTaskPrioritySet+0x2e>
    __asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	60bb      	str	r3, [r7, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	e7fd      	b.n	8002b9a <vTaskPrioritySet+0x2a>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d901      	bls.n	8002ba8 <vTaskPrioritySet+0x38>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002ba8:	f001 fdb2 	bl	8004710 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <vTaskPrioritySet+0x48>
 8002bb2:	4b67      	ldr	r3, [pc, #412]	@ (8002d50 <vTaskPrioritySet+0x1e0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e000      	b.n	8002bba <vTaskPrioritySet+0x4a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 fd8a 	bl	80066d8 <SEGGER_SYSVIEW_ShrinkId>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	20c9      	movs	r0, #201	@ 0xc9
 8002bcc:	f003 f812 	bl	8005bf4 <SEGGER_SYSVIEW_RecordU32x2>
 8002bd0:	69b8      	ldr	r0, [r7, #24]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2300      	movs	r3, #0
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	f002 fa81 	bl	80050ec <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bee:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f000 80a0 	beq.w	8002d3a <vTaskPrioritySet+0x1ca>
            {
                /* The priority change may have readied a task of higher
                 * priority than a running task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d90d      	bls.n	8002c1e <vTaskPrioritySet+0xae>
                {
                    #if ( configNUMBER_OF_CORES == 1 )
                    {
                        if( pxTCB != pxCurrentTCB )
 8002c02:	4b53      	ldr	r3, [pc, #332]	@ (8002d50 <vTaskPrioritySet+0x1e0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d00f      	beq.n	8002c2c <vTaskPrioritySet+0xbc>
                        {
                            /* The priority of a task other than the currently
                             * running task is being raised.  Is the priority being
                             * raised above that of the running task? */
                            if( uxNewPriority > pxCurrentTCB->uxPriority )
 8002c0c:	4b50      	ldr	r3, [pc, #320]	@ (8002d50 <vTaskPrioritySet+0x1e0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d909      	bls.n	8002c2c <vTaskPrioritySet+0xbc>
                            {
                                xYieldRequired = pdTRUE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	e006      	b.n	8002c2c <vTaskPrioritySet+0xbc>
                         * perform a yield for this task later. */
                        xYieldForTask = pdTRUE;
                    }
                    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                }
                else if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8002c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002d50 <vTaskPrioritySet+0x1e0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d101      	bne.n	8002c2c <vTaskPrioritySet+0xbc>
                     * is ready to execute. */
                    #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
                        if( pxTCB->xPreemptionDisable == pdFALSE )
                    #endif
                    {
                        xYieldRequired = pdTRUE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	613b      	str	r3, [r7, #16]
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority or the new priority
                     * is bigger than the inherited priority. */
                    if( ( pxTCB->uxBasePriority == pxTCB->uxPriority ) || ( uxNewPriority > pxTCB->uxPriority ) )
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d004      	beq.n	8002c48 <vTaskPrioritySet+0xd8>
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d902      	bls.n	8002c4e <vTaskPrioritySet+0xde>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	639a      	str	r2, [r3, #56]	@ 0x38
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <vTaskPrioritySet+0x106>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) );
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2200      	movs	r2, #0
 8002c62:	461c      	mov	r4, r3
 8002c64:	4615      	mov	r5, r2
 8002c66:	2300      	movs	r3, #0
 8002c68:	f1d4 0805 	rsbs	r8, r4, #5
 8002c6c:	eb63 0905 	sbc.w	r9, r3, r5
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	e9c3 8908 	strd	r8, r9, [r3, #32]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	69d9      	ldr	r1, [r3, #28]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4a33      	ldr	r2, [pc, #204]	@ (8002d54 <vTaskPrioritySet+0x1e4>)
 8002c86:	4413      	add	r3, r2
 8002c88:	4299      	cmp	r1, r3
 8002c8a:	d14b      	bne.n	8002d24 <vTaskPrioritySet+0x1b4>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	3308      	adds	r3, #8
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fa08 	bl	80020a6 <uxListRemove>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvAddTaskToReadyList( pxTCB );
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 fc7b 	bl	8006594 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d58 <vTaskPrioritySet+0x1e8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d903      	bls.n	8002cb2 <vTaskPrioritySet+0x142>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cae:	4a2a      	ldr	r2, [pc, #168]	@ (8002d58 <vTaskPrioritySet+0x1e8>)
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cb6:	4927      	ldr	r1, [pc, #156]	@ (8002d54 <vTaskPrioritySet+0x1e4>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	611a      	str	r2, [r3, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	615a      	str	r2, [r3, #20]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f103 0208 	add.w	r2, r3, #8
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <vTaskPrioritySet+0x1e4>)
 8002cf8:	441a      	add	r2, r3
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	61da      	str	r2, [r3, #28]
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d02:	4914      	ldr	r1, [pc, #80]	@ (8002d54 <vTaskPrioritySet+0x1e4>)
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d14:	1c59      	adds	r1, r3, #1
 8002d16:	480f      	ldr	r0, [pc, #60]	@ (8002d54 <vTaskPrioritySet+0x1e4>)
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4403      	add	r3, r0
 8002d22:	6019      	str	r1, [r3, #0]
                        xYieldForTask = pdFALSE;
                    }
                    #endif
                }

                if( xYieldRequired != pdFALSE )
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <vTaskPrioritySet+0x1ca>
                {
                    /* The running task priority is set down. Request the task to yield. */
                    taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB );
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <vTaskPrioritySet+0x1ec>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002d3a:	f001 fd1b 	bl	8004774 <vPortExitCritical>

        traceRETURN_vTaskPrioritySet();
 8002d3e:	20c9      	movs	r0, #201	@ 0xc9
 8002d40:	f003 faf4 	bl	800632c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002d44:	bf00      	nop
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000084 	.word	0x20000084
 8002d54:	20000088 	.word	0x20000088
 8002d58:	20000198 	.word	0x20000198
 8002d5c:	e000ed04 	.word	0xe000ed04

08002d60 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b090      	sub	sp, #64	@ 0x40
 8002d64:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8002d66:	2301      	movs	r3, #1
 8002d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d72:	e013      	b.n	8002d9c <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002d74:	4a2b      	ldr	r2, [pc, #172]	@ (8002e24 <prvCreateIdleTasks+0xc4>)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	4413      	add	r3, r2
 8002d7a:	7819      	ldrb	r1, [r3, #0]
 8002d7c:	f107 0210 	add.w	r2, r7, #16
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	4413      	add	r3, r2
 8002d84:	460a      	mov	r2, r1
 8002d86:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002d88:	f107 0210 	add.w	r2, r7, #16
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	4413      	add	r3, r2
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	3301      	adds	r3, #1
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	dde8      	ble.n	8002d74 <prvCreateIdleTasks+0x14>
 8002da2:	e000      	b.n	8002da6 <prvCreateIdleTasks+0x46>
        {
            break;
 8002da4:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002da6:	2300      	movs	r3, #0
 8002da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002daa:	e031      	b.n	8002e10 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002dac:	4b1e      	ldr	r3, [pc, #120]	@ (8002e28 <prvCreateIdleTasks+0xc8>)
 8002dae:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8002db8:	1d3a      	adds	r2, r7, #4
 8002dba:	f107 0108 	add.w	r1, r7, #8
 8002dbe:	f107 030c 	add.w	r3, r7, #12
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 ff5a 	bl	8003c7c <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	f107 0110 	add.w	r1, r7, #16
 8002dd2:	9202      	str	r2, [sp, #8]
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	4602      	mov	r2, r0
 8002dde:	6a38      	ldr	r0, [r7, #32]
 8002de0:	f7ff fccd 	bl	800277e <xTaskCreateStatic>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4911      	ldr	r1, [pc, #68]	@ (8002e2c <prvCreateIdleTasks+0xcc>)
 8002de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002dee:	4a0f      	ldr	r2, [pc, #60]	@ (8002e2c <prvCreateIdleTasks+0xcc>)
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dfe:	e001      	b.n	8002e04 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	ddca      	ble.n	8002dac <prvCreateIdleTasks+0x4c>
 8002e16:	e000      	b.n	8002e1a <prvCreateIdleTasks+0xba>
        {
            break;
 8002e18:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3730      	adds	r7, #48	@ 0x30
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	08006a68 	.word	0x08006a68
 8002e28:	08003935 	.word	0x08003935
 8002e2c:	200001c0 	.word	0x200001c0

08002e30 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002e36:	f7ff ff93 	bl	8002d60 <prvCreateIdleTasks>
 8002e3a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d102      	bne.n	8002e48 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002e42:	f000 ff4f 	bl	8003ce4 <xTimerCreateTimerTask>
 8002e46:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d12b      	bne.n	8002ea6 <vTaskStartScheduler+0x76>
    __asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	60bb      	str	r3, [r7, #8]
}
 8002e60:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e62:	491d      	ldr	r1, [pc, #116]	@ (8002ed8 <vTaskStartScheduler+0xa8>)
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e6c:	e9c1 2300 	strd	r2, r3, [r1]
        xSchedulerRunning = pdTRUE;
 8002e70:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <vTaskStartScheduler+0xac>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e76:	491a      	ldr	r1, [pc, #104]	@ (8002ee0 <vTaskStartScheduler+0xb0>)
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	e9c1 2300 	strd	r2, r3, [r1]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002e84:	4b17      	ldr	r3, [pc, #92]	@ (8002ee4 <vTaskStartScheduler+0xb4>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4b17      	ldr	r3, [pc, #92]	@ (8002ee8 <vTaskStartScheduler+0xb8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d102      	bne.n	8002e96 <vTaskStartScheduler+0x66>
 8002e90:	f003 fae0 	bl	8006454 <SEGGER_SYSVIEW_OnIdle>
 8002e94:	e004      	b.n	8002ea0 <vTaskStartScheduler+0x70>
 8002e96:	4b14      	ldr	r3, [pc, #80]	@ (8002ee8 <vTaskStartScheduler+0xb8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 fb38 	bl	8006510 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002ea0:	f001 fad8 	bl	8004454 <xPortStartScheduler>
 8002ea4:	e00f      	b.n	8002ec6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eac:	d10b      	bne.n	8002ec6 <vTaskStartScheduler+0x96>
    __asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	607b      	str	r3, [r7, #4]
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	e7fd      	b.n	8002ec2 <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <vTaskStartScheduler+0xbc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002eca:	20cd      	movs	r0, #205	@ 0xcd
 8002ecc:	f003 fa2e 	bl	800632c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200001b8 	.word	0x200001b8
 8002edc:	2000019c 	.word	0x2000019c
 8002ee0:	20000190 	.word	0x20000190
 8002ee4:	200001c0 	.word	0x200001c0
 8002ee8:	20000084 	.word	0x20000084
 8002eec:	08006b50 	.word	0x08006b50

08002ef0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002ef4:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <vTaskSuspendAll+0x18>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	4a03      	ldr	r2, [pc, #12]	@ (8002f08 <vTaskSuspendAll+0x18>)
 8002efc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002efe:	20cf      	movs	r0, #207	@ 0xcf
 8002f00:	f003 fa14 	bl	800632c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200001c4 	.word	0x200001c4

08002f0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	b08a      	sub	sp, #40	@ 0x28
 8002f10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002f1a:	f001 fbf9 	bl	8004710 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002f22:	4b81      	ldr	r3, [pc, #516]	@ (8003128 <xTaskResumeAll+0x21c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <xTaskResumeAll+0x36>
    __asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	607b      	str	r3, [r7, #4]
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	e7fd      	b.n	8002f3e <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002f42:	4b79      	ldr	r3, [pc, #484]	@ (8003128 <xTaskResumeAll+0x21c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	4a77      	ldr	r2, [pc, #476]	@ (8003128 <xTaskResumeAll+0x21c>)
 8002f4a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002f4c:	4b76      	ldr	r3, [pc, #472]	@ (8003128 <xTaskResumeAll+0x21c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 80dc 	bne.w	800310e <xTaskResumeAll+0x202>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f56:	4b75      	ldr	r3, [pc, #468]	@ (800312c <xTaskResumeAll+0x220>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80d7 	beq.w	800310e <xTaskResumeAll+0x202>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f60:	e094      	b.n	800308c <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f62:	4b73      	ldr	r3, [pc, #460]	@ (8003130 <xTaskResumeAll+0x224>)
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	3320      	adds	r3, #32
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d103      	bne.n	8002f98 <xTaskResumeAll+0x8c>
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1e5a      	subs	r2, r3, #1
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb4:	6952      	ldr	r2, [r2, #20]
 8002fb6:	60da      	str	r2, [r3, #12]
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fbe:	6912      	ldr	r2, [r2, #16]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	3308      	adds	r3, #8
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d103      	bne.n	8002fd6 <xTaskResumeAll+0xca>
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	2200      	movs	r2, #0
 8002fda:	61da      	str	r2, [r3, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 fad3 	bl	8006594 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff2:	4b50      	ldr	r3, [pc, #320]	@ (8003134 <xTaskResumeAll+0x228>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d903      	bls.n	8003002 <xTaskResumeAll+0xf6>
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffe:	4a4d      	ldr	r2, [pc, #308]	@ (8003134 <xTaskResumeAll+0x228>)
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003006:	494c      	ldr	r1, [pc, #304]	@ (8003138 <xTaskResumeAll+0x22c>)
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	440b      	add	r3, r1
 8003012:	3304      	adds	r3, #4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	611a      	str	r2, [r3, #16]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	615a      	str	r2, [r3, #20]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800302c:	3208      	adds	r2, #8
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	f103 0208 	add.w	r2, r3, #8
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4a3c      	ldr	r2, [pc, #240]	@ (8003138 <xTaskResumeAll+0x22c>)
 8003048:	441a      	add	r2, r3
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	61da      	str	r2, [r3, #28]
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003052:	4939      	ldr	r1, [pc, #228]	@ (8003138 <xTaskResumeAll+0x22c>)
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003062:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003064:	1c59      	adds	r1, r3, #1
 8003066:	4834      	ldr	r0, [pc, #208]	@ (8003138 <xTaskResumeAll+0x22c>)
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4403      	add	r3, r0
 8003072:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003078:	4b30      	ldr	r3, [pc, #192]	@ (800313c <xTaskResumeAll+0x230>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307e:	429a      	cmp	r2, r3
 8003080:	d904      	bls.n	800308c <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003082:	4a2f      	ldr	r2, [pc, #188]	@ (8003140 <xTaskResumeAll+0x234>)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2101      	movs	r1, #1
 8003088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800308c:	4b28      	ldr	r3, [pc, #160]	@ (8003130 <xTaskResumeAll+0x224>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f47f af66 	bne.w	8002f62 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800309c:	f000 fd00 	bl	8003aa0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030a0:	4b28      	ldr	r3, [pc, #160]	@ (8003144 <xTaskResumeAll+0x238>)
 80030a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a6:	e9c7 2306 	strd	r2, r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80030aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	d01b      	beq.n	80030ea <xTaskResumeAll+0x1de>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80030b2:	f000 f891 	bl	80031d8 <xTaskIncrementTick>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <xTaskResumeAll+0x1ba>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80030bc:	4a20      	ldr	r2, [pc, #128]	@ (8003140 <xTaskResumeAll+0x234>)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2101      	movs	r1, #1
 80030c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80030c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ca:	1e54      	subs	r4, r2, #1
 80030cc:	f143 35ff 	adc.w	r5, r3, #4294967295	@ 0xffffffff
 80030d0:	e9c7 4506 	strd	r4, r5, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80030d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	d1ea      	bne.n	80030b2 <xTaskResumeAll+0x1a6>

                            xPendedTicks = 0;
 80030dc:	4919      	ldr	r1, [pc, #100]	@ (8003144 <xTaskResumeAll+0x238>)
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9c1 2300 	strd	r2, r3, [r1]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80030ea:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <xTaskResumeAll+0x234>)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <xTaskResumeAll+0x202>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80030f6:	2301      	movs	r3, #1
 80030f8:	623b      	str	r3, [r7, #32]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80030fa:	4b10      	ldr	r3, [pc, #64]	@ (800313c <xTaskResumeAll+0x230>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <xTaskResumeAll+0x23c>)
 8003100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800310e:	f001 fb31 	bl	8004774 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	4619      	mov	r1, r3
 8003116:	20d0      	movs	r0, #208	@ 0xd0
 8003118:	f003 f944 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 800311c:	6a3b      	ldr	r3, [r7, #32]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3728      	adds	r7, #40	@ 0x28
 8003122:	46bd      	mov	sp, r7
 8003124:	bdb0      	pop	{r4, r5, r7, pc}
 8003126:	bf00      	nop
 8003128:	200001c4 	.word	0x200001c4
 800312c:	20000188 	.word	0x20000188
 8003130:	20000138 	.word	0x20000138
 8003134:	20000198 	.word	0x20000198
 8003138:	20000088 	.word	0x20000088
 800313c:	20000084 	.word	0x20000084
 8003140:	200001a8 	.word	0x200001a8
 8003144:	200001a0 	.word	0x200001a0
 8003148:	e000ed04 	.word	0xe000ed04

0800314c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
 8003152:	f001 fadd 	bl	8004710 <vPortEnterCritical>
    {
        xTicks = xTickCount;
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <xTaskGetTickCount+0x30>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	e9c7 2300 	strd	r2, r3, [r7]
    }
    portTICK_TYPE_EXIT_CRITICAL();
 8003160:	f001 fb08 	bl	8004774 <vPortExitCritical>

    traceRETURN_xTaskGetTickCount( xTicks );
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4619      	mov	r1, r3
 8003168:	20d1      	movs	r0, #209	@ 0xd1
 800316a:	f003 f91b 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 800316e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000190 	.word	0x20000190

08003180 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003186:	f001 fbb1 	bl	80048ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 800318a:	f3ef 8211 	mrs	r2, BASEPRI
 800318e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	60ba      	str	r2, [r7, #8]
 80031a0:	607b      	str	r3, [r7, #4]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 80031a2:	68bb      	ldr	r3, [r7, #8]

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80031a4:	61fb      	str	r3, [r7, #28]
    {
        xReturn = xTickCount;
 80031a6:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <xTaskGetTickCountFromISR+0x54>)
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80031ba:	bf00      	nop
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4619      	mov	r1, r3
 80031c0:	20d2      	movs	r0, #210	@ 0xd2
 80031c2:	f003 f8ef 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80031c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80031ca:	4610      	mov	r0, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000190 	.word	0x20000190

080031d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031d8:	b5b0      	push	{r4, r5, r7, lr}
 80031da:	b08c      	sub	sp, #48	@ 0x30
 80031dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031de:	2300      	movs	r3, #0
 80031e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80031e2:	4b8a      	ldr	r3, [pc, #552]	@ (800340c <xTaskIncrementTick+0x234>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 80fd 	bne.w	80033e6 <xTaskIncrementTick+0x20e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031ec:	4b88      	ldr	r3, [pc, #544]	@ (8003410 <xTaskIncrementTick+0x238>)
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	1c54      	adds	r4, r2, #1
 80031f4:	f143 0500 	adc.w	r5, r3, #0
 80031f8:	e9c7 4508 	strd	r4, r5, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031fc:	4984      	ldr	r1, [pc, #528]	@ (8003410 <xTaskIncrementTick+0x238>)
 80031fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003202:	e9c1 2300 	strd	r2, r3, [r1]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800320a:	4313      	orrs	r3, r2
 800320c:	d121      	bne.n	8003252 <xTaskIncrementTick+0x7a>
        {
            taskSWITCH_DELAYED_LISTS();
 800320e:	4b81      	ldr	r3, [pc, #516]	@ (8003414 <xTaskIncrementTick+0x23c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00b      	beq.n	8003230 <xTaskIncrementTick+0x58>
    __asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	603b      	str	r3, [r7, #0]
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <xTaskIncrementTick+0x54>
 8003230:	4b78      	ldr	r3, [pc, #480]	@ (8003414 <xTaskIncrementTick+0x23c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	4b78      	ldr	r3, [pc, #480]	@ (8003418 <xTaskIncrementTick+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a76      	ldr	r2, [pc, #472]	@ (8003414 <xTaskIncrementTick+0x23c>)
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4a76      	ldr	r2, [pc, #472]	@ (8003418 <xTaskIncrementTick+0x240>)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b75      	ldr	r3, [pc, #468]	@ (800341c <xTaskIncrementTick+0x244>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	4a74      	ldr	r2, [pc, #464]	@ (800341c <xTaskIncrementTick+0x244>)
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	f000 fc27 	bl	8003aa0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003252:	4b73      	ldr	r3, [pc, #460]	@ (8003420 <xTaskIncrementTick+0x248>)
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800325c:	4290      	cmp	r0, r2
 800325e:	eb71 0303 	sbcs.w	r3, r1, r3
 8003262:	f0c0 80b9 	bcc.w	80033d8 <xTaskIncrementTick+0x200>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003266:	4b6b      	ldr	r3, [pc, #428]	@ (8003414 <xTaskIncrementTick+0x23c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <xTaskIncrementTick+0xa8>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003270:	496b      	ldr	r1, [pc, #428]	@ (8003420 <xTaskIncrementTick+0x248>)
 8003272:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003276:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800327a:	e9c1 2300 	strd	r2, r3, [r1]
                    break;
 800327e:	e0ab      	b.n	80033d8 <xTaskIncrementTick+0x200>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003280:	4b64      	ldr	r3, [pc, #400]	@ (8003414 <xTaskIncrementTick+0x23c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003290:	e9c7 2304 	strd	r2, r3, [r7, #16]

                    if( xConstTickCount < xItemValue )
 8003294:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003298:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800329c:	4290      	cmp	r0, r2
 800329e:	eb71 0303 	sbcs.w	r3, r1, r3
 80032a2:	d205      	bcs.n	80032b0 <xTaskIncrementTick+0xd8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032a4:	495e      	ldr	r1, [pc, #376]	@ (8003420 <xTaskIncrementTick+0x248>)
 80032a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032aa:	e9c1 2300 	strd	r2, r3, [r1]
                        break;
 80032ae:	e093      	b.n	80033d8 <xTaskIncrementTick+0x200>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	6952      	ldr	r2, [r2, #20]
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	6912      	ldr	r2, [r2, #16]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	3308      	adds	r3, #8
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d103      	bne.n	80032de <xTaskIncrementTick+0x106>
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2200      	movs	r2, #0
 80032e2:	61da      	str	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01e      	beq.n	8003334 <xTaskIncrementTick+0x15c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	3320      	adds	r3, #32
 8003318:	429a      	cmp	r2, r3
 800331a:	d103      	bne.n	8003324 <xTaskIncrementTick+0x14c>
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2200      	movs	r2, #0
 8003328:	635a      	str	r2, [r3, #52]	@ 0x34
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	1e5a      	subs	r2, r3, #1
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	4618      	mov	r0, r3
 8003338:	f003 f92c 	bl	8006594 <SEGGER_SYSVIEW_OnTaskStartReady>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003340:	4b38      	ldr	r3, [pc, #224]	@ (8003424 <xTaskIncrementTick+0x24c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d903      	bls.n	8003350 <xTaskIncrementTick+0x178>
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	4a35      	ldr	r2, [pc, #212]	@ (8003424 <xTaskIncrementTick+0x24c>)
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003354:	4934      	ldr	r1, [pc, #208]	@ (8003428 <xTaskIncrementTick+0x250>)
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	440b      	add	r3, r1
 8003360:	3304      	adds	r3, #4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	611a      	str	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	615a      	str	r2, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	3208      	adds	r2, #8
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f103 0208 	add.w	r2, r3, #8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4a24      	ldr	r2, [pc, #144]	@ (8003428 <xTaskIncrementTick+0x250>)
 8003396:	441a      	add	r2, r3
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	61da      	str	r2, [r3, #28]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033a0:	4921      	ldr	r1, [pc, #132]	@ (8003428 <xTaskIncrementTick+0x250>)
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	440b      	add	r3, r1
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	481c      	ldr	r0, [pc, #112]	@ (8003428 <xTaskIncrementTick+0x250>)
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4403      	add	r3, r0
 80033c0:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033c6:	4b19      	ldr	r3, [pc, #100]	@ (800342c <xTaskIncrementTick+0x254>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033cc:	429a      	cmp	r2, r3
 80033ce:	f67f af4a 	bls.w	8003266 <xTaskIncrementTick+0x8e>
                            {
                                xSwitchRequired = pdTRUE;
 80033d2:	2301      	movs	r3, #1
 80033d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033d6:	e746      	b.n	8003266 <xTaskIncrementTick+0x8e>
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80033d8:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <xTaskIncrementTick+0x258>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <xTaskIncrementTick+0x220>
                {
                    xSwitchRequired = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033e4:	e008      	b.n	80033f8 <xTaskIncrementTick+0x220>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80033e6:	4b13      	ldr	r3, [pc, #76]	@ (8003434 <xTaskIncrementTick+0x25c>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	1c50      	adds	r0, r2, #1
 80033ee:	f143 0100 	adc.w	r1, r3, #0
 80033f2:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <xTaskIncrementTick+0x25c>)
 80033f4:	e9c3 0100 	strd	r0, r1, [r3]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80033f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fa:	4619      	mov	r1, r3
 80033fc:	20db      	movs	r0, #219	@ 0xdb
 80033fe:	f002 ffd1 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003404:	4618      	mov	r0, r3
 8003406:	3730      	adds	r7, #48	@ 0x30
 8003408:	46bd      	mov	sp, r7
 800340a:	bdb0      	pop	{r4, r5, r7, pc}
 800340c:	200001c4 	.word	0x200001c4
 8003410:	20000190 	.word	0x20000190
 8003414:	20000130 	.word	0x20000130
 8003418:	20000134 	.word	0x20000134
 800341c:	200001ac 	.word	0x200001ac
 8003420:	200001b8 	.word	0x200001b8
 8003424:	20000198 	.word	0x20000198
 8003428:	20000088 	.word	0x20000088
 800342c:	20000084 	.word	0x20000084
 8003430:	200001a8 	.word	0x200001a8
 8003434:	200001a0 	.word	0x200001a0

08003438 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800343e:	4b2f      	ldr	r3, [pc, #188]	@ (80034fc <vTaskSwitchContext+0xc4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003446:	4b2e      	ldr	r3, [pc, #184]	@ (8003500 <vTaskSwitchContext+0xc8>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800344c:	e051      	b.n	80034f2 <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 800344e:	4b2c      	ldr	r3, [pc, #176]	@ (8003500 <vTaskSwitchContext+0xc8>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003454:	4b2b      	ldr	r3, [pc, #172]	@ (8003504 <vTaskSwitchContext+0xcc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e011      	b.n	8003480 <vTaskSwitchContext+0x48>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10b      	bne.n	800347a <vTaskSwitchContext+0x42>
    __asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	607b      	str	r3, [r7, #4]
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	e7fd      	b.n	8003476 <vTaskSwitchContext+0x3e>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3b01      	subs	r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	4921      	ldr	r1, [pc, #132]	@ (8003508 <vTaskSwitchContext+0xd0>)
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0e3      	beq.n	800345c <vTaskSwitchContext+0x24>
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4a1a      	ldr	r2, [pc, #104]	@ (8003508 <vTaskSwitchContext+0xd0>)
 80034a0:	4413      	add	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	3308      	adds	r3, #8
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d103      	bne.n	80034c2 <vTaskSwitchContext+0x8a>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	4a10      	ldr	r2, [pc, #64]	@ (800350c <vTaskSwitchContext+0xd4>)
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003504 <vTaskSwitchContext+0xcc>)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80034d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003510 <vTaskSwitchContext+0xd8>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4b0d      	ldr	r3, [pc, #52]	@ (800350c <vTaskSwitchContext+0xd4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d102      	bne.n	80034e4 <vTaskSwitchContext+0xac>
 80034de:	f002 ffb9 	bl	8006454 <SEGGER_SYSVIEW_OnIdle>
 80034e2:	e004      	b.n	80034ee <vTaskSwitchContext+0xb6>
 80034e4:	4b09      	ldr	r3, [pc, #36]	@ (800350c <vTaskSwitchContext+0xd4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f003 f811 	bl	8006510 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80034ee:	4b07      	ldr	r3, [pc, #28]	@ (800350c <vTaskSwitchContext+0xd4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
    }
 80034f2:	bf00      	nop
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200001c4 	.word	0x200001c4
 8003500:	200001a8 	.word	0x200001a8
 8003504:	20000198 	.word	0x20000198
 8003508:	20000088 	.word	0x20000088
 800350c:	20000084 	.word	0x20000084
 8003510:	200001c0 	.word	0x200001c0

08003514 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	e9c7 2300 	strd	r2, r3, [r7]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10b      	bne.n	800353e <vTaskPlaceOnEventList+0x2a>
    __asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	617b      	str	r3, [r7, #20]
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	e7fd      	b.n	800353a <vTaskPlaceOnEventList+0x26>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800353e:	4b09      	ldr	r3, [pc, #36]	@ (8003564 <vTaskPlaceOnEventList+0x50>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3320      	adds	r3, #32
 8003544:	4619      	mov	r1, r3
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7fe fd68 	bl	800201c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800354c:	2201      	movs	r2, #1
 800354e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003552:	f000 fafd 	bl	8003b50 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003556:	20e1      	movs	r0, #225	@ 0xe1
 8003558:	f002 fee8 	bl	800632c <SEGGER_SYSVIEW_RecordEndCall>
}
 800355c:	bf00      	nop
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000084 	.word	0x20000084

08003568 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	e9c7 2300 	strd	r2, r3, [r7]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	613b      	str	r3, [r7, #16]
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	e7fd      	b.n	800358e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	4b19      	ldr	r3, [pc, #100]	@ (8003600 <vTaskPlaceOnEventListRestricted+0x98>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	629a      	str	r2, [r3, #40]	@ 0x28
 80035a0:	4b17      	ldr	r3, [pc, #92]	@ (8003600 <vTaskPlaceOnEventListRestricted+0x98>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	68d2      	ldr	r2, [r2, #12]
 80035a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035aa:	4b15      	ldr	r3, [pc, #84]	@ (8003600 <vTaskPlaceOnEventListRestricted+0x98>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	3220      	adds	r2, #32
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	4b12      	ldr	r3, [pc, #72]	@ (8003600 <vTaskPlaceOnEventListRestricted+0x98>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f103 0220 	add.w	r2, r3, #32
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003600 <vTaskPlaceOnEventListRestricted+0x98>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <vTaskPlaceOnEventListRestricted+0x7e>
        {
            xTicksToWait = portMAX_DELAY;
 80035da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035e2:	e9c7 2300 	strd	r2, r3, [r7]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035e6:	6a3a      	ldr	r2, [r7, #32]
 80035e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035ec:	f000 fab0 	bl	8003b50 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80035f0:	20e3      	movs	r0, #227	@ 0xe3
 80035f2:	f002 fe9b 	bl	800632c <SEGGER_SYSVIEW_RecordEndCall>
    }
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000084 	.word	0x20000084

08003604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	@ 0x28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	60fb      	str	r3, [r7, #12]
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	e7fd      	b.n	800362e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003646:	6a3a      	ldr	r2, [r7, #32]
 8003648:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	3320      	adds	r3, #32
 8003654:	429a      	cmp	r2, r3
 8003656:	d103      	bne.n	8003660 <xTaskRemoveFromEventList+0x5c>
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	2200      	movs	r2, #0
 8003664:	635a      	str	r2, [r3, #52]	@ 0x34
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	1e5a      	subs	r2, r3, #1
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003670:	4b4f      	ldr	r3, [pc, #316]	@ (80037b0 <xTaskRemoveFromEventList+0x1ac>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d166      	bne.n	8003746 <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	6a3a      	ldr	r2, [r7, #32]
 8003684:	6952      	ldr	r2, [r2, #20]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	6a3a      	ldr	r2, [r7, #32]
 800368e:	6912      	ldr	r2, [r2, #16]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	3308      	adds	r3, #8
 800369a:	429a      	cmp	r2, r3
 800369c:	d103      	bne.n	80036a6 <xTaskRemoveFromEventList+0xa2>
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	2200      	movs	r2, #0
 80036aa:	61da      	str	r2, [r3, #28]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	1e5a      	subs	r2, r3, #1
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f002 ff6b 	bl	8006594 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036c2:	4b3c      	ldr	r3, [pc, #240]	@ (80037b4 <xTaskRemoveFromEventList+0x1b0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d903      	bls.n	80036d2 <xTaskRemoveFromEventList+0xce>
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ce:	4a39      	ldr	r2, [pc, #228]	@ (80037b4 <xTaskRemoveFromEventList+0x1b0>)
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036d6:	4938      	ldr	r1, [pc, #224]	@ (80037b8 <xTaskRemoveFromEventList+0x1b4>)
 80036d8:	4613      	mov	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	3304      	adds	r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	611a      	str	r2, [r3, #16]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	615a      	str	r2, [r3, #20]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	6a3a      	ldr	r2, [r7, #32]
 80036fc:	3208      	adds	r2, #8
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f103 0208 	add.w	r2, r3, #8
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4a28      	ldr	r2, [pc, #160]	@ (80037b8 <xTaskRemoveFromEventList+0x1b4>)
 8003718:	441a      	add	r2, r3
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	61da      	str	r2, [r3, #28]
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003722:	4925      	ldr	r1, [pc, #148]	@ (80037b8 <xTaskRemoveFromEventList+0x1b4>)
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	440b      	add	r3, r1
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003734:	1c59      	adds	r1, r3, #1
 8003736:	4820      	ldr	r0, [pc, #128]	@ (80037b8 <xTaskRemoveFromEventList+0x1b4>)
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4403      	add	r3, r0
 8003742:	6019      	str	r1, [r3, #0]
 8003744:	e01b      	b.n	800377e <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003746:	4b1d      	ldr	r3, [pc, #116]	@ (80037bc <xTaskRemoveFromEventList+0x1b8>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	629a      	str	r2, [r3, #40]	@ 0x28
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	62da      	str	r2, [r3, #44]	@ 0x2c
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	6a3a      	ldr	r2, [r7, #32]
 8003760:	3220      	adds	r2, #32
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	f103 0220 	add.w	r2, r3, #32
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	4a12      	ldr	r2, [pc, #72]	@ (80037bc <xTaskRemoveFromEventList+0x1b8>)
 8003772:	635a      	str	r2, [r3, #52]	@ 0x34
 8003774:	4b11      	ldr	r3, [pc, #68]	@ (80037bc <xTaskRemoveFromEventList+0x1b8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	4a10      	ldr	r2, [pc, #64]	@ (80037bc <xTaskRemoveFromEventList+0x1b8>)
 800377c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003782:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <xTaskRemoveFromEventList+0x1bc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	429a      	cmp	r2, r3
 800378a:	d905      	bls.n	8003798 <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800378c:	2301      	movs	r3, #1
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003790:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <xTaskRemoveFromEventList+0x1c0>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e001      	b.n	800379c <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 8003798:	2300      	movs	r3, #0
 800379a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	4619      	mov	r1, r3
 80037a0:	20e4      	movs	r0, #228	@ 0xe4
 80037a2:	f002 fdff 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3728      	adds	r7, #40	@ 0x28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200001c4 	.word	0x200001c4
 80037b4:	20000198 	.word	0x20000198
 80037b8:	20000088 	.word	0x20000088
 80037bc:	20000138 	.word	0x20000138
 80037c0:	20000084 	.word	0x20000084
 80037c4:	200001a8 	.word	0x200001a8

080037c8 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037d0:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <vTaskInternalSetTimeOutState+0x2c>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037d8:	4b07      	ldr	r3, [pc, #28]	@ (80037f8 <vTaskInternalSetTimeOutState+0x30>)
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	e9c1 2302 	strd	r2, r3, [r1, #8]

    traceRETURN_vTaskInternalSetTimeOutState();
 80037e4:	20e7      	movs	r0, #231	@ 0xe7
 80037e6:	f002 fda1 	bl	800632c <SEGGER_SYSVIEW_RecordEndCall>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200001ac 	.word	0x200001ac
 80037f8:	20000190 	.word	0x20000190

080037fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003800:	b08a      	sub	sp, #40	@ 0x28
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10b      	bne.n	8003826 <xTaskCheckForTimeOut+0x2a>
    __asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	60fb      	str	r3, [r7, #12]
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	e7fd      	b.n	8003822 <xTaskCheckForTimeOut+0x26>
    configASSERT( pxTicksToWait );
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <xTaskCheckForTimeOut+0x48>
    __asm volatile
 800382c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	60bb      	str	r3, [r7, #8]
}
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	e7fd      	b.n	8003840 <xTaskCheckForTimeOut+0x44>

    taskENTER_CRITICAL();
 8003844:	f000 ff64 	bl	8004710 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003848:	4b32      	ldr	r3, [pc, #200]	@ (8003914 <xTaskCheckForTimeOut+0x118>)
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003858:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800385c:	ebb0 0802 	subs.w	r8, r0, r2
 8003860:	eb61 0903 	sbc.w	r9, r1, r3
 8003864:	e9c7 8904 	strd	r8, r9, [r7, #16]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003872:	bf08      	it	eq
 8003874:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8003878:	d102      	bne.n	8003880 <xTaskCheckForTimeOut+0x84>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	@ 0x24
 800387e:	e03b      	b.n	80038f8 <xTaskCheckForTimeOut+0xfc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b24      	ldr	r3, [pc, #144]	@ (8003918 <xTaskCheckForTimeOut+0x11c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d012      	beq.n	80038b2 <xTaskCheckForTimeOut+0xb6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003892:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003896:	4290      	cmp	r0, r2
 8003898:	eb71 0303 	sbcs.w	r3, r1, r3
 800389c:	d309      	bcc.n	80038b2 <xTaskCheckForTimeOut+0xb6>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800389e:	2301      	movs	r3, #1
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
            *pxTicksToWait = ( TickType_t ) 0;
 80038a2:	6839      	ldr	r1, [r7, #0]
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9c1 2300 	strd	r2, r3, [r1]
 80038b0:	e022      	b.n	80038f8 <xTaskCheckForTimeOut+0xfc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038bc:	4290      	cmp	r0, r2
 80038be:	eb71 0303 	sbcs.w	r3, r1, r3
 80038c2:	d210      	bcs.n	80038e6 <xTaskCheckForTimeOut+0xea>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038ce:	1a84      	subs	r4, r0, r2
 80038d0:	eb61 0503 	sbc.w	r5, r1, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	e9c3 4500 	strd	r4, r5, [r3]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff ff74 	bl	80037c8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e4:	e008      	b.n	80038f8 <xTaskCheckForTimeOut+0xfc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9c1 2300 	strd	r2, r3, [r1]
            xReturn = pdTRUE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    taskEXIT_CRITICAL();
 80038f8:	f000 ff3c 	bl	8004774 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	4619      	mov	r1, r3
 8003900:	20e8      	movs	r0, #232	@ 0xe8
 8003902:	f002 fd4f 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003908:	4618      	mov	r0, r3
 800390a:	3728      	adds	r7, #40	@ 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003912:	bf00      	nop
 8003914:	20000190 	.word	0x20000190
 8003918:	200001ac 	.word	0x200001ac

0800391c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003920:	4b03      	ldr	r3, [pc, #12]	@ (8003930 <vTaskMissedYield+0x14>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003926:	20e9      	movs	r0, #233	@ 0xe9
 8003928:	f002 fd00 	bl	800632c <SEGGER_SYSVIEW_RecordEndCall>
}
 800392c:	bf00      	nop
 800392e:	bd80      	pop	{r7, pc}
 8003930:	200001a8 	.word	0x200001a8

08003934 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800393c:	f000 f852 	bl	80039e4 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003940:	4b06      	ldr	r3, [pc, #24]	@ (800395c <prvIdleTask+0x28>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d9f9      	bls.n	800393c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003948:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <prvIdleTask+0x2c>)
 800394a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003958:	e7f0      	b.n	800393c <prvIdleTask+0x8>
 800395a:	bf00      	nop
 800395c:	20000088 	.word	0x20000088
 8003960:	e000ed04 	.word	0xe000ed04

08003964 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	e00c      	b.n	800398a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <prvInitialiseTaskLists+0x60>)
 800397c:	4413      	add	r3, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fb18 	bl	8001fb4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3301      	adds	r3, #1
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d9ef      	bls.n	8003970 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003990:	480d      	ldr	r0, [pc, #52]	@ (80039c8 <prvInitialiseTaskLists+0x64>)
 8003992:	f7fe fb0f 	bl	8001fb4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003996:	480d      	ldr	r0, [pc, #52]	@ (80039cc <prvInitialiseTaskLists+0x68>)
 8003998:	f7fe fb0c 	bl	8001fb4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800399c:	480c      	ldr	r0, [pc, #48]	@ (80039d0 <prvInitialiseTaskLists+0x6c>)
 800399e:	f7fe fb09 	bl	8001fb4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80039a2:	480c      	ldr	r0, [pc, #48]	@ (80039d4 <prvInitialiseTaskLists+0x70>)
 80039a4:	f7fe fb06 	bl	8001fb4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80039a8:	480b      	ldr	r0, [pc, #44]	@ (80039d8 <prvInitialiseTaskLists+0x74>)
 80039aa:	f7fe fb03 	bl	8001fb4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80039ae:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <prvInitialiseTaskLists+0x78>)
 80039b0:	4a05      	ldr	r2, [pc, #20]	@ (80039c8 <prvInitialiseTaskLists+0x64>)
 80039b2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039b4:	4b0a      	ldr	r3, [pc, #40]	@ (80039e0 <prvInitialiseTaskLists+0x7c>)
 80039b6:	4a05      	ldr	r2, [pc, #20]	@ (80039cc <prvInitialiseTaskLists+0x68>)
 80039b8:	601a      	str	r2, [r3, #0]
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000088 	.word	0x20000088
 80039c8:	20000100 	.word	0x20000100
 80039cc:	20000118 	.word	0x20000118
 80039d0:	20000138 	.word	0x20000138
 80039d4:	20000150 	.word	0x20000150
 80039d8:	20000170 	.word	0x20000170
 80039dc:	20000130 	.word	0x20000130
 80039e0:	20000134 	.word	0x20000134

080039e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039ea:	e019      	b.n	8003a20 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80039ec:	f000 fe90 	bl	8004710 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80039f0:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <prvCheckTasksWaitingTermination+0x50>)
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3308      	adds	r3, #8
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fe fb52 	bl	80020a6 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003a02:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <prvCheckTasksWaitingTermination+0x54>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	4a0b      	ldr	r2, [pc, #44]	@ (8003a38 <prvCheckTasksWaitingTermination+0x54>)
 8003a0a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a3c <prvCheckTasksWaitingTermination+0x58>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	4a0a      	ldr	r2, [pc, #40]	@ (8003a3c <prvCheckTasksWaitingTermination+0x58>)
 8003a14:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003a16:	f000 fead 	bl	8004774 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f810 	bl	8003a40 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a20:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <prvCheckTasksWaitingTermination+0x58>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e1      	bne.n	80039ec <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000150 	.word	0x20000150
 8003a38:	20000188 	.word	0x20000188
 8003a3c:	20000168 	.word	0x20000168

08003a40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d108      	bne.n	8003a64 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 f8bc 	bl	8004bd4 <vPortFree>
                vPortFree( pxTCB );
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f001 f8b9 	bl	8004bd4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a62:	e019      	b.n	8003a98 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d103      	bne.n	8003a76 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f001 f8b0 	bl	8004bd4 <vPortFree>
    }
 8003a74:	e010      	b.n	8003a98 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d00b      	beq.n	8003a98 <prvDeleteTCB+0x58>
    __asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	60fb      	str	r3, [r7, #12]
}
 8003a92:	bf00      	nop
 8003a94:	bf00      	nop
 8003a96:	e7fd      	b.n	8003a94 <prvDeleteTCB+0x54>
    }
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad8 <prvResetNextTaskUnblockTime+0x38>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d107      	bne.n	8003abe <prvResetNextTaskUnblockTime+0x1e>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003aae:	490b      	ldr	r1, [pc, #44]	@ (8003adc <prvResetNextTaskUnblockTime+0x3c>)
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ab4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ab8:	e9c1 2300 	strd	r2, r3, [r1]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003abc:	e007      	b.n	8003ace <prvResetNextTaskUnblockTime+0x2e>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003abe:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <prvResetNextTaskUnblockTime+0x38>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	4904      	ldr	r1, [pc, #16]	@ (8003adc <prvResetNextTaskUnblockTime+0x3c>)
 8003aca:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003ace:	bf00      	nop
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	20000130 	.word	0x20000130
 8003adc:	200001b8 	.word	0x200001b8

08003ae0 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8003ae6:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <xTaskGetCurrentTaskHandle+0x28>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 fdf2 	bl	80066d8 <SEGGER_SYSVIEW_ShrinkId>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4619      	mov	r1, r3
 8003af8:	20f4      	movs	r0, #244	@ 0xf4
 8003afa:	f002 fc53 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

            return xReturn;
 8003afe:	687b      	ldr	r3, [r7, #4]
        }
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000084 	.word	0x20000084

08003b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003b12:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <xTaskGetSchedulerState+0x3c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	e008      	b.n	8003b32 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <xTaskGetSchedulerState+0x40>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	e001      	b.n	8003b32 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4619      	mov	r1, r3
 8003b36:	20f5      	movs	r0, #245	@ 0xf5
 8003b38:	f002 fc34 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003b3c:	687b      	ldr	r3, [r7, #4]
    }
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	2000019c 	.word	0x2000019c
 8003b4c:	200001c4 	.word	0x200001c4

08003b50 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b50:	b5b0      	push	{r4, r5, r7, lr}
 8003b52:	b08c      	sub	sp, #48	@ 0x30
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b5c:	4b41      	ldr	r3, [pc, #260]	@ (8003c64 <prvAddCurrentTaskToDelayedList+0x114>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003b66:	4b40      	ldr	r3, [pc, #256]	@ (8003c68 <prvAddCurrentTaskToDelayedList+0x118>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003b6c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c6c <prvAddCurrentTaskToDelayedList+0x11c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	623b      	str	r3, [r7, #32]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b72:	4b3f      	ldr	r3, [pc, #252]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0x120>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3308      	adds	r3, #8
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe fa94 	bl	80020a6 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b86:	bf08      	it	eq
 8003b88:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8003b8c:	d125      	bne.n	8003bda <prvAddCurrentTaskToDelayedList+0x8a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d022      	beq.n	8003bda <prvAddCurrentTaskToDelayedList+0x8a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b94:	4b37      	ldr	r3, [pc, #220]	@ (8003c74 <prvAddCurrentTaskToDelayedList+0x124>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	4b35      	ldr	r3, [pc, #212]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0x120>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	611a      	str	r2, [r3, #16]
 8003ba2:	4b33      	ldr	r3, [pc, #204]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0x120>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	68d2      	ldr	r2, [r2, #12]
 8003baa:	615a      	str	r2, [r3, #20]
 8003bac:	4b30      	ldr	r3, [pc, #192]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0x120>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	3208      	adds	r2, #8
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0x120>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f103 0208 	add.w	r2, r3, #8
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	60da      	str	r2, [r3, #12]
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0x120>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c74 <prvAddCurrentTaskToDelayedList+0x124>)
 8003bca:	61da      	str	r2, [r3, #28]
 8003bcc:	4b29      	ldr	r3, [pc, #164]	@ (8003c74 <prvAddCurrentTaskToDelayedList+0x124>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	4a28      	ldr	r2, [pc, #160]	@ (8003c74 <prvAddCurrentTaskToDelayedList+0x124>)
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003bd8:	e03f      	b.n	8003c5a <prvAddCurrentTaskToDelayedList+0x10a>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003bda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003bde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be2:	1884      	adds	r4, r0, r2
 8003be4:	eb41 0503 	adc.w	r5, r1, r3
 8003be8:	e9c7 4504 	strd	r4, r5, [r7, #16]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bec:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0x120>)
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bf4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            if( xTimeToWake < xConstTickCount )
 8003bf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c00:	4290      	cmp	r0, r2
 8003c02:	eb71 0303 	sbcs.w	r3, r1, r3
 8003c06:	d20d      	bcs.n	8003c24 <prvAddCurrentTaskToDelayedList+0xd4>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003c08:	4b19      	ldr	r3, [pc, #100]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0x120>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2104      	movs	r1, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f002 fd02 	bl	8006618 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003c14:	4b16      	ldr	r3, [pc, #88]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0x120>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6a38      	ldr	r0, [r7, #32]
 8003c1e:	f7fe f9fd 	bl	800201c <vListInsert>
}
 8003c22:	e01a      	b.n	8003c5a <prvAddCurrentTaskToDelayedList+0x10a>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003c24:	4b12      	ldr	r3, [pc, #72]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0x120>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2104      	movs	r1, #4
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f002 fcf4 	bl	8006618 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003c30:	4b0f      	ldr	r3, [pc, #60]	@ (8003c70 <prvAddCurrentTaskToDelayedList+0x120>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3308      	adds	r3, #8
 8003c36:	4619      	mov	r1, r3
 8003c38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c3a:	f7fe f9ef 	bl	800201c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c78 <prvAddCurrentTaskToDelayedList+0x128>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c48:	4290      	cmp	r0, r2
 8003c4a:	eb71 0303 	sbcs.w	r3, r1, r3
 8003c4e:	d204      	bcs.n	8003c5a <prvAddCurrentTaskToDelayedList+0x10a>
                    xNextTaskUnblockTime = xTimeToWake;
 8003c50:	4909      	ldr	r1, [pc, #36]	@ (8003c78 <prvAddCurrentTaskToDelayedList+0x128>)
 8003c52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c56:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003c5a:	bf00      	nop
 8003c5c:	3730      	adds	r7, #48	@ 0x30
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bdb0      	pop	{r4, r5, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000190 	.word	0x20000190
 8003c68:	20000130 	.word	0x20000130
 8003c6c:	20000134 	.word	0x20000134
 8003c70:	20000084 	.word	0x20000084
 8003c74:	20000170 	.word	0x20000170
 8003c78:	200001b8 	.word	0x200001b8

08003c7c <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a07      	ldr	r2, [pc, #28]	@ (8003ca8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c8c:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4a06      	ldr	r2, [pc, #24]	@ (8003cac <vApplicationGetIdleTaskMemory+0x30>)
 8003c92:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2280      	movs	r2, #128	@ 0x80
 8003c98:	601a      	str	r2, [r3, #0]
    }
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	200001c8 	.word	0x200001c8
 8003cac:	20000228 	.word	0x20000228

08003cb0 <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a07      	ldr	r2, [pc, #28]	@ (8003cdc <vApplicationGetTimerTaskMemory+0x2c>)
 8003cc0:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4a06      	ldr	r2, [pc, #24]	@ (8003ce0 <vApplicationGetTimerTaskMemory+0x30>)
 8003cc6:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2280      	movs	r2, #128	@ 0x80
 8003ccc:	601a      	str	r2, [r3, #0]
    }
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000428 	.word	0x20000428
 8003ce0:	20000488 	.word	0x20000488

08003ce4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	@ 0x28
 8003ce8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003cee:	f000 faf1 	bl	80042d4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003cf2:	4b20      	ldr	r3, [pc, #128]	@ (8003d74 <xTimerCreateTimerTask+0x90>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d021      	beq.n	8003d3e <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 8003d02:	1d3a      	adds	r2, r7, #4
 8003d04:	f107 0108 	add.w	r1, r7, #8
 8003d08:	f107 030c 	add.w	r3, r7, #12
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ffcf 	bl	8003cb0 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	9202      	str	r2, [sp, #8]
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	2300      	movs	r3, #0
 8003d22:	460a      	mov	r2, r1
 8003d24:	4914      	ldr	r1, [pc, #80]	@ (8003d78 <xTimerCreateTimerTask+0x94>)
 8003d26:	4815      	ldr	r0, [pc, #84]	@ (8003d7c <xTimerCreateTimerTask+0x98>)
 8003d28:	f7fe fd29 	bl	800277e <xTaskCreateStatic>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4a14      	ldr	r2, [pc, #80]	@ (8003d80 <xTimerCreateTimerTask+0x9c>)
 8003d30:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8003d32:	4b13      	ldr	r3, [pc, #76]	@ (8003d80 <xTimerCreateTimerTask+0x9c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <xTimerCreateTimerTask+0x78>
    __asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	613b      	str	r3, [r7, #16]
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003d64:	f002 fb1e 	bl	80063a4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003d68:	697b      	ldr	r3, [r7, #20]
    }
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200006c0 	.word	0x200006c0
 8003d78:	08006a70 	.word	0x08006a70
 8003d7c:	08003e5d 	.word	0x08003e5d
 8003d80:	200006c4 	.word	0x200006c4

08003d84 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d88:	b088      	sub	sp, #32
 8003d8a:	af04      	add	r7, sp, #16
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	e9c7 2300 	strd	r2, r3, [r7]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d92:	e00d      	b.n	8003db0 <prvReloadTimer+0x2c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d9e:	1884      	adds	r4, r0, r2
 8003da0:	eb41 0503 	adc.w	r5, r1, r3
 8003da4:	e9c7 4500 	strd	r4, r5, [r7]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dba:	eb10 0802 	adds.w	r8, r0, r2
 8003dbe:	eb41 0903 	adc.w	r9, r1, r3
 8003dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dce:	e9cd 2300 	strd	r2, r3, [sp]
 8003dd2:	4642      	mov	r2, r8
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f906 	bl	8003fe8 <prvInsertTimerInActiveList>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1d8      	bne.n	8003d94 <prvReloadTimer+0x10>
        }
    }
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003df0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003dfa:	e9c7 2300 	strd	r2, r3, [r7]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dfe:	4b16      	ldr	r3, [pc, #88]	@ (8003e58 <prvProcessExpiredTimer+0x68>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe f94a 	bl	80020a6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <prvProcessExpiredTimer+0x44>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e24:	e9cd 2300 	strd	r2, r3, [sp]
 8003e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e2c:	6978      	ldr	r0, [r7, #20]
 8003e2e:	f7ff ffa9 	bl	8003d84 <prvReloadTimer>
 8003e32:	e008      	b.n	8003e46 <prvProcessExpiredTimer+0x56>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	4798      	blx	r3
    }
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200006b8 	.word	0x200006b8

08003e5c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e64:	f107 030c 	add.w	r3, r7, #12
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f869 	bl	8003f40 <prvGetNextExpireTime>
 8003e6e:	e9c7 0104 	strd	r0, r1, [r7, #16]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	461a      	mov	r2, r3
 8003e76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e7a:	f000 f805 	bl	8003e88 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e7e:	f000 f909 	bl	8004094 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e82:	bf00      	nop
 8003e84:	e7ee      	b.n	8003e64 <prvTimerTask+0x8>
	...

08003e88 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8a:	b08b      	sub	sp, #44	@ 0x2c
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e94:	f7ff f82c 	bl	8002ef0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e98:	f107 0314 	add.w	r3, r7, #20
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 f87b 	bl	8003f98 <prvSampleTimeNow>
 8003ea2:	e9c7 0106 	strd	r0, r1, [r7, #24]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d13d      	bne.n	8003f28 <prvProcessTimerOrBlockTask+0xa0>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d110      	bne.n	8003ed4 <prvProcessTimerOrBlockTask+0x4c>
 8003eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003eba:	4290      	cmp	r0, r2
 8003ebc:	eb71 0303 	sbcs.w	r3, r1, r3
 8003ec0:	d308      	bcc.n	8003ed4 <prvProcessTimerOrBlockTask+0x4c>
                {
                    ( void ) xTaskResumeAll();
 8003ec2:	f7ff f823 	bl	8002f0c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ece:	f7ff ff8f 	bl	8003df0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003ed2:	e02b      	b.n	8003f2c <prvProcessTimerOrBlockTask+0xa4>
                    if( xListWasEmpty != pdFALSE )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <prvProcessTimerOrBlockTask+0x64>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003eda:	4b16      	ldr	r3, [pc, #88]	@ (8003f34 <prvProcessTimerOrBlockTask+0xac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <prvProcessTimerOrBlockTask+0x60>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <prvProcessTimerOrBlockTask+0x62>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	607b      	str	r3, [r7, #4]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <prvProcessTimerOrBlockTask+0xb0>)
 8003eee:	681e      	ldr	r6, [r3, #0]
 8003ef0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ef8:	1a84      	subs	r4, r0, r2
 8003efa:	eb61 0503 	sbc.w	r5, r1, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	4622      	mov	r2, r4
 8003f04:	462b      	mov	r3, r5
 8003f06:	4630      	mov	r0, r6
 8003f08:	f7fe fb9e 	bl	8002648 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f0c:	f7fe fffe 	bl	8002f0c <xTaskResumeAll>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <prvProcessTimerOrBlockTask+0xa4>
                        taskYIELD_WITHIN_API();
 8003f16:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <prvProcessTimerOrBlockTask+0xb4>)
 8003f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	f3bf 8f6f 	isb	sy
    }
 8003f26:	e001      	b.n	8003f2c <prvProcessTimerOrBlockTask+0xa4>
                ( void ) xTaskResumeAll();
 8003f28:	f7fe fff0 	bl	8002f0c <xTaskResumeAll>
    }
 8003f2c:	bf00      	nop
 8003f2e:	3724      	adds	r7, #36	@ 0x24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f34:	200006bc 	.word	0x200006bc
 8003f38:	200006c0 	.word	0x200006c0
 8003f3c:	e000ed04 	.word	0xe000ed04

08003f40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f48:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <prvGetNextExpireTime+0x54>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <prvGetNextExpireTime+0x16>
 8003f52:	2201      	movs	r2, #1
 8003f54:	e000      	b.n	8003f58 <prvGetNextExpireTime+0x18>
 8003f56:	2200      	movs	r2, #0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d107      	bne.n	8003f74 <prvGetNextExpireTime+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f64:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <prvGetNextExpireTime+0x54>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003f72:	e005      	b.n	8003f80 <prvGetNextExpireTime+0x40>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        }

        return xNextExpireTime;
 8003f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	200006b8 	.word	0x200006b8

08003f98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003fa0:	f7ff f8d4 	bl	800314c <xTaskGetTickCount>
 8003fa4:	e9c7 0102 	strd	r0, r1, [r7, #8]

        if( xTimeNow < xLastTime )
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe4 <prvSampleTimeNow+0x4c>)
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fb2:	4290      	cmp	r0, r2
 8003fb4:	eb71 0303 	sbcs.w	r3, r1, r3
 8003fb8:	d205      	bcs.n	8003fc6 <prvSampleTimeNow+0x2e>
        {
            prvSwitchTimerLists();
 8003fba:	f000 f961 	bl	8004280 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e002      	b.n	8003fcc <prvSampleTimeNow+0x34>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003fcc:	4905      	ldr	r1, [pc, #20]	@ (8003fe4 <prvSampleTimeNow+0x4c>)
 8003fce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fd2:	e9c1 2300 	strd	r2, r3, [r1]

        return xTimeNow;
 8003fd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	200006c8 	.word	0x200006c8

08003fe8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003fe8:	b5b0      	push	{r4, r5, r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	e9c7 2300 	strd	r2, r3, [r7]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ff8:	68f9      	ldr	r1, [r7, #12]
 8003ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ffe:	e9c1 2302 	strd	r2, r3, [r1, #8]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	619a      	str	r2, [r3, #24]

        if( xNextExpiryTime <= xTimeNow )
 8004008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800400c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004010:	4290      	cmp	r0, r2
 8004012:	eb71 0303 	sbcs.w	r3, r1, r3
 8004016:	d319      	bcc.n	800404c <prvInsertTimerInActiveList+0x64>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004018:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800401c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004020:	1a84      	subs	r4, r0, r2
 8004022:	eb61 0503 	sbc.w	r5, r1, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800402c:	4294      	cmp	r4, r2
 800402e:	eb75 0303 	sbcs.w	r3, r5, r3
 8004032:	d302      	bcc.n	800403a <prvInsertTimerInActiveList+0x52>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e023      	b.n	8004082 <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800403a:	4b14      	ldr	r3, [pc, #80]	@ (800408c <prvInsertTimerInActiveList+0xa4>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3308      	adds	r3, #8
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7fd ffe9 	bl	800201c <vListInsert>
 800404a:	e01a      	b.n	8004082 <prvInsertTimerInActiveList+0x9a>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800404c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004050:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004054:	4290      	cmp	r0, r2
 8004056:	eb71 0303 	sbcs.w	r3, r1, r3
 800405a:	d20a      	bcs.n	8004072 <prvInsertTimerInActiveList+0x8a>
 800405c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004060:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004064:	4290      	cmp	r0, r2
 8004066:	eb71 0303 	sbcs.w	r3, r1, r3
 800406a:	d302      	bcc.n	8004072 <prvInsertTimerInActiveList+0x8a>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e007      	b.n	8004082 <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004072:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <prvInsertTimerInActiveList+0xa8>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3308      	adds	r3, #8
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7fd ffcd 	bl	800201c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004082:	697b      	ldr	r3, [r7, #20]
    }
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bdb0      	pop	{r4, r5, r7, pc}
 800408c:	200006bc 	.word	0x200006bc
 8004090:	200006b8 	.word	0x200006b8

08004094 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004098:	b092      	sub	sp, #72	@ 0x48
 800409a:	af04      	add	r7, sp, #16
        DaemonTaskMessage_t xMessage = { 0 };
 800409c:	f107 0308 	add.w	r3, r7, #8
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	60da      	str	r2, [r3, #12]
 80040aa:	611a      	str	r2, [r3, #16]
 80040ac:	615a      	str	r2, [r3, #20]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80040ae:	e0d0      	b.n	8004252 <prvProcessReceivedCommands+0x1be>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f2c0 80cd 	blt.w	8004252 <prvProcessReceivedCommands+0x1be>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	637b      	str	r3, [r7, #52]	@ 0x34

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80040bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <prvProcessReceivedCommands+0x3a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c6:	3308      	adds	r3, #8
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd ffec 	bl	80020a6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff ff61 	bl	8003f98 <prvSampleTimeNow>
 80040d6:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

                switch( xMessage.xMessageID )
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3b01      	subs	r3, #1
 80040de:	2b08      	cmp	r3, #8
 80040e0:	f200 80b4 	bhi.w	800424c <prvProcessReceivedCommands+0x1b8>
 80040e4:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <prvProcessReceivedCommands+0x58>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004111 	.word	0x08004111
 80040f4:	080041a3 	.word	0x080041a3
 80040f8:	080041b7 	.word	0x080041b7
 80040fc:	08004223 	.word	0x08004223
 8004100:	08004111 	.word	0x08004111
 8004104:	08004111 	.word	0x08004111
 8004108:	080041a3 	.word	0x080041a3
 800410c:	080041b7 	.word	0x080041b7
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004112:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	b2da      	uxtb	r2, r3
 800411c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004122:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800412c:	1884      	adds	r4, r0, r2
 800412e:	eb41 0503 	adc.w	r5, r1, r3
 8004132:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800413a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800413e:	e9cd 2300 	strd	r2, r3, [sp]
 8004142:	4622      	mov	r2, r4
 8004144:	462b      	mov	r3, r5
 8004146:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004148:	f7ff ff4e 	bl	8003fe8 <prvInsertTimerInActiveList>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d07e      	beq.n	8004250 <prvProcessReceivedCommands+0x1bc>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004154:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d012      	beq.n	8004186 <prvProcessReceivedCommands+0xf2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004160:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004166:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800416a:	eb10 0802 	adds.w	r8, r0, r2
 800416e:	eb41 0903 	adc.w	r9, r1, r3
 8004172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004176:	e9cd 2300 	strd	r2, r3, [sp]
 800417a:	4642      	mov	r2, r8
 800417c:	464b      	mov	r3, r9
 800417e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004180:	f7ff fe00 	bl	8003d84 <prvReloadTimer>
 8004184:	e008      	b.n	8004198 <prvProcessReceivedCommands+0x104>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004188:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	b2da      	uxtb	r2, r3
 8004192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004194:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800419e:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80041a0:	e056      	b.n	8004250 <prvProcessReceivedCommands+0x1bc>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 80041b4:	e04d      	b.n	8004252 <prvProcessReceivedCommands+0x1be>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80041b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80041ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041d8:	4313      	orrs	r3, r2
 80041da:	d10b      	bne.n	80041f4 <prvProcessReceivedCommands+0x160>
    __asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80041fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041fe:	eb10 0a02 	adds.w	sl, r0, r2
 8004202:	eb41 0b03 	adc.w	fp, r1, r3
 8004206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800420a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800420e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004212:	e9cd 2300 	strd	r2, r3, [sp]
 8004216:	4652      	mov	r2, sl
 8004218:	465b      	mov	r3, fp
 800421a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800421c:	f7ff fee4 	bl	8003fe8 <prvInsertTimerInActiveList>
                        break;
 8004220:	e017      	b.n	8004252 <prvProcessReceivedCommands+0x1be>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004224:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d103      	bne.n	8004238 <prvProcessReceivedCommands+0x1a4>
                            {
                                vPortFree( pxTimer );
 8004230:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004232:	f000 fccf 	bl	8004bd4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004236:	e00c      	b.n	8004252 <prvProcessReceivedCommands+0x1be>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004246:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 800424a:	e002      	b.n	8004252 <prvProcessReceivedCommands+0x1be>

                    default:
                        /* Don't expect to get here. */
                        break;
 800424c:	bf00      	nop
 800424e:	e000      	b.n	8004252 <prvProcessReceivedCommands+0x1be>
                        break;
 8004250:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004252:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <prvProcessReceivedCommands+0x1e8>)
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	f107 0108 	add.w	r1, r7, #8
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	f7fe f86f 	bl	8002344 <xQueueReceive>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	f47f af21 	bne.w	80040b0 <prvProcessReceivedCommands+0x1c>
                }
            }
        }
    }
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	3738      	adds	r7, #56	@ 0x38
 8004274:	46bd      	mov	sp, r7
 8004276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800427a:	bf00      	nop
 800427c:	200006c0 	.word	0x200006c0

08004280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004286:	e00e      	b.n	80042a6 <prvSwitchTimerLists+0x26>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004288:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <prvSwitchTimerLists+0x4c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	e9c7 2300 	strd	r2, r3, [r7]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004296:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800429a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800429e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042a2:	f7ff fda5 	bl	8003df0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042a6:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <prvSwitchTimerLists+0x4c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1eb      	bne.n	8004288 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <prvSwitchTimerLists+0x4c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]
        pxCurrentTimerList = pxOverflowTimerList;
 80042b6:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <prvSwitchTimerLists+0x50>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a04      	ldr	r2, [pc, #16]	@ (80042cc <prvSwitchTimerLists+0x4c>)
 80042bc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80042be:	4a04      	ldr	r2, [pc, #16]	@ (80042d0 <prvSwitchTimerLists+0x50>)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6013      	str	r3, [r2, #0]
    }
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	200006b8 	.word	0x200006b8
 80042d0:	200006bc 	.word	0x200006bc

080042d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80042da:	f000 fa19 	bl	8004710 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80042de:	4b10      	ldr	r3, [pc, #64]	@ (8004320 <prvCheckForValidListAndQueue+0x4c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d116      	bne.n	8004314 <prvCheckForValidListAndQueue+0x40>
            {
                vListInitialise( &xActiveTimerList1 );
 80042e6:	480f      	ldr	r0, [pc, #60]	@ (8004324 <prvCheckForValidListAndQueue+0x50>)
 80042e8:	f7fd fe64 	bl	8001fb4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80042ec:	480e      	ldr	r0, [pc, #56]	@ (8004328 <prvCheckForValidListAndQueue+0x54>)
 80042ee:	f7fd fe61 	bl	8001fb4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80042f2:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <prvCheckForValidListAndQueue+0x58>)
 80042f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004324 <prvCheckForValidListAndQueue+0x50>)
 80042f6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80042f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004330 <prvCheckForValidListAndQueue+0x5c>)
 80042fa:	4a0b      	ldr	r2, [pc, #44]	@ (8004328 <prvCheckForValidListAndQueue+0x54>)
 80042fc:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80042fe:	2300      	movs	r3, #0
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	4b0c      	ldr	r3, [pc, #48]	@ (8004334 <prvCheckForValidListAndQueue+0x60>)
 8004304:	4a0c      	ldr	r2, [pc, #48]	@ (8004338 <prvCheckForValidListAndQueue+0x64>)
 8004306:	2118      	movs	r1, #24
 8004308:	200a      	movs	r0, #10
 800430a:	f7fd ff91 	bl	8002230 <xQueueGenericCreateStatic>
 800430e:	4603      	mov	r3, r0
 8004310:	4a03      	ldr	r2, [pc, #12]	@ (8004320 <prvCheckForValidListAndQueue+0x4c>)
 8004312:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004314:	f000 fa2e 	bl	8004774 <vPortExitCritical>
    }
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	200006c0 	.word	0x200006c0
 8004324:	20000688 	.word	0x20000688
 8004328:	200006a0 	.word	0x200006a0
 800432c:	200006b8 	.word	0x200006b8
 8004330:	200006bc 	.word	0x200006bc
 8004334:	200007c0 	.word	0x200007c0
 8004338:	200006d0 	.word	0x200006d0

0800433c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3b04      	subs	r3, #4
 800434c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004354:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3b04      	subs	r3, #4
 800435a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f023 0201 	bic.w	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3b04      	subs	r3, #4
 800436a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800436c:	4a0c      	ldr	r2, [pc, #48]	@ (80043a0 <pxPortInitialiseStack+0x64>)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3b14      	subs	r3, #20
 8004376:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3b04      	subs	r3, #4
 8004382:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f06f 0202 	mvn.w	r2, #2
 800438a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3b20      	subs	r3, #32
 8004390:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004392:	68fb      	ldr	r3, [r7, #12]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	080043a5 	.word	0x080043a5

080043a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043ae:	4b13      	ldr	r3, [pc, #76]	@ (80043fc <prvTaskExitError+0x58>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043b6:	d00b      	beq.n	80043d0 <prvTaskExitError+0x2c>
    __asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	60fb      	str	r3, [r7, #12]
}
 80043ca:	bf00      	nop
 80043cc:	bf00      	nop
 80043ce:	e7fd      	b.n	80043cc <prvTaskExitError+0x28>
    __asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	60bb      	str	r3, [r7, #8]
}
 80043e2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80043e4:	bf00      	nop
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0fc      	beq.n	80043e6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	2000000c 	.word	0x2000000c

08004400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004400:	4b07      	ldr	r3, [pc, #28]	@ (8004420 <pxCurrentTCBConst2>)
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	6808      	ldr	r0, [r1, #0]
 8004406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440a:	f380 8809 	msr	PSP, r0
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f04f 0000 	mov.w	r0, #0
 8004416:	f380 8811 	msr	BASEPRI, r0
 800441a:	4770      	bx	lr
 800441c:	f3af 8000 	nop.w

08004420 <pxCurrentTCBConst2>:
 8004420:	20000084 	.word	0x20000084
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop

08004428 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004428:	4808      	ldr	r0, [pc, #32]	@ (800444c <prvPortStartFirstTask+0x24>)
 800442a:	6800      	ldr	r0, [r0, #0]
 800442c:	6800      	ldr	r0, [r0, #0]
 800442e:	f380 8808 	msr	MSP, r0
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	f380 8814 	msr	CONTROL, r0
 800443a:	b662      	cpsie	i
 800443c:	b661      	cpsie	f
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	df00      	svc	0
 8004448:	bf00      	nop
 800444a:	0000      	.short	0x0000
 800444c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop

08004454 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08c      	sub	sp, #48	@ 0x30
 8004458:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800445a:	4b69      	ldr	r3, [pc, #420]	@ (8004600 <xPortStartScheduler+0x1ac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a69      	ldr	r2, [pc, #420]	@ (8004604 <xPortStartScheduler+0x1b0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d10b      	bne.n	800447c <xPortStartScheduler+0x28>
    __asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	623b      	str	r3, [r7, #32]
}
 8004476:	bf00      	nop
 8004478:	bf00      	nop
 800447a:	e7fd      	b.n	8004478 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800447c:	4b60      	ldr	r3, [pc, #384]	@ (8004600 <xPortStartScheduler+0x1ac>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a61      	ldr	r2, [pc, #388]	@ (8004608 <xPortStartScheduler+0x1b4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d10b      	bne.n	800449e <xPortStartScheduler+0x4a>
    __asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	e7fd      	b.n	800449a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800449e:	4b5b      	ldr	r3, [pc, #364]	@ (800460c <xPortStartScheduler+0x1b8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80044a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a6:	332c      	adds	r3, #44	@ 0x2c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a59      	ldr	r2, [pc, #356]	@ (8004610 <xPortStartScheduler+0x1bc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00b      	beq.n	80044c8 <xPortStartScheduler+0x74>
    __asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	61fb      	str	r3, [r7, #28]
}
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	e7fd      	b.n	80044c4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80044c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ca:	3338      	adds	r3, #56	@ 0x38
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a51      	ldr	r2, [pc, #324]	@ (8004614 <xPortStartScheduler+0x1c0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00b      	beq.n	80044ec <xPortStartScheduler+0x98>
    __asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	61bb      	str	r3, [r7, #24]
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	e7fd      	b.n	80044e8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044f0:	4b49      	ldr	r3, [pc, #292]	@ (8004618 <xPortStartScheduler+0x1c4>)
 80044f2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80044f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	22ff      	movs	r2, #255	@ 0xff
 8004500:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004512:	b2da      	uxtb	r2, r3
 8004514:	4b41      	ldr	r3, [pc, #260]	@ (800461c <xPortStartScheduler+0x1c8>)
 8004516:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004518:	4b40      	ldr	r3, [pc, #256]	@ (800461c <xPortStartScheduler+0x1c8>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10b      	bne.n	8004538 <xPortStartScheduler+0xe4>
    __asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	617b      	str	r3, [r7, #20]
}
 8004532:	bf00      	nop
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004542:	2b00      	cmp	r3, #0
 8004544:	d013      	beq.n	800456e <xPortStartScheduler+0x11a>
    __asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	613b      	str	r3, [r7, #16]
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	e7fd      	b.n	800455a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	3301      	adds	r3, #1
 8004562:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	b2db      	uxtb	r3, r3
 800456c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004576:	2b80      	cmp	r3, #128	@ 0x80
 8004578:	d0f1      	beq.n	800455e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d103      	bne.n	8004588 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004580:	4b27      	ldr	r3, [pc, #156]	@ (8004620 <xPortStartScheduler+0x1cc>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e004      	b.n	8004592 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f1c3 0307 	rsb	r3, r3, #7
 800458e:	4a24      	ldr	r2, [pc, #144]	@ (8004620 <xPortStartScheduler+0x1cc>)
 8004590:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004592:	4b23      	ldr	r3, [pc, #140]	@ (8004620 <xPortStartScheduler+0x1cc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	4a21      	ldr	r2, [pc, #132]	@ (8004620 <xPortStartScheduler+0x1cc>)
 800459a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800459c:	4b20      	ldr	r3, [pc, #128]	@ (8004620 <xPortStartScheduler+0x1cc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004620 <xPortStartScheduler+0x1cc>)
 80045a6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80045b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004624 <xPortStartScheduler+0x1d0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004624 <xPortStartScheduler+0x1d0>)
 80045b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80045bc:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <xPortStartScheduler+0x1d0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a18      	ldr	r2, [pc, #96]	@ (8004624 <xPortStartScheduler+0x1d0>)
 80045c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045c6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80045c8:	4b17      	ldr	r3, [pc, #92]	@ (8004628 <xPortStartScheduler+0x1d4>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80045ce:	f000 f95d 	bl	800488c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80045d2:	4b16      	ldr	r3, [pc, #88]	@ (800462c <xPortStartScheduler+0x1d8>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80045d8:	f000 f97c 	bl	80048d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045dc:	4b14      	ldr	r3, [pc, #80]	@ (8004630 <xPortStartScheduler+0x1dc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a13      	ldr	r2, [pc, #76]	@ (8004630 <xPortStartScheduler+0x1dc>)
 80045e2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80045e6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80045e8:	f7ff ff1e 	bl	8004428 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80045ec:	f7fe ff24 	bl	8003438 <vTaskSwitchContext>
    prvTaskExitError();
 80045f0:	f7ff fed8 	bl	80043a4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3730      	adds	r7, #48	@ 0x30
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	e000ed00 	.word	0xe000ed00
 8004604:	410fc271 	.word	0x410fc271
 8004608:	410fc270 	.word	0x410fc270
 800460c:	e000ed08 	.word	0xe000ed08
 8004610:	08004401 	.word	0x08004401
 8004614:	080047d1 	.word	0x080047d1
 8004618:	e000e400 	.word	0xe000e400
 800461c:	20000810 	.word	0x20000810
 8004620:	20000814 	.word	0x20000814
 8004624:	e000ed20 	.word	0xe000ed20
 8004628:	e000ed1c 	.word	0xe000ed1c
 800462c:	2000000c 	.word	0x2000000c
 8004630:	e000ef34 	.word	0xe000ef34

08004634 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800463a:	4b2f      	ldr	r3, [pc, #188]	@ (80046f8 <vInitPrioGroupValue+0xc4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2f      	ldr	r2, [pc, #188]	@ (80046fc <vInitPrioGroupValue+0xc8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10b      	bne.n	800465c <vInitPrioGroupValue+0x28>
    __asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	60fb      	str	r3, [r7, #12]
}
 8004656:	bf00      	nop
 8004658:	bf00      	nop
 800465a:	e7fd      	b.n	8004658 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800465c:	4b26      	ldr	r3, [pc, #152]	@ (80046f8 <vInitPrioGroupValue+0xc4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a27      	ldr	r2, [pc, #156]	@ (8004700 <vInitPrioGroupValue+0xcc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d10b      	bne.n	800467e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	613b      	str	r3, [r7, #16]
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e7fd      	b.n	800467a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800467e:	4b21      	ldr	r3, [pc, #132]	@ (8004704 <vInitPrioGroupValue+0xd0>)
 8004680:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	22ff      	movs	r2, #255	@ 0xff
 800468e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	4b19      	ldr	r3, [pc, #100]	@ (8004708 <vInitPrioGroupValue+0xd4>)
 80046a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046a6:	4b19      	ldr	r3, [pc, #100]	@ (800470c <vInitPrioGroupValue+0xd8>)
 80046a8:	2207      	movs	r2, #7
 80046aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046ac:	e009      	b.n	80046c2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80046ae:	4b17      	ldr	r3, [pc, #92]	@ (800470c <vInitPrioGroupValue+0xd8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	4a15      	ldr	r2, [pc, #84]	@ (800470c <vInitPrioGroupValue+0xd8>)
 80046b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ca:	2b80      	cmp	r3, #128	@ 0x80
 80046cc:	d0ef      	beq.n	80046ae <vInitPrioGroupValue+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046ce:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <vInitPrioGroupValue+0xd8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	4a0d      	ldr	r2, [pc, #52]	@ (800470c <vInitPrioGroupValue+0xd8>)
 80046d6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046d8:	4b0c      	ldr	r3, [pc, #48]	@ (800470c <vInitPrioGroupValue+0xd8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046e0:	4a0a      	ldr	r2, [pc, #40]	@ (800470c <vInitPrioGroupValue+0xd8>)
 80046e2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000ed00 	.word	0xe000ed00
 80046fc:	410fc271 	.word	0x410fc271
 8004700:	410fc270 	.word	0x410fc270
 8004704:	e000e400 	.word	0xe000e400
 8004708:	20000810 	.word	0x20000810
 800470c:	20000814 	.word	0x20000814

08004710 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
    __asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	607b      	str	r3, [r7, #4]
}
 8004728:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800472a:	4b10      	ldr	r3, [pc, #64]	@ (800476c <vPortEnterCritical+0x5c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3301      	adds	r3, #1
 8004730:	4a0e      	ldr	r2, [pc, #56]	@ (800476c <vPortEnterCritical+0x5c>)
 8004732:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004734:	4b0d      	ldr	r3, [pc, #52]	@ (800476c <vPortEnterCritical+0x5c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d110      	bne.n	800475e <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800473c:	4b0c      	ldr	r3, [pc, #48]	@ (8004770 <vPortEnterCritical+0x60>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <vPortEnterCritical+0x4e>
    __asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	603b      	str	r3, [r7, #0]
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	e7fd      	b.n	800475a <vPortEnterCritical+0x4a>
    }
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	2000000c 	.word	0x2000000c
 8004770:	e000ed04 	.word	0xe000ed04

08004774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800477a:	4b12      	ldr	r3, [pc, #72]	@ (80047c4 <vPortExitCritical+0x50>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <vPortExitCritical+0x26>
    __asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	607b      	str	r3, [r7, #4]
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	e7fd      	b.n	8004796 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800479a:	4b0a      	ldr	r3, [pc, #40]	@ (80047c4 <vPortExitCritical+0x50>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3b01      	subs	r3, #1
 80047a0:	4a08      	ldr	r2, [pc, #32]	@ (80047c4 <vPortExitCritical+0x50>)
 80047a2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80047a4:	4b07      	ldr	r3, [pc, #28]	@ (80047c4 <vPortExitCritical+0x50>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <vPortExitCritical+0x44>
 80047ac:	2300      	movs	r3, #0
 80047ae:	603b      	str	r3, [r7, #0]
    __asm volatile
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f383 8811 	msr	BASEPRI, r3
}
 80047b6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	2000000c 	.word	0x2000000c
	...

080047d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047d0:	f3ef 8009 	mrs	r0, PSP
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <pxCurrentTCBConst>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	f01e 0f10 	tst.w	lr, #16
 80047e0:	bf08      	it	eq
 80047e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	6010      	str	r0, [r2, #0]
 80047ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80047f4:	f380 8811 	msr	BASEPRI, r0
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f7fe fe1a 	bl	8003438 <vTaskSwitchContext>
 8004804:	f04f 0000 	mov.w	r0, #0
 8004808:	f380 8811 	msr	BASEPRI, r0
 800480c:	bc09      	pop	{r0, r3}
 800480e:	6819      	ldr	r1, [r3, #0]
 8004810:	6808      	ldr	r0, [r1, #0]
 8004812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004816:	f01e 0f10 	tst.w	lr, #16
 800481a:	bf08      	it	eq
 800481c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004820:	f380 8809 	msr	PSP, r0
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	f3af 8000 	nop.w

08004830 <pxCurrentTCBConst>:
 8004830:	20000084 	.word	0x20000084
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop

08004838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
    __asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	607b      	str	r3, [r7, #4]
}
 8004850:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004852:	f001 fcf1 	bl	8006238 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004856:	f7fe fcbf 	bl	80031d8 <xTaskIncrementTick>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <xPortSysTickHandler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004860:	f001 fd48 	bl	80062f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004864:	4b08      	ldr	r3, [pc, #32]	@ (8004888 <xPortSysTickHandler+0x50>)
 8004866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e001      	b.n	8004872 <xPortSysTickHandler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800486e:	f001 fd25 	bl	80062bc <SEGGER_SYSVIEW_RecordExitISR>
 8004872:	2300      	movs	r3, #0
 8004874:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	f383 8811 	msr	BASEPRI, r3
}
 800487c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004890:	4b0b      	ldr	r3, [pc, #44]	@ (80048c0 <vPortSetupTimerInterrupt+0x34>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004896:	4b0b      	ldr	r3, [pc, #44]	@ (80048c4 <vPortSetupTimerInterrupt+0x38>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800489c:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <vPortSetupTimerInterrupt+0x3c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0a      	ldr	r2, [pc, #40]	@ (80048cc <vPortSetupTimerInterrupt+0x40>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	4a09      	ldr	r2, [pc, #36]	@ (80048d0 <vPortSetupTimerInterrupt+0x44>)
 80048aa:	3b01      	subs	r3, #1
 80048ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ae:	4b04      	ldr	r3, [pc, #16]	@ (80048c0 <vPortSetupTimerInterrupt+0x34>)
 80048b0:	2207      	movs	r2, #7
 80048b2:	601a      	str	r2, [r3, #0]
}
 80048b4:	bf00      	nop
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	e000e010 	.word	0xe000e010
 80048c4:	e000e018 	.word	0xe000e018
 80048c8:	20000000 	.word	0x20000000
 80048cc:	51eb851f 	.word	0x51eb851f
 80048d0:	e000e014 	.word	0xe000e014

080048d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80048e4 <vPortEnableVFP+0x10>
 80048d8:	6801      	ldr	r1, [r0, #0]
 80048da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80048de:	6001      	str	r1, [r0, #0]
 80048e0:	4770      	bx	lr
 80048e2:	0000      	.short	0x0000
 80048e4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop

080048ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048f2:	f3ef 8305 	mrs	r3, IPSR
 80048f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b0f      	cmp	r3, #15
 80048fc:	d915      	bls.n	800492a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048fe:	4a18      	ldr	r2, [pc, #96]	@ (8004960 <vPortValidateInterruptPriority+0x74>)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004908:	4b16      	ldr	r3, [pc, #88]	@ (8004964 <vPortValidateInterruptPriority+0x78>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	7afa      	ldrb	r2, [r7, #11]
 800490e:	429a      	cmp	r2, r3
 8004910:	d20b      	bcs.n	800492a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	607b      	str	r3, [r7, #4]
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800492a:	4b0f      	ldr	r3, [pc, #60]	@ (8004968 <vPortValidateInterruptPriority+0x7c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004932:	4b0e      	ldr	r3, [pc, #56]	@ (800496c <vPortValidateInterruptPriority+0x80>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d90b      	bls.n	8004952 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	603b      	str	r3, [r7, #0]
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	e7fd      	b.n	800494e <vPortValidateInterruptPriority+0x62>
    }
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000e3f0 	.word	0xe000e3f0
 8004964:	20000810 	.word	0x20000810
 8004968:	e000ed0c 	.word	0xe000ed0c
 800496c:	20000814 	.word	0x20000814

08004970 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08e      	sub	sp, #56	@ 0x38
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d022      	beq.n	80049c8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004982:	2308      	movs	r3, #8
 8004984:	43db      	mvns	r3, r3
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d81b      	bhi.n	80049c4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800498c:	2208      	movs	r2, #8
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	2b00      	cmp	r3, #0
 800499c:	d014      	beq.n	80049c8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	f1c3 0308 	rsb	r3, r3, #8
 80049a8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	43db      	mvns	r3, r3
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d804      	bhi.n	80049be <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b8:	4413      	add	r3, r2
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	e004      	b.n	80049c8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	e001      	b.n	80049c8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80049c8:	f7fe fa92 	bl	8002ef0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80049cc:	4b7a      	ldr	r3, [pc, #488]	@ (8004bb8 <pvPortMalloc+0x248>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80049d4:	f000 f984 	bl	8004ce0 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f2c0 80d3 	blt.w	8004b86 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80cf 	beq.w	8004b86 <pvPortMalloc+0x216>
 80049e8:	4b74      	ldr	r3, [pc, #464]	@ (8004bbc <pvPortMalloc+0x24c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	f200 80c9 	bhi.w	8004b86 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049f4:	4b72      	ldr	r3, [pc, #456]	@ (8004bc0 <pvPortMalloc+0x250>)
 80049f6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80049f8:	4b71      	ldr	r3, [pc, #452]	@ (8004bc0 <pvPortMalloc+0x250>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80049fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a00:	4a70      	ldr	r2, [pc, #448]	@ (8004bc4 <pvPortMalloc+0x254>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d305      	bcc.n	8004a12 <pvPortMalloc+0xa2>
 8004a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a08:	4a6f      	ldr	r2, [pc, #444]	@ (8004bc8 <pvPortMalloc+0x258>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d801      	bhi.n	8004a12 <pvPortMalloc+0xa2>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <pvPortMalloc+0xa4>
 8004a12:	2300      	movs	r3, #0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d129      	bne.n	8004a6c <pvPortMalloc+0xfc>
    __asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	623b      	str	r3, [r7, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a32:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3c:	4a61      	ldr	r2, [pc, #388]	@ (8004bc4 <pvPortMalloc+0x254>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d305      	bcc.n	8004a4e <pvPortMalloc+0xde>
 8004a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a44:	4a60      	ldr	r2, [pc, #384]	@ (8004bc8 <pvPortMalloc+0x258>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d801      	bhi.n	8004a4e <pvPortMalloc+0xde>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <pvPortMalloc+0xe0>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10b      	bne.n	8004a6c <pvPortMalloc+0xfc>
    __asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	61fb      	str	r3, [r7, #28]
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	e7fd      	b.n	8004a68 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d903      	bls.n	8004a7e <pvPortMalloc+0x10e>
 8004a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1d8      	bne.n	8004a30 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8004bb8 <pvPortMalloc+0x248>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d07e      	beq.n	8004b86 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	4413      	add	r3, r2
 8004a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a94:	4a4b      	ldr	r2, [pc, #300]	@ (8004bc4 <pvPortMalloc+0x254>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d305      	bcc.n	8004aa6 <pvPortMalloc+0x136>
 8004a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc8 <pvPortMalloc+0x258>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d801      	bhi.n	8004aa6 <pvPortMalloc+0x136>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <pvPortMalloc+0x138>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <pvPortMalloc+0x154>
    __asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	61bb      	str	r3, [r7, #24]
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	e7fd      	b.n	8004ac0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aca:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8004acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d90b      	bls.n	8004aee <pvPortMalloc+0x17e>
    __asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	617b      	str	r3, [r7, #20]
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	e7fd      	b.n	8004aea <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	1ad2      	subs	r2, r2, r3
 8004af6:	2308      	movs	r3, #8
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d924      	bls.n	8004b48 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004afe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00b      	beq.n	8004b28 <pvPortMalloc+0x1b8>
    __asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	613b      	str	r3, [r7, #16]
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b46:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b48:	4b1c      	ldr	r3, [pc, #112]	@ (8004bbc <pvPortMalloc+0x24c>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	4a1a      	ldr	r2, [pc, #104]	@ (8004bbc <pvPortMalloc+0x24c>)
 8004b54:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b56:	4b19      	ldr	r3, [pc, #100]	@ (8004bbc <pvPortMalloc+0x24c>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bcc <pvPortMalloc+0x25c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d203      	bcs.n	8004b6a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b62:	4b16      	ldr	r3, [pc, #88]	@ (8004bbc <pvPortMalloc+0x24c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a19      	ldr	r2, [pc, #100]	@ (8004bcc <pvPortMalloc+0x25c>)
 8004b68:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b74:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b7c:	4b14      	ldr	r3, [pc, #80]	@ (8004bd0 <pvPortMalloc+0x260>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	4a13      	ldr	r2, [pc, #76]	@ (8004bd0 <pvPortMalloc+0x260>)
 8004b84:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b86:	f7fe f9c1 	bl	8002f0c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <pvPortMalloc+0x23c>
    __asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	60fb      	str	r3, [r7, #12]
}
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
 8004baa:	e7fd      	b.n	8004ba8 <pvPortMalloc+0x238>
    return pvReturn;
 8004bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3738      	adds	r7, #56	@ 0x38
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20003020 	.word	0x20003020
 8004bbc:	20003024 	.word	0x20003024
 8004bc0:	20003018 	.word	0x20003018
 8004bc4:	20000818 	.word	0x20000818
 8004bc8:	20003017 	.word	0x20003017
 8004bcc:	20003028 	.word	0x20003028
 8004bd0:	2000302c 	.word	0x2000302c

08004bd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d070      	beq.n	8004cc8 <vPortFree+0xf4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004be6:	2308      	movs	r3, #8
 8004be8:	425b      	negs	r3, r3
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	4a36      	ldr	r2, [pc, #216]	@ (8004cd0 <vPortFree+0xfc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d305      	bcc.n	8004c08 <vPortFree+0x34>
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	4a35      	ldr	r2, [pc, #212]	@ (8004cd4 <vPortFree+0x100>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d801      	bhi.n	8004c08 <vPortFree+0x34>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <vPortFree+0x36>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10b      	bne.n	8004c26 <vPortFree+0x52>
    __asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	617b      	str	r3, [r7, #20]
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	e7fd      	b.n	8004c22 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	db0b      	blt.n	8004c46 <vPortFree+0x72>
    __asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	613b      	str	r3, [r7, #16]
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	e7fd      	b.n	8004c42 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <vPortFree+0x92>
    __asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	60fb      	str	r3, [r7, #12]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	da2c      	bge.n	8004cc8 <vPortFree+0xf4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d128      	bne.n	8004cc8 <vPortFree+0xf4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	605a      	str	r2, [r3, #4]
                #if ( configHEAP_CLEAR_MEMORY_ON_FREE == 1 )
                {
                    /* Check for underflow as this can occur if xBlockSize is
                     * overwritten in a heap block. */
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2208      	movs	r2, #8
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d30a      	bcc.n	8004ca2 <vPortFree+0xce>
                    {
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	1898      	adds	r0, r3, r2
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2208      	movs	r2, #8
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	f001 fe7d 	bl	800699c <memset>
                    }
                }
                #endif

                vTaskSuspendAll();
 8004ca2:	f7fe f925 	bl	8002ef0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <vPortFree+0x104>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4413      	add	r3, r2
 8004cb0:	4a09      	ldr	r2, [pc, #36]	@ (8004cd8 <vPortFree+0x104>)
 8004cb2:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cb4:	69b8      	ldr	r0, [r7, #24]
 8004cb6:	f000 f86d 	bl	8004d94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004cba:	4b08      	ldr	r3, [pc, #32]	@ (8004cdc <vPortFree+0x108>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	4a06      	ldr	r2, [pc, #24]	@ (8004cdc <vPortFree+0x108>)
 8004cc2:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004cc4:	f7fe f922 	bl	8002f0c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004cc8:	bf00      	nop
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000818 	.word	0x20000818
 8004cd4:	20003017 	.word	0x20003017
 8004cd8:	20003024 	.word	0x20003024
 8004cdc:	20003030 	.word	0x20003030

08004ce0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ce6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004cea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004cec:	4b24      	ldr	r3, [pc, #144]	@ (8004d80 <prvHeapInit+0xa0>)
 8004cee:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00c      	beq.n	8004d14 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3307      	adds	r3, #7
 8004cfe:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0307 	bic.w	r3, r3, #7
 8004d06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d80 <prvHeapInit+0xa0>)
 8004d10:	4413      	add	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a1b      	ldr	r2, [pc, #108]	@ (8004d84 <prvHeapInit+0xa4>)
 8004d18:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d84 <prvHeapInit+0xa4>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4413      	add	r3, r2
 8004d26:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004d28:	2208      	movs	r2, #8
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f023 0307 	bic.w	r3, r3, #7
 8004d36:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a13      	ldr	r2, [pc, #76]	@ (8004d88 <prvHeapInit+0xa8>)
 8004d3c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d3e:	4b12      	ldr	r3, [pc, #72]	@ (8004d88 <prvHeapInit+0xa8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004d46:	4b10      	ldr	r3, [pc, #64]	@ (8004d88 <prvHeapInit+0xa8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	1ad2      	subs	r2, r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <prvHeapInit+0xa8>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4a08      	ldr	r2, [pc, #32]	@ (8004d8c <prvHeapInit+0xac>)
 8004d6a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4a07      	ldr	r2, [pc, #28]	@ (8004d90 <prvHeapInit+0xb0>)
 8004d72:	6013      	str	r3, [r2, #0]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000818 	.word	0x20000818
 8004d84:	20003018 	.word	0x20003018
 8004d88:	20003020 	.word	0x20003020
 8004d8c:	20003028 	.word	0x20003028
 8004d90:	20003024 	.word	0x20003024

08004d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004d9c:	4b36      	ldr	r3, [pc, #216]	@ (8004e78 <prvInsertBlockIntoFreeList+0xe4>)
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e002      	b.n	8004da8 <prvInsertBlockIntoFreeList+0x14>
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d8f7      	bhi.n	8004da2 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	4a30      	ldr	r2, [pc, #192]	@ (8004e78 <prvInsertBlockIntoFreeList+0xe4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d018      	beq.n	8004dec <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8004e7c <prvInsertBlockIntoFreeList+0xe8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d305      	bcc.n	8004dce <prvInsertBlockIntoFreeList+0x3a>
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	4a2e      	ldr	r2, [pc, #184]	@ (8004e80 <prvInsertBlockIntoFreeList+0xec>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d801      	bhi.n	8004dce <prvInsertBlockIntoFreeList+0x3a>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <prvInsertBlockIntoFreeList+0x3c>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	60fb      	str	r3, [r7, #12]
}
 8004de6:	bf00      	nop
 8004de8:	bf00      	nop
 8004dea:	e7fd      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4413      	add	r3, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d108      	bne.n	8004e10 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	441a      	add	r2, r3
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	441a      	add	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d118      	bne.n	8004e56 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b16      	ldr	r3, [pc, #88]	@ (8004e84 <prvInsertBlockIntoFreeList+0xf0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d00d      	beq.n	8004e4c <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	441a      	add	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	e008      	b.n	8004e5e <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <prvInsertBlockIntoFreeList+0xf0>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e003      	b.n	8004e5e <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d002      	beq.n	8004e6c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	20003018 	.word	0x20003018
 8004e7c:	20000818 	.word	0x20000818
 8004e80:	20003017 	.word	0x20003017
 8004e84:	20003020 	.word	0x20003020

08004e88 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004e8c:	4803      	ldr	r0, [pc, #12]	@ (8004e9c <_cbSendSystemDesc+0x14>)
 8004e8e:	f001 f97d 	bl	800618c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004e92:	4803      	ldr	r0, [pc, #12]	@ (8004ea0 <_cbSendSystemDesc+0x18>)
 8004e94:	f001 f97a 	bl	800618c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004e98:	bf00      	nop
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	08006a78 	.word	0x08006a78
 8004ea0:	08006ab4 	.word	0x08006ab4

08004ea4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ea8:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004eae:	6819      	ldr	r1, [r3, #0]
 8004eb0:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004eb2:	4a06      	ldr	r2, [pc, #24]	@ (8004ecc <SEGGER_SYSVIEW_Conf+0x28>)
 8004eb4:	f000 fdf0 	bl	8005a98 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004eb8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004ebc:	f000 fe30 	bl	8005b20 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ec0:	bf00      	nop
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000000 	.word	0x20000000
 8004ec8:	08004e89 	.word	0x08004e89
 8004ecc:	08006b54 	.word	0x08006b54

08004ed0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	e033      	b.n	8004f44 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004edc:	491e      	ldr	r1, [pc, #120]	@ (8004f58 <_cbSendTaskList+0x88>)
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	491a      	ldr	r1, [pc, #104]	@ (8004f58 <_cbSendTaskList+0x88>)
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	3304      	adds	r3, #4
 8004efc:	6819      	ldr	r1, [r3, #0]
 8004efe:	4c16      	ldr	r4, [pc, #88]	@ (8004f58 <_cbSendTaskList+0x88>)
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4423      	add	r3, r4
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	681c      	ldr	r4, [r3, #0]
 8004f10:	4d11      	ldr	r5, [pc, #68]	@ (8004f58 <_cbSendTaskList+0x88>)
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	442b      	add	r3, r5
 8004f1e:	330c      	adds	r3, #12
 8004f20:	681d      	ldr	r5, [r3, #0]
 8004f22:	4e0d      	ldr	r6, [pc, #52]	@ (8004f58 <_cbSendTaskList+0x88>)
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4433      	add	r3, r6
 8004f30:	3310      	adds	r3, #16
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	462b      	mov	r3, r5
 8004f38:	4622      	mov	r2, r4
 8004f3a:	f000 f947 	bl	80051cc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3301      	adds	r3, #1
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <_cbSendTaskList+0x8c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d3c6      	bcc.n	8004edc <_cbSendTaskList+0xc>
  }
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f58:	20003034 	.word	0x20003034
 8004f5c:	200030d4 	.word	0x200030d4

08004f60 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f64:	b086      	sub	sp, #24
 8004f66:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f68:	f7fe f90a 	bl	8003180 <xTaskGetTickCountFromISR>
 8004f6c:	e9c7 0104 	strd	r0, r1, [r7, #16]
  Time *= portTICK_PERIOD_MS;
 8004f70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f74:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004f78:	f04f 0000 	mov.w	r0, #0
 8004f7c:	f04f 0100 	mov.w	r1, #0
 8004f80:	0099      	lsls	r1, r3, #2
 8004f82:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004f86:	0090      	lsls	r0, r2, #2
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	eb12 0801 	adds.w	r8, r2, r1
 8004f92:	68f9      	ldr	r1, [r7, #12]
 8004f94:	eb43 0901 	adc.w	r9, r3, r1
 8004f98:	eb18 0308 	adds.w	r3, r8, r8
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	eb49 0309 	adc.w	r3, r9, r9
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004fa8:	e9c7 8904 	strd	r8, r9, [r7, #16]
  Time *= 1000;
 8004fac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	f04f 0800 	mov.w	r8, #0
 8004fb8:	f04f 0900 	mov.w	r9, #0
 8004fbc:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8004fc0:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8004fc4:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	1a14      	subs	r4, r2, r0
 8004fce:	eb63 0501 	sbc.w	r5, r3, r1
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	00ab      	lsls	r3, r5, #2
 8004fdc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004fe0:	00a2      	lsls	r2, r4, #2
 8004fe2:	4614      	mov	r4, r2
 8004fe4:	461d      	mov	r5, r3
 8004fe6:	eb14 0a00 	adds.w	sl, r4, r0
 8004fea:	eb45 0b01 	adc.w	fp, r5, r1
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ffa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ffe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005002:	4692      	mov	sl, r2
 8005004:	469b      	mov	fp, r3
 8005006:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  return Time;
 800500a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800500e:	4610      	mov	r0, r2
 8005010:	4619      	mov	r1, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800501c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800502a:	2205      	movs	r2, #5
 800502c:	492b      	ldr	r1, [pc, #172]	@ (80050dc <SYSVIEW_AddTask+0xc0>)
 800502e:	68b8      	ldr	r0, [r7, #8]
 8005030:	f001 fca4 	bl	800697c <memcmp>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d04b      	beq.n	80050d2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800503a:	4b29      	ldr	r3, [pc, #164]	@ (80050e0 <SYSVIEW_AddTask+0xc4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b07      	cmp	r3, #7
 8005040:	d903      	bls.n	800504a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005042:	4828      	ldr	r0, [pc, #160]	@ (80050e4 <SYSVIEW_AddTask+0xc8>)
 8005044:	f001 fc3e 	bl	80068c4 <SEGGER_SYSVIEW_Warn>
    return;
 8005048:	e044      	b.n	80050d4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800504a:	4b25      	ldr	r3, [pc, #148]	@ (80050e0 <SYSVIEW_AddTask+0xc4>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4926      	ldr	r1, [pc, #152]	@ (80050e8 <SYSVIEW_AddTask+0xcc>)
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800505e:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <SYSVIEW_AddTask+0xc4>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4921      	ldr	r1, [pc, #132]	@ (80050e8 <SYSVIEW_AddTask+0xcc>)
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	3304      	adds	r3, #4
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005074:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <SYSVIEW_AddTask+0xc4>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	491b      	ldr	r1, [pc, #108]	@ (80050e8 <SYSVIEW_AddTask+0xcc>)
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	3308      	adds	r3, #8
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800508a:	4b15      	ldr	r3, [pc, #84]	@ (80050e0 <SYSVIEW_AddTask+0xc4>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4916      	ldr	r1, [pc, #88]	@ (80050e8 <SYSVIEW_AddTask+0xcc>)
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	330c      	adds	r3, #12
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80050a0:	4b0f      	ldr	r3, [pc, #60]	@ (80050e0 <SYSVIEW_AddTask+0xc4>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4910      	ldr	r1, [pc, #64]	@ (80050e8 <SYSVIEW_AddTask+0xcc>)
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	3310      	adds	r3, #16
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80050b6:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <SYSVIEW_AddTask+0xc4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3301      	adds	r3, #1
 80050bc:	4a08      	ldr	r2, [pc, #32]	@ (80050e0 <SYSVIEW_AddTask+0xc4>)
 80050be:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f87e 	bl	80051cc <SYSVIEW_SendTaskInfo>
 80050d0:	e000      	b.n	80050d4 <SYSVIEW_AddTask+0xb8>
    return;
 80050d2:	bf00      	nop

}
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	08006ac4 	.word	0x08006ac4
 80050e0:	200030d4 	.word	0x200030d4
 80050e4:	08006acc 	.word	0x08006acc
 80050e8:	20003034 	.word	0x20003034

080050ec <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80050fa:	2205      	movs	r2, #5
 80050fc:	4930      	ldr	r1, [pc, #192]	@ (80051c0 <SYSVIEW_UpdateTask+0xd4>)
 80050fe:	68b8      	ldr	r0, [r7, #8]
 8005100:	f001 fc3c 	bl	800697c <memcmp>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d056      	beq.n	80051b8 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e00d      	b.n	800512c <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8005110:	492c      	ldr	r1, [pc, #176]	@ (80051c4 <SYSVIEW_UpdateTask+0xd8>)
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	429a      	cmp	r2, r3
 8005124:	d008      	beq.n	8005138 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	3301      	adds	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	4b26      	ldr	r3, [pc, #152]	@ (80051c8 <SYSVIEW_UpdateTask+0xdc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	429a      	cmp	r2, r3
 8005134:	d3ec      	bcc.n	8005110 <SYSVIEW_UpdateTask+0x24>
 8005136:	e000      	b.n	800513a <SYSVIEW_UpdateTask+0x4e>
      break;
 8005138:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 800513a:	4b23      	ldr	r3, [pc, #140]	@ (80051c8 <SYSVIEW_UpdateTask+0xdc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	429a      	cmp	r2, r3
 8005142:	d230      	bcs.n	80051a6 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8005144:	491f      	ldr	r1, [pc, #124]	@ (80051c4 <SYSVIEW_UpdateTask+0xd8>)
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	3304      	adds	r3, #4
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8005158:	491a      	ldr	r1, [pc, #104]	@ (80051c4 <SYSVIEW_UpdateTask+0xd8>)
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	3308      	adds	r3, #8
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 800516c:	4915      	ldr	r1, [pc, #84]	@ (80051c4 <SYSVIEW_UpdateTask+0xd8>)
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	330c      	adds	r3, #12
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8005180:	4910      	ldr	r1, [pc, #64]	@ (80051c4 <SYSVIEW_UpdateTask+0xd8>)
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3310      	adds	r3, #16
 8005190:	6a3a      	ldr	r2, [r7, #32]
 8005192:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f814 	bl	80051cc <SYSVIEW_SendTaskInfo>
 80051a4:	e009      	b.n	80051ba <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff ff33 	bl	800501c <SYSVIEW_AddTask>
 80051b6:	e000      	b.n	80051ba <SYSVIEW_UpdateTask+0xce>
    return;
 80051b8:	bf00      	nop
  }
}
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	08006ac4 	.word	0x08006ac4
 80051c4:	20003034 	.word	0x20003034
 80051c8:	200030d4 	.word	0x200030d4

080051cc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	@ 0x28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80051da:	f107 0310 	add.w	r3, r7, #16
 80051de:	2218      	movs	r2, #24
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 fbda 	bl	800699c <memset>
  TaskInfo.TaskID     = TaskID;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80051f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fa:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80051fc:	f107 0310 	add.w	r3, r7, #16
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fecb 	bl	8005f9c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005206:	bf00      	nop
 8005208:	3728      	adds	r7, #40	@ 0x28
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005216:	4b26      	ldr	r3, [pc, #152]	@ (80052b0 <_DoInit+0xa0>)
 8005218:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800521a:	22a8      	movs	r2, #168	@ 0xa8
 800521c:	2100      	movs	r1, #0
 800521e:	6838      	ldr	r0, [r7, #0]
 8005220:	f001 fbbc 	bl	800699c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2203      	movs	r2, #3
 8005228:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2203      	movs	r2, #3
 800522e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	4a20      	ldr	r2, [pc, #128]	@ (80052b4 <_DoInit+0xa4>)
 8005234:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	4a1f      	ldr	r2, [pc, #124]	@ (80052b8 <_DoInit+0xa8>)
 800523a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005242:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2200      	movs	r2, #0
 800524e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2200      	movs	r2, #0
 8005254:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	4a16      	ldr	r2, [pc, #88]	@ (80052b4 <_DoInit+0xa4>)
 800525a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	4a17      	ldr	r2, [pc, #92]	@ (80052bc <_DoInit+0xac>)
 8005260:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2210      	movs	r2, #16
 8005266:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2200      	movs	r2, #0
 800526c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2200      	movs	r2, #0
 8005272:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800527a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800527e:	2300      	movs	r3, #0
 8005280:	607b      	str	r3, [r7, #4]
 8005282:	e00c      	b.n	800529e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f1c3 030f 	rsb	r3, r3, #15
 800528a:	4a0d      	ldr	r2, [pc, #52]	@ (80052c0 <_DoInit+0xb0>)
 800528c:	5cd1      	ldrb	r1, [r2, r3]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4413      	add	r3, r2
 8005294:	460a      	mov	r2, r1
 8005296:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3301      	adds	r3, #1
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b0f      	cmp	r3, #15
 80052a2:	d9ef      	bls.n	8005284 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80052a4:	f3bf 8f5f 	dmb	sy
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	200030d8 	.word	0x200030d8
 80052b4:	08006b1c 	.word	0x08006b1c
 80052b8:	20003180 	.word	0x20003180
 80052bc:	20003580 	.word	0x20003580
 80052c0:	08006b5c 	.word	0x08006b5c

080052c4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08c      	sub	sp, #48	@ 0x30
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80052d0:	4b3e      	ldr	r3, [pc, #248]	@ (80053cc <SEGGER_RTT_ReadNoLock+0x108>)
 80052d2:	623b      	str	r3, [r7, #32]
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b53      	cmp	r3, #83	@ 0x53
 80052dc:	d001      	beq.n	80052e2 <SEGGER_RTT_ReadNoLock+0x1e>
 80052de:	f7ff ff97 	bl	8005210 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4613      	mov	r3, r2
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	4413      	add	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	3360      	adds	r3, #96	@ 0x60
 80052ee:	4a37      	ldr	r2, [pc, #220]	@ (80053cc <SEGGER_RTT_ReadNoLock+0x108>)
 80052f0:	4413      	add	r3, r2
 80052f2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005304:	2300      	movs	r3, #0
 8005306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005308:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	429a      	cmp	r2, r3
 800530e:	d92b      	bls.n	8005368 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4293      	cmp	r3, r2
 8005320:	bf28      	it	cs
 8005322:	4613      	movcs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532c:	4413      	add	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	6939      	ldr	r1, [r7, #16]
 8005334:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005336:	f001 fb5d 	bl	80069f4 <memcpy>
    NumBytesRead += NumBytesRem;
 800533a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4413      	add	r3, r2
 8005340:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	4413      	add	r3, r2
 8005348:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005352:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	4413      	add	r3, r2
 8005358:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005360:	429a      	cmp	r2, r3
 8005362:	d101      	bne.n	8005368 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005364:	2300      	movs	r3, #0
 8005366:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4293      	cmp	r3, r2
 8005376:	bf28      	it	cs
 8005378:	4613      	movcs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d019      	beq.n	80053b6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005388:	4413      	add	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	6939      	ldr	r1, [r7, #16]
 8005390:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005392:	f001 fb2f 	bl	80069f4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	4413      	add	r3, r2
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800539e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4413      	add	r3, r2
 80053a4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	4413      	add	r3, r2
 80053b4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80053b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053c0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80053c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3730      	adds	r7, #48	@ 0x30
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	200030d8 	.word	0x200030d8

080053d0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80053de:	4b3d      	ldr	r3, [pc, #244]	@ (80054d4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b53      	cmp	r3, #83	@ 0x53
 80053ea:	d001      	beq.n	80053f0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80053ec:	f7ff ff10 	bl	8005210 <_DoInit>
  SEGGER_RTT_LOCK();
 80053f0:	f3ef 8311 	mrs	r3, BASEPRI
 80053f4:	f04f 0120 	mov.w	r1, #32
 80053f8:	f381 8811 	msr	BASEPRI, r1
 80053fc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053fe:	4b35      	ldr	r3, [pc, #212]	@ (80054d4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005400:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005406:	6939      	ldr	r1, [r7, #16]
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	4613      	mov	r3, r2
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	4413      	add	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	440b      	add	r3, r1
 8005416:	3304      	adds	r3, #4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3301      	adds	r3, #1
 8005422:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	429a      	cmp	r2, r3
 800542c:	dbeb      	blt.n	8005406 <SEGGER_RTT_AllocUpBuffer+0x36>
 800542e:	e000      	b.n	8005432 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005430:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	429a      	cmp	r2, r3
 800543a:	da3f      	bge.n	80054bc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800543c:	6939      	ldr	r1, [r7, #16]
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	4613      	mov	r3, r2
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	4413      	add	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	440b      	add	r3, r1
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005450:	6939      	ldr	r1, [r7, #16]
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	4613      	mov	r3, r2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4413      	add	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	440b      	add	r3, r1
 8005460:	3304      	adds	r3, #4
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005466:	6939      	ldr	r1, [r7, #16]
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	4613      	mov	r3, r2
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	440b      	add	r3, r1
 8005474:	3320      	adds	r3, #32
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800547a:	6939      	ldr	r1, [r7, #16]
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	4613      	mov	r3, r2
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	4413      	add	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	440b      	add	r3, r1
 8005488:	3328      	adds	r3, #40	@ 0x28
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800548e:	6939      	ldr	r1, [r7, #16]
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	4613      	mov	r3, r2
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	4413      	add	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	440b      	add	r3, r1
 800549c:	3324      	adds	r3, #36	@ 0x24
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80054a2:	6939      	ldr	r1, [r7, #16]
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	4613      	mov	r3, r2
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	4413      	add	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	440b      	add	r3, r1
 80054b0:	332c      	adds	r3, #44	@ 0x2c
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054b6:	f3bf 8f5f 	dmb	sy
 80054ba:	e002      	b.n	80054c2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054c0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80054c8:	69fb      	ldr	r3, [r7, #28]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	200030d8 	.word	0x200030d8

080054d8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	@ 0x28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80054e6:	4b21      	ldr	r3, [pc, #132]	@ (800556c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80054e8:	623b      	str	r3, [r7, #32]
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b53      	cmp	r3, #83	@ 0x53
 80054f2:	d001      	beq.n	80054f8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80054f4:	f7ff fe8c 	bl	8005210 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054f8:	4b1c      	ldr	r3, [pc, #112]	@ (800556c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80054fa:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d82c      	bhi.n	800555c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005502:	f3ef 8311 	mrs	r3, BASEPRI
 8005506:	f04f 0120 	mov.w	r1, #32
 800550a:	f381 8811 	msr	BASEPRI, r1
 800550e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4613      	mov	r3, r2
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	4413      	add	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	3360      	adds	r3, #96	@ 0x60
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00e      	beq.n	8005546 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2200      	movs	r2, #0
 800553e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2200      	movs	r2, #0
 8005544:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800554a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800554c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005556:	2300      	movs	r3, #0
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
 800555a:	e002      	b.n	8005562 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800555c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005560:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005564:	4618      	mov	r0, r3
 8005566:	3728      	adds	r7, #40	@ 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	200030d8 	.word	0x200030d8

08005570 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d105      	bne.n	800558e <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	60fa      	str	r2, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e022      	b.n	80055d4 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	60fa      	str	r2, [r7, #12]
 8005598:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b80      	cmp	r3, #128	@ 0x80
 800559e:	d90a      	bls.n	80055b6 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80055a0:	2380      	movs	r3, #128	@ 0x80
 80055a2:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80055a4:	e007      	b.n	80055b6 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	1c53      	adds	r3, r2, #1
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1c59      	adds	r1, r3, #1
 80055b0:	60f9      	str	r1, [r7, #12]
 80055b2:	7812      	ldrb	r2, [r2, #0]
 80055b4:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	1e5a      	subs	r2, r3, #1
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <_EncodeStr+0x58>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ee      	bne.n	80055a6 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80055d4:	68fb      	ldr	r3, [r7, #12]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3307      	adds	r3, #7
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
	...

080055fc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005602:	4b34      	ldr	r3, [pc, #208]	@ (80056d4 <_HandleIncomingPacket+0xd8>)
 8005604:	7e1b      	ldrb	r3, [r3, #24]
 8005606:	4618      	mov	r0, r3
 8005608:	1cfb      	adds	r3, r7, #3
 800560a:	2201      	movs	r2, #1
 800560c:	4619      	mov	r1, r3
 800560e:	f7ff fe59 	bl	80052c4 <SEGGER_RTT_ReadNoLock>
 8005612:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d057      	beq.n	80056ca <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	2b80      	cmp	r3, #128	@ 0x80
 800561e:	d031      	beq.n	8005684 <_HandleIncomingPacket+0x88>
 8005620:	2b80      	cmp	r3, #128	@ 0x80
 8005622:	dc40      	bgt.n	80056a6 <_HandleIncomingPacket+0xaa>
 8005624:	2b07      	cmp	r3, #7
 8005626:	dc15      	bgt.n	8005654 <_HandleIncomingPacket+0x58>
 8005628:	2b00      	cmp	r3, #0
 800562a:	dd3c      	ble.n	80056a6 <_HandleIncomingPacket+0xaa>
 800562c:	3b01      	subs	r3, #1
 800562e:	2b06      	cmp	r3, #6
 8005630:	d839      	bhi.n	80056a6 <_HandleIncomingPacket+0xaa>
 8005632:	a201      	add	r2, pc, #4	@ (adr r2, 8005638 <_HandleIncomingPacket+0x3c>)
 8005634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005638:	0800565b 	.word	0x0800565b
 800563c:	08005661 	.word	0x08005661
 8005640:	08005667 	.word	0x08005667
 8005644:	0800566d 	.word	0x0800566d
 8005648:	08005673 	.word	0x08005673
 800564c:	08005679 	.word	0x08005679
 8005650:	0800567f 	.word	0x0800567f
 8005654:	2b7f      	cmp	r3, #127	@ 0x7f
 8005656:	d033      	beq.n	80056c0 <_HandleIncomingPacket+0xc4>
 8005658:	e025      	b.n	80056a6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800565a:	f000 fb25 	bl	8005ca8 <SEGGER_SYSVIEW_Start>
      break;
 800565e:	e034      	b.n	80056ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005660:	f000 fbdc 	bl	8005e1c <SEGGER_SYSVIEW_Stop>
      break;
 8005664:	e031      	b.n	80056ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005666:	f000 fdb5 	bl	80061d4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800566a:	e02e      	b.n	80056ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800566c:	f000 fd7a 	bl	8006164 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005670:	e02b      	b.n	80056ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005672:	f000 fbf9 	bl	8005e68 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005676:	e028      	b.n	80056ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005678:	f001 f8e6 	bl	8006848 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800567c:	e025      	b.n	80056ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800567e:	f001 f8c5 	bl	800680c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005682:	e022      	b.n	80056ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005684:	4b13      	ldr	r3, [pc, #76]	@ (80056d4 <_HandleIncomingPacket+0xd8>)
 8005686:	7e1b      	ldrb	r3, [r3, #24]
 8005688:	4618      	mov	r0, r3
 800568a:	1cfb      	adds	r3, r7, #3
 800568c:	2201      	movs	r2, #1
 800568e:	4619      	mov	r1, r3
 8005690:	f7ff fe18 	bl	80052c4 <SEGGER_RTT_ReadNoLock>
 8005694:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d013      	beq.n	80056c4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 f82a 	bl	80066f8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80056a4:	e00e      	b.n	80056c4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	b25b      	sxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	da0c      	bge.n	80056c8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80056ae:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <_HandleIncomingPacket+0xd8>)
 80056b0:	7e1b      	ldrb	r3, [r3, #24]
 80056b2:	4618      	mov	r0, r3
 80056b4:	1cfb      	adds	r3, r7, #3
 80056b6:	2201      	movs	r2, #1
 80056b8:	4619      	mov	r1, r3
 80056ba:	f7ff fe03 	bl	80052c4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80056be:	e003      	b.n	80056c8 <_HandleIncomingPacket+0xcc>
      break;
 80056c0:	bf00      	nop
 80056c2:	e002      	b.n	80056ca <_HandleIncomingPacket+0xce>
      break;
 80056c4:	bf00      	nop
 80056c6:	e000      	b.n	80056ca <_HandleIncomingPacket+0xce>
      break;
 80056c8:	bf00      	nop
    }
  }
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20004598 	.word	0x20004598

080056d8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08c      	sub	sp, #48	@ 0x30
 80056dc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80056de:	2301      	movs	r3, #1
 80056e0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	3301      	adds	r3, #1
 80056e6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ec:	4b31      	ldr	r3, [pc, #196]	@ (80057b4 <_TrySendOverflowPacket+0xdc>)
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056f2:	e00b      	b.n	800570c <_TrySendOverflowPacket+0x34>
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fa:	1c59      	adds	r1, r3, #1
 80056fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80056fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005708:	09db      	lsrs	r3, r3, #7
 800570a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005710:	d8f0      	bhi.n	80056f4 <_TrySendOverflowPacket+0x1c>
 8005712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005722:	4b25      	ldr	r3, [pc, #148]	@ (80057b8 <_TrySendOverflowPacket+0xe0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005728:	4b22      	ldr	r3, [pc, #136]	@ (80057b4 <_TrySendOverflowPacket+0xdc>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	623b      	str	r3, [r7, #32]
 800573a:	e00b      	b.n	8005754 <_TrySendOverflowPacket+0x7c>
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	b2da      	uxtb	r2, r3
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	1c59      	adds	r1, r3, #1
 8005744:	6279      	str	r1, [r7, #36]	@ 0x24
 8005746:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	09db      	lsrs	r3, r3, #7
 8005752:	623b      	str	r3, [r7, #32]
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	2b7f      	cmp	r3, #127	@ 0x7f
 8005758:	d8f0      	bhi.n	800573c <_TrySendOverflowPacket+0x64>
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005760:	6a3a      	ldr	r2, [r7, #32]
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800576a:	4b12      	ldr	r3, [pc, #72]	@ (80057b4 <_TrySendOverflowPacket+0xdc>)
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	4618      	mov	r0, r3
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	461a      	mov	r2, r3
 8005778:	1d3b      	adds	r3, r7, #4
 800577a:	4619      	mov	r1, r3
 800577c:	f7fa fd30 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005780:	4603      	mov	r3, r0
 8005782:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800578a:	4a0a      	ldr	r2, [pc, #40]	@ (80057b4 <_TrySendOverflowPacket+0xdc>)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005790:	4b08      	ldr	r3, [pc, #32]	@ (80057b4 <_TrySendOverflowPacket+0xdc>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	3b01      	subs	r3, #1
 8005796:	b2da      	uxtb	r2, r3
 8005798:	4b06      	ldr	r3, [pc, #24]	@ (80057b4 <_TrySendOverflowPacket+0xdc>)
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	e004      	b.n	80057a8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800579e:	4b05      	ldr	r3, [pc, #20]	@ (80057b4 <_TrySendOverflowPacket+0xdc>)
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	3301      	adds	r3, #1
 80057a4:	4a03      	ldr	r2, [pc, #12]	@ (80057b4 <_TrySendOverflowPacket+0xdc>)
 80057a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80057a8:	693b      	ldr	r3, [r7, #16]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3730      	adds	r7, #48	@ 0x30
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20004598 	.word	0x20004598
 80057b8:	e0001004 	.word	0xe0001004

080057bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	@ 0x28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80057c8:	4b98      	ldr	r3, [pc, #608]	@ (8005a2c <_SendPacket+0x270>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d010      	beq.n	80057f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80057d0:	4b96      	ldr	r3, [pc, #600]	@ (8005a2c <_SendPacket+0x270>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 812d 	beq.w	8005a34 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80057da:	4b94      	ldr	r3, [pc, #592]	@ (8005a2c <_SendPacket+0x270>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d109      	bne.n	80057f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80057e2:	f7ff ff79 	bl	80056d8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80057e6:	4b91      	ldr	r3, [pc, #580]	@ (8005a2c <_SendPacket+0x270>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	f040 8124 	bne.w	8005a38 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80057f0:	e001      	b.n	80057f6 <_SendPacket+0x3a>
    goto Send;
 80057f2:	bf00      	nop
 80057f4:	e000      	b.n	80057f8 <_SendPacket+0x3c>
Send:
 80057f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b1f      	cmp	r3, #31
 80057fc:	d809      	bhi.n	8005812 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80057fe:	4b8b      	ldr	r3, [pc, #556]	@ (8005a2c <_SendPacket+0x270>)
 8005800:	69da      	ldr	r2, [r3, #28]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	f040 8115 	bne.w	8005a3c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b17      	cmp	r3, #23
 8005816:	d807      	bhi.n	8005828 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3b01      	subs	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	e0c4      	b.n	80059b2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b7f      	cmp	r3, #127	@ 0x7f
 8005834:	d912      	bls.n	800585c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	09da      	lsrs	r2, r3, #7
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3b01      	subs	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	3a01      	subs	r2, #1
 800584e:	60fa      	str	r2, [r7, #12]
 8005850:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005854:	b2da      	uxtb	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	e006      	b.n	800586a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3b01      	subs	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b7e      	cmp	r3, #126	@ 0x7e
 800586e:	d807      	bhi.n	8005880 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3b01      	subs	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	e098      	b.n	80059b2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005886:	d212      	bcs.n	80058ae <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	09da      	lsrs	r2, r3, #7
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3b01      	subs	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	3a01      	subs	r2, #1
 80058a0:	60fa      	str	r2, [r7, #12]
 80058a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	e081      	b.n	80059b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058b4:	d21d      	bcs.n	80058f2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	0b9a      	lsrs	r2, r3, #14
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3b01      	subs	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	09db      	lsrs	r3, r3, #7
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	3a01      	subs	r2, #1
 80058d0:	60fa      	str	r2, [r7, #12]
 80058d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	3a01      	subs	r2, #1
 80058e4:	60fa      	str	r2, [r7, #12]
 80058e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	e05f      	b.n	80059b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058f8:	d228      	bcs.n	800594c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	0d5a      	lsrs	r2, r3, #21
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3b01      	subs	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	0b9b      	lsrs	r3, r3, #14
 800590e:	b2db      	uxtb	r3, r3
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	3a01      	subs	r2, #1
 8005914:	60fa      	str	r2, [r7, #12]
 8005916:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800591a:	b2da      	uxtb	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	09db      	lsrs	r3, r3, #7
 8005924:	b2db      	uxtb	r3, r3
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	3a01      	subs	r2, #1
 800592a:	60fa      	str	r2, [r7, #12]
 800592c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005930:	b2da      	uxtb	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	3a01      	subs	r2, #1
 800593e:	60fa      	str	r2, [r7, #12]
 8005940:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	e032      	b.n	80059b2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	0f1a      	lsrs	r2, r3, #28
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3b01      	subs	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	0d5b      	lsrs	r3, r3, #21
 8005960:	b2db      	uxtb	r3, r3
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	3a01      	subs	r2, #1
 8005966:	60fa      	str	r2, [r7, #12]
 8005968:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800596c:	b2da      	uxtb	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	0b9b      	lsrs	r3, r3, #14
 8005976:	b2db      	uxtb	r3, r3
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	3a01      	subs	r2, #1
 800597c:	60fa      	str	r2, [r7, #12]
 800597e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005982:	b2da      	uxtb	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	09db      	lsrs	r3, r3, #7
 800598c:	b2db      	uxtb	r3, r3
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	3a01      	subs	r2, #1
 8005992:	60fa      	str	r2, [r7, #12]
 8005994:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005998:	b2da      	uxtb	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	3a01      	subs	r2, #1
 80059a6:	60fa      	str	r2, [r7, #12]
 80059a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005a30 <_SendPacket+0x274>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80059b8:	4b1c      	ldr	r3, [pc, #112]	@ (8005a2c <_SendPacket+0x270>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	623b      	str	r3, [r7, #32]
 80059ca:	e00b      	b.n	80059e4 <_SendPacket+0x228>
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	1c59      	adds	r1, r3, #1
 80059d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80059d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	09db      	lsrs	r3, r3, #7
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80059e8:	d8f0      	bhi.n	80059cc <_SendPacket+0x210>
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80059f0:	6a3a      	ldr	r2, [r7, #32]
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80059fa:	4b0c      	ldr	r3, [pc, #48]	@ (8005a2c <_SendPacket+0x270>)
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	4618      	mov	r0, r3
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	68f9      	ldr	r1, [r7, #12]
 8005a0a:	f7fa fbe9 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a0e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a16:	4a05      	ldr	r2, [pc, #20]	@ (8005a2c <_SendPacket+0x270>)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	60d3      	str	r3, [r2, #12]
 8005a1c:	e00f      	b.n	8005a3e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005a1e:	4b03      	ldr	r3, [pc, #12]	@ (8005a2c <_SendPacket+0x270>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	4b01      	ldr	r3, [pc, #4]	@ (8005a2c <_SendPacket+0x270>)
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e008      	b.n	8005a3e <_SendPacket+0x282>
 8005a2c:	20004598 	.word	0x20004598
 8005a30:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005a34:	bf00      	nop
 8005a36:	e002      	b.n	8005a3e <_SendPacket+0x282>
      goto SendDone;
 8005a38:	bf00      	nop
 8005a3a:	e000      	b.n	8005a3e <_SendPacket+0x282>
      goto SendDone;
 8005a3c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005a3e:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <_SendPacket+0x2d4>)
 8005a40:	7e1b      	ldrb	r3, [r3, #24]
 8005a42:	4619      	mov	r1, r3
 8005a44:	4a13      	ldr	r2, [pc, #76]	@ (8005a94 <_SendPacket+0x2d8>)
 8005a46:	460b      	mov	r3, r1
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	440b      	add	r3, r1
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	4413      	add	r3, r2
 8005a50:	336c      	adds	r3, #108	@ 0x6c
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	4b0e      	ldr	r3, [pc, #56]	@ (8005a90 <_SendPacket+0x2d4>)
 8005a56:	7e1b      	ldrb	r3, [r3, #24]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	490e      	ldr	r1, [pc, #56]	@ (8005a94 <_SendPacket+0x2d8>)
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4403      	add	r3, r0
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	440b      	add	r3, r1
 8005a66:	3370      	adds	r3, #112	@ 0x70
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d00b      	beq.n	8005a86 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005a6e:	4b08      	ldr	r3, [pc, #32]	@ (8005a90 <_SendPacket+0x2d4>)
 8005a70:	789b      	ldrb	r3, [r3, #2]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005a76:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <_SendPacket+0x2d4>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005a7c:	f7ff fdbe 	bl	80055fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005a80:	4b03      	ldr	r3, [pc, #12]	@ (8005a90 <_SendPacket+0x2d4>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005a86:	bf00      	nop
 8005a88:	3728      	adds	r7, #40	@ 0x28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20004598 	.word	0x20004598
 8005a94:	200030d8 	.word	0x200030d8

08005a98 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005aac:	4917      	ldr	r1, [pc, #92]	@ (8005b0c <SEGGER_SYSVIEW_Init+0x74>)
 8005aae:	4818      	ldr	r0, [pc, #96]	@ (8005b10 <SEGGER_SYSVIEW_Init+0x78>)
 8005ab0:	f7ff fc8e 	bl	80053d0 <SEGGER_RTT_AllocUpBuffer>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	4b16      	ldr	r3, [pc, #88]	@ (8005b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8005aba:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005abc:	4b15      	ldr	r3, [pc, #84]	@ (8005b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8005abe:	785a      	ldrb	r2, [r3, #1]
 8005ac0:	4b14      	ldr	r3, [pc, #80]	@ (8005b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ac2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ac4:	4b13      	ldr	r3, [pc, #76]	@ (8005b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ac6:	7e1b      	ldrb	r3, [r3, #24]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	2308      	movs	r3, #8
 8005ad0:	4a11      	ldr	r2, [pc, #68]	@ (8005b18 <SEGGER_SYSVIEW_Init+0x80>)
 8005ad2:	490f      	ldr	r1, [pc, #60]	@ (8005b10 <SEGGER_SYSVIEW_Init+0x78>)
 8005ad4:	f7ff fd00 	bl	80054d8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ade:	4b0f      	ldr	r3, [pc, #60]	@ (8005b1c <SEGGER_SYSVIEW_Init+0x84>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8005b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ae4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8005b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005aec:	4a09      	ldr	r2, [pc, #36]	@ (8005b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005af2:	4a08      	ldr	r2, [pc, #32]	@ (8005b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005af8:	4a06      	ldr	r2, [pc, #24]	@ (8005b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005afe:	4b05      	ldr	r3, [pc, #20]	@ (8005b14 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20003590 	.word	0x20003590
 8005b10:	08006b30 	.word	0x08006b30
 8005b14:	20004598 	.word	0x20004598
 8005b18:	20004590 	.word	0x20004590
 8005b1c:	e0001004 	.word	0xe0001004

08005b20 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005b28:	4a04      	ldr	r2, [pc, #16]	@ (8005b3c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6113      	str	r3, [r2, #16]
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20004598 	.word	0x20004598

08005b40 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b48:	f3ef 8311 	mrs	r3, BASEPRI
 8005b4c:	f04f 0120 	mov.w	r1, #32
 8005b50:	f381 8811 	msr	BASEPRI, r1
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	4808      	ldr	r0, [pc, #32]	@ (8005b78 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005b58:	f7ff fd43 	bl	80055e2 <_PreparePacket>
 8005b5c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	68b8      	ldr	r0, [r7, #8]
 8005b64:	f7ff fe2a 	bl	80057bc <_SendPacket>
  RECORD_END();
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f383 8811 	msr	BASEPRI, r3
}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	200045c8 	.word	0x200045c8

08005b7c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b86:	f3ef 8311 	mrs	r3, BASEPRI
 8005b8a:	f04f 0120 	mov.w	r1, #32
 8005b8e:	f381 8811 	msr	BASEPRI, r1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	4816      	ldr	r0, [pc, #88]	@ (8005bf0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005b96:	f7ff fd24 	bl	80055e2 <_PreparePacket>
 8005b9a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	e00b      	b.n	8005bc2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	1c59      	adds	r1, r3, #1
 8005bb2:	61f9      	str	r1, [r7, #28]
 8005bb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	09db      	lsrs	r3, r3, #7
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bc6:	d8f0      	bhi.n	8005baa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	61fa      	str	r2, [r7, #28]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68f9      	ldr	r1, [r7, #12]
 8005bdc:	6938      	ldr	r0, [r7, #16]
 8005bde:	f7ff fded 	bl	80057bc <_SendPacket>
  RECORD_END();
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f383 8811 	msr	BASEPRI, r3
}
 8005be8:	bf00      	nop
 8005bea:	3720      	adds	r7, #32
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	200045c8 	.word	0x200045c8

08005bf4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08c      	sub	sp, #48	@ 0x30
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c00:	f3ef 8311 	mrs	r3, BASEPRI
 8005c04:	f04f 0120 	mov.w	r1, #32
 8005c08:	f381 8811 	msr	BASEPRI, r1
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	4825      	ldr	r0, [pc, #148]	@ (8005ca4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005c10:	f7ff fce7 	bl	80055e2 <_PreparePacket>
 8005c14:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c22:	e00b      	b.n	8005c3c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2a:	1c59      	adds	r1, r3, #1
 8005c2c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005c2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c38:	09db      	lsrs	r3, r3, #7
 8005c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c40:	d8f0      	bhi.n	8005c24 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	623b      	str	r3, [r7, #32]
 8005c5a:	e00b      	b.n	8005c74 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	1c59      	adds	r1, r3, #1
 8005c64:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	09db      	lsrs	r3, r3, #7
 8005c72:	623b      	str	r3, [r7, #32]
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c78:	d8f0      	bhi.n	8005c5c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	6979      	ldr	r1, [r7, #20]
 8005c8e:	69b8      	ldr	r0, [r7, #24]
 8005c90:	f7ff fd94 	bl	80057bc <_SendPacket>
  RECORD_END();
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f383 8811 	msr	BASEPRI, r3
}
 8005c9a:	bf00      	nop
 8005c9c:	3730      	adds	r7, #48	@ 0x30
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	200045c8 	.word	0x200045c8

08005ca8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08c      	sub	sp, #48	@ 0x30
 8005cac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005cae:	4b58      	ldr	r3, [pc, #352]	@ (8005e10 <SEGGER_SYSVIEW_Start+0x168>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005cb8:	f04f 0120 	mov.w	r1, #32
 8005cbc:	f381 8811 	msr	BASEPRI, r1
 8005cc0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005cc2:	4b53      	ldr	r3, [pc, #332]	@ (8005e10 <SEGGER_SYSVIEW_Start+0x168>)
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	220a      	movs	r2, #10
 8005cc8:	4952      	ldr	r1, [pc, #328]	@ (8005e14 <SEGGER_SYSVIEW_Start+0x16c>)
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fa fa88 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005cd6:	200a      	movs	r0, #10
 8005cd8:	f7ff ff32 	bl	8005b40 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce0:	f04f 0120 	mov.w	r1, #32
 8005ce4:	f381 8811 	msr	BASEPRI, r1
 8005ce8:	60bb      	str	r3, [r7, #8]
 8005cea:	484b      	ldr	r0, [pc, #300]	@ (8005e18 <SEGGER_SYSVIEW_Start+0x170>)
 8005cec:	f7ff fc79 	bl	80055e2 <_PreparePacket>
 8005cf0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cfa:	4b45      	ldr	r3, [pc, #276]	@ (8005e10 <SEGGER_SYSVIEW_Start+0x168>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d00:	e00b      	b.n	8005d1a <SEGGER_SYSVIEW_Start+0x72>
 8005d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d08:	1c59      	adds	r1, r3, #1
 8005d0a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d16:	09db      	lsrs	r3, r3, #7
 8005d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d1e:	d8f0      	bhi.n	8005d02 <SEGGER_SYSVIEW_Start+0x5a>
 8005d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d34:	4b36      	ldr	r3, [pc, #216]	@ (8005e10 <SEGGER_SYSVIEW_Start+0x168>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	623b      	str	r3, [r7, #32]
 8005d3a:	e00b      	b.n	8005d54 <SEGGER_SYSVIEW_Start+0xac>
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	1c59      	adds	r1, r3, #1
 8005d44:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	09db      	lsrs	r3, r3, #7
 8005d52:	623b      	str	r3, [r7, #32]
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d58:	d8f0      	bhi.n	8005d3c <SEGGER_SYSVIEW_Start+0x94>
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	4b28      	ldr	r3, [pc, #160]	@ (8005e10 <SEGGER_SYSVIEW_Start+0x168>)
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	61bb      	str	r3, [r7, #24]
 8005d74:	e00b      	b.n	8005d8e <SEGGER_SYSVIEW_Start+0xe6>
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	1c59      	adds	r1, r3, #1
 8005d7e:	61f9      	str	r1, [r7, #28]
 8005d80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	09db      	lsrs	r3, r3, #7
 8005d8c:	61bb      	str	r3, [r7, #24]
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d92:	d8f0      	bhi.n	8005d76 <SEGGER_SYSVIEW_Start+0xce>
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	61fa      	str	r2, [r7, #28]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	2300      	movs	r3, #0
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	e00b      	b.n	8005dc6 <SEGGER_SYSVIEW_Start+0x11e>
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	1c59      	adds	r1, r3, #1
 8005db6:	6179      	str	r1, [r7, #20]
 8005db8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	09db      	lsrs	r3, r3, #7
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dca:	d8f0      	bhi.n	8005dae <SEGGER_SYSVIEW_Start+0x106>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	617a      	str	r2, [r7, #20]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ddc:	2218      	movs	r2, #24
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff fceb 	bl	80057bc <_SendPacket>
      RECORD_END();
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005dec:	4b08      	ldr	r3, [pc, #32]	@ (8005e10 <SEGGER_SYSVIEW_Start+0x168>)
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005df4:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <SEGGER_SYSVIEW_Start+0x168>)
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005dfa:	f000 f9eb 	bl	80061d4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005dfe:	f000 f9b1 	bl	8006164 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005e02:	f000 fd21 	bl	8006848 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005e06:	bf00      	nop
 8005e08:	3730      	adds	r7, #48	@ 0x30
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20004598 	.word	0x20004598
 8005e14:	08006b70 	.word	0x08006b70
 8005e18:	200045c8 	.word	0x200045c8

08005e1c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e22:	f3ef 8311 	mrs	r3, BASEPRI
 8005e26:	f04f 0120 	mov.w	r1, #32
 8005e2a:	f381 8811 	msr	BASEPRI, r1
 8005e2e:	607b      	str	r3, [r7, #4]
 8005e30:	480b      	ldr	r0, [pc, #44]	@ (8005e60 <SEGGER_SYSVIEW_Stop+0x44>)
 8005e32:	f7ff fbd6 	bl	80055e2 <_PreparePacket>
 8005e36:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005e38:	4b0a      	ldr	r3, [pc, #40]	@ (8005e64 <SEGGER_SYSVIEW_Stop+0x48>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005e40:	220b      	movs	r2, #11
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6838      	ldr	r0, [r7, #0]
 8005e46:	f7ff fcb9 	bl	80057bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005e4a:	4b06      	ldr	r3, [pc, #24]	@ (8005e64 <SEGGER_SYSVIEW_Stop+0x48>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f383 8811 	msr	BASEPRI, r3
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	200045c8 	.word	0x200045c8
 8005e64:	20004598 	.word	0x20004598

08005e68 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08c      	sub	sp, #48	@ 0x30
 8005e6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e72:	f04f 0120 	mov.w	r1, #32
 8005e76:	f381 8811 	msr	BASEPRI, r1
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	4845      	ldr	r0, [pc, #276]	@ (8005f94 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005e7e:	f7ff fbb0 	bl	80055e2 <_PreparePacket>
 8005e82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e8c:	4b42      	ldr	r3, [pc, #264]	@ (8005f98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e92:	e00b      	b.n	8005eac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	1c59      	adds	r1, r3, #1
 8005e9c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005e9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea8:	09db      	lsrs	r3, r3, #7
 8005eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eae:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eb0:	d8f0      	bhi.n	8005e94 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ec6:	4b34      	ldr	r3, [pc, #208]	@ (8005f98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	623b      	str	r3, [r7, #32]
 8005ecc:	e00b      	b.n	8005ee6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	1c59      	adds	r1, r3, #1
 8005ed6:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ed8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	09db      	lsrs	r3, r3, #7
 8005ee4:	623b      	str	r3, [r7, #32]
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eea:	d8f0      	bhi.n	8005ece <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ef2:	6a3a      	ldr	r2, [r7, #32]
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	4b25      	ldr	r3, [pc, #148]	@ (8005f98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	e00b      	b.n	8005f20 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	1c59      	adds	r1, r3, #1
 8005f10:	61f9      	str	r1, [r7, #28]
 8005f12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	09db      	lsrs	r3, r3, #7
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f24:	d8f0      	bhi.n	8005f08 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	61fa      	str	r2, [r7, #28]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	613b      	str	r3, [r7, #16]
 8005f3e:	e00b      	b.n	8005f58 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	6179      	str	r1, [r7, #20]
 8005f4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	09db      	lsrs	r3, r3, #7
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f5c:	d8f0      	bhi.n	8005f40 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	617a      	str	r2, [r7, #20]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005f6e:	2218      	movs	r2, #24
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	68b8      	ldr	r0, [r7, #8]
 8005f74:	f7ff fc22 	bl	80057bc <_SendPacket>
  RECORD_END();
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005f7e:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005f86:	4b04      	ldr	r3, [pc, #16]	@ (8005f98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8a:	4798      	blx	r3
  }
}
 8005f8c:	bf00      	nop
 8005f8e:	3730      	adds	r7, #48	@ 0x30
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	200045c8 	.word	0x200045c8
 8005f98:	20004598 	.word	0x20004598

08005f9c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b092      	sub	sp, #72	@ 0x48
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa8:	f04f 0120 	mov.w	r1, #32
 8005fac:	f381 8811 	msr	BASEPRI, r1
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	486a      	ldr	r0, [pc, #424]	@ (800615c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005fb4:	f7ff fb15 	bl	80055e2 <_PreparePacket>
 8005fb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b66      	ldr	r3, [pc, #408]	@ (8006160 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fce:	e00b      	b.n	8005fe8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fd6:	1c59      	adds	r1, r3, #1
 8005fd8:	6479      	str	r1, [r7, #68]	@ 0x44
 8005fda:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fe4:	09db      	lsrs	r3, r3, #7
 8005fe6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fea:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fec:	d8f0      	bhi.n	8005fd0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ff4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ffc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006008:	e00b      	b.n	8006022 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600c:	b2da      	uxtb	r2, r3
 800600e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006010:	1c59      	adds	r1, r3, #1
 8006012:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006014:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601e:	09db      	lsrs	r3, r3, #7
 8006020:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006024:	2b7f      	cmp	r3, #127	@ 0x7f
 8006026:	d8f0      	bhi.n	800600a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800602e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006036:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	4619      	mov	r1, r3
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff fa95 	bl	8005570 <_EncodeStr>
 8006046:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006048:	2209      	movs	r2, #9
 800604a:	68f9      	ldr	r1, [r7, #12]
 800604c:	6938      	ldr	r0, [r7, #16]
 800604e:	f7ff fbb5 	bl	80057bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	637b      	str	r3, [r7, #52]	@ 0x34
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4b40      	ldr	r3, [pc, #256]	@ (8006160 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	633b      	str	r3, [r7, #48]	@ 0x30
 8006066:	e00b      	b.n	8006080 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	b2da      	uxtb	r2, r3
 800606c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606e:	1c59      	adds	r1, r3, #1
 8006070:	6379      	str	r1, [r7, #52]	@ 0x34
 8006072:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	09db      	lsrs	r3, r3, #7
 800607e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006082:	2b7f      	cmp	r3, #127	@ 0x7f
 8006084:	d8f0      	bhi.n	8006068 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	637a      	str	r2, [r7, #52]	@ 0x34
 800608c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006094:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060a0:	e00b      	b.n	80060ba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80060a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a8:	1c59      	adds	r1, r3, #1
 80060aa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80060ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b6:	09db      	lsrs	r3, r3, #7
 80060b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80060be:	d8f0      	bhi.n	80060a2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80060c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	623b      	str	r3, [r7, #32]
 80060da:	e00b      	b.n	80060f4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80060e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	09db      	lsrs	r3, r3, #7
 80060f2:	623b      	str	r3, [r7, #32]
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80060f8:	d8f0      	bhi.n	80060dc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	61fb      	str	r3, [r7, #28]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	61bb      	str	r3, [r7, #24]
 8006114:	e00b      	b.n	800612e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	b2da      	uxtb	r2, r3
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	1c59      	adds	r1, r3, #1
 800611e:	61f9      	str	r1, [r7, #28]
 8006120:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	09db      	lsrs	r3, r3, #7
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	2b7f      	cmp	r3, #127	@ 0x7f
 8006132:	d8f0      	bhi.n	8006116 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	61fa      	str	r2, [r7, #28]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006144:	2215      	movs	r2, #21
 8006146:	68f9      	ldr	r1, [r7, #12]
 8006148:	6938      	ldr	r0, [r7, #16]
 800614a:	f7ff fb37 	bl	80057bc <_SendPacket>
  RECORD_END();
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f383 8811 	msr	BASEPRI, r3
}
 8006154:	bf00      	nop
 8006156:	3748      	adds	r7, #72	@ 0x48
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	200045c8 	.word	0x200045c8
 8006160:	20004598 	.word	0x20004598

08006164 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006168:	4b07      	ldr	r3, [pc, #28]	@ (8006188 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006170:	4b05      	ldr	r3, [pc, #20]	@ (8006188 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800617a:	4b03      	ldr	r3, [pc, #12]	@ (8006188 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	4798      	blx	r3
  }
}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20004598 	.word	0x20004598

0800618c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006194:	f3ef 8311 	mrs	r3, BASEPRI
 8006198:	f04f 0120 	mov.w	r1, #32
 800619c:	f381 8811 	msr	BASEPRI, r1
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	480b      	ldr	r0, [pc, #44]	@ (80061d0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80061a4:	f7ff fa1d 	bl	80055e2 <_PreparePacket>
 80061a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061aa:	2280      	movs	r2, #128	@ 0x80
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	6938      	ldr	r0, [r7, #16]
 80061b0:	f7ff f9de 	bl	8005570 <_EncodeStr>
 80061b4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80061b6:	220e      	movs	r2, #14
 80061b8:	68f9      	ldr	r1, [r7, #12]
 80061ba:	6938      	ldr	r0, [r7, #16]
 80061bc:	f7ff fafe 	bl	80057bc <_SendPacket>
  RECORD_END();
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f383 8811 	msr	BASEPRI, r3
}
 80061c6:	bf00      	nop
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	200045c8 	.word	0x200045c8

080061d4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80061da:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01a      	beq.n	8006218 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80061e2:	4b13      	ldr	r3, [pc, #76]	@ (8006230 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d015      	beq.n	8006218 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80061ec:	4b10      	ldr	r3, [pc, #64]	@ (8006230 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4798      	blx	r3
 80061f4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80061f8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80061fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	000a      	movs	r2, r1
 8006208:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800620a:	4613      	mov	r3, r2
 800620c:	461a      	mov	r2, r3
 800620e:	4621      	mov	r1, r4
 8006210:	200d      	movs	r0, #13
 8006212:	f7ff fcef 	bl	8005bf4 <SEGGER_SYSVIEW_RecordU32x2>
 8006216:	e006      	b.n	8006226 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006218:	4b06      	ldr	r3, [pc, #24]	@ (8006234 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4619      	mov	r1, r3
 800621e:	200c      	movs	r0, #12
 8006220:	f7ff fcac 	bl	8005b7c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	bd90      	pop	{r4, r7, pc}
 800622e:	bf00      	nop
 8006230:	20004598 	.word	0x20004598
 8006234:	e0001004 	.word	0xe0001004

08006238 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800623e:	f3ef 8311 	mrs	r3, BASEPRI
 8006242:	f04f 0120 	mov.w	r1, #32
 8006246:	f381 8811 	msr	BASEPRI, r1
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	4819      	ldr	r0, [pc, #100]	@ (80062b4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800624e:	f7ff f9c8 	bl	80055e2 <_PreparePacket>
 8006252:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006258:	4b17      	ldr	r3, [pc, #92]	@ (80062b8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006260:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	e00b      	b.n	8006284 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	1c59      	adds	r1, r3, #1
 8006274:	6179      	str	r1, [r7, #20]
 8006276:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	09db      	lsrs	r3, r3, #7
 8006282:	613b      	str	r3, [r7, #16]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	2b7f      	cmp	r3, #127	@ 0x7f
 8006288:	d8f0      	bhi.n	800626c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	617a      	str	r2, [r7, #20]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800629a:	2202      	movs	r2, #2
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	68b8      	ldr	r0, [r7, #8]
 80062a0:	f7ff fa8c 	bl	80057bc <_SendPacket>
  RECORD_END();
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f383 8811 	msr	BASEPRI, r3
}
 80062aa:	bf00      	nop
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	200045c8 	.word	0x200045c8
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062c2:	f3ef 8311 	mrs	r3, BASEPRI
 80062c6:	f04f 0120 	mov.w	r1, #32
 80062ca:	f381 8811 	msr	BASEPRI, r1
 80062ce:	607b      	str	r3, [r7, #4]
 80062d0:	4807      	ldr	r0, [pc, #28]	@ (80062f0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80062d2:	f7ff f986 	bl	80055e2 <_PreparePacket>
 80062d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80062d8:	2203      	movs	r2, #3
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6838      	ldr	r0, [r7, #0]
 80062de:	f7ff fa6d 	bl	80057bc <_SendPacket>
  RECORD_END();
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f383 8811 	msr	BASEPRI, r3
}
 80062e8:	bf00      	nop
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	200045c8 	.word	0x200045c8

080062f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062fa:	f3ef 8311 	mrs	r3, BASEPRI
 80062fe:	f04f 0120 	mov.w	r1, #32
 8006302:	f381 8811 	msr	BASEPRI, r1
 8006306:	607b      	str	r3, [r7, #4]
 8006308:	4807      	ldr	r0, [pc, #28]	@ (8006328 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800630a:	f7ff f96a 	bl	80055e2 <_PreparePacket>
 800630e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006310:	2212      	movs	r2, #18
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6838      	ldr	r0, [r7, #0]
 8006316:	f7ff fa51 	bl	80057bc <_SendPacket>
  RECORD_END();
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f383 8811 	msr	BASEPRI, r3
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	200045c8 	.word	0x200045c8

0800632c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006334:	f3ef 8311 	mrs	r3, BASEPRI
 8006338:	f04f 0120 	mov.w	r1, #32
 800633c:	f381 8811 	msr	BASEPRI, r1
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	4817      	ldr	r0, [pc, #92]	@ (80063a0 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006344:	f7ff f94d 	bl	80055e2 <_PreparePacket>
 8006348:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e00b      	b.n	8006370 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	1c59      	adds	r1, r3, #1
 8006360:	61f9      	str	r1, [r7, #28]
 8006362:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	09db      	lsrs	r3, r3, #7
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	2b7f      	cmp	r3, #127	@ 0x7f
 8006374:	d8f0      	bhi.n	8006358 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	61fa      	str	r2, [r7, #28]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006386:	221c      	movs	r2, #28
 8006388:	68f9      	ldr	r1, [r7, #12]
 800638a:	6938      	ldr	r0, [r7, #16]
 800638c:	f7ff fa16 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f383 8811 	msr	BASEPRI, r3
}
 8006396:	bf00      	nop
 8006398:	3720      	adds	r7, #32
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	200045c8 	.word	0x200045c8

080063a4 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08a      	sub	sp, #40	@ 0x28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80063ae:	f3ef 8311 	mrs	r3, BASEPRI
 80063b2:	f04f 0120 	mov.w	r1, #32
 80063b6:	f381 8811 	msr	BASEPRI, r1
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	4824      	ldr	r0, [pc, #144]	@ (8006450 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80063be:	f7ff f910 	bl	80055e2 <_PreparePacket>
 80063c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	623b      	str	r3, [r7, #32]
 80063d0:	e00b      	b.n	80063ea <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	1c59      	adds	r1, r3, #1
 80063da:	6279      	str	r1, [r7, #36]	@ 0x24
 80063dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	09db      	lsrs	r3, r3, #7
 80063e8:	623b      	str	r3, [r7, #32]
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80063ee:	d8f0      	bhi.n	80063d2 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80063f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80063f6:	6a3a      	ldr	r2, [r7, #32]
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	e00b      	b.n	8006422 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	1c59      	adds	r1, r3, #1
 8006412:	61f9      	str	r1, [r7, #28]
 8006414:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	09db      	lsrs	r3, r3, #7
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b7f      	cmp	r3, #127	@ 0x7f
 8006426:	d8f0      	bhi.n	800640a <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	61fa      	str	r2, [r7, #28]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006438:	221c      	movs	r2, #28
 800643a:	68f9      	ldr	r1, [r7, #12]
 800643c:	6938      	ldr	r0, [r7, #16]
 800643e:	f7ff f9bd 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f383 8811 	msr	BASEPRI, r3
}
 8006448:	bf00      	nop
 800644a:	3728      	adds	r7, #40	@ 0x28
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200045c8 	.word	0x200045c8

08006454 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800645a:	f3ef 8311 	mrs	r3, BASEPRI
 800645e:	f04f 0120 	mov.w	r1, #32
 8006462:	f381 8811 	msr	BASEPRI, r1
 8006466:	607b      	str	r3, [r7, #4]
 8006468:	4807      	ldr	r0, [pc, #28]	@ (8006488 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800646a:	f7ff f8ba 	bl	80055e2 <_PreparePacket>
 800646e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006470:	2211      	movs	r2, #17
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6838      	ldr	r0, [r7, #0]
 8006476:	f7ff f9a1 	bl	80057bc <_SendPacket>
  RECORD_END();
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f383 8811 	msr	BASEPRI, r3
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	200045c8 	.word	0x200045c8

0800648c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006494:	f3ef 8311 	mrs	r3, BASEPRI
 8006498:	f04f 0120 	mov.w	r1, #32
 800649c:	f381 8811 	msr	BASEPRI, r1
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	4819      	ldr	r0, [pc, #100]	@ (8006508 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80064a4:	f7ff f89d 	bl	80055e2 <_PreparePacket>
 80064a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80064ae:	4b17      	ldr	r3, [pc, #92]	@ (800650c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	e00b      	b.n	80064da <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	1c59      	adds	r1, r3, #1
 80064ca:	61f9      	str	r1, [r7, #28]
 80064cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	09db      	lsrs	r3, r3, #7
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80064de:	d8f0      	bhi.n	80064c2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	61fa      	str	r2, [r7, #28]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80064f0:	2208      	movs	r2, #8
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	6938      	ldr	r0, [r7, #16]
 80064f6:	f7ff f961 	bl	80057bc <_SendPacket>
  RECORD_END();
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f383 8811 	msr	BASEPRI, r3
}
 8006500:	bf00      	nop
 8006502:	3720      	adds	r7, #32
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	200045c8 	.word	0x200045c8
 800650c:	20004598 	.word	0x20004598

08006510 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006518:	f3ef 8311 	mrs	r3, BASEPRI
 800651c:	f04f 0120 	mov.w	r1, #32
 8006520:	f381 8811 	msr	BASEPRI, r1
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	4819      	ldr	r0, [pc, #100]	@ (800658c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006528:	f7ff f85b 	bl	80055e2 <_PreparePacket>
 800652c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006532:	4b17      	ldr	r3, [pc, #92]	@ (8006590 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	e00b      	b.n	800655e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	1c59      	adds	r1, r3, #1
 800654e:	61f9      	str	r1, [r7, #28]
 8006550:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	09db      	lsrs	r3, r3, #7
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b7f      	cmp	r3, #127	@ 0x7f
 8006562:	d8f0      	bhi.n	8006546 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	61fa      	str	r2, [r7, #28]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006574:	2204      	movs	r2, #4
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	6938      	ldr	r0, [r7, #16]
 800657a:	f7ff f91f 	bl	80057bc <_SendPacket>
  RECORD_END();
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f383 8811 	msr	BASEPRI, r3
}
 8006584:	bf00      	nop
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	200045c8 	.word	0x200045c8
 8006590:	20004598 	.word	0x20004598

08006594 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800659c:	f3ef 8311 	mrs	r3, BASEPRI
 80065a0:	f04f 0120 	mov.w	r1, #32
 80065a4:	f381 8811 	msr	BASEPRI, r1
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	4819      	ldr	r0, [pc, #100]	@ (8006610 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80065ac:	f7ff f819 	bl	80055e2 <_PreparePacket>
 80065b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065b6:	4b17      	ldr	r3, [pc, #92]	@ (8006614 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	61bb      	str	r3, [r7, #24]
 80065c8:	e00b      	b.n	80065e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	1c59      	adds	r1, r3, #1
 80065d2:	61f9      	str	r1, [r7, #28]
 80065d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	09db      	lsrs	r3, r3, #7
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80065e6:	d8f0      	bhi.n	80065ca <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	61fa      	str	r2, [r7, #28]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80065f8:	2206      	movs	r2, #6
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	6938      	ldr	r0, [r7, #16]
 80065fe:	f7ff f8dd 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f383 8811 	msr	BASEPRI, r3
}
 8006608:	bf00      	nop
 800660a:	3720      	adds	r7, #32
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	200045c8 	.word	0x200045c8
 8006614:	20004598 	.word	0x20004598

08006618 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	@ 0x28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006622:	f3ef 8311 	mrs	r3, BASEPRI
 8006626:	f04f 0120 	mov.w	r1, #32
 800662a:	f381 8811 	msr	BASEPRI, r1
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	4827      	ldr	r0, [pc, #156]	@ (80066d0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006632:	f7fe ffd6 	bl	80055e2 <_PreparePacket>
 8006636:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800663c:	4b25      	ldr	r3, [pc, #148]	@ (80066d4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	627b      	str	r3, [r7, #36]	@ 0x24
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	623b      	str	r3, [r7, #32]
 800664e:	e00b      	b.n	8006668 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	b2da      	uxtb	r2, r3
 8006654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006656:	1c59      	adds	r1, r3, #1
 8006658:	6279      	str	r1, [r7, #36]	@ 0x24
 800665a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	09db      	lsrs	r3, r3, #7
 8006666:	623b      	str	r3, [r7, #32]
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	2b7f      	cmp	r3, #127	@ 0x7f
 800666c:	d8f0      	bhi.n	8006650 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	627a      	str	r2, [r7, #36]	@ 0x24
 8006674:	6a3a      	ldr	r2, [r7, #32]
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	e00b      	b.n	80066a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	1c59      	adds	r1, r3, #1
 8006690:	61f9      	str	r1, [r7, #28]
 8006692:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	09db      	lsrs	r3, r3, #7
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80066a4:	d8f0      	bhi.n	8006688 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	61fa      	str	r2, [r7, #28]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80066b6:	2207      	movs	r2, #7
 80066b8:	68f9      	ldr	r1, [r7, #12]
 80066ba:	6938      	ldr	r0, [r7, #16]
 80066bc:	f7ff f87e 	bl	80057bc <_SendPacket>
  RECORD_END();
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f383 8811 	msr	BASEPRI, r3
}
 80066c6:	bf00      	nop
 80066c8:	3728      	adds	r7, #40	@ 0x28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	200045c8 	.word	0x200045c8
 80066d4:	20004598 	.word	0x20004598

080066d8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80066e0:	4b04      	ldr	r3, [pc, #16]	@ (80066f4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	1ad3      	subs	r3, r2, r3
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	20004598 	.word	0x20004598

080066f8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08c      	sub	sp, #48	@ 0x30
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006702:	4b40      	ldr	r3, [pc, #256]	@ (8006804 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d077      	beq.n	80067fa <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800670a:	4b3e      	ldr	r3, [pc, #248]	@ (8006804 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006710:	2300      	movs	r3, #0
 8006712:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006714:	e008      	b.n	8006728 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006724:	3301      	adds	r3, #1
 8006726:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800672c:	429a      	cmp	r2, r3
 800672e:	d3f2      	bcc.n	8006716 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006730:	e000      	b.n	8006734 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006732:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006736:	2b00      	cmp	r3, #0
 8006738:	d055      	beq.n	80067e6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800673a:	f3ef 8311 	mrs	r3, BASEPRI
 800673e:	f04f 0120 	mov.w	r1, #32
 8006742:	f381 8811 	msr	BASEPRI, r1
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	482f      	ldr	r0, [pc, #188]	@ (8006808 <SEGGER_SYSVIEW_SendModule+0x110>)
 800674a:	f7fe ff4a 	bl	80055e2 <_PreparePacket>
 800674e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	627b      	str	r3, [r7, #36]	@ 0x24
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	623b      	str	r3, [r7, #32]
 800675c:	e00b      	b.n	8006776 <SEGGER_SYSVIEW_SendModule+0x7e>
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	b2da      	uxtb	r2, r3
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	1c59      	adds	r1, r3, #1
 8006766:	6279      	str	r1, [r7, #36]	@ 0x24
 8006768:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	09db      	lsrs	r3, r3, #7
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	2b7f      	cmp	r3, #127	@ 0x7f
 800677a:	d8f0      	bhi.n	800675e <SEGGER_SYSVIEW_SendModule+0x66>
 800677c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	627a      	str	r2, [r7, #36]	@ 0x24
 8006782:	6a3a      	ldr	r2, [r7, #32]
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	e00b      	b.n	80067b0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	b2da      	uxtb	r2, r3
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	61f9      	str	r1, [r7, #28]
 80067a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	09db      	lsrs	r3, r3, #7
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80067b4:	d8f0      	bhi.n	8006798 <SEGGER_SYSVIEW_SendModule+0xa0>
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	61fa      	str	r2, [r7, #28]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2280      	movs	r2, #128	@ 0x80
 80067cc:	4619      	mov	r1, r3
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7fe fece 	bl	8005570 <_EncodeStr>
 80067d4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80067d6:	2216      	movs	r2, #22
 80067d8:	68f9      	ldr	r1, [r7, #12]
 80067da:	6938      	ldr	r0, [r7, #16]
 80067dc:	f7fe ffee 	bl	80057bc <_SendPacket>
      RECORD_END();
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80067e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d006      	beq.n	80067fa <SEGGER_SYSVIEW_SendModule+0x102>
 80067ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80067f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4798      	blx	r3
    }
  }
}
 80067fa:	bf00      	nop
 80067fc:	3730      	adds	r7, #48	@ 0x30
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	200045c0 	.word	0x200045c0
 8006808:	200045c8 	.word	0x200045c8

0800680c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006812:	4b0c      	ldr	r3, [pc, #48]	@ (8006844 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00f      	beq.n	800683a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800681a:	4b0a      	ldr	r3, [pc, #40]	@ (8006844 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f2      	bne.n	8006820 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800683a:	bf00      	nop
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	200045c0 	.word	0x200045c0

08006848 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800684e:	f3ef 8311 	mrs	r3, BASEPRI
 8006852:	f04f 0120 	mov.w	r1, #32
 8006856:	f381 8811 	msr	BASEPRI, r1
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	4817      	ldr	r0, [pc, #92]	@ (80068bc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800685e:	f7fe fec0 	bl	80055e2 <_PreparePacket>
 8006862:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	4b14      	ldr	r3, [pc, #80]	@ (80068c0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	e00b      	b.n	800688c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	b2da      	uxtb	r2, r3
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	1c59      	adds	r1, r3, #1
 800687c:	6179      	str	r1, [r7, #20]
 800687e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006882:	b2d2      	uxtb	r2, r2
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	09db      	lsrs	r3, r3, #7
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006890:	d8f0      	bhi.n	8006874 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	617a      	str	r2, [r7, #20]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80068a2:	221b      	movs	r2, #27
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	68b8      	ldr	r0, [r7, #8]
 80068a8:	f7fe ff88 	bl	80057bc <_SendPacket>
  RECORD_END();
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f383 8811 	msr	BASEPRI, r3
}
 80068b2:	bf00      	nop
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	200045c8 	.word	0x200045c8
 80068c0:	200045c4 	.word	0x200045c4

080068c4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08a      	sub	sp, #40	@ 0x28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068cc:	f3ef 8311 	mrs	r3, BASEPRI
 80068d0:	f04f 0120 	mov.w	r1, #32
 80068d4:	f381 8811 	msr	BASEPRI, r1
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	4827      	ldr	r0, [pc, #156]	@ (8006978 <SEGGER_SYSVIEW_Warn+0xb4>)
 80068dc:	f7fe fe81 	bl	80055e2 <_PreparePacket>
 80068e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068e2:	2280      	movs	r2, #128	@ 0x80
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	6938      	ldr	r0, [r7, #16]
 80068e8:	f7fe fe42 	bl	8005570 <_EncodeStr>
 80068ec:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068f2:	2301      	movs	r3, #1
 80068f4:	623b      	str	r3, [r7, #32]
 80068f6:	e00b      	b.n	8006910 <SEGGER_SYSVIEW_Warn+0x4c>
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	1c59      	adds	r1, r3, #1
 8006900:	6279      	str	r1, [r7, #36]	@ 0x24
 8006902:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	09db      	lsrs	r3, r3, #7
 800690e:	623b      	str	r3, [r7, #32]
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	2b7f      	cmp	r3, #127	@ 0x7f
 8006914:	d8f0      	bhi.n	80068f8 <SEGGER_SYSVIEW_Warn+0x34>
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	627a      	str	r2, [r7, #36]	@ 0x24
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	61fb      	str	r3, [r7, #28]
 800692a:	2300      	movs	r3, #0
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	e00b      	b.n	8006948 <SEGGER_SYSVIEW_Warn+0x84>
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	b2da      	uxtb	r2, r3
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	1c59      	adds	r1, r3, #1
 8006938:	61f9      	str	r1, [r7, #28]
 800693a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	09db      	lsrs	r3, r3, #7
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	2b7f      	cmp	r3, #127	@ 0x7f
 800694c:	d8f0      	bhi.n	8006930 <SEGGER_SYSVIEW_Warn+0x6c>
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	61fa      	str	r2, [r7, #28]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800695e:	221a      	movs	r2, #26
 8006960:	68f9      	ldr	r1, [r7, #12]
 8006962:	6938      	ldr	r0, [r7, #16]
 8006964:	f7fe ff2a 	bl	80057bc <_SendPacket>
  RECORD_END();
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f383 8811 	msr	BASEPRI, r3
}
 800696e:	bf00      	nop
 8006970:	3728      	adds	r7, #40	@ 0x28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	200045c8 	.word	0x200045c8

0800697c <memcmp>:
 800697c:	b510      	push	{r4, lr}
 800697e:	3901      	subs	r1, #1
 8006980:	4402      	add	r2, r0
 8006982:	4290      	cmp	r0, r2
 8006984:	d101      	bne.n	800698a <memcmp+0xe>
 8006986:	2000      	movs	r0, #0
 8006988:	e005      	b.n	8006996 <memcmp+0x1a>
 800698a:	7803      	ldrb	r3, [r0, #0]
 800698c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006990:	42a3      	cmp	r3, r4
 8006992:	d001      	beq.n	8006998 <memcmp+0x1c>
 8006994:	1b18      	subs	r0, r3, r4
 8006996:	bd10      	pop	{r4, pc}
 8006998:	3001      	adds	r0, #1
 800699a:	e7f2      	b.n	8006982 <memcmp+0x6>

0800699c <memset>:
 800699c:	4402      	add	r2, r0
 800699e:	4603      	mov	r3, r0
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d100      	bne.n	80069a6 <memset+0xa>
 80069a4:	4770      	bx	lr
 80069a6:	f803 1b01 	strb.w	r1, [r3], #1
 80069aa:	e7f9      	b.n	80069a0 <memset+0x4>

080069ac <__libc_init_array>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	4d0d      	ldr	r5, [pc, #52]	@ (80069e4 <__libc_init_array+0x38>)
 80069b0:	4c0d      	ldr	r4, [pc, #52]	@ (80069e8 <__libc_init_array+0x3c>)
 80069b2:	1b64      	subs	r4, r4, r5
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	2600      	movs	r6, #0
 80069b8:	42a6      	cmp	r6, r4
 80069ba:	d109      	bne.n	80069d0 <__libc_init_array+0x24>
 80069bc:	4d0b      	ldr	r5, [pc, #44]	@ (80069ec <__libc_init_array+0x40>)
 80069be:	4c0c      	ldr	r4, [pc, #48]	@ (80069f0 <__libc_init_array+0x44>)
 80069c0:	f000 f826 	bl	8006a10 <_init>
 80069c4:	1b64      	subs	r4, r4, r5
 80069c6:	10a4      	asrs	r4, r4, #2
 80069c8:	2600      	movs	r6, #0
 80069ca:	42a6      	cmp	r6, r4
 80069cc:	d105      	bne.n	80069da <__libc_init_array+0x2e>
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d4:	4798      	blx	r3
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7ee      	b.n	80069b8 <__libc_init_array+0xc>
 80069da:	f855 3b04 	ldr.w	r3, [r5], #4
 80069de:	4798      	blx	r3
 80069e0:	3601      	adds	r6, #1
 80069e2:	e7f2      	b.n	80069ca <__libc_init_array+0x1e>
 80069e4:	08006b84 	.word	0x08006b84
 80069e8:	08006b84 	.word	0x08006b84
 80069ec:	08006b84 	.word	0x08006b84
 80069f0:	08006b88 	.word	0x08006b88

080069f4 <memcpy>:
 80069f4:	440a      	add	r2, r1
 80069f6:	4291      	cmp	r1, r2
 80069f8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80069fc:	d100      	bne.n	8006a00 <memcpy+0xc>
 80069fe:	4770      	bx	lr
 8006a00:	b510      	push	{r4, lr}
 8006a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a0a:	4291      	cmp	r1, r2
 8006a0c:	d1f9      	bne.n	8006a02 <memcpy+0xe>
 8006a0e:	bd10      	pop	{r4, pc}

08006a10 <_init>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	bf00      	nop
 8006a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a16:	bc08      	pop	{r3}
 8006a18:	469e      	mov	lr, r3
 8006a1a:	4770      	bx	lr

08006a1c <_fini>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr
