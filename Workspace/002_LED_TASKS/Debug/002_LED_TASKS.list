
002_LED_TASKS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006270  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006410  08006410  00007410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006578  08006578  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006578  08006578  00007578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006580  08006580  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006580  08006580  00007580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006584  08006584  00007584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006588  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004694  20000010  08006598  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200046a4  08006598  000086a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001530e  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000301a  00000000  00000000  0001d34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00020368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f4b  00000000  00000000  00021740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0a4  00000000  00000000  0002268b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ff2  00000000  00000000  0003c72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac000  00000000  00000000  00051721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd721  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005364  00000000  00000000  000fd764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d6  00000000  00000000  00102ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063f8 	.word	0x080063f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080063f8 	.word	0x080063f8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200030d0 	.word	0x200030d0

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000288:	f000 b988 	b.w	800059c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	468e      	mov	lr, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	4688      	mov	r8, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d962      	bls.n	8000380 <__udivmoddi4+0xdc>
 80002ba:	fab2 f682 	clz	r6, r2
 80002be:	b14e      	cbz	r6, 80002d4 <__udivmoddi4+0x30>
 80002c0:	f1c6 0320 	rsb	r3, r6, #32
 80002c4:	fa01 f806 	lsl.w	r8, r1, r6
 80002c8:	fa20 f303 	lsr.w	r3, r0, r3
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	ea43 0808 	orr.w	r8, r3, r8
 80002d2:	40b4      	lsls	r4, r6
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f fc87 	uxth.w	ip, r7
 80002dc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f8:	f080 80ea 	bcs.w	80004d0 <__udivmoddi4+0x22c>
 80002fc:	429a      	cmp	r2, r3
 80002fe:	f240 80e7 	bls.w	80004d0 <__udivmoddi4+0x22c>
 8000302:	3902      	subs	r1, #2
 8000304:	443b      	add	r3, r7
 8000306:	1a9a      	subs	r2, r3, r2
 8000308:	b2a3      	uxth	r3, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb00 fc0c 	mul.w	ip, r0, ip
 800031a:	459c      	cmp	ip, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x8e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000324:	f080 80d6 	bcs.w	80004d4 <__udivmoddi4+0x230>
 8000328:	459c      	cmp	ip, r3
 800032a:	f240 80d3 	bls.w	80004d4 <__udivmoddi4+0x230>
 800032e:	443b      	add	r3, r7
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000336:	eba3 030c 	sub.w	r3, r3, ip
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa2>
 800033e:	40f3      	lsrs	r3, r6
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xb6>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb0>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa2>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x14c>
 8000362:	4573      	cmp	r3, lr
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xc8>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 8105 	bhi.w	8000576 <__udivmoddi4+0x2d2>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000372:	2001      	movs	r0, #1
 8000374:	4690      	mov	r8, r2
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e5      	beq.n	8000346 <__udivmoddi4+0xa2>
 800037a:	e9c5 4800 	strd	r4, r8, [r5]
 800037e:	e7e2      	b.n	8000346 <__udivmoddi4+0xa2>
 8000380:	2a00      	cmp	r2, #0
 8000382:	f000 8090 	beq.w	80004a6 <__udivmoddi4+0x202>
 8000386:	fab2 f682 	clz	r6, r2
 800038a:	2e00      	cmp	r6, #0
 800038c:	f040 80a4 	bne.w	80004d8 <__udivmoddi4+0x234>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	0c03      	lsrs	r3, r0, #16
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	b280      	uxth	r0, r0
 800039a:	b2bc      	uxth	r4, r7
 800039c:	2101      	movs	r1, #1
 800039e:	fbb2 fcfe 	udiv	ip, r2, lr
 80003a2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003aa:	fb04 f20c 	mul.w	r2, r4, ip
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d907      	bls.n	80003c2 <__udivmoddi4+0x11e>
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b8:	d202      	bcs.n	80003c0 <__udivmoddi4+0x11c>
 80003ba:	429a      	cmp	r2, r3
 80003bc:	f200 80e0 	bhi.w	8000580 <__udivmoddi4+0x2dc>
 80003c0:	46c4      	mov	ip, r8
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003cc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003d0:	fb02 f404 	mul.w	r4, r2, r4
 80003d4:	429c      	cmp	r4, r3
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x144>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x142>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f200 80ca 	bhi.w	800057a <__udivmoddi4+0x2d6>
 80003e6:	4602      	mov	r2, r0
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x98>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa0e f401 	lsl.w	r4, lr, r1
 8000400:	fa20 f306 	lsr.w	r3, r0, r6
 8000404:	fa2e fe06 	lsr.w	lr, lr, r6
 8000408:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800040c:	4323      	orrs	r3, r4
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	fa1f fc87 	uxth.w	ip, r7
 8000416:	fbbe f0f9 	udiv	r0, lr, r9
 800041a:	0c1c      	lsrs	r4, r3, #16
 800041c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000420:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000424:	fb00 fe0c 	mul.w	lr, r0, ip
 8000428:	45a6      	cmp	lr, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d909      	bls.n	8000444 <__udivmoddi4+0x1a0>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000436:	f080 809c 	bcs.w	8000572 <__udivmoddi4+0x2ce>
 800043a:	45a6      	cmp	lr, r4
 800043c:	f240 8099 	bls.w	8000572 <__udivmoddi4+0x2ce>
 8000440:	3802      	subs	r0, #2
 8000442:	443c      	add	r4, r7
 8000444:	eba4 040e 	sub.w	r4, r4, lr
 8000448:	fa1f fe83 	uxth.w	lr, r3
 800044c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000450:	fb09 4413 	mls	r4, r9, r3, r4
 8000454:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000458:	fb03 fc0c 	mul.w	ip, r3, ip
 800045c:	45a4      	cmp	ip, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x1ce>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000466:	f080 8082 	bcs.w	800056e <__udivmoddi4+0x2ca>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d97f      	bls.n	800056e <__udivmoddi4+0x2ca>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000476:	eba4 040c 	sub.w	r4, r4, ip
 800047a:	fba0 ec02 	umull	lr, ip, r0, r2
 800047e:	4564      	cmp	r4, ip
 8000480:	4673      	mov	r3, lr
 8000482:	46e1      	mov	r9, ip
 8000484:	d362      	bcc.n	800054c <__udivmoddi4+0x2a8>
 8000486:	d05f      	beq.n	8000548 <__udivmoddi4+0x2a4>
 8000488:	b15d      	cbz	r5, 80004a2 <__udivmoddi4+0x1fe>
 800048a:	ebb8 0203 	subs.w	r2, r8, r3
 800048e:	eb64 0409 	sbc.w	r4, r4, r9
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	fa22 f301 	lsr.w	r3, r2, r1
 800049a:	431e      	orrs	r6, r3
 800049c:	40cc      	lsrs	r4, r1
 800049e:	e9c5 6400 	strd	r6, r4, [r5]
 80004a2:	2100      	movs	r1, #0
 80004a4:	e74f      	b.n	8000346 <__udivmoddi4+0xa2>
 80004a6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004aa:	0c01      	lsrs	r1, r0, #16
 80004ac:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004b0:	b280      	uxth	r0, r0
 80004b2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b6:	463b      	mov	r3, r7
 80004b8:	4638      	mov	r0, r7
 80004ba:	463c      	mov	r4, r7
 80004bc:	46b8      	mov	r8, r7
 80004be:	46be      	mov	lr, r7
 80004c0:	2620      	movs	r6, #32
 80004c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c6:	eba2 0208 	sub.w	r2, r2, r8
 80004ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ce:	e766      	b.n	800039e <__udivmoddi4+0xfa>
 80004d0:	4601      	mov	r1, r0
 80004d2:	e718      	b.n	8000306 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e72c      	b.n	8000332 <__udivmoddi4+0x8e>
 80004d8:	f1c6 0220 	rsb	r2, r6, #32
 80004dc:	fa2e f302 	lsr.w	r3, lr, r2
 80004e0:	40b7      	lsls	r7, r6
 80004e2:	40b1      	lsls	r1, r6
 80004e4:	fa20 f202 	lsr.w	r2, r0, r2
 80004e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004ec:	430a      	orrs	r2, r1
 80004ee:	fbb3 f8fe 	udiv	r8, r3, lr
 80004f2:	b2bc      	uxth	r4, r7
 80004f4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f8:	0c11      	lsrs	r1, r2, #16
 80004fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fe:	fb08 f904 	mul.w	r9, r8, r4
 8000502:	40b0      	lsls	r0, r6
 8000504:	4589      	cmp	r9, r1
 8000506:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800050a:	b280      	uxth	r0, r0
 800050c:	d93e      	bls.n	800058c <__udivmoddi4+0x2e8>
 800050e:	1879      	adds	r1, r7, r1
 8000510:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000514:	d201      	bcs.n	800051a <__udivmoddi4+0x276>
 8000516:	4589      	cmp	r9, r1
 8000518:	d81f      	bhi.n	800055a <__udivmoddi4+0x2b6>
 800051a:	eba1 0109 	sub.w	r1, r1, r9
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	fb0e 1119 	mls	r1, lr, r9, r1
 800052a:	b292      	uxth	r2, r2
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	4542      	cmp	r2, r8
 8000532:	d229      	bcs.n	8000588 <__udivmoddi4+0x2e4>
 8000534:	18ba      	adds	r2, r7, r2
 8000536:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800053a:	d2c4      	bcs.n	80004c6 <__udivmoddi4+0x222>
 800053c:	4542      	cmp	r2, r8
 800053e:	d2c2      	bcs.n	80004c6 <__udivmoddi4+0x222>
 8000540:	f1a9 0102 	sub.w	r1, r9, #2
 8000544:	443a      	add	r2, r7
 8000546:	e7be      	b.n	80004c6 <__udivmoddi4+0x222>
 8000548:	45f0      	cmp	r8, lr
 800054a:	d29d      	bcs.n	8000488 <__udivmoddi4+0x1e4>
 800054c:	ebbe 0302 	subs.w	r3, lr, r2
 8000550:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000554:	3801      	subs	r0, #1
 8000556:	46e1      	mov	r9, ip
 8000558:	e796      	b.n	8000488 <__udivmoddi4+0x1e4>
 800055a:	eba7 0909 	sub.w	r9, r7, r9
 800055e:	4449      	add	r1, r9
 8000560:	f1a8 0c02 	sub.w	ip, r8, #2
 8000564:	fbb1 f9fe 	udiv	r9, r1, lr
 8000568:	fb09 f804 	mul.w	r8, r9, r4
 800056c:	e7db      	b.n	8000526 <__udivmoddi4+0x282>
 800056e:	4673      	mov	r3, lr
 8000570:	e77f      	b.n	8000472 <__udivmoddi4+0x1ce>
 8000572:	4650      	mov	r0, sl
 8000574:	e766      	b.n	8000444 <__udivmoddi4+0x1a0>
 8000576:	4608      	mov	r0, r1
 8000578:	e6fd      	b.n	8000376 <__udivmoddi4+0xd2>
 800057a:	443b      	add	r3, r7
 800057c:	3a02      	subs	r2, #2
 800057e:	e733      	b.n	80003e8 <__udivmoddi4+0x144>
 8000580:	f1ac 0c02 	sub.w	ip, ip, #2
 8000584:	443b      	add	r3, r7
 8000586:	e71c      	b.n	80003c2 <__udivmoddi4+0x11e>
 8000588:	4649      	mov	r1, r9
 800058a:	e79c      	b.n	80004c6 <__udivmoddi4+0x222>
 800058c:	eba1 0109 	sub.w	r1, r1, r9
 8000590:	46c4      	mov	ip, r8
 8000592:	fbb1 f9fe 	udiv	r9, r1, lr
 8000596:	fb09 f804 	mul.w	r8, r9, r4
 800059a:	e7c4      	b.n	8000526 <__udivmoddi4+0x282>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	@ 0x28
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 faa9 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f877 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8d3 	bl	8000758 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //enable the cycle count//
  DWT_CTRL |= (1 << 0);
 80005b2:	4b30      	ldr	r3, [pc, #192]	@ (8000674 <main+0xd4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000674 <main+0xd4>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6013      	str	r3, [r2, #0]

//  SEGGER_UART_init(50000);

  //calling the APIs to start recording
  SEGGER_SYSVIEW_Conf();
 80005be:	f004 fa4f 	bl	8004a60 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005c2:	f005 f8df 	bl	8005784 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led1_handler, "Task-1", configMINIMAL_STACK_SIZE * 2, "Executing task-1", 2, &task1_handler);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2302      	movs	r3, #2
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <main+0xd8>)
 80005d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005d6:	4929      	ldr	r1, [pc, #164]	@ (800067c <main+0xdc>)
 80005d8:	4829      	ldr	r0, [pc, #164]	@ (8000680 <main+0xe0>)
 80005da:	f002 f8ab 	bl	8002734 <xTaskCreate>
 80005de:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00b      	beq.n	80005fe <main+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <main+0x5a>

  status = xTaskCreate(led2_handler, "Task-2", configMINIMAL_STACK_SIZE * 2, "Executing task-2", 2, &task2_handler);
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	2302      	movs	r3, #2
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <main+0xe4>)
 800060a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800060e:	491e      	ldr	r1, [pc, #120]	@ (8000688 <main+0xe8>)
 8000610:	481e      	ldr	r0, [pc, #120]	@ (800068c <main+0xec>)
 8000612:	f002 f88f 	bl	8002734 <xTaskCreate>
 8000616:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d00b      	beq.n	8000636 <main+0x96>
    __asm volatile
 800061e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000622:	f383 8811 	msr	BASEPRI, r3
 8000626:	f3bf 8f6f 	isb	sy
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	617b      	str	r3, [r7, #20]
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	e7fd      	b.n	8000632 <main+0x92>

  status = xTaskCreate(led3_handler, "Task-3", configMINIMAL_STACK_SIZE * 2, "Executing task-3", 2, &task3_handler);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2302      	movs	r3, #2
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <main+0xf0>)
 8000640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000644:	4913      	ldr	r1, [pc, #76]	@ (8000694 <main+0xf4>)
 8000646:	4814      	ldr	r0, [pc, #80]	@ (8000698 <main+0xf8>)
 8000648:	f002 f874 	bl	8002734 <xTaskCreate>
 800064c:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00b      	beq.n	800066c <main+0xcc>
    __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	613b      	str	r3, [r7, #16]
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <main+0xc8>

  //Starting the FreeRTOS Scheduler//
  vTaskStartScheduler();
 800066c:	f002 fa26 	bl	8002abc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <main+0xd0>
 8000674:	e0001000 	.word	0xe0001000
 8000678:	08006410 	.word	0x08006410
 800067c:	08006424 	.word	0x08006424
 8000680:	08000811 	.word	0x08000811
 8000684:	0800642c 	.word	0x0800642c
 8000688:	08006440 	.word	0x08006440
 800068c:	08000849 	.word	0x08000849
 8000690:	08006448 	.word	0x08006448
 8000694:	0800645c 	.word	0x0800645c
 8000698:	08000881 	.word	0x08000881

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 fe6a 	bl	8006384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <SystemClock_Config+0xb4>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SystemClock_Config+0xb4>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xb4>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <SystemClock_Config+0xb8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000754 <SystemClock_Config+0xb8>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <SystemClock_Config+0xb8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fcf5 	bl	80010fc <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000718:	f000 f8dd 	bl	80008d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f000 ff58 	bl	80015ec <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000742:	f000 f8c8 	bl	80008d6 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	@ 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a1c      	ldr	r2, [pc, #112]	@ (8000804 <MX_GPIO_Init+0xac>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_GPIO_Init+0xac>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ac:	4816      	ldr	r0, [pc, #88]	@ (8000808 <MX_GPIO_Init+0xb0>)
 80007ae:	f000 fc71 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80007b8:	4814      	ldr	r0, [pc, #80]	@ (800080c <MX_GPIO_Init+0xb4>)
 80007ba:	f000 fc6b 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	@ (8000808 <MX_GPIO_Init+0xb0>)
 80007d8:	f000 fad8 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007dc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_GPIO_Init+0xb4>)
 80007f6:	f000 fac9 	bl	8000d8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020800 	.word	0x40020800
 800080c:	40020400 	.word	0x40020400

08000810 <led1_handler>:

/* USER CODE BEGIN 4 */
static void led1_handler(void* parameters)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4808      	ldr	r0, [pc, #32]	@ (8000840 <led1_handler+0x30>)
 800081e:	f000 fc52 	bl	80010c6 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);//keep the processor engaged
 8000822:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000826:	f000 f9ab 	bl	8000b80 <HAL_Delay>
		taskYIELD();
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <led1_handler+0x34>)
 800082c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	f3bf 8f4f 	dsb	sy
 8000836:	f3bf 8f6f 	isb	sy
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800083a:	bf00      	nop
 800083c:	e7ec      	b.n	8000818 <led1_handler+0x8>
 800083e:	bf00      	nop
 8000840:	40020800 	.word	0x40020800
 8000844:	e000ed04 	.word	0xe000ed04

08000848 <led2_handler>:

	}
}
static void led2_handler(void* parameters)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000850:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000854:	4808      	ldr	r0, [pc, #32]	@ (8000878 <led2_handler+0x30>)
 8000856:	f000 fc36 	bl	80010c6 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 800085a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800085e:	f000 f98f 	bl	8000b80 <HAL_Delay>
		taskYIELD();
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <led2_handler+0x34>)
 8000864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	f3bf 8f4f 	dsb	sy
 800086e:	f3bf 8f6f 	isb	sy
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000872:	bf00      	nop
 8000874:	e7ec      	b.n	8000850 <led2_handler+0x8>
 8000876:	bf00      	nop
 8000878:	40020400 	.word	0x40020400
 800087c:	e000ed04 	.word	0xe000ed04

08000880 <led3_handler>:
	}
}
static void led3_handler(void* parameters)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000888:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800088c:	4808      	ldr	r0, [pc, #32]	@ (80008b0 <led3_handler+0x30>)
 800088e:	f000 fc1a 	bl	80010c6 <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000892:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000896:	f000 f973 	bl	8000b80 <HAL_Delay>
		taskYIELD();
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <led3_handler+0x34>)
 800089c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	f3bf 8f4f 	dsb	sy
 80008a6:	f3bf 8f6f 	isb	sy
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80008aa:	bf00      	nop
 80008ac:	e7ec      	b.n	8000888 <led3_handler+0x8>
 80008ae:	bf00      	nop
 80008b0:	40020400 	.word	0x40020400
 80008b4:	e000ed04 	.word	0xe000ed04

080008b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c8:	d101      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008ca:	f000 f939 	bl	8000b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008da:	b672      	cpsid	i
}
 80008dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008de:	bf00      	nop
 80008e0:	e7fd      	b.n	80008de <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000922:	f003 fc8f 	bl	8004244 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	@ 0x38
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4b34      	ldr	r3, [pc, #208]	@ (8000a1c <HAL_InitTick+0xe8>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094c:	4a33      	ldr	r2, [pc, #204]	@ (8000a1c <HAL_InitTick+0xe8>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6413      	str	r3, [r2, #64]	@ 0x40
 8000954:	4b31      	ldr	r3, [pc, #196]	@ (8000a1c <HAL_InitTick+0xe8>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000960:	f107 0210 	add.w	r2, r7, #16
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f001 f80a 	bl	8001984 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000970:	6a3b      	ldr	r3, [r7, #32]
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000976:	2b00      	cmp	r3, #0
 8000978:	d103      	bne.n	8000982 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800097a:	f000 ffef 	bl	800195c <HAL_RCC_GetPCLK1Freq>
 800097e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000980:	e004      	b.n	800098c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000982:	f000 ffeb 	bl	800195c <HAL_RCC_GetPCLK1Freq>
 8000986:	4603      	mov	r3, r0
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800098c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800098e:	4a24      	ldr	r2, [pc, #144]	@ (8000a20 <HAL_InitTick+0xec>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	0c9b      	lsrs	r3, r3, #18
 8000996:	3b01      	subs	r3, #1
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800099a:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <HAL_InitTick+0xf0>)
 800099c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <HAL_InitTick+0xf0>)
 80009a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009a8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000a24 <HAL_InitTick+0xf0>)
 80009ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ae:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <HAL_InitTick+0xf0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <HAL_InitTick+0xf0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009bc:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_InitTick+0xf0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80009c2:	4818      	ldr	r0, [pc, #96]	@ (8000a24 <HAL_InitTick+0xf0>)
 80009c4:	f001 f810 	bl	80019e8 <HAL_TIM_Base_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d11b      	bne.n	8000a0e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80009d6:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <HAL_InitTick+0xf0>)
 80009d8:	f001 f860 	bl	8001a9c <HAL_TIM_Base_Start_IT>
 80009dc:	4603      	mov	r3, r0
 80009de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d111      	bne.n	8000a0e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009ea:	201c      	movs	r0, #28
 80009ec:	f000 f9c0 	bl	8000d70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b0f      	cmp	r3, #15
 80009f4:	d808      	bhi.n	8000a08 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80009f6:	2200      	movs	r2, #0
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	201c      	movs	r0, #28
 80009fc:	f000 f99c 	bl	8000d38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a00:	4a09      	ldr	r2, [pc, #36]	@ (8000a28 <HAL_InitTick+0xf4>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e002      	b.n	8000a0e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3738      	adds	r7, #56	@ 0x38
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	431bde83 	.word	0x431bde83
 8000a24:	2000002c 	.word	0x2000002c
 8000a28:	20000004 	.word	0x20000004

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <NMI_Handler+0x4>

08000a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <MemManage_Handler+0x4>

08000a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  HAL_IncTick();
 8000a66:	f000 f86b 	bl	8000b40 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <TIM2_IRQHandler+0x10>)
 8000a76:	f001 f873 	bl	8001b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000002c 	.word	0x2000002c

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aac:	f7ff ffea 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	@ (8000ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8000aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8000af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f005 fc5d 	bl	8006394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fd61 	bl	80005a0 <main>
  bx  lr    
 8000ade:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aec:	08006588 	.word	0x08006588
  ldr r2, =_sbss
 8000af0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000af4:	200046a4 	.word	0x200046a4

08000af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b00:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <HAL_Init+0x40>)
 8000b06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <HAL_Init+0x40>)
 8000b12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	@ (8000b3c <HAL_Init+0x40>)
 8000b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f8fc 	bl	8000d22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f7ff ff02 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fed8 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023c00 	.word	0x40023c00

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000074 	.word	0x20000074

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000074 	.word	0x20000074

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff ffee 	bl	8000b68 <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <HAL_Delay+0x44>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ffde 	bl	8000b68 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	@ (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	@ (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	@ (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	@ (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	@ 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	@ 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ff4c 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4a:	f7ff ff61 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	6978      	ldr	r0, [r7, #20]
 8000d56:	f7ff ffb1 	bl	8000cbc <NVIC_EncodePriority>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff80 	bl	8000c68 <__NVIC_SetPriority>
}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff54 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	e159      	b.n	800105c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	f040 8148 	bne.w	8001056 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d005      	beq.n	8000dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d130      	bne.n	8000e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	f003 0201 	and.w	r2, r3, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d017      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d123      	bne.n	8000ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	691a      	ldr	r2, [r3, #16]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	69b9      	ldr	r1, [r7, #24]
 8000ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0203 	and.w	r2, r3, #3
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80a2 	beq.w	8001056 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b57      	ldr	r3, [pc, #348]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4a56      	ldr	r2, [pc, #344]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f22:	4b54      	ldr	r3, [pc, #336]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2e:	4a52      	ldr	r2, [pc, #328]	@ (8001078 <HAL_GPIO_Init+0x2ec>)
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	220f      	movs	r2, #15
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a49      	ldr	r2, [pc, #292]	@ (800107c <HAL_GPIO_Init+0x2f0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_GPIO_Init+0x202>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a48      	ldr	r2, [pc, #288]	@ (8001080 <HAL_GPIO_Init+0x2f4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x1fe>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a47      	ldr	r2, [pc, #284]	@ (8001084 <HAL_GPIO_Init+0x2f8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a46      	ldr	r2, [pc, #280]	@ (8001088 <HAL_GPIO_Init+0x2fc>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x1f6>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a45      	ldr	r2, [pc, #276]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x1f2>
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	e008      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	f002 0203 	and.w	r2, r2, #3
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa0:	4935      	ldr	r1, [pc, #212]	@ (8001078 <HAL_GPIO_Init+0x2ec>)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fae:	4b38      	ldr	r3, [pc, #224]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ffc:	4a24      	ldr	r2, [pc, #144]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001002:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001026:	4a1a      	ldr	r2, [pc, #104]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <HAL_GPIO_Init+0x304>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001050:	4a0f      	ldr	r2, [pc, #60]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	f67f aea2 	bls.w	8000da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40013800 	.word	0x40013800
 800107c:	40020000 	.word	0x40020000
 8001080:	40020400 	.word	0x40020400
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40021000 	.word	0x40021000
 8001090:	40013c00 	.word	0x40013c00

08001094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	807b      	strh	r3, [r7, #2]
 80010a0:	4613      	mov	r3, r2
 80010a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a4:	787b      	ldrb	r3, [r7, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b0:	e003      	b.n	80010ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010b2:	887b      	ldrh	r3, [r7, #2]
 80010b4:	041a      	lsls	r2, r3, #16
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	619a      	str	r2, [r3, #24]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	460b      	mov	r3, r1
 80010d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d8:	887a      	ldrh	r2, [r7, #2]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4013      	ands	r3, r2
 80010de:	041a      	lsls	r2, r3, #16
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	400b      	ands	r3, r1
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e267      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d075      	beq.n	8001206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800111a:	4b88      	ldr	r3, [pc, #544]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b04      	cmp	r3, #4
 8001124:	d00c      	beq.n	8001140 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b85      	ldr	r3, [pc, #532]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800112e:	2b08      	cmp	r3, #8
 8001130:	d112      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001132:	4b82      	ldr	r3, [pc, #520]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800113e:	d10b      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	4b7e      	ldr	r3, [pc, #504]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d05b      	beq.n	8001204 <HAL_RCC_OscConfig+0x108>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d157      	bne.n	8001204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e242      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001160:	d106      	bne.n	8001170 <HAL_RCC_OscConfig+0x74>
 8001162:	4b76      	ldr	r3, [pc, #472]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a75      	ldr	r2, [pc, #468]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x98>
 800117a:	4b70      	ldr	r3, [pc, #448]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6f      	ldr	r2, [pc, #444]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b6d      	ldr	r3, [pc, #436]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6c      	ldr	r2, [pc, #432]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001194:	4b69      	ldr	r3, [pc, #420]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a68      	ldr	r2, [pc, #416]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b66      	ldr	r3, [pc, #408]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a65      	ldr	r2, [pc, #404]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcd8 	bl	8000b68 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcd4 	bl	8000b68 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	@ 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e207      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b5b      	ldr	r3, [pc, #364]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xc0>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fcc4 	bl	8000b68 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fcc0 	bl	8000b68 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	@ 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1f3      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b51      	ldr	r3, [pc, #324]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0xe8>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001212:	4b4a      	ldr	r3, [pc, #296]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b47      	ldr	r3, [pc, #284]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122a:	4b44      	ldr	r3, [pc, #272]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b41      	ldr	r3, [pc, #260]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1c7      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b3b      	ldr	r3, [pc, #236]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4937      	ldr	r1, [pc, #220]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e03a      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b34      	ldr	r3, [pc, #208]	@ (8001340 <HAL_RCC_OscConfig+0x244>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fc79 	bl	8000b68 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fc75 	bl	8000b68 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1a8      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b2b      	ldr	r3, [pc, #172]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b28      	ldr	r3, [pc, #160]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4925      	ldr	r1, [pc, #148]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <HAL_RCC_OscConfig+0x244>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc58 	bl	8000b68 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc54 	bl	8000b68 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e187      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d036      	beq.n	8001354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d016      	beq.n	800131c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_RCC_OscConfig+0x248>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fc38 	bl	8000b68 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fc34 	bl	8000b68 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e167      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x200>
 800131a:	e01b      	b.n	8001354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_RCC_OscConfig+0x248>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001322:	f7ff fc21 	bl	8000b68 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	e00e      	b.n	8001348 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132a:	f7ff fc1d 	bl	8000b68 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d907      	bls.n	8001348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e150      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
 800133c:	40023800 	.word	0x40023800
 8001340:	42470000 	.word	0x42470000
 8001344:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	4b88      	ldr	r3, [pc, #544]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800134a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1ea      	bne.n	800132a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8097 	beq.w	8001490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001366:	4b81      	ldr	r3, [pc, #516]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10f      	bne.n	8001392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b7d      	ldr	r3, [pc, #500]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	4a7c      	ldr	r2, [pc, #496]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	@ 0x40
 8001382:	4b7a      	ldr	r3, [pc, #488]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001392:	4b77      	ldr	r3, [pc, #476]	@ (8001570 <HAL_RCC_OscConfig+0x474>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d118      	bne.n	80013d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139e:	4b74      	ldr	r3, [pc, #464]	@ (8001570 <HAL_RCC_OscConfig+0x474>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a73      	ldr	r2, [pc, #460]	@ (8001570 <HAL_RCC_OscConfig+0x474>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fbdd 	bl	8000b68 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b2:	f7ff fbd9 	bl	8000b68 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e10c      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001570 <HAL_RCC_OscConfig+0x474>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2ea>
 80013d8:	4b64      	ldr	r3, [pc, #400]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013dc:	4a63      	ldr	r2, [pc, #396]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e4:	e01c      	b.n	8001420 <HAL_RCC_OscConfig+0x324>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x30c>
 80013ee:	4b5f      	ldr	r3, [pc, #380]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f2:	4a5e      	ldr	r2, [pc, #376]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013fa:	4b5c      	ldr	r3, [pc, #368]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fe:	4a5b      	ldr	r2, [pc, #364]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6713      	str	r3, [r2, #112]	@ 0x70
 8001406:	e00b      	b.n	8001420 <HAL_RCC_OscConfig+0x324>
 8001408:	4b58      	ldr	r3, [pc, #352]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140c:	4a57      	ldr	r2, [pc, #348]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	6713      	str	r3, [r2, #112]	@ 0x70
 8001414:	4b55      	ldr	r3, [pc, #340]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001418:	4a54      	ldr	r2, [pc, #336]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800141a:	f023 0304 	bic.w	r3, r3, #4
 800141e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d015      	beq.n	8001454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fb9e 	bl	8000b68 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142e:	e00a      	b.n	8001446 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001430:	f7ff fb9a 	bl	8000b68 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e0cb      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	4b49      	ldr	r3, [pc, #292]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0ee      	beq.n	8001430 <HAL_RCC_OscConfig+0x334>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001454:	f7ff fb88 	bl	8000b68 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff fb84 	bl	8000b68 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e0b5      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	4b3e      	ldr	r3, [pc, #248]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ee      	bne.n	800145c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d105      	bne.n	8001490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001484:	4b39      	ldr	r3, [pc, #228]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	4a38      	ldr	r2, [pc, #224]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800148a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800148e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a1 	beq.w	80015dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149a:	4b34      	ldr	r3, [pc, #208]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d05c      	beq.n	8001560 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d141      	bne.n	8001532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ae:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <HAL_RCC_OscConfig+0x478>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fb58 	bl	8000b68 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff fb54 	bl	8000b68 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e087      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ce:	4b27      	ldr	r3, [pc, #156]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	3b01      	subs	r3, #1
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	491b      	ldr	r1, [pc, #108]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <HAL_RCC_OscConfig+0x478>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fb2d 	bl	8000b68 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fb29 	bl	8000b68 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e05c      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x416>
 8001530:	e054      	b.n	80015dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <HAL_RCC_OscConfig+0x478>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb16 	bl	8000b68 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fb12 	bl	8000b68 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e045      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x444>
 800155e:	e03d      	b.n	80015dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e038      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000
 8001574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <HAL_RCC_OscConfig+0x4ec>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d028      	beq.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d121      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d11a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015a8:	4013      	ands	r3, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d111      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015be:	085b      	lsrs	r3, r3, #1
 80015c0:	3b01      	subs	r3, #1
 80015c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0cc      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b68      	ldr	r3, [pc, #416]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d90c      	bls.n	8001628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b65      	ldr	r3, [pc, #404]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b63      	ldr	r3, [pc, #396]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b8      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4b59      	ldr	r3, [pc, #356]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a58      	ldr	r2, [pc, #352]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800164a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001658:	4b53      	ldr	r3, [pc, #332]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b50      	ldr	r3, [pc, #320]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	494d      	ldr	r1, [pc, #308]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d044      	beq.n	800170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b47      	ldr	r3, [pc, #284]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b3f      	ldr	r3, [pc, #252]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	4b3b      	ldr	r3, [pc, #236]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e067      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4934      	ldr	r1, [pc, #208]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff fa44 	bl	8000b68 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff fa40 	bl	8000b68 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e04f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d20c      	bcs.n	8001734 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e032      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001740:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4916      	ldr	r1, [pc, #88]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175e:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	490e      	ldr	r1, [pc, #56]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001772:	f000 f821 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001776:	4602      	mov	r2, r0
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	490a      	ldr	r1, [pc, #40]	@ (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	5ccb      	ldrb	r3, [r1, r3]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	4a09      	ldr	r2, [pc, #36]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f8ce 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00
 80017a8:	40023800 	.word	0x40023800
 80017ac:	08006534 	.word	0x08006534
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017bc:	b090      	sub	sp, #64	@ 0x40
 80017be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d0:	4b59      	ldr	r3, [pc, #356]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d00d      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x40>
 80017dc:	2b08      	cmp	r3, #8
 80017de:	f200 80a1 	bhi.w	8001924 <HAL_RCC_GetSysClockFreq+0x16c>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x34>
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ea:	e09b      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b53      	ldr	r3, [pc, #332]	@ (800193c <HAL_RCC_GetSysClockFreq+0x184>)
 80017ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017f0:	e09b      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f2:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x188>)
 80017f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017f6:	e098      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001800:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	4b4d      	ldr	r3, [pc, #308]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d028      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180e:	4b4a      	ldr	r3, [pc, #296]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	099b      	lsrs	r3, r3, #6
 8001814:	2200      	movs	r2, #0
 8001816:	623b      	str	r3, [r7, #32]
 8001818:	627a      	str	r2, [r7, #36]	@ 0x24
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001820:	2100      	movs	r1, #0
 8001822:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x188>)
 8001824:	fb03 f201 	mul.w	r2, r3, r1
 8001828:	2300      	movs	r3, #0
 800182a:	fb00 f303 	mul.w	r3, r0, r3
 800182e:	4413      	add	r3, r2
 8001830:	4a43      	ldr	r2, [pc, #268]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x188>)
 8001832:	fba0 1202 	umull	r1, r2, r0, r2
 8001836:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001838:	460a      	mov	r2, r1
 800183a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800183c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800183e:	4413      	add	r3, r2
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001844:	2200      	movs	r2, #0
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	61fa      	str	r2, [r7, #28]
 800184a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800184e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001852:	f7fe fd0f 	bl	8000274 <__aeabi_uldivmod>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4613      	mov	r3, r2
 800185c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800185e:	e053      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001860:	4b35      	ldr	r3, [pc, #212]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	2200      	movs	r2, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	617a      	str	r2, [r7, #20]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001872:	f04f 0b00 	mov.w	fp, #0
 8001876:	4652      	mov	r2, sl
 8001878:	465b      	mov	r3, fp
 800187a:	f04f 0000 	mov.w	r0, #0
 800187e:	f04f 0100 	mov.w	r1, #0
 8001882:	0159      	lsls	r1, r3, #5
 8001884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001888:	0150      	lsls	r0, r2, #5
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	ebb2 080a 	subs.w	r8, r2, sl
 8001892:	eb63 090b 	sbc.w	r9, r3, fp
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018aa:	ebb2 0408 	subs.w	r4, r2, r8
 80018ae:	eb63 0509 	sbc.w	r5, r3, r9
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	00eb      	lsls	r3, r5, #3
 80018bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c0:	00e2      	lsls	r2, r4, #3
 80018c2:	4614      	mov	r4, r2
 80018c4:	461d      	mov	r5, r3
 80018c6:	eb14 030a 	adds.w	r3, r4, sl
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	eb45 030b 	adc.w	r3, r5, fp
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018de:	4629      	mov	r1, r5
 80018e0:	028b      	lsls	r3, r1, #10
 80018e2:	4621      	mov	r1, r4
 80018e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e8:	4621      	mov	r1, r4
 80018ea:	028a      	lsls	r2, r1, #10
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f2:	2200      	movs	r2, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	60fa      	str	r2, [r7, #12]
 80018f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018fc:	f7fe fcba 	bl	8000274 <__aeabi_uldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4613      	mov	r3, r2
 8001906:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001908:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x180>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	0c1b      	lsrs	r3, r3, #16
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	3301      	adds	r3, #1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001918:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800191a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001922:	e002      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <HAL_RCC_GetSysClockFreq+0x184>)
 8001926:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800192c:	4618      	mov	r0, r3
 800192e:	3740      	adds	r7, #64	@ 0x40
 8001930:	46bd      	mov	sp, r7
 8001932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	00f42400 	.word	0x00f42400
 8001940:	017d7840 	.word	0x017d7840

08001944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001948:	4b03      	ldr	r3, [pc, #12]	@ (8001958 <HAL_RCC_GetHCLKFreq+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000000 	.word	0x20000000

0800195c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001960:	f7ff fff0 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 8001964:	4602      	mov	r2, r0
 8001966:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	0a9b      	lsrs	r3, r3, #10
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	4903      	ldr	r1, [pc, #12]	@ (8001980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	08006544 	.word	0x08006544

08001984 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	220f      	movs	r2, #15
 8001992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_RCC_GetClockConfig+0x5c>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0203 	and.w	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019a0:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <HAL_RCC_GetClockConfig+0x5c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <HAL_RCC_GetClockConfig+0x5c>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <HAL_RCC_GetClockConfig+0x5c>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	08db      	lsrs	r3, r3, #3
 80019be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019c6:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <HAL_RCC_GetClockConfig+0x60>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0207 	and.w	r2, r3, #7
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	601a      	str	r2, [r3, #0]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40023c00 	.word	0x40023c00

080019e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e041      	b.n	8001a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f839 	bl	8001a86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3304      	adds	r3, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f000 f9b2 	bl	8001d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d001      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e044      	b.n	8001b3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b4c <HAL_TIM_Base_Start_IT+0xb0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d018      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x6c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ade:	d013      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x6c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b50 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00e      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x6c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a19      	ldr	r2, [pc, #100]	@ (8001b54 <HAL_TIM_Base_Start_IT+0xb8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d009      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x6c>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a17      	ldr	r2, [pc, #92]	@ (8001b58 <HAL_TIM_Base_Start_IT+0xbc>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d004      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x6c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a16      	ldr	r2, [pc, #88]	@ (8001b5c <HAL_TIM_Base_Start_IT+0xc0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d111      	bne.n	8001b2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d010      	beq.n	8001b3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2a:	e007      	b.n	8001b3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	40000400 	.word	0x40000400
 8001b54:	40000800 	.word	0x40000800
 8001b58:	40000c00 	.word	0x40000c00
 8001b5c:	40014000 	.word	0x40014000

08001b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d020      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01b      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0202 	mvn.w	r2, #2
 8001b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8d2 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001bb0:	e005      	b.n	8001bbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8c4 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8d5 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d020      	beq.n	8001c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d01b      	beq.n	8001c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0204 	mvn.w	r2, #4
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2202      	movs	r2, #2
 8001be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8ac 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e005      	b.n	8001c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f89e 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f8af 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d020      	beq.n	8001c5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01b      	beq.n	8001c5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0208 	mvn.w	r2, #8
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2204      	movs	r2, #4
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f886 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f878 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f889 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d020      	beq.n	8001ca8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01b      	beq.n	8001ca8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0210 	mvn.w	r2, #16
 8001c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f860 	bl	8001d54 <HAL_TIM_IC_CaptureCallback>
 8001c94:	e005      	b.n	8001ca2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f852 	bl	8001d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f863 	bl	8001d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00c      	beq.n	8001ccc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0201 	mvn.w	r2, #1
 8001cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe fdf6 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00c      	beq.n	8001cf0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8e0 	bl	8001eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00c      	beq.n	8001d14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f834 	bl	8001d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00c      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0220 	mvn.w	r2, #32
 8001d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8b2 	bl	8001e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a37      	ldr	r2, [pc, #220]	@ (8001e80 <TIM_Base_SetConfig+0xf0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00f      	beq.n	8001dc8 <TIM_Base_SetConfig+0x38>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dae:	d00b      	beq.n	8001dc8 <TIM_Base_SetConfig+0x38>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a34      	ldr	r2, [pc, #208]	@ (8001e84 <TIM_Base_SetConfig+0xf4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d007      	beq.n	8001dc8 <TIM_Base_SetConfig+0x38>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a33      	ldr	r2, [pc, #204]	@ (8001e88 <TIM_Base_SetConfig+0xf8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d003      	beq.n	8001dc8 <TIM_Base_SetConfig+0x38>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a32      	ldr	r2, [pc, #200]	@ (8001e8c <TIM_Base_SetConfig+0xfc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d108      	bne.n	8001dda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a28      	ldr	r2, [pc, #160]	@ (8001e80 <TIM_Base_SetConfig+0xf0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01b      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de8:	d017      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a25      	ldr	r2, [pc, #148]	@ (8001e84 <TIM_Base_SetConfig+0xf4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a24      	ldr	r2, [pc, #144]	@ (8001e88 <TIM_Base_SetConfig+0xf8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00f      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a23      	ldr	r2, [pc, #140]	@ (8001e8c <TIM_Base_SetConfig+0xfc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00b      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a22      	ldr	r2, [pc, #136]	@ (8001e90 <TIM_Base_SetConfig+0x100>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <TIM_Base_SetConfig+0x104>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d003      	beq.n	8001e1a <TIM_Base_SetConfig+0x8a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a20      	ldr	r2, [pc, #128]	@ (8001e98 <TIM_Base_SetConfig+0x108>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d108      	bne.n	8001e2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e80 <TIM_Base_SetConfig+0xf0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d103      	bne.n	8001e5a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f043 0204 	orr.w	r2, r3, #4
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	601a      	str	r2, [r3, #0]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40010000 	.word	0x40010000
 8001e84:	40000400 	.word	0x40000400
 8001e88:	40000800 	.word	0x40000800
 8001e8c:	40000c00 	.word	0x40000c00
 8001e90:	40014000 	.word	0x40014000
 8001e94:	40014400 	.word	0x40014400
 8001e98:	40014800 	.word	0x40014800

08001e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f103 0208 	add.w	r2, r3, #8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ee0:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f103 0208 	add.w	r2, r3, #8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	611a      	str	r2, [r3, #16]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f103 0208 	add.w	r2, r3, #8
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	615a      	str	r2, [r3, #20]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8001efe:	f240 1019 	movw	r0, #281	@ 0x119
 8001f02:	f003 ff07 	bl	8005d14 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8001f1c:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001f20:	f003 fef8 	bl	8005d14 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f48:	bf08      	it	eq
 8001f4a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8001f4e:	d103      	bne.n	8001f58 <vListInsert+0x2c>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e010      	b.n	8001f7a <vListInsert+0x4e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3308      	adds	r3, #8
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e002      	b.n	8001f66 <vListInsert+0x3a>
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f72:	4290      	cmp	r0, r2
 8001f74:	eb71 0303 	sbcs.w	r3, r1, r3
 8001f78:	d2f2      	bcs.n	8001f60 <vListInsert+0x34>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	60da      	str	r2, [r3, #12]
    pxNewListItem->pxPrevious = pxIterator;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	60da      	str	r2, [r3, #12]
    pxIterator->pxNext = pxNewListItem;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	615a      	str	r2, [r3, #20]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8001fa6:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8001faa:	f003 feb3 	bl	8005d14 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68d2      	ldr	r2, [r2, #12]
 8001fcc:	60da      	str	r2, [r3, #12]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6892      	ldr	r2, [r2, #8]
 8001fd6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d103      	bne.n	8001fea <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	1e5a      	subs	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	f240 101d 	movw	r0, #285	@ 0x11d
 8002004:	f003 fec2 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800201e:	2301      	movs	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10b      	bne.n	8002044 <xQueueGenericReset+0x30>
    __asm volatile
 800202c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	60fb      	str	r3, [r7, #12]
}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d052      	beq.n	80020f0 <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    if( ( pxQueue != NULL ) &&
 800204e:	2b00      	cmp	r3, #0
 8002050:	d04e      	beq.n	80020f0 <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	2100      	movs	r1, #0
 800205c:	fba3 2302 	umull	r2, r3, r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d000      	beq.n	8002066 <xQueueGenericReset+0x52>
 8002064:	2101      	movs	r1, #1
 8002066:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002068:	2b00      	cmp	r3, #0
 800206a:	d141      	bne.n	80020f0 <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 800206c:	f002 f958 	bl	8004320 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002078:	6939      	ldr	r1, [r7, #16]
 800207a:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	441a      	add	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2200      	movs	r2, #0
 800208a:	641a      	str	r2, [r3, #64]	@ 0x40
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209c:	3b01      	subs	r3, #1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	441a      	add	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	22ff      	movs	r2, #255	@ 0xff
 80020b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxQueue->cTxLock = queueUNLOCKED;
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	22ff      	movs	r2, #255	@ 0xff
 80020b8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

            if( xNewQueue == pdFALSE )
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00f      	beq.n	80020ea <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	3310      	adds	r3, #16
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 f8ba 	bl	8003248 <xTaskRemoveFromEventList>
 80020d4:	e009      	b.n	80020ea <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	3310      	adds	r3, #16
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fef2 	bl	8001ec4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	3328      	adds	r3, #40	@ 0x28
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff feed 	bl	8001ec4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80020ea:	f002 f94b 	bl	8004384 <vPortExitCritical>
 80020ee:	e001      	b.n	80020f4 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10b      	bne.n	8002112 <xQueueGenericReset+0xfe>
    __asm volatile
 80020fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020fe:	f383 8811 	msr	BASEPRI, r3
 8002102:	f3bf 8f6f 	isb	sy
 8002106:	f3bf 8f4f 	dsb	sy
 800210a:	60bb      	str	r3, [r7, #8]
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	e7fd      	b.n	800210e <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	4619      	mov	r1, r3
 8002116:	2096      	movs	r0, #150	@ 0x96
 8002118:	f003 fe38 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800211c:	697b      	ldr	r3, [r7, #20]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8002126:	b580      	push	{r7, lr}
 8002128:	b08c      	sub	sp, #48	@ 0x30
 800212a:	af02      	add	r7, sp, #8
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10b      	bne.n	8002156 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 800213e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002142:	f383 8811 	msr	BASEPRI, r3
 8002146:	f3bf 8f6f 	isb	sy
 800214a:	f3bf 8f4f 	dsb	sy
 800214e:	623b      	str	r3, [r7, #32]
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	e7fd      	b.n	8002152 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d031      	beq.n	80021c0 <xQueueGenericCreateStatic+0x9a>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d02e      	beq.n	80021c0 <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d028      	beq.n	80021c0 <xQueueGenericCreateStatic+0x9a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d122      	bne.n	80021c0 <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800217a:	2350      	movs	r3, #80	@ 0x50
 800217c:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b50      	cmp	r3, #80	@ 0x50
 8002182:	d00b      	beq.n	800219c <xQueueGenericCreateStatic+0x76>
    __asm volatile
 8002184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	61fb      	str	r3, [r7, #28]
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 800219c:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021aa:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4613      	mov	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f81e 	bl	80021fa <prvInitialiseNewQueue>
 80021be:	e00e      	b.n	80021de <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10b      	bne.n	80021de <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 80021c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	61bb      	str	r3, [r7, #24]
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	e7fd      	b.n	80021da <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 ff6d 	bl	80060c0 <SEGGER_SYSVIEW_ShrinkId>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4619      	mov	r1, r3
 80021ea:	2097      	movs	r0, #151	@ 0x97
 80021ec:	f003 fdce 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80021f2:	4618      	mov	r0, r3
 80021f4:	3728      	adds	r7, #40	@ 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e002      	b.n	800221c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44
    pxNewQueue->uxItemSize = uxItemSize;
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	649a      	str	r2, [r3, #72]	@ 0x48
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002228:	2101      	movs	r1, #1
 800222a:	69b8      	ldr	r0, [r7, #24]
 800222c:	f7ff fef2 	bl	8002014 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08e      	sub	sp, #56	@ 0x38
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	e9c7 2300 	strd	r2, r3, [r7]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002246:	2300      	movs	r3, #0
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800224e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <xQueueReceive+0x34>
    __asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <xQueueReceive+0x30>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d103      	bne.n	800227a <xQueueReceive+0x42>
 8002272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <xQueueReceive+0x46>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <xQueueReceive+0x48>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <xQueueReceive+0x64>
    __asm volatile
 8002284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002296:	bf00      	nop
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <xQueueReceive+0x60>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800229c:	f001 fa3c 	bl	8003718 <xTaskGetSchedulerState>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <xQueueReceive+0x76>
 80022a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	d101      	bne.n	80022b2 <xQueueReceive+0x7a>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <xQueueReceive+0x7c>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <xQueueReceive+0x98>
    __asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	623b      	str	r3, [r7, #32]
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <xQueueReceive+0x94>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80022d0:	f002 f826 	bl	8004320 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d018      	beq.n	8002312 <xQueueReceive+0xda>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022e4:	f000 f890 	bl	8002408 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80022e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ee:	641a      	str	r2, [r3, #64]	@ 0x40

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <xQueueReceive+0xca>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fa:	3310      	adds	r3, #16
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 ffa3 	bl	8003248 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002302:	f002 f83f 	bl	8004384 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002306:	2101      	movs	r1, #1
 8002308:	20a4      	movs	r0, #164	@ 0xa4
 800230a:	f003 fd3f 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800230e:	2301      	movs	r3, #1
 8002310:	e073      	b.n	80023fa <xQueueReceive+0x1c2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002316:	4313      	orrs	r3, r2
 8002318:	d107      	bne.n	800232a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800231a:	f002 f833 	bl	8004384 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800231e:	2100      	movs	r1, #0
 8002320:	20a4      	movs	r0, #164	@ 0xa4
 8002322:	f003 fd33 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002326:	2300      	movs	r3, #0
 8002328:	e067      	b.n	80023fa <xQueueReceive+0x1c2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800232a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	4618      	mov	r0, r3
 8002336:	f001 f869 	bl	800340c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800233a:	2301      	movs	r3, #1
 800233c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800233e:	f002 f821 	bl	8004384 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002342:	f000 fc1b 	bl	8002b7c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002346:	f001 ffeb 	bl	8004320 <vPortEnterCritical>
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002350:	b25b      	sxtb	r3, r3
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002356:	d103      	bne.n	8002360 <xQueueReceive+0x128>
 8002358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235a:	2200      	movs	r2, #0
 800235c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8002360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002362:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002366:	b25b      	sxtb	r3, r3
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800236c:	d103      	bne.n	8002376 <xQueueReceive+0x13e>
 800236e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002370:	2200      	movs	r2, #0
 8002372:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8002376:	f002 f805 	bl	8004384 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800237a:	463a      	mov	r2, r7
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f001 f85c 	bl	8003440 <xTaskCheckForTimeOut>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d124      	bne.n	80023d8 <xQueueReceive+0x1a0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800238e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002390:	f000 f8b2 	bl	80024f8 <prvIsQueueEmpty>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d018      	beq.n	80023cc <xQueueReceive+0x194>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80023a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023a4:	4608      	mov	r0, r1
 80023a6:	f000 fed7 	bl	8003158 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80023aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023ac:	f000 f852 	bl	8002454 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80023b0:	f000 fbf2 	bl	8002b98 <xTaskResumeAll>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d18a      	bne.n	80022d0 <xQueueReceive+0x98>
                {
                    taskYIELD_WITHIN_API();
 80023ba:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <xQueueReceive+0x1cc>)
 80023bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	f3bf 8f6f 	isb	sy
 80023ca:	e781      	b.n	80022d0 <xQueueReceive+0x98>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80023cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023ce:	f000 f841 	bl	8002454 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80023d2:	f000 fbe1 	bl	8002b98 <xTaskResumeAll>
 80023d6:	e77b      	b.n	80022d0 <xQueueReceive+0x98>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80023d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023da:	f000 f83b 	bl	8002454 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80023de:	f000 fbdb 	bl	8002b98 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023e4:	f000 f888 	bl	80024f8 <prvIsQueueEmpty>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f43f af70 	beq.w	80022d0 <xQueueReceive+0x98>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80023f0:	2100      	movs	r1, #0
 80023f2:	20a4      	movs	r0, #164	@ 0xa4
 80023f4:	f003 fcca 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80023f8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3738      	adds	r7, #56	@ 0x38
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	e000ed04 	.word	0xe000ed04

08002408 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002416:	2b00      	cmp	r3, #0
 8002418:	d018      	beq.n	800244c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002422:	441a      	add	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	d303      	bcc.n	800243c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68d9      	ldr	r1, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002444:	461a      	mov	r2, r3
 8002446:	6838      	ldr	r0, [r7, #0]
 8002448:	f003 ffc8 	bl	80063dc <memcpy>
    }
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800245c:	f001 ff60 	bl	8004320 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002466:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002468:	e011      	b.n	800248e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	d012      	beq.n	8002498 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3328      	adds	r3, #40	@ 0x28
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fee6 	bl	8003248 <xTaskRemoveFromEventList>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002482:	f001 f86d 	bl	8003560 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3b01      	subs	r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800248e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	dce9      	bgt.n	800246a <prvUnlockQueue+0x16>
 8002496:	e000      	b.n	800249a <prvUnlockQueue+0x46>
                    break;
 8002498:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	22ff      	movs	r2, #255	@ 0xff
 800249e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    }
    taskEXIT_CRITICAL();
 80024a2:	f001 ff6f 	bl	8004384 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80024a6:	f001 ff3b 	bl	8004320 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80024b0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024b2:	e011      	b.n	80024d8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d012      	beq.n	80024e2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3310      	adds	r3, #16
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fec1 	bl	8003248 <xTaskRemoveFromEventList>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80024cc:	f001 f848 	bl	8003560 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	dce9      	bgt.n	80024b4 <prvUnlockQueue+0x60>
 80024e0:	e000      	b.n	80024e4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80024e2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	22ff      	movs	r2, #255	@ 0xff
 80024e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    }
    taskEXIT_CRITICAL();
 80024ec:	f001 ff4a 	bl	8004384 <vPortExitCritical>
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002500:	f001 ff0e 	bl	8004320 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800250c:	2301      	movs	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e001      	b.n	8002516 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002516:	f001 ff35 	bl	8004384 <vPortExitCritical>

    return xReturn;
 800251a:	68fb      	ldr	r3, [r7, #12]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	e9c7 2300 	strd	r2, r3, [r7]
        Queue_t * const pxQueue = xQueue;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002534:	f001 fef4 	bl	8004320 <vPortEnterCritical>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800253e:	b25b      	sxtb	r3, r3
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002544:	d103      	bne.n	800254e <vQueueWaitForMessageRestricted+0x2a>
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002554:	b25b      	sxtb	r3, r3
 8002556:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800255a:	d103      	bne.n	8002564 <vQueueWaitForMessageRestricted+0x40>
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8002564:	f001 ff0e 	bl	8004384 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <vQueueWaitForMessageRestricted+0x60>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800257e:	4608      	mov	r0, r1
 8002580:	f000 fe14 	bl	80031ac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002584:	6978      	ldr	r0, [r7, #20]
 8002586:	f7ff ff65 	bl	8002454 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 800258a:	20b9      	movs	r0, #185	@ 0xb9
 800258c:	f003 fbc2 	bl	8005d14 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002590:	bf00      	nop
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8002598:	b580      	push	{r7, lr}
 800259a:	b08e      	sub	sp, #56	@ 0x38
 800259c:	af04      	add	r7, sp, #16
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 80025a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <prvCreateStaticTask+0x2c>
    __asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	623b      	str	r3, [r7, #32]
}
 80025be:	bf00      	nop
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80025c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <prvCreateStaticTask+0x4a>
    __asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	61fb      	str	r3, [r7, #28]
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	e7fd      	b.n	80025de <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80025e2:	2360      	movs	r3, #96	@ 0x60
 80025e4:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b60      	cmp	r3, #96	@ 0x60
 80025ea:	d00b      	beq.n	8002604 <prvCreateStaticTask+0x6c>
    __asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	61bb      	str	r3, [r7, #24]
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8002604:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01f      	beq.n	800264c <prvCreateStaticTask+0xb4>
 800260c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01c      	beq.n	800264c <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8002612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002616:	2260      	movs	r2, #96	@ 0x60
 8002618:	2100      	movs	r1, #0
 800261a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800261c:	f003 feb2 	bl	8006384 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002624:	63da      	str	r2, [r3, #60]	@ 0x3c

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	2202      	movs	r2, #2
 800262a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800262e:	2300      	movs	r3, #0
 8002630:	9303      	str	r3, [sp, #12]
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	9302      	str	r3, [sp, #8]
 8002636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f89d 	bl	8002784 <prvInitialiseNewTask>
 800264a:	e001      	b.n	8002650 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 800264c:	2300      	movs	r3, #0
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002652:	4618      	mov	r0, r3
 8002654:	3728      	adds	r7, #40	@ 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800265a:	b580      	push	{r7, lr}
 800265c:	b08a      	sub	sp, #40	@ 0x28
 800265e:	af04      	add	r7, sp, #16
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	9303      	str	r3, [sp, #12]
 8002672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002674:	9302      	str	r3, [sp, #8]
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7ff ff87 	bl	8002598 <prvCreateStaticTask>
 800268a:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002692:	6978      	ldr	r0, [r7, #20]
 8002694:	f000 f908 	bl	80028a8 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4618      	mov	r0, r3
 800269c:	f003 fd10 	bl	80060c0 <SEGGER_SYSVIEW_ShrinkId>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4619      	mov	r1, r3
 80026a4:	20bf      	movs	r0, #191	@ 0xbf
 80026a6:	f003 fb71 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80026aa:	693b      	ldr	r3, [r7, #16]
    }
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	@ 0x28
 80026b8:	af04      	add	r7, sp, #16
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 ff30 	bl	800452c <pvPortMalloc>
 80026cc:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80026d4:	2060      	movs	r0, #96	@ 0x60
 80026d6:	f001 ff29 	bl	800452c <pvPortMalloc>
 80026da:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80026e2:	2260      	movs	r2, #96	@ 0x60
 80026e4:	2100      	movs	r1, #0
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	f003 fe4c 	bl	8006384 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026f2:	e005      	b.n	8002700 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80026f4:	6938      	ldr	r0, [r7, #16]
 80026f6:	f002 f84b 	bl	8004790 <vPortFree>
 80026fa:	e001      	b.n	8002700 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d011      	beq.n	800272a <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800270e:	2300      	movs	r3, #0
 8002710:	9303      	str	r3, [sp, #12]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	9302      	str	r3, [sp, #8]
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f82d 	bl	8002784 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800272a:	697b      	ldr	r3, [r7, #20]
    }
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff ffaf 	bl	80026b4 <prvCreateTask>
 8002756:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800275e:	6938      	ldr	r0, [r7, #16]
 8002760:	f000 f8a2 	bl	80028a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002764:	2301      	movs	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	e002      	b.n	8002770 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800276e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	4619      	mov	r1, r3
 8002774:	20c2      	movs	r0, #194	@ 0xc2
 8002776:	f003 fb09 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800277a:	697b      	ldr	r3, [r7, #20]
    }
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002784:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002788:	b088      	sub	sp, #32
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002796:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800279e:	3b01      	subs	r3, #1
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	f023 0307 	bic.w	r3, r3, #7
 80027ac:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00b      	beq.n	80027d0 <prvInitialiseNewTask+0x4c>
    __asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	617b      	str	r3, [r7, #20]
}
 80027ca:	bf00      	nop
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <prvInitialiseNewTask+0x48>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01e      	beq.n	8002814 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e012      	b.n	8002802 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	7819      	ldrb	r1, [r3, #0]
 80027e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	3340      	adds	r3, #64	@ 0x40
 80027ec:	460a      	mov	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	3301      	adds	r3, #1
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	2b0f      	cmp	r3, #15
 8002806:	d9e9      	bls.n	80027dc <prvInitialiseNewTask+0x58>
 8002808:	e000      	b.n	800280c <prvInitialiseNewTask+0x88>
            {
                break;
 800280a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800280c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800280e:	2200      	movs	r2, #0
 8002810:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002816:	2b04      	cmp	r3, #4
 8002818:	d90b      	bls.n	8002832 <prvInitialiseNewTask+0xae>
    __asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	613b      	str	r3, [r7, #16]
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	e7fd      	b.n	800282e <prvInitialiseNewTask+0xaa>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002834:	2b04      	cmp	r3, #4
 8002836:	d901      	bls.n	800283c <prvInitialiseNewTask+0xb8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002838:	2304      	movs	r3, #4
 800283a:	63bb      	str	r3, [r7, #56]	@ 0x38
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800283c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800283e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002840:	639a      	str	r2, [r3, #56]	@ 0x38
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002844:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002846:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800284a:	3308      	adds	r3, #8
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fb5e 	bl	8001f0e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002854:	3320      	adds	r3, #32
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fb59 	bl	8001f0e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800285c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800285e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002860:	619a      	str	r2, [r3, #24]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002864:	2200      	movs	r2, #0
 8002866:	461c      	mov	r4, r3
 8002868:	4615      	mov	r5, r2
 800286a:	2300      	movs	r3, #0
 800286c:	f1d4 0805 	rsbs	r8, r4, #5
 8002870:	eb63 0905 	sbc.w	r9, r3, r5
 8002874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002876:	e9c3 8908 	strd	r8, r9, [r3, #32]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800287a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800287c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	68f9      	ldr	r1, [r7, #12]
 8002884:	69b8      	ldr	r0, [r7, #24]
 8002886:	f001 fb5f 	bl	8003f48 <pxPortInitialiseStack>
 800288a:	4602      	mov	r2, r0
 800288c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800288e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002898:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800289a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800289c:	bf00      	nop
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080028a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80028a8:	b5b0      	push	{r4, r5, r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80028b0:	f001 fd36 	bl	8004320 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80028b4:	4b47      	ldr	r3, [pc, #284]	@ (80029d4 <prvAddNewTaskToReadyList+0x12c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	4a46      	ldr	r2, [pc, #280]	@ (80029d4 <prvAddNewTaskToReadyList+0x12c>)
 80028bc:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80028be:	4b46      	ldr	r3, [pc, #280]	@ (80029d8 <prvAddNewTaskToReadyList+0x130>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80028c6:	4a44      	ldr	r2, [pc, #272]	@ (80029d8 <prvAddNewTaskToReadyList+0x130>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028cc:	4b41      	ldr	r3, [pc, #260]	@ (80029d4 <prvAddNewTaskToReadyList+0x12c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d110      	bne.n	80028f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80028d4:	f000 fe62 	bl	800359c <prvInitialiseTaskLists>
 80028d8:	e00d      	b.n	80028f6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80028da:	4b40      	ldr	r3, [pc, #256]	@ (80029dc <prvAddNewTaskToReadyList+0x134>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028e2:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <prvAddNewTaskToReadyList+0x130>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d802      	bhi.n	80028f6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80028f0:	4a39      	ldr	r2, [pc, #228]	@ (80029d8 <prvAddNewTaskToReadyList+0x130>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80028f6:	4b3a      	ldr	r3, [pc, #232]	@ (80029e0 <prvAddNewTaskToReadyList+0x138>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3301      	adds	r3, #1
 80028fc:	4a38      	ldr	r2, [pc, #224]	@ (80029e0 <prvAddNewTaskToReadyList+0x138>)
 80028fe:	6013      	str	r3, [r2, #0]
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <prvAddNewTaskToReadyList+0x8c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4618      	mov	r0, r3
 800290a:	f003 fab3 	bl	8005e74 <SEGGER_SYSVIEW_OnTaskCreate>
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291e:	461d      	mov	r5, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461c      	mov	r4, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292a:	1ae3      	subs	r3, r4, r3
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	462b      	mov	r3, r5
 8002930:	f002 f952 	bl	8004bd8 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fb20 	bl	8005f7c <SEGGER_SYSVIEW_OnTaskStartReady>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002940:	4b28      	ldr	r3, [pc, #160]	@ (80029e4 <prvAddNewTaskToReadyList+0x13c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d903      	bls.n	8002950 <prvAddNewTaskToReadyList+0xa8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	4a25      	ldr	r2, [pc, #148]	@ (80029e4 <prvAddNewTaskToReadyList+0x13c>)
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002954:	4924      	ldr	r1, [pc, #144]	@ (80029e8 <prvAddNewTaskToReadyList+0x140>)
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	3304      	adds	r3, #4
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	611a      	str	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f103 0208 	add.w	r2, r3, #8
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	60da      	str	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4a14      	ldr	r2, [pc, #80]	@ (80029e8 <prvAddNewTaskToReadyList+0x140>)
 8002996:	441a      	add	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	61da      	str	r2, [r3, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029a0:	4911      	ldr	r1, [pc, #68]	@ (80029e8 <prvAddNewTaskToReadyList+0x140>)
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029b2:	1c59      	adds	r1, r3, #1
 80029b4:	480c      	ldr	r0, [pc, #48]	@ (80029e8 <prvAddNewTaskToReadyList+0x140>)
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4403      	add	r3, r0
 80029c0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80029c2:	f001 fcdf 	bl	8004384 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80029c6:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <prvAddNewTaskToReadyList+0x134>)
 80029c8:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bdb0      	pop	{r4, r5, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000180 	.word	0x20000180
 80029d8:	20000078 	.word	0x20000078
 80029dc:	20000194 	.word	0x20000194
 80029e0:	200001a8 	.word	0x200001a8
 80029e4:	20000190 	.word	0x20000190
 80029e8:	20000080 	.word	0x20000080

080029ec <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b090      	sub	sp, #64	@ 0x40
 80029f0:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 80029f2:	2301      	movs	r3, #1
 80029f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029fe:	e013      	b.n	8002a28 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002a00:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab0 <prvCreateIdleTasks+0xc4>)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	4413      	add	r3, r2
 8002a06:	7819      	ldrb	r1, [r3, #0]
 8002a08:	f107 0210 	add.w	r2, r7, #16
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	4413      	add	r3, r2
 8002a10:	460a      	mov	r2, r1
 8002a12:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002a14:	f107 0210 	add.w	r2, r7, #16
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	3301      	adds	r3, #1
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	2b0f      	cmp	r3, #15
 8002a2c:	dde8      	ble.n	8002a00 <prvCreateIdleTasks+0x14>
 8002a2e:	e000      	b.n	8002a32 <prvCreateIdleTasks+0x46>
        {
            break;
 8002a30:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002a32:	2300      	movs	r3, #0
 8002a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a36:	e031      	b.n	8002a9c <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002a38:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab4 <prvCreateIdleTasks+0xc8>)
 8002a3a:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8002a44:	1d3a      	adds	r2, r7, #4
 8002a46:	f107 0108 	add.w	r1, r7, #8
 8002a4a:	f107 030c 	add.w	r3, r7, #12
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 ff1a 	bl	8003888 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	f107 0110 	add.w	r1, r7, #16
 8002a5e:	9202      	str	r2, [sp, #8]
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	2300      	movs	r3, #0
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2300      	movs	r3, #0
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a38      	ldr	r0, [r7, #32]
 8002a6c:	f7ff fdf5 	bl	800265a <xTaskCreateStatic>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4911      	ldr	r1, [pc, #68]	@ (8002ab8 <prvCreateIdleTasks+0xcc>)
 8002a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab8 <prvCreateIdleTasks+0xcc>)
 8002a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 8002a86:	2301      	movs	r3, #1
 8002a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a8a:	e001      	b.n	8002a90 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d006      	beq.n	8002aa4 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a98:	3301      	adds	r3, #1
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	ddca      	ble.n	8002a38 <prvCreateIdleTasks+0x4c>
 8002aa2:	e000      	b.n	8002aa6 <prvCreateIdleTasks+0xba>
        {
            break;
 8002aa4:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3730      	adds	r7, #48	@ 0x30
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	08006464 	.word	0x08006464
 8002ab4:	08003579 	.word	0x08003579
 8002ab8:	200001b8 	.word	0x200001b8

08002abc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002ac2:	f7ff ff93 	bl	80029ec <prvCreateIdleTasks>
 8002ac6:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d102      	bne.n	8002ad4 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002ace:	f000 ff0f 	bl	80038f0 <xTimerCreateTimerTask>
 8002ad2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d12b      	bne.n	8002b32 <vTaskStartScheduler+0x76>
    __asm volatile
 8002ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	60bb      	str	r3, [r7, #8]
}
 8002aec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002aee:	491d      	ldr	r1, [pc, #116]	@ (8002b64 <vTaskStartScheduler+0xa8>)
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002af8:	e9c1 2300 	strd	r2, r3, [r1]
        xSchedulerRunning = pdTRUE;
 8002afc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b68 <vTaskStartScheduler+0xac>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b02:	491a      	ldr	r1, [pc, #104]	@ (8002b6c <vTaskStartScheduler+0xb0>)
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9c1 2300 	strd	r2, r3, [r1]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b10:	4b17      	ldr	r3, [pc, #92]	@ (8002b70 <vTaskStartScheduler+0xb4>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b17      	ldr	r3, [pc, #92]	@ (8002b74 <vTaskStartScheduler+0xb8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d102      	bne.n	8002b22 <vTaskStartScheduler+0x66>
 8002b1c:	f003 f98e 	bl	8005e3c <SEGGER_SYSVIEW_OnIdle>
 8002b20:	e004      	b.n	8002b2c <vTaskStartScheduler+0x70>
 8002b22:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <vTaskStartScheduler+0xb8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 f9e6 	bl	8005ef8 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002b2c:	f001 fa9a 	bl	8004064 <xPortStartScheduler>
 8002b30:	e00f      	b.n	8002b52 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b38:	d10b      	bne.n	8002b52 <vTaskStartScheduler+0x96>
    __asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	607b      	str	r3, [r7, #4]
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	e7fd      	b.n	8002b4e <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b52:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <vTaskStartScheduler+0xbc>)
 8002b54:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002b56:	20cd      	movs	r0, #205	@ 0xcd
 8002b58:	f003 f8dc 	bl	8005d14 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200001b0 	.word	0x200001b0
 8002b68:	20000194 	.word	0x20000194
 8002b6c:	20000188 	.word	0x20000188
 8002b70:	200001b8 	.word	0x200001b8
 8002b74:	20000078 	.word	0x20000078
 8002b78:	0800654c 	.word	0x0800654c

08002b7c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002b80:	4b04      	ldr	r3, [pc, #16]	@ (8002b94 <vTaskSuspendAll+0x18>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	4a03      	ldr	r2, [pc, #12]	@ (8002b94 <vTaskSuspendAll+0x18>)
 8002b88:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002b8a:	20cf      	movs	r0, #207	@ 0xcf
 8002b8c:	f003 f8c2 	bl	8005d14 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200001bc 	.word	0x200001bc

08002b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b08a      	sub	sp, #40	@ 0x28
 8002b9c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xAlreadyYielded = pdFALSE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002ba6:	f001 fbbb 	bl	8004320 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002bae:	4b7a      	ldr	r3, [pc, #488]	@ (8002d98 <xTaskResumeAll+0x200>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10b      	bne.n	8002bce <xTaskResumeAll+0x36>
    __asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	603b      	str	r3, [r7, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	e7fd      	b.n	8002bca <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002bce:	4b72      	ldr	r3, [pc, #456]	@ (8002d98 <xTaskResumeAll+0x200>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	4a70      	ldr	r2, [pc, #448]	@ (8002d98 <xTaskResumeAll+0x200>)
 8002bd6:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002bd8:	4b6f      	ldr	r3, [pc, #444]	@ (8002d98 <xTaskResumeAll+0x200>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 80ce 	bne.w	8002d7e <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002be2:	4b6e      	ldr	r3, [pc, #440]	@ (8002d9c <xTaskResumeAll+0x204>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80c9 	beq.w	8002d7e <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bec:	e094      	b.n	8002d18 <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002bee:	4b6c      	ldr	r3, [pc, #432]	@ (8002da0 <xTaskResumeAll+0x208>)
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	627b      	str	r3, [r7, #36]	@ 0x24
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c02:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	3320      	adds	r3, #32
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d103      	bne.n	8002c24 <xTaskResumeAll+0x8c>
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	2200      	movs	r2, #0
 8002c28:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	1e5a      	subs	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c40:	6952      	ldr	r2, [r2, #20]
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4a:	6912      	ldr	r2, [r2, #16]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	3308      	adds	r3, #8
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d103      	bne.n	8002c62 <xTaskResumeAll+0xca>
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	2200      	movs	r2, #0
 8002c66:	61da      	str	r2, [r3, #28]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	1e5a      	subs	r2, r3, #1
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 f981 	bl	8005f7c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c7e:	4b49      	ldr	r3, [pc, #292]	@ (8002da4 <xTaskResumeAll+0x20c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d903      	bls.n	8002c8e <xTaskResumeAll+0xf6>
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	4a46      	ldr	r2, [pc, #280]	@ (8002da4 <xTaskResumeAll+0x20c>)
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c92:	4945      	ldr	r1, [pc, #276]	@ (8002da8 <xTaskResumeAll+0x210>)
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	611a      	str	r2, [r3, #16]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	615a      	str	r2, [r3, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb8:	3208      	adds	r2, #8
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	f103 0208 	add.w	r2, r3, #8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4a35      	ldr	r2, [pc, #212]	@ (8002da8 <xTaskResumeAll+0x210>)
 8002cd4:	441a      	add	r2, r3
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	61da      	str	r2, [r3, #28]
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cde:	4932      	ldr	r1, [pc, #200]	@ (8002da8 <xTaskResumeAll+0x210>)
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cf0:	1c59      	adds	r1, r3, #1
 8002cf2:	482d      	ldr	r0, [pc, #180]	@ (8002da8 <xTaskResumeAll+0x210>)
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4403      	add	r3, r0
 8002cfe:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d04:	4b29      	ldr	r3, [pc, #164]	@ (8002dac <xTaskResumeAll+0x214>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d904      	bls.n	8002d18 <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002d0e:	4a28      	ldr	r2, [pc, #160]	@ (8002db0 <xTaskResumeAll+0x218>)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2101      	movs	r1, #1
 8002d14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d18:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <xTaskResumeAll+0x208>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f af66 	bne.w	8002bee <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002d28:	f000 fcd6 	bl	80036d8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d2c:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <xTaskResumeAll+0x21c>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	e9c7 2306 	strd	r2, r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	d01b      	beq.n	8002d76 <xTaskResumeAll+0x1de>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002d3e:	f000 f881 	bl	8002e44 <xTaskIncrementTick>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <xTaskResumeAll+0x1ba>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002d48:	4a19      	ldr	r2, [pc, #100]	@ (8002db0 <xTaskResumeAll+0x218>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002d52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d56:	1e54      	subs	r4, r2, #1
 8002d58:	f143 35ff 	adc.w	r5, r3, #4294967295	@ 0xffffffff
 8002d5c:	e9c7 4506 	strd	r4, r5, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	d1ea      	bne.n	8002d3e <xTaskResumeAll+0x1a6>

                            xPendedTicks = 0;
 8002d68:	4912      	ldr	r1, [pc, #72]	@ (8002db4 <xTaskResumeAll+0x21c>)
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9c1 2300 	strd	r2, r3, [r1]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002d76:	4a0e      	ldr	r2, [pc, #56]	@ (8002db0 <xTaskResumeAll+0x218>)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002d7e:	f001 fb01 	bl	8004384 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	4619      	mov	r1, r3
 8002d86:	20d0      	movs	r0, #208	@ 0xd0
 8002d88:	f003 f800 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002d8c:	697b      	ldr	r3, [r7, #20]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3728      	adds	r7, #40	@ 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bdb0      	pop	{r4, r5, r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200001bc 	.word	0x200001bc
 8002d9c:	20000180 	.word	0x20000180
 8002da0:	20000130 	.word	0x20000130
 8002da4:	20000190 	.word	0x20000190
 8002da8:	20000080 	.word	0x20000080
 8002dac:	20000078 	.word	0x20000078
 8002db0:	200001a0 	.word	0x200001a0
 8002db4:	20000198 	.word	0x20000198

08002db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
 8002dbe:	f001 faaf 	bl	8004320 <vPortEnterCritical>
    {
        xTicks = xTickCount;
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <xTaskGetTickCount+0x30>)
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	e9c7 2300 	strd	r2, r3, [r7]
    }
    portTICK_TYPE_EXIT_CRITICAL();
 8002dcc:	f001 fada 	bl	8004384 <vPortExitCritical>

    traceRETURN_xTaskGetTickCount( xTicks );
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	20d1      	movs	r0, #209	@ 0xd1
 8002dd6:	f002 ffd9 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8002dda:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000188 	.word	0x20000188

08002dec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002df2:	f001 fb59 	bl	80044a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8002df6:	f3ef 8211 	mrs	r2, BASEPRI
 8002dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfe:	f383 8811 	msr	BASEPRI, r3
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	60ba      	str	r2, [r7, #8]
 8002e0c:	607b      	str	r3, [r7, #4]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8002e0e:	68bb      	ldr	r3, [r7, #8]

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002e10:	61fb      	str	r3, [r7, #28]
    {
        xReturn = xTickCount;
 8002e12:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <xTaskGetTickCountFromISR+0x54>)
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002e26:	bf00      	nop
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	20d2      	movs	r0, #210	@ 0xd2
 8002e2e:	f002 ffad 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002e32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000188 	.word	0x20000188

08002e44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e44:	b5b0      	push	{r4, r5, r7, lr}
 8002e46:	b08c      	sub	sp, #48	@ 0x30
 8002e48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002e4e:	4b82      	ldr	r3, [pc, #520]	@ (8003058 <xTaskIncrementTick+0x214>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 80ec 	bne.w	8003030 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e58:	4b80      	ldr	r3, [pc, #512]	@ (800305c <xTaskIncrementTick+0x218>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	1c54      	adds	r4, r2, #1
 8002e60:	f143 0500 	adc.w	r5, r3, #0
 8002e64:	e9c7 4508 	strd	r4, r5, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e68:	497c      	ldr	r1, [pc, #496]	@ (800305c <xTaskIncrementTick+0x218>)
 8002e6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e6e:	e9c1 2300 	strd	r2, r3, [r1]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002e72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	d121      	bne.n	8002ebe <xTaskIncrementTick+0x7a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e7a:	4b79      	ldr	r3, [pc, #484]	@ (8003060 <xTaskIncrementTick+0x21c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <xTaskIncrementTick+0x58>
    __asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	603b      	str	r3, [r7, #0]
}
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <xTaskIncrementTick+0x54>
 8002e9c:	4b70      	ldr	r3, [pc, #448]	@ (8003060 <xTaskIncrementTick+0x21c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	4b70      	ldr	r3, [pc, #448]	@ (8003064 <xTaskIncrementTick+0x220>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6e      	ldr	r2, [pc, #440]	@ (8003060 <xTaskIncrementTick+0x21c>)
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8003064 <xTaskIncrementTick+0x220>)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b6d      	ldr	r3, [pc, #436]	@ (8003068 <xTaskIncrementTick+0x224>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	4a6c      	ldr	r2, [pc, #432]	@ (8003068 <xTaskIncrementTick+0x224>)
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	f000 fc0d 	bl	80036d8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ebe:	4b6b      	ldr	r3, [pc, #428]	@ (800306c <xTaskIncrementTick+0x228>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ec8:	4290      	cmp	r0, r2
 8002eca:	eb71 0303 	sbcs.w	r3, r1, r3
 8002ece:	f0c0 80b8 	bcc.w	8003042 <xTaskIncrementTick+0x1fe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ed2:	4b63      	ldr	r3, [pc, #396]	@ (8003060 <xTaskIncrementTick+0x21c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d107      	bne.n	8002eec <xTaskIncrementTick+0xa8>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002edc:	4963      	ldr	r1, [pc, #396]	@ (800306c <xTaskIncrementTick+0x228>)
 8002ede:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ee6:	e9c1 2300 	strd	r2, r3, [r1]
                    break;
 8002eea:	e0aa      	b.n	8003042 <xTaskIncrementTick+0x1fe>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002eec:	4b5c      	ldr	r3, [pc, #368]	@ (8003060 <xTaskIncrementTick+0x21c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002efc:	e9c7 2304 	strd	r2, r3, [r7, #16]

                    if( xConstTickCount < xItemValue )
 8002f00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f08:	4290      	cmp	r0, r2
 8002f0a:	eb71 0303 	sbcs.w	r3, r1, r3
 8002f0e:	d205      	bcs.n	8002f1c <xTaskIncrementTick+0xd8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f10:	4956      	ldr	r1, [pc, #344]	@ (800306c <xTaskIncrementTick+0x228>)
 8002f12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f16:	e9c1 2300 	strd	r2, r3, [r1]
                        break;
 8002f1a:	e092      	b.n	8003042 <xTaskIncrementTick+0x1fe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	6952      	ldr	r2, [r2, #20]
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	6912      	ldr	r2, [r2, #16]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d103      	bne.n	8002f4a <xTaskIncrementTick+0x106>
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	61da      	str	r2, [r3, #28]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	1e5a      	subs	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01e      	beq.n	8002fa0 <xTaskIncrementTick+0x15c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	3320      	adds	r3, #32
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d103      	bne.n	8002f90 <xTaskIncrementTick+0x14c>
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2200      	movs	r2, #0
 8002f94:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	1e5a      	subs	r2, r3, #1
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f002 ffea 	bl	8005f7c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fac:	4b30      	ldr	r3, [pc, #192]	@ (8003070 <xTaskIncrementTick+0x22c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d903      	bls.n	8002fbc <xTaskIncrementTick+0x178>
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003070 <xTaskIncrementTick+0x22c>)
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fc0:	492c      	ldr	r1, [pc, #176]	@ (8003074 <xTaskIncrementTick+0x230>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	440b      	add	r3, r1
 8002fcc:	3304      	adds	r3, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	611a      	str	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	615a      	str	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	3208      	adds	r2, #8
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f103 0208 	add.w	r2, r3, #8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	60da      	str	r2, [r3, #12]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4a1c      	ldr	r2, [pc, #112]	@ (8003074 <xTaskIncrementTick+0x230>)
 8003002:	441a      	add	r2, r3
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	61da      	str	r2, [r3, #28]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800300c:	4919      	ldr	r1, [pc, #100]	@ (8003074 <xTaskIncrementTick+0x230>)
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	4814      	ldr	r0, [pc, #80]	@ (8003074 <xTaskIncrementTick+0x230>)
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4403      	add	r3, r0
 800302c:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800302e:	e750      	b.n	8002ed2 <xTaskIncrementTick+0x8e>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003030:	4b11      	ldr	r3, [pc, #68]	@ (8003078 <xTaskIncrementTick+0x234>)
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	1c50      	adds	r0, r2, #1
 8003038:	f143 0100 	adc.w	r1, r3, #0
 800303c:	4b0e      	ldr	r3, [pc, #56]	@ (8003078 <xTaskIncrementTick+0x234>)
 800303e:	e9c3 0100 	strd	r0, r1, [r3]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003044:	4619      	mov	r1, r3
 8003046:	20db      	movs	r0, #219	@ 0xdb
 8003048:	f002 fea0 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 800304c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800304e:	4618      	mov	r0, r3
 8003050:	3730      	adds	r7, #48	@ 0x30
 8003052:	46bd      	mov	sp, r7
 8003054:	bdb0      	pop	{r4, r5, r7, pc}
 8003056:	bf00      	nop
 8003058:	200001bc 	.word	0x200001bc
 800305c:	20000188 	.word	0x20000188
 8003060:	20000128 	.word	0x20000128
 8003064:	2000012c 	.word	0x2000012c
 8003068:	200001a4 	.word	0x200001a4
 800306c:	200001b0 	.word	0x200001b0
 8003070:	20000190 	.word	0x20000190
 8003074:	20000080 	.word	0x20000080
 8003078:	20000198 	.word	0x20000198

0800307c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003082:	4b2f      	ldr	r3, [pc, #188]	@ (8003140 <vTaskSwitchContext+0xc4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800308a:	4b2e      	ldr	r3, [pc, #184]	@ (8003144 <vTaskSwitchContext+0xc8>)
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003090:	e051      	b.n	8003136 <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 8003092:	4b2c      	ldr	r3, [pc, #176]	@ (8003144 <vTaskSwitchContext+0xc8>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003098:	4b2b      	ldr	r3, [pc, #172]	@ (8003148 <vTaskSwitchContext+0xcc>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	e011      	b.n	80030c4 <vTaskSwitchContext+0x48>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <vTaskSwitchContext+0x42>
    __asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	607b      	str	r3, [r7, #4]
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <vTaskSwitchContext+0x3e>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	4921      	ldr	r1, [pc, #132]	@ (800314c <vTaskSwitchContext+0xd0>)
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0e3      	beq.n	80030a0 <vTaskSwitchContext+0x24>
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4a1a      	ldr	r2, [pc, #104]	@ (800314c <vTaskSwitchContext+0xd0>)
 80030e4:	4413      	add	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3308      	adds	r3, #8
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d103      	bne.n	8003106 <vTaskSwitchContext+0x8a>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	4a10      	ldr	r2, [pc, #64]	@ (8003150 <vTaskSwitchContext+0xd4>)
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4a0d      	ldr	r2, [pc, #52]	@ (8003148 <vTaskSwitchContext+0xcc>)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003116:	4b0f      	ldr	r3, [pc, #60]	@ (8003154 <vTaskSwitchContext+0xd8>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b0d      	ldr	r3, [pc, #52]	@ (8003150 <vTaskSwitchContext+0xd4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d102      	bne.n	8003128 <vTaskSwitchContext+0xac>
 8003122:	f002 fe8b 	bl	8005e3c <SEGGER_SYSVIEW_OnIdle>
 8003126:	e004      	b.n	8003132 <vTaskSwitchContext+0xb6>
 8003128:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <vTaskSwitchContext+0xd4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f002 fee3 	bl	8005ef8 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003132:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <vTaskSwitchContext+0xd4>)
 8003134:	681b      	ldr	r3, [r3, #0]
    }
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200001bc 	.word	0x200001bc
 8003144:	200001a0 	.word	0x200001a0
 8003148:	20000190 	.word	0x20000190
 800314c:	20000080 	.word	0x20000080
 8003150:	20000078 	.word	0x20000078
 8003154:	200001b8 	.word	0x200001b8

08003158 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	e9c7 2300 	strd	r2, r3, [r7]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10b      	bne.n	8003182 <vTaskPlaceOnEventList+0x2a>
    __asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	617b      	str	r3, [r7, #20]
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	e7fd      	b.n	800317e <vTaskPlaceOnEventList+0x26>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003182:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <vTaskPlaceOnEventList+0x50>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3320      	adds	r3, #32
 8003188:	4619      	mov	r1, r3
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7fe fece 	bl	8001f2c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003190:	2201      	movs	r2, #1
 8003192:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003196:	f000 fae1 	bl	800375c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 800319a:	20e1      	movs	r0, #225	@ 0xe1
 800319c:	f002 fdba 	bl	8005d14 <SEGGER_SYSVIEW_RecordEndCall>
}
 80031a0:	bf00      	nop
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000078 	.word	0x20000078

080031ac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	e9c7 2300 	strd	r2, r3, [r7]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10b      	bne.n	80031d6 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	613b      	str	r3, [r7, #16]
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	e7fd      	b.n	80031d2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	4b19      	ldr	r3, [pc, #100]	@ (8003244 <vTaskPlaceOnEventListRestricted+0x98>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80031e4:	4b17      	ldr	r3, [pc, #92]	@ (8003244 <vTaskPlaceOnEventListRestricted+0x98>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	68d2      	ldr	r2, [r2, #12]
 80031ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80031ee:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <vTaskPlaceOnEventListRestricted+0x98>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	3220      	adds	r2, #32
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <vTaskPlaceOnEventListRestricted+0x98>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f103 0220 	add.w	r2, r3, #32
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	4b0f      	ldr	r3, [pc, #60]	@ (8003244 <vTaskPlaceOnEventListRestricted+0x98>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	635a      	str	r2, [r3, #52]	@ 0x34
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <vTaskPlaceOnEventListRestricted+0x7e>
        {
            xTicksToWait = portMAX_DELAY;
 800321e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003226:	e9c7 2300 	strd	r2, r3, [r7]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800322a:	6a3a      	ldr	r2, [r7, #32]
 800322c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003230:	f000 fa94 	bl	800375c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003234:	20e3      	movs	r0, #227	@ 0xe3
 8003236:	f002 fd6d 	bl	8005d14 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000078 	.word	0x20000078

08003248 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	@ 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10b      	bne.n	8003276 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800325e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	60fb      	str	r3, [r7, #12]
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	e7fd      	b.n	8003272 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	3320      	adds	r3, #32
 8003298:	429a      	cmp	r2, r3
 800329a:	d103      	bne.n	80032a4 <xTaskRemoveFromEventList+0x5c>
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2200      	movs	r2, #0
 80032a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	1e5a      	subs	r2, r3, #1
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80032b4:	4b4f      	ldr	r3, [pc, #316]	@ (80033f4 <xTaskRemoveFromEventList+0x1ac>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d166      	bne.n	800338a <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	6a3a      	ldr	r2, [r7, #32]
 80032c8:	6952      	ldr	r2, [r2, #20]
 80032ca:	60da      	str	r2, [r3, #12]
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	6912      	ldr	r2, [r2, #16]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	3308      	adds	r3, #8
 80032de:	429a      	cmp	r2, r3
 80032e0:	d103      	bne.n	80032ea <xTaskRemoveFromEventList+0xa2>
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2200      	movs	r2, #0
 80032ee:	61da      	str	r2, [r3, #28]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	1e5a      	subs	r2, r3, #1
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f002 fe3d 	bl	8005f7c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003306:	4b3c      	ldr	r3, [pc, #240]	@ (80033f8 <xTaskRemoveFromEventList+0x1b0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d903      	bls.n	8003316 <xTaskRemoveFromEventList+0xce>
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003312:	4a39      	ldr	r2, [pc, #228]	@ (80033f8 <xTaskRemoveFromEventList+0x1b0>)
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800331a:	4938      	ldr	r1, [pc, #224]	@ (80033fc <xTaskRemoveFromEventList+0x1b4>)
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	3304      	adds	r3, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	611a      	str	r2, [r3, #16]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	615a      	str	r2, [r3, #20]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	6a3a      	ldr	r2, [r7, #32]
 8003340:	3208      	adds	r2, #8
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	f103 0208 	add.w	r2, r3, #8
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4a28      	ldr	r2, [pc, #160]	@ (80033fc <xTaskRemoveFromEventList+0x1b4>)
 800335c:	441a      	add	r2, r3
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	61da      	str	r2, [r3, #28]
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003366:	4925      	ldr	r1, [pc, #148]	@ (80033fc <xTaskRemoveFromEventList+0x1b4>)
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003378:	1c59      	adds	r1, r3, #1
 800337a:	4820      	ldr	r0, [pc, #128]	@ (80033fc <xTaskRemoveFromEventList+0x1b4>)
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4403      	add	r3, r0
 8003386:	6019      	str	r1, [r3, #0]
 8003388:	e01b      	b.n	80033c2 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800338a:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <xTaskRemoveFromEventList+0x1b8>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	629a      	str	r2, [r3, #40]	@ 0x28
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	6a3a      	ldr	r2, [r7, #32]
 80033a4:	3220      	adds	r2, #32
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	f103 0220 	add.w	r2, r3, #32
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <xTaskRemoveFromEventList+0x1b8>)
 80033b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80033b8:	4b11      	ldr	r3, [pc, #68]	@ (8003400 <xTaskRemoveFromEventList+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	4a10      	ldr	r2, [pc, #64]	@ (8003400 <xTaskRemoveFromEventList+0x1b8>)
 80033c0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003404 <xTaskRemoveFromEventList+0x1bc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d905      	bls.n	80033dc <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80033d0:	2301      	movs	r3, #1
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <xTaskRemoveFromEventList+0x1c0>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e001      	b.n	80033e0 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	4619      	mov	r1, r3
 80033e4:	20e4      	movs	r0, #228	@ 0xe4
 80033e6:	f002 fcd1 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3728      	adds	r7, #40	@ 0x28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200001bc 	.word	0x200001bc
 80033f8:	20000190 	.word	0x20000190
 80033fc:	20000080 	.word	0x20000080
 8003400:	20000130 	.word	0x20000130
 8003404:	20000078 	.word	0x20000078
 8003408:	200001a0 	.word	0x200001a0

0800340c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003414:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <vTaskInternalSetTimeOutState+0x2c>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800341c:	4b07      	ldr	r3, [pc, #28]	@ (800343c <vTaskInternalSetTimeOutState+0x30>)
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	e9c1 2302 	strd	r2, r3, [r1, #8]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003428:	20e7      	movs	r0, #231	@ 0xe7
 800342a:	f002 fc73 	bl	8005d14 <SEGGER_SYSVIEW_RecordEndCall>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200001a4 	.word	0x200001a4
 800343c:	20000188 	.word	0x20000188

08003440 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003444:	b08a      	sub	sp, #40	@ 0x28
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <xTaskCheckForTimeOut+0x2a>
    __asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	60fb      	str	r3, [r7, #12]
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	e7fd      	b.n	8003466 <xTaskCheckForTimeOut+0x26>
    configASSERT( pxTicksToWait );
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <xTaskCheckForTimeOut+0x48>
    __asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	60bb      	str	r3, [r7, #8]
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <xTaskCheckForTimeOut+0x44>

    taskENTER_CRITICAL();
 8003488:	f000 ff4a 	bl	8004320 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800348c:	4b32      	ldr	r3, [pc, #200]	@ (8003558 <xTaskCheckForTimeOut+0x118>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	e9c7 2306 	strd	r2, r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800349c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034a0:	ebb0 0802 	subs.w	r8, r0, r2
 80034a4:	eb61 0903 	sbc.w	r9, r1, r3
 80034a8:	e9c7 8904 	strd	r8, r9, [r7, #16]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034b6:	bf08      	it	eq
 80034b8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 80034bc:	d102      	bne.n	80034c4 <xTaskCheckForTimeOut+0x84>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034c2:	e03b      	b.n	800353c <xTaskCheckForTimeOut+0xfc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b24      	ldr	r3, [pc, #144]	@ (800355c <xTaskCheckForTimeOut+0x11c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d012      	beq.n	80034f6 <xTaskCheckForTimeOut+0xb6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034da:	4290      	cmp	r0, r2
 80034dc:	eb71 0303 	sbcs.w	r3, r1, r3
 80034e0:	d309      	bcc.n	80034f6 <xTaskCheckForTimeOut+0xb6>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80034e2:	2301      	movs	r3, #1
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
            *pxTicksToWait = ( TickType_t ) 0;
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9c1 2300 	strd	r2, r3, [r1]
 80034f4:	e022      	b.n	800353c <xTaskCheckForTimeOut+0xfc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003500:	4290      	cmp	r0, r2
 8003502:	eb71 0303 	sbcs.w	r3, r1, r3
 8003506:	d210      	bcs.n	800352a <xTaskCheckForTimeOut+0xea>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800350e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003512:	1a84      	subs	r4, r0, r2
 8003514:	eb61 0503 	sbc.w	r5, r1, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	e9c3 4500 	strd	r4, r5, [r3]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ff74 	bl	800340c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
 8003528:	e008      	b.n	800353c <xTaskCheckForTimeOut+0xfc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800352a:	6839      	ldr	r1, [r7, #0]
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9c1 2300 	strd	r2, r3, [r1]
            xReturn = pdTRUE;
 8003538:	2301      	movs	r3, #1
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    taskEXIT_CRITICAL();
 800353c:	f000 ff22 	bl	8004384 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003542:	4619      	mov	r1, r3
 8003544:	20e8      	movs	r0, #232	@ 0xe8
 8003546:	f002 fc21 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800354c:	4618      	mov	r0, r3
 800354e:	3728      	adds	r7, #40	@ 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003556:	bf00      	nop
 8003558:	20000188 	.word	0x20000188
 800355c:	200001a4 	.word	0x200001a4

08003560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003564:	4b03      	ldr	r3, [pc, #12]	@ (8003574 <vTaskMissedYield+0x14>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800356a:	20e9      	movs	r0, #233	@ 0xe9
 800356c:	f002 fbd2 	bl	8005d14 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003570:	bf00      	nop
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200001a0 	.word	0x200001a0

08003578 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003580:	f000 f84c 	bl	800361c <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003584:	4b04      	ldr	r3, [pc, #16]	@ (8003598 <prvIdleTask+0x20>)
 8003586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003594:	bf00      	nop
 8003596:	e7f3      	b.n	8003580 <prvIdleTask+0x8>
 8003598:	e000ed04 	.word	0xe000ed04

0800359c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	e00c      	b.n	80035c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4a12      	ldr	r2, [pc, #72]	@ (80035fc <prvInitialiseTaskLists+0x60>)
 80035b4:	4413      	add	r3, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe fc84 	bl	8001ec4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3301      	adds	r3, #1
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d9ef      	bls.n	80035a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80035c8:	480d      	ldr	r0, [pc, #52]	@ (8003600 <prvInitialiseTaskLists+0x64>)
 80035ca:	f7fe fc7b 	bl	8001ec4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80035ce:	480d      	ldr	r0, [pc, #52]	@ (8003604 <prvInitialiseTaskLists+0x68>)
 80035d0:	f7fe fc78 	bl	8001ec4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80035d4:	480c      	ldr	r0, [pc, #48]	@ (8003608 <prvInitialiseTaskLists+0x6c>)
 80035d6:	f7fe fc75 	bl	8001ec4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80035da:	480c      	ldr	r0, [pc, #48]	@ (800360c <prvInitialiseTaskLists+0x70>)
 80035dc:	f7fe fc72 	bl	8001ec4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80035e0:	480b      	ldr	r0, [pc, #44]	@ (8003610 <prvInitialiseTaskLists+0x74>)
 80035e2:	f7fe fc6f 	bl	8001ec4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80035e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <prvInitialiseTaskLists+0x78>)
 80035e8:	4a05      	ldr	r2, [pc, #20]	@ (8003600 <prvInitialiseTaskLists+0x64>)
 80035ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003618 <prvInitialiseTaskLists+0x7c>)
 80035ee:	4a05      	ldr	r2, [pc, #20]	@ (8003604 <prvInitialiseTaskLists+0x68>)
 80035f0:	601a      	str	r2, [r3, #0]
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000080 	.word	0x20000080
 8003600:	200000f8 	.word	0x200000f8
 8003604:	20000110 	.word	0x20000110
 8003608:	20000130 	.word	0x20000130
 800360c:	20000148 	.word	0x20000148
 8003610:	20000168 	.word	0x20000168
 8003614:	20000128 	.word	0x20000128
 8003618:	2000012c 	.word	0x2000012c

0800361c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003622:	e019      	b.n	8003658 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003624:	f000 fe7c 	bl	8004320 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003628:	4b10      	ldr	r3, [pc, #64]	@ (800366c <prvCheckTasksWaitingTermination+0x50>)
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3308      	adds	r3, #8
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe fcbe 	bl	8001fb6 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800363a:	4b0d      	ldr	r3, [pc, #52]	@ (8003670 <prvCheckTasksWaitingTermination+0x54>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3b01      	subs	r3, #1
 8003640:	4a0b      	ldr	r2, [pc, #44]	@ (8003670 <prvCheckTasksWaitingTermination+0x54>)
 8003642:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <prvCheckTasksWaitingTermination+0x58>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3b01      	subs	r3, #1
 800364a:	4a0a      	ldr	r2, [pc, #40]	@ (8003674 <prvCheckTasksWaitingTermination+0x58>)
 800364c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800364e:	f000 fe99 	bl	8004384 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f810 	bl	8003678 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003658:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <prvCheckTasksWaitingTermination+0x58>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e1      	bne.n	8003624 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000148 	.word	0x20000148
 8003670:	20000180 	.word	0x20000180
 8003674:	20000160 	.word	0x20000160

08003678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003686:	2b00      	cmp	r3, #0
 8003688:	d108      	bne.n	800369c <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368e:	4618      	mov	r0, r3
 8003690:	f001 f87e 	bl	8004790 <vPortFree>
                vPortFree( pxTCB );
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f001 f87b 	bl	8004790 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800369a:	e019      	b.n	80036d0 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d103      	bne.n	80036ae <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f001 f872 	bl	8004790 <vPortFree>
    }
 80036ac:	e010      	b.n	80036d0 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d00b      	beq.n	80036d0 <prvDeleteTCB+0x58>
    __asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	60fb      	str	r3, [r7, #12]
}
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <prvDeleteTCB+0x54>
    }
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <prvResetNextTaskUnblockTime+0x38>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d107      	bne.n	80036f6 <prvResetNextTaskUnblockTime+0x1e>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036e6:	490b      	ldr	r1, [pc, #44]	@ (8003714 <prvResetNextTaskUnblockTime+0x3c>)
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036f0:	e9c1 2300 	strd	r2, r3, [r1]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036f4:	e007      	b.n	8003706 <prvResetNextTaskUnblockTime+0x2e>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036f6:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <prvResetNextTaskUnblockTime+0x38>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	4904      	ldr	r1, [pc, #16]	@ (8003714 <prvResetNextTaskUnblockTime+0x3c>)
 8003702:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	20000128 	.word	0x20000128
 8003714:	200001b0 	.word	0x200001b0

08003718 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800371e:	4b0d      	ldr	r3, [pc, #52]	@ (8003754 <xTaskGetSchedulerState+0x3c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003726:	2301      	movs	r3, #1
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	e008      	b.n	800373e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800372c:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <xTaskGetSchedulerState+0x40>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d102      	bne.n	800373a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003734:	2302      	movs	r3, #2
 8003736:	607b      	str	r3, [r7, #4]
 8003738:	e001      	b.n	800373e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4619      	mov	r1, r3
 8003742:	20f5      	movs	r0, #245	@ 0xf5
 8003744:	f002 fb22 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003748:	687b      	ldr	r3, [r7, #4]
    }
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000194 	.word	0x20000194
 8003758:	200001bc 	.word	0x200001bc

0800375c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800375c:	b5b0      	push	{r4, r5, r7, lr}
 800375e:	b08c      	sub	sp, #48	@ 0x30
 8003760:	af00      	add	r7, sp, #0
 8003762:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003768:	4b41      	ldr	r3, [pc, #260]	@ (8003870 <prvAddCurrentTaskToDelayedList+0x114>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003772:	4b40      	ldr	r3, [pc, #256]	@ (8003874 <prvAddCurrentTaskToDelayedList+0x118>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003778:	4b3f      	ldr	r3, [pc, #252]	@ (8003878 <prvAddCurrentTaskToDelayedList+0x11c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	623b      	str	r3, [r7, #32]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800377e:	4b3f      	ldr	r3, [pc, #252]	@ (800387c <prvAddCurrentTaskToDelayedList+0x120>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3308      	adds	r3, #8
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe fc16 	bl	8001fb6 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800378a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003792:	bf08      	it	eq
 8003794:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8003798:	d125      	bne.n	80037e6 <prvAddCurrentTaskToDelayedList+0x8a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d022      	beq.n	80037e6 <prvAddCurrentTaskToDelayedList+0x8a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037a0:	4b37      	ldr	r3, [pc, #220]	@ (8003880 <prvAddCurrentTaskToDelayedList+0x124>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	4b35      	ldr	r3, [pc, #212]	@ (800387c <prvAddCurrentTaskToDelayedList+0x120>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	611a      	str	r2, [r3, #16]
 80037ae:	4b33      	ldr	r3, [pc, #204]	@ (800387c <prvAddCurrentTaskToDelayedList+0x120>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	68d2      	ldr	r2, [r2, #12]
 80037b6:	615a      	str	r2, [r3, #20]
 80037b8:	4b30      	ldr	r3, [pc, #192]	@ (800387c <prvAddCurrentTaskToDelayedList+0x120>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	3208      	adds	r2, #8
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	4b2d      	ldr	r3, [pc, #180]	@ (800387c <prvAddCurrentTaskToDelayedList+0x120>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f103 0208 	add.w	r2, r3, #8
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	60da      	str	r2, [r3, #12]
 80037d0:	4b2a      	ldr	r3, [pc, #168]	@ (800387c <prvAddCurrentTaskToDelayedList+0x120>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003880 <prvAddCurrentTaskToDelayedList+0x124>)
 80037d6:	61da      	str	r2, [r3, #28]
 80037d8:	4b29      	ldr	r3, [pc, #164]	@ (8003880 <prvAddCurrentTaskToDelayedList+0x124>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	4a28      	ldr	r2, [pc, #160]	@ (8003880 <prvAddCurrentTaskToDelayedList+0x124>)
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037e4:	e03f      	b.n	8003866 <prvAddCurrentTaskToDelayedList+0x10a>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80037e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80037ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ee:	1884      	adds	r4, r0, r2
 80037f0:	eb41 0503 	adc.w	r5, r1, r3
 80037f4:	e9c7 4504 	strd	r4, r5, [r7, #16]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037f8:	4b20      	ldr	r3, [pc, #128]	@ (800387c <prvAddCurrentTaskToDelayedList+0x120>)
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003800:	e9c1 2302 	strd	r2, r3, [r1, #8]
            if( xTimeToWake < xConstTickCount )
 8003804:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003808:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800380c:	4290      	cmp	r0, r2
 800380e:	eb71 0303 	sbcs.w	r3, r1, r3
 8003812:	d20d      	bcs.n	8003830 <prvAddCurrentTaskToDelayedList+0xd4>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003814:	4b19      	ldr	r3, [pc, #100]	@ (800387c <prvAddCurrentTaskToDelayedList+0x120>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2104      	movs	r1, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f002 fbf0 	bl	8006000 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003820:	4b16      	ldr	r3, [pc, #88]	@ (800387c <prvAddCurrentTaskToDelayedList+0x120>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3308      	adds	r3, #8
 8003826:	4619      	mov	r1, r3
 8003828:	6a38      	ldr	r0, [r7, #32]
 800382a:	f7fe fb7f 	bl	8001f2c <vListInsert>
}
 800382e:	e01a      	b.n	8003866 <prvAddCurrentTaskToDelayedList+0x10a>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003830:	4b12      	ldr	r3, [pc, #72]	@ (800387c <prvAddCurrentTaskToDelayedList+0x120>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2104      	movs	r1, #4
 8003836:	4618      	mov	r0, r3
 8003838:	f002 fbe2 	bl	8006000 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800383c:	4b0f      	ldr	r3, [pc, #60]	@ (800387c <prvAddCurrentTaskToDelayedList+0x120>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3308      	adds	r3, #8
 8003842:	4619      	mov	r1, r3
 8003844:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003846:	f7fe fb71 	bl	8001f2c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800384a:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <prvAddCurrentTaskToDelayedList+0x128>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003854:	4290      	cmp	r0, r2
 8003856:	eb71 0303 	sbcs.w	r3, r1, r3
 800385a:	d204      	bcs.n	8003866 <prvAddCurrentTaskToDelayedList+0x10a>
                    xNextTaskUnblockTime = xTimeToWake;
 800385c:	4909      	ldr	r1, [pc, #36]	@ (8003884 <prvAddCurrentTaskToDelayedList+0x128>)
 800385e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003862:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003866:	bf00      	nop
 8003868:	3730      	adds	r7, #48	@ 0x30
 800386a:	46bd      	mov	sp, r7
 800386c:	bdb0      	pop	{r4, r5, r7, pc}
 800386e:	bf00      	nop
 8003870:	20000188 	.word	0x20000188
 8003874:	20000128 	.word	0x20000128
 8003878:	2000012c 	.word	0x2000012c
 800387c:	20000078 	.word	0x20000078
 8003880:	20000168 	.word	0x20000168
 8003884:	200001b0 	.word	0x200001b0

08003888 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4a07      	ldr	r2, [pc, #28]	@ (80038b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003898:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4a06      	ldr	r2, [pc, #24]	@ (80038b8 <vApplicationGetIdleTaskMemory+0x30>)
 800389e:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2280      	movs	r2, #128	@ 0x80
 80038a4:	601a      	str	r2, [r3, #0]
    }
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	200001c0 	.word	0x200001c0
 80038b8:	20000220 	.word	0x20000220

080038bc <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a07      	ldr	r2, [pc, #28]	@ (80038e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80038cc:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4a06      	ldr	r2, [pc, #24]	@ (80038ec <vApplicationGetTimerTaskMemory+0x30>)
 80038d2:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2280      	movs	r2, #128	@ 0x80
 80038d8:	601a      	str	r2, [r3, #0]
    }
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000420 	.word	0x20000420
 80038ec:	20000480 	.word	0x20000480

080038f0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	@ 0x28
 80038f4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80038fa:	f000 faf1 	bl	8003ee0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80038fe:	4b20      	ldr	r3, [pc, #128]	@ (8003980 <xTimerCreateTimerTask+0x90>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d021      	beq.n	800394a <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 800390e:	1d3a      	adds	r2, r7, #4
 8003910:	f107 0108 	add.w	r1, r7, #8
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ffcf 	bl	80038bc <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	9202      	str	r2, [sp, #8]
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	2304      	movs	r3, #4
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	460a      	mov	r2, r1
 8003930:	4914      	ldr	r1, [pc, #80]	@ (8003984 <xTimerCreateTimerTask+0x94>)
 8003932:	4815      	ldr	r0, [pc, #84]	@ (8003988 <xTimerCreateTimerTask+0x98>)
 8003934:	f7fe fe91 	bl	800265a <xTaskCreateStatic>
 8003938:	4603      	mov	r3, r0
 800393a:	4a14      	ldr	r2, [pc, #80]	@ (800398c <xTimerCreateTimerTask+0x9c>)
 800393c:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800393e:	4b13      	ldr	r3, [pc, #76]	@ (800398c <xTimerCreateTimerTask+0x9c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8003946:	2301      	movs	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10b      	bne.n	8003968 <xTimerCreateTimerTask+0x78>
    __asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	613b      	str	r3, [r7, #16]
}
 8003962:	bf00      	nop
 8003964:	bf00      	nop
 8003966:	e7fd      	b.n	8003964 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4619      	mov	r1, r3
 800396c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003970:	f002 fa0c 	bl	8005d8c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003974:	697b      	ldr	r3, [r7, #20]
    }
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	200006b8 	.word	0x200006b8
 8003984:	0800646c 	.word	0x0800646c
 8003988:	08003a69 	.word	0x08003a69
 800398c:	200006bc 	.word	0x200006bc

08003990 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003994:	b088      	sub	sp, #32
 8003996:	af04      	add	r7, sp, #16
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	e9c7 2300 	strd	r2, r3, [r7]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800399e:	e00d      	b.n	80039bc <prvReloadTimer+0x2c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039aa:	1884      	adds	r4, r0, r2
 80039ac:	eb41 0503 	adc.w	r5, r1, r3
 80039b0:	e9c7 4500 	strd	r4, r5, [r7]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80039c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039c6:	eb10 0802 	adds.w	r8, r0, r2
 80039ca:	eb41 0903 	adc.w	r9, r1, r3
 80039ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039da:	e9cd 2300 	strd	r2, r3, [sp]
 80039de:	4642      	mov	r2, r8
 80039e0:	464b      	mov	r3, r9
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f906 	bl	8003bf4 <prvInsertTimerInActiveList>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1d8      	bne.n	80039a0 <prvReloadTimer+0x10>
        }
    }
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080039fc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003a06:	e9c7 2300 	strd	r2, r3, [r7]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a0a:	4b16      	ldr	r3, [pc, #88]	@ (8003a64 <prvProcessExpiredTimer+0x68>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3308      	adds	r3, #8
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fe facc 	bl	8001fb6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d009      	beq.n	8003a40 <prvProcessExpiredTimer+0x44>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a30:	e9cd 2300 	strd	r2, r3, [sp]
 8003a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a38:	6978      	ldr	r0, [r7, #20]
 8003a3a:	f7ff ffa9 	bl	8003990 <prvReloadTimer>
 8003a3e:	e008      	b.n	8003a52 <prvProcessExpiredTimer+0x56>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	4798      	blx	r3
    }
 8003a5a:	bf00      	nop
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200006b0 	.word	0x200006b0

08003a68 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a70:	f107 030c 	add.w	r3, r7, #12
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f869 	bl	8003b4c <prvGetNextExpireTime>
 8003a7a:	e9c7 0104 	strd	r0, r1, [r7, #16]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	461a      	mov	r2, r3
 8003a82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a86:	f000 f805 	bl	8003a94 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003a8a:	f000 f909 	bl	8003ca0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a8e:	bf00      	nop
 8003a90:	e7ee      	b.n	8003a70 <prvTimerTask+0x8>
	...

08003a94 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a96:	b08b      	sub	sp, #44	@ 0x2c
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003aa0:	f7ff f86c 	bl	8002b7c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 f87b 	bl	8003ba4 <prvSampleTimeNow>
 8003aae:	e9c7 0106 	strd	r0, r1, [r7, #24]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d13d      	bne.n	8003b34 <prvProcessTimerOrBlockTask+0xa0>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d110      	bne.n	8003ae0 <prvProcessTimerOrBlockTask+0x4c>
 8003abe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ac6:	4290      	cmp	r0, r2
 8003ac8:	eb71 0303 	sbcs.w	r3, r1, r3
 8003acc:	d308      	bcc.n	8003ae0 <prvProcessTimerOrBlockTask+0x4c>
                {
                    ( void ) xTaskResumeAll();
 8003ace:	f7ff f863 	bl	8002b98 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ad2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ada:	f7ff ff8f 	bl	80039fc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003ade:	e02b      	b.n	8003b38 <prvProcessTimerOrBlockTask+0xa4>
                    if( xListWasEmpty != pdFALSE )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <prvProcessTimerOrBlockTask+0x64>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ae6:	4b16      	ldr	r3, [pc, #88]	@ (8003b40 <prvProcessTimerOrBlockTask+0xac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <prvProcessTimerOrBlockTask+0x60>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <prvProcessTimerOrBlockTask+0x62>
 8003af4:	2300      	movs	r3, #0
 8003af6:	607b      	str	r3, [r7, #4]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003af8:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <prvProcessTimerOrBlockTask+0xb0>)
 8003afa:	681e      	ldr	r6, [r3, #0]
 8003afc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b04:	1a84      	subs	r4, r0, r2
 8003b06:	eb61 0503 	sbc.w	r5, r1, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	4622      	mov	r2, r4
 8003b10:	462b      	mov	r3, r5
 8003b12:	4630      	mov	r0, r6
 8003b14:	f7fe fd06 	bl	8002524 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b18:	f7ff f83e 	bl	8002b98 <xTaskResumeAll>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <prvProcessTimerOrBlockTask+0xa4>
                        taskYIELD_WITHIN_API();
 8003b22:	4b09      	ldr	r3, [pc, #36]	@ (8003b48 <prvProcessTimerOrBlockTask+0xb4>)
 8003b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	f3bf 8f6f 	isb	sy
    }
 8003b32:	e001      	b.n	8003b38 <prvProcessTimerOrBlockTask+0xa4>
                ( void ) xTaskResumeAll();
 8003b34:	f7ff f830 	bl	8002b98 <xTaskResumeAll>
    }
 8003b38:	bf00      	nop
 8003b3a:	3724      	adds	r7, #36	@ 0x24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b40:	200006b4 	.word	0x200006b4
 8003b44:	200006b8 	.word	0x200006b8
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b54:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <prvGetNextExpireTime+0x54>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <prvGetNextExpireTime+0x16>
 8003b5e:	2201      	movs	r2, #1
 8003b60:	e000      	b.n	8003b64 <prvGetNextExpireTime+0x18>
 8003b62:	2200      	movs	r2, #0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d107      	bne.n	8003b80 <prvGetNextExpireTime+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <prvGetNextExpireTime+0x54>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003b7e:	e005      	b.n	8003b8c <prvGetNextExpireTime+0x40>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9c7 2302 	strd	r2, r3, [r7, #8]
        }

        return xNextExpireTime;
 8003b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	200006b0 	.word	0x200006b0

08003ba4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003bac:	f7ff f904 	bl	8002db8 <xTaskGetTickCount>
 8003bb0:	e9c7 0102 	strd	r0, r1, [r7, #8]

        if( xTimeNow < xLastTime )
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <prvSampleTimeNow+0x4c>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bbe:	4290      	cmp	r0, r2
 8003bc0:	eb71 0303 	sbcs.w	r3, r1, r3
 8003bc4:	d205      	bcs.n	8003bd2 <prvSampleTimeNow+0x2e>
        {
            prvSwitchTimerLists();
 8003bc6:	f000 f961 	bl	8003e8c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e002      	b.n	8003bd8 <prvSampleTimeNow+0x34>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003bd8:	4905      	ldr	r1, [pc, #20]	@ (8003bf0 <prvSampleTimeNow+0x4c>)
 8003bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bde:	e9c1 2300 	strd	r2, r3, [r1]

        return xTimeNow;
 8003be2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	200006c0 	.word	0x200006c0

08003bf4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003bf4:	b5b0      	push	{r4, r5, r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	e9c7 2300 	strd	r2, r3, [r7]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	619a      	str	r2, [r3, #24]

        if( xNextExpiryTime <= xTimeNow )
 8003c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c1c:	4290      	cmp	r0, r2
 8003c1e:	eb71 0303 	sbcs.w	r3, r1, r3
 8003c22:	d319      	bcc.n	8003c58 <prvInsertTimerInActiveList+0x64>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003c24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003c2c:	1a84      	subs	r4, r0, r2
 8003c2e:	eb61 0503 	sbc.w	r5, r1, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c38:	4294      	cmp	r4, r2
 8003c3a:	eb75 0303 	sbcs.w	r3, r5, r3
 8003c3e:	d302      	bcc.n	8003c46 <prvInsertTimerInActiveList+0x52>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c40:	2301      	movs	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e023      	b.n	8003c8e <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c46:	4b14      	ldr	r3, [pc, #80]	@ (8003c98 <prvInsertTimerInActiveList+0xa4>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f7fe f96b 	bl	8001f2c <vListInsert>
 8003c56:	e01a      	b.n	8003c8e <prvInsertTimerInActiveList+0x9a>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003c60:	4290      	cmp	r0, r2
 8003c62:	eb71 0303 	sbcs.w	r3, r1, r3
 8003c66:	d20a      	bcs.n	8003c7e <prvInsertTimerInActiveList+0x8a>
 8003c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003c70:	4290      	cmp	r0, r2
 8003c72:	eb71 0303 	sbcs.w	r3, r1, r3
 8003c76:	d302      	bcc.n	8003c7e <prvInsertTimerInActiveList+0x8a>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e007      	b.n	8003c8e <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c7e:	4b07      	ldr	r3, [pc, #28]	@ (8003c9c <prvInsertTimerInActiveList+0xa8>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3308      	adds	r3, #8
 8003c86:	4619      	mov	r1, r3
 8003c88:	4610      	mov	r0, r2
 8003c8a:	f7fe f94f 	bl	8001f2c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003c8e:	697b      	ldr	r3, [r7, #20]
    }
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bdb0      	pop	{r4, r5, r7, pc}
 8003c98:	200006b4 	.word	0x200006b4
 8003c9c:	200006b0 	.word	0x200006b0

08003ca0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca4:	b092      	sub	sp, #72	@ 0x48
 8003ca6:	af04      	add	r7, sp, #16
        DaemonTaskMessage_t xMessage = { 0 };
 8003ca8:	f107 0308 	add.w	r3, r7, #8
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
 8003cb6:	611a      	str	r2, [r3, #16]
 8003cb8:	615a      	str	r2, [r3, #20]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003cba:	e0d0      	b.n	8003e5e <prvProcessReceivedCommands+0x1be>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f2c0 80cd 	blt.w	8003e5e <prvProcessReceivedCommands+0x1be>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	637b      	str	r3, [r7, #52]	@ 0x34

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <prvProcessReceivedCommands+0x3a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe f96e 	bl	8001fb6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cda:	1d3b      	adds	r3, r7, #4
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff61 	bl	8003ba4 <prvSampleTimeNow>
 8003ce2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

                switch( xMessage.xMessageID )
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	f200 80b4 	bhi.w	8003e58 <prvProcessReceivedCommands+0x1b8>
 8003cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <prvProcessReceivedCommands+0x58>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d1d 	.word	0x08003d1d
 8003d00:	08003daf 	.word	0x08003daf
 8003d04:	08003dc3 	.word	0x08003dc3
 8003d08:	08003e2f 	.word	0x08003e2f
 8003d0c:	08003d1d 	.word	0x08003d1d
 8003d10:	08003d1d 	.word	0x08003d1d
 8003d14:	08003daf 	.word	0x08003daf
 8003d18:	08003dc3 	.word	0x08003dc3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d38:	1884      	adds	r4, r0, r2
 8003d3a:	eb41 0503 	adc.w	r5, r1, r3
 8003d3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d4a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d4e:	4622      	mov	r2, r4
 8003d50:	462b      	mov	r3, r5
 8003d52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003d54:	f7ff ff4e 	bl	8003bf4 <prvInsertTimerInActiveList>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d07e      	beq.n	8003e5c <prvProcessReceivedCommands+0x1bc>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d012      	beq.n	8003d92 <prvProcessReceivedCommands+0xf2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003d6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d76:	eb10 0802 	adds.w	r8, r0, r2
 8003d7a:	eb41 0903 	adc.w	r9, r1, r3
 8003d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d82:	e9cd 2300 	strd	r2, r3, [sp]
 8003d86:	4642      	mov	r2, r8
 8003d88:	464b      	mov	r3, r9
 8003d8a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003d8c:	f7ff fe00 	bl	8003990 <prvReloadTimer>
 8003d90:	e008      	b.n	8003da4 <prvProcessReceivedCommands+0x104>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003daa:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003dac:	e056      	b.n	8003e5c <prvProcessReceivedCommands+0x1bc>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 8003dc0:	e04d      	b.n	8003e5e <prvProcessReceivedCommands+0x1be>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003dd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003dd8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003dda:	e9c1 2308 	strd	r2, r3, [r1, #32]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	d10b      	bne.n	8003e00 <prvProcessReceivedCommands+0x160>
    __asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
 8003dfe:	e7fd      	b.n	8003dfc <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e02:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e0a:	eb10 0a02 	adds.w	sl, r0, r2
 8003e0e:	eb41 0b03 	adc.w	fp, r1, r3
 8003e12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e1e:	e9cd 2300 	strd	r2, r3, [sp]
 8003e22:	4652      	mov	r2, sl
 8003e24:	465b      	mov	r3, fp
 8003e26:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e28:	f7ff fee4 	bl	8003bf4 <prvInsertTimerInActiveList>
                        break;
 8003e2c:	e017      	b.n	8003e5e <prvProcessReceivedCommands+0x1be>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <prvProcessReceivedCommands+0x1a4>
                            {
                                vPortFree( pxTimer );
 8003e3c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e3e:	f000 fca7 	bl	8004790 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e42:	e00c      	b.n	8003e5e <prvProcessReceivedCommands+0x1be>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 8003e56:	e002      	b.n	8003e5e <prvProcessReceivedCommands+0x1be>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <prvProcessReceivedCommands+0x1be>
                        break;
 8003e5c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <prvProcessReceivedCommands+0x1e8>)
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	f107 0108 	add.w	r1, r7, #8
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	f7fe f9e3 	bl	8002238 <xQueueReceive>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f47f af21 	bne.w	8003cbc <prvProcessReceivedCommands+0x1c>
                }
            }
        }
    }
 8003e7a:	bf00      	nop
 8003e7c:	bf00      	nop
 8003e7e:	3738      	adds	r7, #56	@ 0x38
 8003e80:	46bd      	mov	sp, r7
 8003e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e86:	bf00      	nop
 8003e88:	200006b8 	.word	0x200006b8

08003e8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e92:	e00e      	b.n	8003eb2 <prvSwitchTimerLists+0x26>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e94:	4b10      	ldr	r3, [pc, #64]	@ (8003ed8 <prvSwitchTimerLists+0x4c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	e9c7 2300 	strd	r2, r3, [r7]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003eae:	f7ff fda5 	bl	80039fc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <prvSwitchTimerLists+0x4c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1eb      	bne.n	8003e94 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <prvSwitchTimerLists+0x4c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]
        pxCurrentTimerList = pxOverflowTimerList;
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <prvSwitchTimerLists+0x50>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a04      	ldr	r2, [pc, #16]	@ (8003ed8 <prvSwitchTimerLists+0x4c>)
 8003ec8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003eca:	4a04      	ldr	r2, [pc, #16]	@ (8003edc <prvSwitchTimerLists+0x50>)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6013      	str	r3, [r2, #0]
    }
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	200006b0 	.word	0x200006b0
 8003edc:	200006b4 	.word	0x200006b4

08003ee0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ee6:	f000 fa1b 	bl	8004320 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003eea:	4b10      	ldr	r3, [pc, #64]	@ (8003f2c <prvCheckForValidListAndQueue+0x4c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <prvCheckForValidListAndQueue+0x40>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ef2:	480f      	ldr	r0, [pc, #60]	@ (8003f30 <prvCheckForValidListAndQueue+0x50>)
 8003ef4:	f7fd ffe6 	bl	8001ec4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ef8:	480e      	ldr	r0, [pc, #56]	@ (8003f34 <prvCheckForValidListAndQueue+0x54>)
 8003efa:	f7fd ffe3 	bl	8001ec4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <prvCheckForValidListAndQueue+0x58>)
 8003f00:	4a0b      	ldr	r2, [pc, #44]	@ (8003f30 <prvCheckForValidListAndQueue+0x50>)
 8003f02:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003f04:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <prvCheckForValidListAndQueue+0x5c>)
 8003f06:	4a0b      	ldr	r2, [pc, #44]	@ (8003f34 <prvCheckForValidListAndQueue+0x54>)
 8003f08:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f40 <prvCheckForValidListAndQueue+0x60>)
 8003f10:	4a0c      	ldr	r2, [pc, #48]	@ (8003f44 <prvCheckForValidListAndQueue+0x64>)
 8003f12:	2118      	movs	r1, #24
 8003f14:	200a      	movs	r0, #10
 8003f16:	f7fe f906 	bl	8002126 <xQueueGenericCreateStatic>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4a03      	ldr	r2, [pc, #12]	@ (8003f2c <prvCheckForValidListAndQueue+0x4c>)
 8003f1e:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f20:	f000 fa30 	bl	8004384 <vPortExitCritical>
    }
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200006b8 	.word	0x200006b8
 8003f30:	20000680 	.word	0x20000680
 8003f34:	20000698 	.word	0x20000698
 8003f38:	200006b0 	.word	0x200006b0
 8003f3c:	200006b4 	.word	0x200006b4
 8003f40:	200007b8 	.word	0x200007b8
 8003f44:	200006c8 	.word	0x200006c8

08003f48 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3b04      	subs	r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3b04      	subs	r3, #4
 8003f66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f023 0201 	bic.w	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3b04      	subs	r3, #4
 8003f76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003f78:	4a0c      	ldr	r2, [pc, #48]	@ (8003fac <pxPortInitialiseStack+0x64>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3b14      	subs	r3, #20
 8003f82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3b04      	subs	r3, #4
 8003f8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f06f 0202 	mvn.w	r2, #2
 8003f96:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3b20      	subs	r3, #32
 8003f9c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	08003fb1 	.word	0x08003fb1

08003fb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003fba:	4b13      	ldr	r3, [pc, #76]	@ (8004008 <prvTaskExitError+0x58>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fc2:	d00b      	beq.n	8003fdc <prvTaskExitError+0x2c>
    __asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60fb      	str	r3, [r7, #12]
}
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	e7fd      	b.n	8003fd8 <prvTaskExitError+0x28>
    __asm volatile
 8003fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	60bb      	str	r3, [r7, #8]
}
 8003fee:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003ff0:	bf00      	nop
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0fc      	beq.n	8003ff2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	2000000c 	.word	0x2000000c
 800400c:	00000000 	.word	0x00000000

08004010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004010:	4b07      	ldr	r3, [pc, #28]	@ (8004030 <pxCurrentTCBConst2>)
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	6808      	ldr	r0, [r1, #0]
 8004016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401a:	f380 8809 	msr	PSP, r0
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f04f 0000 	mov.w	r0, #0
 8004026:	f380 8811 	msr	BASEPRI, r0
 800402a:	4770      	bx	lr
 800402c:	f3af 8000 	nop.w

08004030 <pxCurrentTCBConst2>:
 8004030:	20000078 	.word	0x20000078
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop

08004038 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004038:	4808      	ldr	r0, [pc, #32]	@ (800405c <prvPortStartFirstTask+0x24>)
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	6800      	ldr	r0, [r0, #0]
 800403e:	f380 8808 	msr	MSP, r0
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f380 8814 	msr	CONTROL, r0
 800404a:	b662      	cpsie	i
 800404c:	b661      	cpsie	f
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	df00      	svc	0
 8004058:	bf00      	nop
 800405a:	0000      	.short	0x0000
 800405c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop

08004064 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08c      	sub	sp, #48	@ 0x30
 8004068:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800406a:	4b69      	ldr	r3, [pc, #420]	@ (8004210 <xPortStartScheduler+0x1ac>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a69      	ldr	r2, [pc, #420]	@ (8004214 <xPortStartScheduler+0x1b0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10b      	bne.n	800408c <xPortStartScheduler+0x28>
    __asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	623b      	str	r3, [r7, #32]
}
 8004086:	bf00      	nop
 8004088:	bf00      	nop
 800408a:	e7fd      	b.n	8004088 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800408c:	4b60      	ldr	r3, [pc, #384]	@ (8004210 <xPortStartScheduler+0x1ac>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a61      	ldr	r2, [pc, #388]	@ (8004218 <xPortStartScheduler+0x1b4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10b      	bne.n	80040ae <xPortStartScheduler+0x4a>
    __asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040a8:	bf00      	nop
 80040aa:	bf00      	nop
 80040ac:	e7fd      	b.n	80040aa <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80040ae:	4b5b      	ldr	r3, [pc, #364]	@ (800421c <xPortStartScheduler+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80040b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b6:	332c      	adds	r3, #44	@ 0x2c
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a59      	ldr	r2, [pc, #356]	@ (8004220 <xPortStartScheduler+0x1bc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00b      	beq.n	80040d8 <xPortStartScheduler+0x74>
    __asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	61fb      	str	r3, [r7, #28]
}
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	e7fd      	b.n	80040d4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80040d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040da:	3338      	adds	r3, #56	@ 0x38
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a51      	ldr	r2, [pc, #324]	@ (8004224 <xPortStartScheduler+0x1c0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <xPortStartScheduler+0x98>
    __asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	61bb      	str	r3, [r7, #24]
}
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	e7fd      	b.n	80040f8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004100:	4b49      	ldr	r3, [pc, #292]	@ (8004228 <xPortStartScheduler+0x1c4>)
 8004102:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	22ff      	movs	r2, #255	@ 0xff
 8004110:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004122:	b2da      	uxtb	r2, r3
 8004124:	4b41      	ldr	r3, [pc, #260]	@ (800422c <xPortStartScheduler+0x1c8>)
 8004126:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004128:	4b40      	ldr	r3, [pc, #256]	@ (800422c <xPortStartScheduler+0x1c8>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <xPortStartScheduler+0xe4>
    __asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	617b      	str	r3, [r7, #20]
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004152:	2b00      	cmp	r3, #0
 8004154:	d013      	beq.n	800417e <xPortStartScheduler+0x11a>
    __asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	613b      	str	r3, [r7, #16]
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	e7fd      	b.n	800416a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	3301      	adds	r3, #1
 8004172:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004186:	2b80      	cmp	r3, #128	@ 0x80
 8004188:	d0f1      	beq.n	800416e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d103      	bne.n	8004198 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004190:	4b27      	ldr	r3, [pc, #156]	@ (8004230 <xPortStartScheduler+0x1cc>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e004      	b.n	80041a2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f1c3 0307 	rsb	r3, r3, #7
 800419e:	4a24      	ldr	r2, [pc, #144]	@ (8004230 <xPortStartScheduler+0x1cc>)
 80041a0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041a2:	4b23      	ldr	r3, [pc, #140]	@ (8004230 <xPortStartScheduler+0x1cc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	4a21      	ldr	r2, [pc, #132]	@ (8004230 <xPortStartScheduler+0x1cc>)
 80041aa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041ac:	4b20      	ldr	r3, [pc, #128]	@ (8004230 <xPortStartScheduler+0x1cc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <xPortStartScheduler+0x1cc>)
 80041b6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041be:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004234 <xPortStartScheduler+0x1d0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004234 <xPortStartScheduler+0x1d0>)
 80041c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041cc:	4b19      	ldr	r3, [pc, #100]	@ (8004234 <xPortStartScheduler+0x1d0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a18      	ldr	r2, [pc, #96]	@ (8004234 <xPortStartScheduler+0x1d0>)
 80041d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041d6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80041d8:	4b17      	ldr	r3, [pc, #92]	@ (8004238 <xPortStartScheduler+0x1d4>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80041de:	f000 f933 	bl	8004448 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80041e2:	4b16      	ldr	r3, [pc, #88]	@ (800423c <xPortStartScheduler+0x1d8>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80041e8:	f000 f952 	bl	8004490 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041ec:	4b14      	ldr	r3, [pc, #80]	@ (8004240 <xPortStartScheduler+0x1dc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a13      	ldr	r2, [pc, #76]	@ (8004240 <xPortStartScheduler+0x1dc>)
 80041f2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80041f6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80041f8:	f7ff ff1e 	bl	8004038 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80041fc:	f7fe ff3e 	bl	800307c <vTaskSwitchContext>
    prvTaskExitError();
 8004200:	f7ff fed6 	bl	8003fb0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3730      	adds	r7, #48	@ 0x30
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	e000ed00 	.word	0xe000ed00
 8004214:	410fc271 	.word	0x410fc271
 8004218:	410fc270 	.word	0x410fc270
 800421c:	e000ed08 	.word	0xe000ed08
 8004220:	08004011 	.word	0x08004011
 8004224:	080043e1 	.word	0x080043e1
 8004228:	e000e400 	.word	0xe000e400
 800422c:	20000808 	.word	0x20000808
 8004230:	2000080c 	.word	0x2000080c
 8004234:	e000ed20 	.word	0xe000ed20
 8004238:	e000ed1c 	.word	0xe000ed1c
 800423c:	2000000c 	.word	0x2000000c
 8004240:	e000ef34 	.word	0xe000ef34

08004244 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800424a:	4b2f      	ldr	r3, [pc, #188]	@ (8004308 <vInitPrioGroupValue+0xc4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2f      	ldr	r2, [pc, #188]	@ (800430c <vInitPrioGroupValue+0xc8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d10b      	bne.n	800426c <vInitPrioGroupValue+0x28>
    __asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	60fb      	str	r3, [r7, #12]
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800426c:	4b26      	ldr	r3, [pc, #152]	@ (8004308 <vInitPrioGroupValue+0xc4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a27      	ldr	r2, [pc, #156]	@ (8004310 <vInitPrioGroupValue+0xcc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10b      	bne.n	800428e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	613b      	str	r3, [r7, #16]
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	e7fd      	b.n	800428a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800428e:	4b21      	ldr	r3, [pc, #132]	@ (8004314 <vInitPrioGroupValue+0xd0>)
 8004290:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	22ff      	movs	r2, #255	@ 0xff
 800429e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4b19      	ldr	r3, [pc, #100]	@ (8004318 <vInitPrioGroupValue+0xd4>)
 80042b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042b6:	4b19      	ldr	r3, [pc, #100]	@ (800431c <vInitPrioGroupValue+0xd8>)
 80042b8:	2207      	movs	r2, #7
 80042ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042bc:	e009      	b.n	80042d2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80042be:	4b17      	ldr	r3, [pc, #92]	@ (800431c <vInitPrioGroupValue+0xd8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	4a15      	ldr	r2, [pc, #84]	@ (800431c <vInitPrioGroupValue+0xd8>)
 80042c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042da:	2b80      	cmp	r3, #128	@ 0x80
 80042dc:	d0ef      	beq.n	80042be <vInitPrioGroupValue+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042de:	4b0f      	ldr	r3, [pc, #60]	@ (800431c <vInitPrioGroupValue+0xd8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	4a0d      	ldr	r2, [pc, #52]	@ (800431c <vInitPrioGroupValue+0xd8>)
 80042e6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042e8:	4b0c      	ldr	r3, [pc, #48]	@ (800431c <vInitPrioGroupValue+0xd8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042f0:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <vInitPrioGroupValue+0xd8>)
 80042f2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	e000ed00 	.word	0xe000ed00
 800430c:	410fc271 	.word	0x410fc271
 8004310:	410fc270 	.word	0x410fc270
 8004314:	e000e400 	.word	0xe000e400
 8004318:	20000808 	.word	0x20000808
 800431c:	2000080c 	.word	0x2000080c

08004320 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
    __asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	607b      	str	r3, [r7, #4]
}
 8004338:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800433a:	4b10      	ldr	r3, [pc, #64]	@ (800437c <vPortEnterCritical+0x5c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	4a0e      	ldr	r2, [pc, #56]	@ (800437c <vPortEnterCritical+0x5c>)
 8004342:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004344:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <vPortEnterCritical+0x5c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d110      	bne.n	800436e <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <vPortEnterCritical+0x60>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <vPortEnterCritical+0x4e>
    __asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	603b      	str	r3, [r7, #0]
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	e7fd      	b.n	800436a <vPortEnterCritical+0x4a>
    }
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	2000000c 	.word	0x2000000c
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800438a:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <vPortExitCritical+0x50>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <vPortExitCritical+0x26>
    __asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	607b      	str	r3, [r7, #4]
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop
 80043a8:	e7fd      	b.n	80043a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043aa:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <vPortExitCritical+0x50>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	4a08      	ldr	r2, [pc, #32]	@ (80043d4 <vPortExitCritical+0x50>)
 80043b2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043b4:	4b07      	ldr	r3, [pc, #28]	@ (80043d4 <vPortExitCritical+0x50>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d105      	bne.n	80043c8 <vPortExitCritical+0x44>
 80043bc:	2300      	movs	r3, #0
 80043be:	603b      	str	r3, [r7, #0]
    __asm volatile
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f383 8811 	msr	BASEPRI, r3
}
 80043c6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	2000000c 	.word	0x2000000c
	...

080043e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80043e0:	f3ef 8009 	mrs	r0, PSP
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <pxCurrentTCBConst>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	f01e 0f10 	tst.w	lr, #16
 80043f0:	bf08      	it	eq
 80043f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fa:	6010      	str	r0, [r2, #0]
 80043fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004400:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004404:	f380 8811 	msr	BASEPRI, r0
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f7fe fe34 	bl	800307c <vTaskSwitchContext>
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f380 8811 	msr	BASEPRI, r0
 800441c:	bc09      	pop	{r0, r3}
 800441e:	6819      	ldr	r1, [r3, #0]
 8004420:	6808      	ldr	r0, [r1, #0]
 8004422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004426:	f01e 0f10 	tst.w	lr, #16
 800442a:	bf08      	it	eq
 800442c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004430:	f380 8809 	msr	PSP, r0
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w

08004440 <pxCurrentTCBConst>:
 8004440:	20000078 	.word	0x20000078
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop

08004448 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800444c:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <vPortSetupTimerInterrupt+0x34>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004452:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <vPortSetupTimerInterrupt+0x38>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004458:	4b0a      	ldr	r3, [pc, #40]	@ (8004484 <vPortSetupTimerInterrupt+0x3c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0a      	ldr	r2, [pc, #40]	@ (8004488 <vPortSetupTimerInterrupt+0x40>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	4a09      	ldr	r2, [pc, #36]	@ (800448c <vPortSetupTimerInterrupt+0x44>)
 8004466:	3b01      	subs	r3, #1
 8004468:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800446a:	4b04      	ldr	r3, [pc, #16]	@ (800447c <vPortSetupTimerInterrupt+0x34>)
 800446c:	2207      	movs	r2, #7
 800446e:	601a      	str	r2, [r3, #0]
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	e000e010 	.word	0xe000e010
 8004480:	e000e018 	.word	0xe000e018
 8004484:	20000000 	.word	0x20000000
 8004488:	51eb851f 	.word	0x51eb851f
 800448c:	e000e014 	.word	0xe000e014

08004490 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004490:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80044a0 <vPortEnableVFP+0x10>
 8004494:	6801      	ldr	r1, [r0, #0]
 8004496:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800449a:	6001      	str	r1, [r0, #0]
 800449c:	4770      	bx	lr
 800449e:	0000      	.short	0x0000
 80044a0:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80044ae:	f3ef 8305 	mrs	r3, IPSR
 80044b2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	d915      	bls.n	80044e6 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044ba:	4a18      	ldr	r2, [pc, #96]	@ (800451c <vPortValidateInterruptPriority+0x74>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044c4:	4b16      	ldr	r3, [pc, #88]	@ (8004520 <vPortValidateInterruptPriority+0x78>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	7afa      	ldrb	r2, [r7, #11]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d20b      	bcs.n	80044e6 <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	607b      	str	r3, [r7, #4]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004524 <vPortValidateInterruptPriority+0x7c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004528 <vPortValidateInterruptPriority+0x80>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d90b      	bls.n	800450e <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	603b      	str	r3, [r7, #0]
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	e7fd      	b.n	800450a <vPortValidateInterruptPriority+0x62>
    }
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	e000e3f0 	.word	0xe000e3f0
 8004520:	20000808 	.word	0x20000808
 8004524:	e000ed0c 	.word	0xe000ed0c
 8004528:	2000080c 	.word	0x2000080c

0800452c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08e      	sub	sp, #56	@ 0x38
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d022      	beq.n	8004584 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800453e:	2308      	movs	r3, #8
 8004540:	43db      	mvns	r3, r3
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d81b      	bhi.n	8004580 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8004548:	2208      	movs	r2, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	2b00      	cmp	r3, #0
 8004558:	d014      	beq.n	8004584 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	f1c3 0308 	rsb	r3, r3, #8
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	43db      	mvns	r3, r3
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d804      	bhi.n	800457a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004574:	4413      	add	r3, r2
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	e004      	b.n	8004584 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	e001      	b.n	8004584 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004584:	f7fe fafa 	bl	8002b7c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004588:	4b7a      	ldr	r3, [pc, #488]	@ (8004774 <pvPortMalloc+0x248>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004590:	f000 f984 	bl	800489c <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f2c0 80d3 	blt.w	8004742 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80cf 	beq.w	8004742 <pvPortMalloc+0x216>
 80045a4:	4b74      	ldr	r3, [pc, #464]	@ (8004778 <pvPortMalloc+0x24c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	f200 80c9 	bhi.w	8004742 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80045b0:	4b72      	ldr	r3, [pc, #456]	@ (800477c <pvPortMalloc+0x250>)
 80045b2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80045b4:	4b71      	ldr	r3, [pc, #452]	@ (800477c <pvPortMalloc+0x250>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80045ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045bc:	4a70      	ldr	r2, [pc, #448]	@ (8004780 <pvPortMalloc+0x254>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d305      	bcc.n	80045ce <pvPortMalloc+0xa2>
 80045c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c4:	4a6f      	ldr	r2, [pc, #444]	@ (8004784 <pvPortMalloc+0x258>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d801      	bhi.n	80045ce <pvPortMalloc+0xa2>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <pvPortMalloc+0xa4>
 80045ce:	2300      	movs	r3, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d129      	bne.n	8004628 <pvPortMalloc+0xfc>
    __asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	623b      	str	r3, [r7, #32]
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80045ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ee:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80045f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80045f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f8:	4a61      	ldr	r2, [pc, #388]	@ (8004780 <pvPortMalloc+0x254>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d305      	bcc.n	800460a <pvPortMalloc+0xde>
 80045fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004600:	4a60      	ldr	r2, [pc, #384]	@ (8004784 <pvPortMalloc+0x258>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d801      	bhi.n	800460a <pvPortMalloc+0xde>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <pvPortMalloc+0xe0>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <pvPortMalloc+0xfc>
    __asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	61fb      	str	r3, [r7, #28]
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	429a      	cmp	r2, r3
 8004630:	d903      	bls.n	800463a <pvPortMalloc+0x10e>
 8004632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1d8      	bne.n	80045ec <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800463a:	4b4e      	ldr	r3, [pc, #312]	@ (8004774 <pvPortMalloc+0x248>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004640:	429a      	cmp	r2, r3
 8004642:	d07e      	beq.n	8004742 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2208      	movs	r2, #8
 800464a:	4413      	add	r3, r2
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800464e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004650:	4a4b      	ldr	r2, [pc, #300]	@ (8004780 <pvPortMalloc+0x254>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d305      	bcc.n	8004662 <pvPortMalloc+0x136>
 8004656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004658:	4a4a      	ldr	r2, [pc, #296]	@ (8004784 <pvPortMalloc+0x258>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d801      	bhi.n	8004662 <pvPortMalloc+0x136>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <pvPortMalloc+0x138>
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <pvPortMalloc+0x154>
    __asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	61bb      	str	r3, [r7, #24]
}
 800467a:	bf00      	nop
 800467c:	bf00      	nop
 800467e:	e7fd      	b.n	800467c <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8004688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	429a      	cmp	r2, r3
 8004690:	d90b      	bls.n	80046aa <pvPortMalloc+0x17e>
    __asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	617b      	str	r3, [r7, #20]
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	1ad2      	subs	r2, r2, r3
 80046b2:	2308      	movs	r3, #8
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d924      	bls.n	8004704 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00b      	beq.n	80046e4 <pvPortMalloc+0x1b8>
    __asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	613b      	str	r3, [r7, #16]
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	1ad2      	subs	r2, r2, r3
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80046fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004702:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004704:	4b1c      	ldr	r3, [pc, #112]	@ (8004778 <pvPortMalloc+0x24c>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	4a1a      	ldr	r2, [pc, #104]	@ (8004778 <pvPortMalloc+0x24c>)
 8004710:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004712:	4b19      	ldr	r3, [pc, #100]	@ (8004778 <pvPortMalloc+0x24c>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b1c      	ldr	r3, [pc, #112]	@ (8004788 <pvPortMalloc+0x25c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d203      	bcs.n	8004726 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800471e:	4b16      	ldr	r3, [pc, #88]	@ (8004778 <pvPortMalloc+0x24c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a19      	ldr	r2, [pc, #100]	@ (8004788 <pvPortMalloc+0x25c>)
 8004724:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800472e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004730:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004738:	4b14      	ldr	r3, [pc, #80]	@ (800478c <pvPortMalloc+0x260>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	4a13      	ldr	r2, [pc, #76]	@ (800478c <pvPortMalloc+0x260>)
 8004740:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004742:	f7fe fa29 	bl	8002b98 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <pvPortMalloc+0x23c>
    __asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	60fb      	str	r3, [r7, #12]
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	e7fd      	b.n	8004764 <pvPortMalloc+0x238>
    return pvReturn;
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800476a:	4618      	mov	r0, r3
 800476c:	3738      	adds	r7, #56	@ 0x38
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20003018 	.word	0x20003018
 8004778:	2000301c 	.word	0x2000301c
 800477c:	20003010 	.word	0x20003010
 8004780:	20000810 	.word	0x20000810
 8004784:	2000300f 	.word	0x2000300f
 8004788:	20003020 	.word	0x20003020
 800478c:	20003024 	.word	0x20003024

08004790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d070      	beq.n	8004884 <vPortFree+0xf4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047a2:	2308      	movs	r3, #8
 80047a4:	425b      	negs	r3, r3
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	4a36      	ldr	r2, [pc, #216]	@ (800488c <vPortFree+0xfc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d305      	bcc.n	80047c4 <vPortFree+0x34>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	4a35      	ldr	r2, [pc, #212]	@ (8004890 <vPortFree+0x100>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d801      	bhi.n	80047c4 <vPortFree+0x34>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <vPortFree+0x36>
 80047c4:	2300      	movs	r3, #0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10b      	bne.n	80047e2 <vPortFree+0x52>
    __asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	617b      	str	r3, [r7, #20]
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	e7fd      	b.n	80047de <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db0b      	blt.n	8004802 <vPortFree+0x72>
    __asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	613b      	str	r3, [r7, #16]
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	e7fd      	b.n	80047fe <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <vPortFree+0x92>
    __asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	60fb      	str	r3, [r7, #12]
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	e7fd      	b.n	800481e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	da2c      	bge.n	8004884 <vPortFree+0xf4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d128      	bne.n	8004884 <vPortFree+0xf4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	605a      	str	r2, [r3, #4]
                #if ( configHEAP_CLEAR_MEMORY_ON_FREE == 1 )
                {
                    /* Check for underflow as this can occur if xBlockSize is
                     * overwritten in a heap block. */
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2208      	movs	r2, #8
 8004844:	4293      	cmp	r3, r2
 8004846:	d30a      	bcc.n	800485e <vPortFree+0xce>
                    {
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
 8004848:	2208      	movs	r2, #8
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	1898      	adds	r0, r3, r2
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2208      	movs	r2, #8
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	461a      	mov	r2, r3
 8004858:	2100      	movs	r1, #0
 800485a:	f001 fd93 	bl	8006384 <memset>
                    }
                }
                #endif

                vTaskSuspendAll();
 800485e:	f7fe f98d 	bl	8002b7c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <vPortFree+0x104>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4413      	add	r3, r2
 800486c:	4a09      	ldr	r2, [pc, #36]	@ (8004894 <vPortFree+0x104>)
 800486e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004870:	69b8      	ldr	r0, [r7, #24]
 8004872:	f000 f86d 	bl	8004950 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004876:	4b08      	ldr	r3, [pc, #32]	@ (8004898 <vPortFree+0x108>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3301      	adds	r3, #1
 800487c:	4a06      	ldr	r2, [pc, #24]	@ (8004898 <vPortFree+0x108>)
 800487e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004880:	f7fe f98a 	bl	8002b98 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004884:	bf00      	nop
 8004886:	3720      	adds	r7, #32
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000810 	.word	0x20000810
 8004890:	2000300f 	.word	0x2000300f
 8004894:	2000301c 	.word	0x2000301c
 8004898:	20003028 	.word	0x20003028

0800489c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048a2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80048a6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80048a8:	4b24      	ldr	r3, [pc, #144]	@ (800493c <prvHeapInit+0xa0>)
 80048aa:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00c      	beq.n	80048d0 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3307      	adds	r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	4a1c      	ldr	r2, [pc, #112]	@ (800493c <prvHeapInit+0xa0>)
 80048cc:	4413      	add	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004940 <prvHeapInit+0xa4>)
 80048d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80048d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004940 <prvHeapInit+0xa4>)
 80048d8:	2200      	movs	r2, #0
 80048da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4413      	add	r3, r2
 80048e2:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80048e4:	2208      	movs	r2, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f023 0307 	bic.w	r3, r3, #7
 80048f2:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a13      	ldr	r2, [pc, #76]	@ (8004944 <prvHeapInit+0xa8>)
 80048f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80048fa:	4b12      	ldr	r3, [pc, #72]	@ (8004944 <prvHeapInit+0xa8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004902:	4b10      	ldr	r3, [pc, #64]	@ (8004944 <prvHeapInit+0xa8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004918:	4b0a      	ldr	r3, [pc, #40]	@ (8004944 <prvHeapInit+0xa8>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a08      	ldr	r2, [pc, #32]	@ (8004948 <prvHeapInit+0xac>)
 8004926:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4a07      	ldr	r2, [pc, #28]	@ (800494c <prvHeapInit+0xb0>)
 800492e:	6013      	str	r3, [r2, #0]
}
 8004930:	bf00      	nop
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	20000810 	.word	0x20000810
 8004940:	20003010 	.word	0x20003010
 8004944:	20003018 	.word	0x20003018
 8004948:	20003020 	.word	0x20003020
 800494c:	2000301c 	.word	0x2000301c

08004950 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004958:	4b36      	ldr	r3, [pc, #216]	@ (8004a34 <prvInsertBlockIntoFreeList+0xe4>)
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e002      	b.n	8004964 <prvInsertBlockIntoFreeList+0x14>
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	429a      	cmp	r2, r3
 800496c:	d8f7      	bhi.n	800495e <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	4a30      	ldr	r2, [pc, #192]	@ (8004a34 <prvInsertBlockIntoFreeList+0xe4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d018      	beq.n	80049a8 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4a2f      	ldr	r2, [pc, #188]	@ (8004a38 <prvInsertBlockIntoFreeList+0xe8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d305      	bcc.n	800498a <prvInsertBlockIntoFreeList+0x3a>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	4a2e      	ldr	r2, [pc, #184]	@ (8004a3c <prvInsertBlockIntoFreeList+0xec>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d801      	bhi.n	800498a <prvInsertBlockIntoFreeList+0x3a>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <prvInsertBlockIntoFreeList+0x3c>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	60fb      	str	r3, [r7, #12]
}
 80049a2:	bf00      	nop
 80049a4:	bf00      	nop
 80049a6:	e7fd      	b.n	80049a4 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4413      	add	r3, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d108      	bne.n	80049cc <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	441a      	add	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	441a      	add	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d118      	bne.n	8004a12 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4b16      	ldr	r3, [pc, #88]	@ (8004a40 <prvInsertBlockIntoFreeList+0xf0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d00d      	beq.n	8004a08 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	441a      	add	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e008      	b.n	8004a1a <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004a08:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <prvInsertBlockIntoFreeList+0xf0>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e003      	b.n	8004a1a <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d002      	beq.n	8004a28 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a28:	bf00      	nop
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	20003010 	.word	0x20003010
 8004a38:	20000810 	.word	0x20000810
 8004a3c:	2000300f 	.word	0x2000300f
 8004a40:	20003018 	.word	0x20003018

08004a44 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a48:	4803      	ldr	r0, [pc, #12]	@ (8004a58 <_cbSendSystemDesc+0x14>)
 8004a4a:	f001 f90d 	bl	8005c68 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a4e:	4803      	ldr	r0, [pc, #12]	@ (8004a5c <_cbSendSystemDesc+0x18>)
 8004a50:	f001 f90a 	bl	8005c68 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a54:	bf00      	nop
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	08006474 	.word	0x08006474
 8004a5c:	080064b0 	.word	0x080064b0

08004a60 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a64:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a6a:	6819      	ldr	r1, [r3, #0]
 8004a6c:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a6e:	4a06      	ldr	r2, [pc, #24]	@ (8004a88 <SEGGER_SYSVIEW_Conf+0x28>)
 8004a70:	f000 fd80 	bl	8005574 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a74:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004a78:	f000 fdc0 	bl	80055fc <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a7c:	bf00      	nop
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000000 	.word	0x20000000
 8004a84:	08004a45 	.word	0x08004a45
 8004a88:	08006550 	.word	0x08006550

08004a8c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a92:	2300      	movs	r3, #0
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	e033      	b.n	8004b00 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a98:	491e      	ldr	r1, [pc, #120]	@ (8004b14 <_cbSendTaskList+0x88>)
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	491a      	ldr	r1, [pc, #104]	@ (8004b14 <_cbSendTaskList+0x88>)
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	4c16      	ldr	r4, [pc, #88]	@ (8004b14 <_cbSendTaskList+0x88>)
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4423      	add	r3, r4
 8004ac8:	3308      	adds	r3, #8
 8004aca:	681c      	ldr	r4, [r3, #0]
 8004acc:	4d11      	ldr	r5, [pc, #68]	@ (8004b14 <_cbSendTaskList+0x88>)
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	442b      	add	r3, r5
 8004ada:	330c      	adds	r3, #12
 8004adc:	681d      	ldr	r5, [r3, #0]
 8004ade:	4e0d      	ldr	r6, [pc, #52]	@ (8004b14 <_cbSendTaskList+0x88>)
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4433      	add	r3, r6
 8004aec:	3310      	adds	r3, #16
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	462b      	mov	r3, r5
 8004af4:	4622      	mov	r2, r4
 8004af6:	f000 f8d7 	bl	8004ca8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3301      	adds	r3, #1
 8004afe:	607b      	str	r3, [r7, #4]
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <_cbSendTaskList+0x8c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d3c6      	bcc.n	8004a98 <_cbSendTaskList+0xc>
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b14:	2000302c 	.word	0x2000302c
 8004b18:	200030cc 	.word	0x200030cc

08004b1c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b24:	f7fe f962 	bl	8002dec <xTaskGetTickCountFromISR>
 8004b28:	e9c7 0104 	strd	r0, r1, [r7, #16]
  Time *= portTICK_PERIOD_MS;
 8004b2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b30:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	0099      	lsls	r1, r3, #2
 8004b3e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004b42:	0090      	lsls	r0, r2, #2
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	eb12 0801 	adds.w	r8, r2, r1
 8004b4e:	68f9      	ldr	r1, [r7, #12]
 8004b50:	eb43 0901 	adc.w	r9, r3, r1
 8004b54:	eb18 0308 	adds.w	r3, r8, r8
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	eb49 0309 	adc.w	r3, r9, r9
 8004b5e:	607b      	str	r3, [r7, #4]
 8004b60:	e9d7 8900 	ldrd	r8, r9, [r7]
 8004b64:	e9c7 8904 	strd	r8, r9, [r7, #16]
  Time *= 1000;
 8004b68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	f04f 0800 	mov.w	r8, #0
 8004b74:	f04f 0900 	mov.w	r9, #0
 8004b78:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8004b7c:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8004b80:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8004b84:	4642      	mov	r2, r8
 8004b86:	464b      	mov	r3, r9
 8004b88:	1a14      	subs	r4, r2, r0
 8004b8a:	eb63 0501 	sbc.w	r5, r3, r1
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	00ab      	lsls	r3, r5, #2
 8004b98:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004b9c:	00a2      	lsls	r2, r4, #2
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	461d      	mov	r5, r3
 8004ba2:	eb14 0a00 	adds.w	sl, r4, r0
 8004ba6:	eb45 0b01 	adc.w	fp, r5, r1
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bb6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bbe:	4692      	mov	sl, r2
 8004bc0:	469b      	mov	fp, r3
 8004bc2:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  return Time;
 8004bc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004bd8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004be6:	2205      	movs	r2, #5
 8004be8:	492b      	ldr	r1, [pc, #172]	@ (8004c98 <SYSVIEW_AddTask+0xc0>)
 8004bea:	68b8      	ldr	r0, [r7, #8]
 8004bec:	f001 fbba 	bl	8006364 <memcmp>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d04b      	beq.n	8004c8e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004bf6:	4b29      	ldr	r3, [pc, #164]	@ (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b07      	cmp	r3, #7
 8004bfc:	d903      	bls.n	8004c06 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004bfe:	4828      	ldr	r0, [pc, #160]	@ (8004ca0 <SYSVIEW_AddTask+0xc8>)
 8004c00:	f001 fb54 	bl	80062ac <SEGGER_SYSVIEW_Warn>
    return;
 8004c04:	e044      	b.n	8004c90 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c06:	4b25      	ldr	r3, [pc, #148]	@ (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4926      	ldr	r1, [pc, #152]	@ (8004ca4 <SYSVIEW_AddTask+0xcc>)
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c1a:	4b20      	ldr	r3, [pc, #128]	@ (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4921      	ldr	r1, [pc, #132]	@ (8004ca4 <SYSVIEW_AddTask+0xcc>)
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c30:	4b1a      	ldr	r3, [pc, #104]	@ (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	491b      	ldr	r1, [pc, #108]	@ (8004ca4 <SYSVIEW_AddTask+0xcc>)
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3308      	adds	r3, #8
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004c46:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4916      	ldr	r1, [pc, #88]	@ (8004ca4 <SYSVIEW_AddTask+0xcc>)
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	330c      	adds	r3, #12
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4910      	ldr	r1, [pc, #64]	@ (8004ca4 <SYSVIEW_AddTask+0xcc>)
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3310      	adds	r3, #16
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c72:	4b0a      	ldr	r3, [pc, #40]	@ (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3301      	adds	r3, #1
 8004c78:	4a08      	ldr	r2, [pc, #32]	@ (8004c9c <SYSVIEW_AddTask+0xc4>)
 8004c7a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f80e 	bl	8004ca8 <SYSVIEW_SendTaskInfo>
 8004c8c:	e000      	b.n	8004c90 <SYSVIEW_AddTask+0xb8>
    return;
 8004c8e:	bf00      	nop

}
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	080064c0 	.word	0x080064c0
 8004c9c:	200030cc 	.word	0x200030cc
 8004ca0:	080064c8 	.word	0x080064c8
 8004ca4:	2000302c 	.word	0x2000302c

08004ca8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	@ 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004cb6:	f107 0310 	add.w	r3, r7, #16
 8004cba:	2218      	movs	r2, #24
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fb60 	bl	8006384 <memset>
  TaskInfo.TaskID     = TaskID;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004cd8:	f107 0310 	add.w	r3, r7, #16
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fecb 	bl	8005a78 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ce2:	bf00      	nop
 8004ce4:	3728      	adds	r7, #40	@ 0x28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004cf2:	4b26      	ldr	r3, [pc, #152]	@ (8004d8c <_DoInit+0xa0>)
 8004cf4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004cf6:	22a8      	movs	r2, #168	@ 0xa8
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	6838      	ldr	r0, [r7, #0]
 8004cfc:	f001 fb42 	bl	8006384 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2203      	movs	r2, #3
 8004d04:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2203      	movs	r2, #3
 8004d0a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4a20      	ldr	r2, [pc, #128]	@ (8004d90 <_DoInit+0xa4>)
 8004d10:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	4a1f      	ldr	r2, [pc, #124]	@ (8004d94 <_DoInit+0xa8>)
 8004d16:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d1e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	4a16      	ldr	r2, [pc, #88]	@ (8004d90 <_DoInit+0xa4>)
 8004d36:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	4a17      	ldr	r2, [pc, #92]	@ (8004d98 <_DoInit+0xac>)
 8004d3c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2210      	movs	r2, #16
 8004d42:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2200      	movs	r2, #0
 8004d48:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004d56:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	607b      	str	r3, [r7, #4]
 8004d5e:	e00c      	b.n	8004d7a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1c3 030f 	rsb	r3, r3, #15
 8004d66:	4a0d      	ldr	r2, [pc, #52]	@ (8004d9c <_DoInit+0xb0>)
 8004d68:	5cd1      	ldrb	r1, [r2, r3]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	460a      	mov	r2, r1
 8004d72:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3301      	adds	r3, #1
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b0f      	cmp	r3, #15
 8004d7e:	d9ef      	bls.n	8004d60 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004d80:	f3bf 8f5f 	dmb	sy
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	200030d0 	.word	0x200030d0
 8004d90:	08006518 	.word	0x08006518
 8004d94:	20003178 	.word	0x20003178
 8004d98:	20003578 	.word	0x20003578
 8004d9c:	08006558 	.word	0x08006558

08004da0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	@ 0x30
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004dac:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004dae:	623b      	str	r3, [r7, #32]
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b53      	cmp	r3, #83	@ 0x53
 8004db8:	d001      	beq.n	8004dbe <SEGGER_RTT_ReadNoLock+0x1e>
 8004dba:	f7ff ff97 	bl	8004cec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	4413      	add	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	3360      	adds	r3, #96	@ 0x60
 8004dca:	4a37      	ldr	r2, [pc, #220]	@ (8004ea8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004dcc:	4413      	add	r3, r2
 8004dce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004de0:	2300      	movs	r3, #0
 8004de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004de4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d92b      	bls.n	8004e44 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	bf28      	it	cs
 8004dfe:	4613      	movcs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e08:	4413      	add	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	6939      	ldr	r1, [r7, #16]
 8004e10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e12:	f001 fae3 	bl	80063dc <memcpy>
    NumBytesRead += NumBytesRem;
 8004e16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	4413      	add	r3, r2
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4413      	add	r3, r2
 8004e34:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d101      	bne.n	8004e44 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004e40:	2300      	movs	r3, #0
 8004e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4293      	cmp	r3, r2
 8004e52:	bf28      	it	cs
 8004e54:	4613      	movcs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d019      	beq.n	8004e92 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e64:	4413      	add	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	6939      	ldr	r1, [r7, #16]
 8004e6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e6e:	f001 fab5 	bl	80063dc <memcpy>
    NumBytesRead += NumBytesRem;
 8004e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4413      	add	r3, r2
 8004e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4413      	add	r3, r2
 8004e90:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e9c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3730      	adds	r7, #48	@ 0x30
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	200030d0 	.word	0x200030d0

08004eac <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004eba:	4b3d      	ldr	r3, [pc, #244]	@ (8004fb0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b53      	cmp	r3, #83	@ 0x53
 8004ec6:	d001      	beq.n	8004ecc <SEGGER_RTT_AllocUpBuffer+0x20>
 8004ec8:	f7ff ff10 	bl	8004cec <_DoInit>
  SEGGER_RTT_LOCK();
 8004ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed0:	f04f 0120 	mov.w	r1, #32
 8004ed4:	f381 8811 	msr	BASEPRI, r1
 8004ed8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eda:	4b35      	ldr	r3, [pc, #212]	@ (8004fb0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004edc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004ee2:	6939      	ldr	r1, [r7, #16]
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	4613      	mov	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4413      	add	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	3301      	adds	r3, #1
 8004efe:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	dbeb      	blt.n	8004ee2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004f0a:	e000      	b.n	8004f0e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004f0c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	da3f      	bge.n	8004f98 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004f18:	6939      	ldr	r1, [r7, #16]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	4613      	mov	r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	440b      	add	r3, r1
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f2c:	6939      	ldr	r1, [r7, #16]
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	4613      	mov	r3, r2
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	4413      	add	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	440b      	add	r3, r1
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004f42:	6939      	ldr	r1, [r7, #16]
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	4613      	mov	r3, r2
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	4413      	add	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	440b      	add	r3, r1
 8004f50:	3320      	adds	r3, #32
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004f56:	6939      	ldr	r1, [r7, #16]
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	4413      	add	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	440b      	add	r3, r1
 8004f64:	3328      	adds	r3, #40	@ 0x28
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004f6a:	6939      	ldr	r1, [r7, #16]
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	4413      	add	r3, r2
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	440b      	add	r3, r1
 8004f78:	3324      	adds	r3, #36	@ 0x24
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004f7e:	6939      	ldr	r1, [r7, #16]
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	4613      	mov	r3, r2
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	4413      	add	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	440b      	add	r3, r1
 8004f8c:	332c      	adds	r3, #44	@ 0x2c
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f92:	f3bf 8f5f 	dmb	sy
 8004f96:	e002      	b.n	8004f9e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f9c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200030d0 	.word	0x200030d0

08004fb4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	@ 0x28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004fc2:	4b21      	ldr	r3, [pc, #132]	@ (8005048 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b53      	cmp	r3, #83	@ 0x53
 8004fce:	d001      	beq.n	8004fd4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004fd0:	f7ff fe8c 	bl	8004cec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8005048 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004fd6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d82c      	bhi.n	8005038 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004fde:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe2:	f04f 0120 	mov.w	r1, #32
 8004fe6:	f381 8811 	msr	BASEPRI, r1
 8004fea:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	3360      	adds	r3, #96	@ 0x60
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00e      	beq.n	8005022 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2200      	movs	r2, #0
 800501a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2200      	movs	r2, #0
 8005020:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005026:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005028:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005032:	2300      	movs	r3, #0
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
 8005036:	e002      	b.n	800503e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005040:	4618      	mov	r0, r3
 8005042:	3728      	adds	r7, #40	@ 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	200030d0 	.word	0x200030d0

0800504c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d105      	bne.n	800506a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	60fa      	str	r2, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e022      	b.n	80050b0 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	60fa      	str	r2, [r7, #12]
 8005074:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b80      	cmp	r3, #128	@ 0x80
 800507a:	d90a      	bls.n	8005092 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800507c:	2380      	movs	r3, #128	@ 0x80
 800507e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005080:	e007      	b.n	8005092 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	1c53      	adds	r3, r2, #1
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	1c59      	adds	r1, r3, #1
 800508c:	60f9      	str	r1, [r7, #12]
 800508e:	7812      	ldrb	r2, [r2, #0]
 8005090:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	1e5a      	subs	r2, r3, #1
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <_EncodeStr+0x58>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1ee      	bne.n	8005082 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80050b0:	68fb      	ldr	r3, [r7, #12]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3307      	adds	r3, #7
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050de:	4b34      	ldr	r3, [pc, #208]	@ (80051b0 <_HandleIncomingPacket+0xd8>)
 80050e0:	7e1b      	ldrb	r3, [r3, #24]
 80050e2:	4618      	mov	r0, r3
 80050e4:	1cfb      	adds	r3, r7, #3
 80050e6:	2201      	movs	r2, #1
 80050e8:	4619      	mov	r1, r3
 80050ea:	f7ff fe59 	bl	8004da0 <SEGGER_RTT_ReadNoLock>
 80050ee:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d057      	beq.n	80051a6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	2b80      	cmp	r3, #128	@ 0x80
 80050fa:	d031      	beq.n	8005160 <_HandleIncomingPacket+0x88>
 80050fc:	2b80      	cmp	r3, #128	@ 0x80
 80050fe:	dc40      	bgt.n	8005182 <_HandleIncomingPacket+0xaa>
 8005100:	2b07      	cmp	r3, #7
 8005102:	dc15      	bgt.n	8005130 <_HandleIncomingPacket+0x58>
 8005104:	2b00      	cmp	r3, #0
 8005106:	dd3c      	ble.n	8005182 <_HandleIncomingPacket+0xaa>
 8005108:	3b01      	subs	r3, #1
 800510a:	2b06      	cmp	r3, #6
 800510c:	d839      	bhi.n	8005182 <_HandleIncomingPacket+0xaa>
 800510e:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <_HandleIncomingPacket+0x3c>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005137 	.word	0x08005137
 8005118:	0800513d 	.word	0x0800513d
 800511c:	08005143 	.word	0x08005143
 8005120:	08005149 	.word	0x08005149
 8005124:	0800514f 	.word	0x0800514f
 8005128:	08005155 	.word	0x08005155
 800512c:	0800515b 	.word	0x0800515b
 8005130:	2b7f      	cmp	r3, #127	@ 0x7f
 8005132:	d033      	beq.n	800519c <_HandleIncomingPacket+0xc4>
 8005134:	e025      	b.n	8005182 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005136:	f000 fb25 	bl	8005784 <SEGGER_SYSVIEW_Start>
      break;
 800513a:	e034      	b.n	80051a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800513c:	f000 fbdc 	bl	80058f8 <SEGGER_SYSVIEW_Stop>
      break;
 8005140:	e031      	b.n	80051a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005142:	f000 fdb5 	bl	8005cb0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005146:	e02e      	b.n	80051a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005148:	f000 fd7a 	bl	8005c40 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800514c:	e02b      	b.n	80051a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800514e:	f000 fbf9 	bl	8005944 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005152:	e028      	b.n	80051a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005154:	f001 f86c 	bl	8006230 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005158:	e025      	b.n	80051a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800515a:	f001 f84b 	bl	80061f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800515e:	e022      	b.n	80051a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005160:	4b13      	ldr	r3, [pc, #76]	@ (80051b0 <_HandleIncomingPacket+0xd8>)
 8005162:	7e1b      	ldrb	r3, [r3, #24]
 8005164:	4618      	mov	r0, r3
 8005166:	1cfb      	adds	r3, r7, #3
 8005168:	2201      	movs	r2, #1
 800516a:	4619      	mov	r1, r3
 800516c:	f7ff fe18 	bl	8004da0 <SEGGER_RTT_ReadNoLock>
 8005170:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d013      	beq.n	80051a0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 ffb0 	bl	80060e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005180:	e00e      	b.n	80051a0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	b25b      	sxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	da0c      	bge.n	80051a4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800518a:	4b09      	ldr	r3, [pc, #36]	@ (80051b0 <_HandleIncomingPacket+0xd8>)
 800518c:	7e1b      	ldrb	r3, [r3, #24]
 800518e:	4618      	mov	r0, r3
 8005190:	1cfb      	adds	r3, r7, #3
 8005192:	2201      	movs	r2, #1
 8005194:	4619      	mov	r1, r3
 8005196:	f7ff fe03 	bl	8004da0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800519a:	e003      	b.n	80051a4 <_HandleIncomingPacket+0xcc>
      break;
 800519c:	bf00      	nop
 800519e:	e002      	b.n	80051a6 <_HandleIncomingPacket+0xce>
      break;
 80051a0:	bf00      	nop
 80051a2:	e000      	b.n	80051a6 <_HandleIncomingPacket+0xce>
      break;
 80051a4:	bf00      	nop
    }
  }
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20004590 	.word	0x20004590

080051b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08c      	sub	sp, #48	@ 0x30
 80051b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80051ba:	2301      	movs	r3, #1
 80051bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80051be:	1d3b      	adds	r3, r7, #4
 80051c0:	3301      	adds	r3, #1
 80051c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051c8:	4b31      	ldr	r3, [pc, #196]	@ (8005290 <_TrySendOverflowPacket+0xdc>)
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ce:	e00b      	b.n	80051e8 <_TrySendOverflowPacket+0x34>
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d6:	1c59      	adds	r1, r3, #1
 80051d8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80051da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e4:	09db      	lsrs	r3, r3, #7
 80051e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80051ec:	d8f0      	bhi.n	80051d0 <_TrySendOverflowPacket+0x1c>
 80051ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80051fe:	4b25      	ldr	r3, [pc, #148]	@ (8005294 <_TrySendOverflowPacket+0xe0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005204:	4b22      	ldr	r3, [pc, #136]	@ (8005290 <_TrySendOverflowPacket+0xdc>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	627b      	str	r3, [r7, #36]	@ 0x24
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	623b      	str	r3, [r7, #32]
 8005216:	e00b      	b.n	8005230 <_TrySendOverflowPacket+0x7c>
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	1c59      	adds	r1, r3, #1
 8005220:	6279      	str	r1, [r7, #36]	@ 0x24
 8005222:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	09db      	lsrs	r3, r3, #7
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	2b7f      	cmp	r3, #127	@ 0x7f
 8005234:	d8f0      	bhi.n	8005218 <_TrySendOverflowPacket+0x64>
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	627a      	str	r2, [r7, #36]	@ 0x24
 800523c:	6a3a      	ldr	r2, [r7, #32]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005246:	4b12      	ldr	r3, [pc, #72]	@ (8005290 <_TrySendOverflowPacket+0xdc>)
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	4618      	mov	r0, r3
 800524c:	1d3b      	adds	r3, r7, #4
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	461a      	mov	r2, r3
 8005254:	1d3b      	adds	r3, r7, #4
 8005256:	4619      	mov	r1, r3
 8005258:	f7fa ffc2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800525c:	4603      	mov	r3, r0
 800525e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005266:	4a0a      	ldr	r2, [pc, #40]	@ (8005290 <_TrySendOverflowPacket+0xdc>)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800526c:	4b08      	ldr	r3, [pc, #32]	@ (8005290 <_TrySendOverflowPacket+0xdc>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	3b01      	subs	r3, #1
 8005272:	b2da      	uxtb	r2, r3
 8005274:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <_TrySendOverflowPacket+0xdc>)
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e004      	b.n	8005284 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800527a:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <_TrySendOverflowPacket+0xdc>)
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	3301      	adds	r3, #1
 8005280:	4a03      	ldr	r2, [pc, #12]	@ (8005290 <_TrySendOverflowPacket+0xdc>)
 8005282:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005284:	693b      	ldr	r3, [r7, #16]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3730      	adds	r7, #48	@ 0x30
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20004590 	.word	0x20004590
 8005294:	e0001004 	.word	0xe0001004

08005298 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	@ 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80052a4:	4b98      	ldr	r3, [pc, #608]	@ (8005508 <_SendPacket+0x270>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d010      	beq.n	80052ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80052ac:	4b96      	ldr	r3, [pc, #600]	@ (8005508 <_SendPacket+0x270>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 812d 	beq.w	8005510 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80052b6:	4b94      	ldr	r3, [pc, #592]	@ (8005508 <_SendPacket+0x270>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d109      	bne.n	80052d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80052be:	f7ff ff79 	bl	80051b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80052c2:	4b91      	ldr	r3, [pc, #580]	@ (8005508 <_SendPacket+0x270>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	f040 8124 	bne.w	8005514 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80052cc:	e001      	b.n	80052d2 <_SendPacket+0x3a>
    goto Send;
 80052ce:	bf00      	nop
 80052d0:	e000      	b.n	80052d4 <_SendPacket+0x3c>
Send:
 80052d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b1f      	cmp	r3, #31
 80052d8:	d809      	bhi.n	80052ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80052da:	4b8b      	ldr	r3, [pc, #556]	@ (8005508 <_SendPacket+0x270>)
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f040 8115 	bne.w	8005518 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b17      	cmp	r3, #23
 80052f2:	d807      	bhi.n	8005304 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	e0c4      	b.n	800548e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005310:	d912      	bls.n	8005338 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	09da      	lsrs	r2, r3, #7
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b01      	subs	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	3a01      	subs	r2, #1
 800532a:	60fa      	str	r2, [r7, #12]
 800532c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005330:	b2da      	uxtb	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	e006      	b.n	8005346 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3b01      	subs	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b7e      	cmp	r3, #126	@ 0x7e
 800534a:	d807      	bhi.n	800535c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3b01      	subs	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	e098      	b.n	800548e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005362:	d212      	bcs.n	800538a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	09da      	lsrs	r2, r3, #7
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3b01      	subs	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	3a01      	subs	r2, #1
 800537c:	60fa      	str	r2, [r7, #12]
 800537e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005382:	b2da      	uxtb	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	e081      	b.n	800548e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005390:	d21d      	bcs.n	80053ce <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0b9a      	lsrs	r2, r3, #14
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3b01      	subs	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	09db      	lsrs	r3, r3, #7
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	3a01      	subs	r2, #1
 80053ac:	60fa      	str	r2, [r7, #12]
 80053ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	3a01      	subs	r2, #1
 80053c0:	60fa      	str	r2, [r7, #12]
 80053c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	e05f      	b.n	800548e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053d4:	d228      	bcs.n	8005428 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	0d5a      	lsrs	r2, r3, #21
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3b01      	subs	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	0b9b      	lsrs	r3, r3, #14
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	3a01      	subs	r2, #1
 80053f0:	60fa      	str	r2, [r7, #12]
 80053f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	09db      	lsrs	r3, r3, #7
 8005400:	b2db      	uxtb	r3, r3
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	3a01      	subs	r2, #1
 8005406:	60fa      	str	r2, [r7, #12]
 8005408:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	3a01      	subs	r2, #1
 800541a:	60fa      	str	r2, [r7, #12]
 800541c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	e032      	b.n	800548e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	0f1a      	lsrs	r2, r3, #28
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3b01      	subs	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	0d5b      	lsrs	r3, r3, #21
 800543c:	b2db      	uxtb	r3, r3
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	3a01      	subs	r2, #1
 8005442:	60fa      	str	r2, [r7, #12]
 8005444:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005448:	b2da      	uxtb	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	0b9b      	lsrs	r3, r3, #14
 8005452:	b2db      	uxtb	r3, r3
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	3a01      	subs	r2, #1
 8005458:	60fa      	str	r2, [r7, #12]
 800545a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800545e:	b2da      	uxtb	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	09db      	lsrs	r3, r3, #7
 8005468:	b2db      	uxtb	r3, r3
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	3a01      	subs	r2, #1
 800546e:	60fa      	str	r2, [r7, #12]
 8005470:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005474:	b2da      	uxtb	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	3a01      	subs	r2, #1
 8005482:	60fa      	str	r2, [r7, #12]
 8005484:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800548e:	4b1f      	ldr	r3, [pc, #124]	@ (800550c <_SendPacket+0x274>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005494:	4b1c      	ldr	r3, [pc, #112]	@ (8005508 <_SendPacket+0x270>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	e00b      	b.n	80054c0 <_SendPacket+0x228>
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	1c59      	adds	r1, r3, #1
 80054b0:	6279      	str	r1, [r7, #36]	@ 0x24
 80054b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	09db      	lsrs	r3, r3, #7
 80054be:	623b      	str	r3, [r7, #32]
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80054c4:	d8f0      	bhi.n	80054a8 <_SendPacket+0x210>
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80054cc:	6a3a      	ldr	r2, [r7, #32]
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80054d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005508 <_SendPacket+0x270>)
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	4618      	mov	r0, r3
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	461a      	mov	r2, r3
 80054e4:	68f9      	ldr	r1, [r7, #12]
 80054e6:	f7fa fe7b 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054ea:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054f2:	4a05      	ldr	r2, [pc, #20]	@ (8005508 <_SendPacket+0x270>)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	60d3      	str	r3, [r2, #12]
 80054f8:	e00f      	b.n	800551a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80054fa:	4b03      	ldr	r3, [pc, #12]	@ (8005508 <_SendPacket+0x270>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	3301      	adds	r3, #1
 8005500:	b2da      	uxtb	r2, r3
 8005502:	4b01      	ldr	r3, [pc, #4]	@ (8005508 <_SendPacket+0x270>)
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	e008      	b.n	800551a <_SendPacket+0x282>
 8005508:	20004590 	.word	0x20004590
 800550c:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005510:	bf00      	nop
 8005512:	e002      	b.n	800551a <_SendPacket+0x282>
      goto SendDone;
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <_SendPacket+0x282>
      goto SendDone;
 8005518:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800551a:	4b14      	ldr	r3, [pc, #80]	@ (800556c <_SendPacket+0x2d4>)
 800551c:	7e1b      	ldrb	r3, [r3, #24]
 800551e:	4619      	mov	r1, r3
 8005520:	4a13      	ldr	r2, [pc, #76]	@ (8005570 <_SendPacket+0x2d8>)
 8005522:	460b      	mov	r3, r1
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	440b      	add	r3, r1
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	336c      	adds	r3, #108	@ 0x6c
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b0e      	ldr	r3, [pc, #56]	@ (800556c <_SendPacket+0x2d4>)
 8005532:	7e1b      	ldrb	r3, [r3, #24]
 8005534:	4618      	mov	r0, r3
 8005536:	490e      	ldr	r1, [pc, #56]	@ (8005570 <_SendPacket+0x2d8>)
 8005538:	4603      	mov	r3, r0
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	4403      	add	r3, r0
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	440b      	add	r3, r1
 8005542:	3370      	adds	r3, #112	@ 0x70
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d00b      	beq.n	8005562 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800554a:	4b08      	ldr	r3, [pc, #32]	@ (800556c <_SendPacket+0x2d4>)
 800554c:	789b      	ldrb	r3, [r3, #2]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d107      	bne.n	8005562 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005552:	4b06      	ldr	r3, [pc, #24]	@ (800556c <_SendPacket+0x2d4>)
 8005554:	2201      	movs	r2, #1
 8005556:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005558:	f7ff fdbe 	bl	80050d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800555c:	4b03      	ldr	r3, [pc, #12]	@ (800556c <_SendPacket+0x2d4>)
 800555e:	2200      	movs	r2, #0
 8005560:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005562:	bf00      	nop
 8005564:	3728      	adds	r7, #40	@ 0x28
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20004590 	.word	0x20004590
 8005570:	200030d0 	.word	0x200030d0

08005574 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005582:	2300      	movs	r3, #0
 8005584:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005588:	4917      	ldr	r1, [pc, #92]	@ (80055e8 <SEGGER_SYSVIEW_Init+0x74>)
 800558a:	4818      	ldr	r0, [pc, #96]	@ (80055ec <SEGGER_SYSVIEW_Init+0x78>)
 800558c:	f7ff fc8e 	bl	8004eac <SEGGER_RTT_AllocUpBuffer>
 8005590:	4603      	mov	r3, r0
 8005592:	b2da      	uxtb	r2, r3
 8005594:	4b16      	ldr	r3, [pc, #88]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005596:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005598:	4b15      	ldr	r3, [pc, #84]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 800559a:	785a      	ldrb	r2, [r3, #1]
 800559c:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 800559e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80055a0:	4b13      	ldr	r3, [pc, #76]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055a2:	7e1b      	ldrb	r3, [r3, #24]
 80055a4:	4618      	mov	r0, r3
 80055a6:	2300      	movs	r3, #0
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	2308      	movs	r3, #8
 80055ac:	4a11      	ldr	r2, [pc, #68]	@ (80055f4 <SEGGER_SYSVIEW_Init+0x80>)
 80055ae:	490f      	ldr	r1, [pc, #60]	@ (80055ec <SEGGER_SYSVIEW_Init+0x78>)
 80055b0:	f7ff fd00 	bl	8004fb4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80055b4:	4b0e      	ldr	r3, [pc, #56]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055ba:	4b0f      	ldr	r3, [pc, #60]	@ (80055f8 <SEGGER_SYSVIEW_Init+0x84>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a0c      	ldr	r2, [pc, #48]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055c0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80055c2:	4a0b      	ldr	r2, [pc, #44]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80055c8:	4a09      	ldr	r2, [pc, #36]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80055ce:	4a08      	ldr	r2, [pc, #32]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80055d4:	4a06      	ldr	r2, [pc, #24]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80055da:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20003588 	.word	0x20003588
 80055ec:	0800652c 	.word	0x0800652c
 80055f0:	20004590 	.word	0x20004590
 80055f4:	20004588 	.word	0x20004588
 80055f8:	e0001004 	.word	0xe0001004

080055fc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005604:	4a04      	ldr	r2, [pc, #16]	@ (8005618 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6113      	str	r3, [r2, #16]
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20004590 	.word	0x20004590

0800561c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005624:	f3ef 8311 	mrs	r3, BASEPRI
 8005628:	f04f 0120 	mov.w	r1, #32
 800562c:	f381 8811 	msr	BASEPRI, r1
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	4808      	ldr	r0, [pc, #32]	@ (8005654 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005634:	f7ff fd43 	bl	80050be <_PreparePacket>
 8005638:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	68b8      	ldr	r0, [r7, #8]
 8005640:	f7ff fe2a 	bl	8005298 <_SendPacket>
  RECORD_END();
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f383 8811 	msr	BASEPRI, r3
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	200045c0 	.word	0x200045c0

08005658 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005662:	f3ef 8311 	mrs	r3, BASEPRI
 8005666:	f04f 0120 	mov.w	r1, #32
 800566a:	f381 8811 	msr	BASEPRI, r1
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	4816      	ldr	r0, [pc, #88]	@ (80056cc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005672:	f7ff fd24 	bl	80050be <_PreparePacket>
 8005676:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	61bb      	str	r3, [r7, #24]
 8005684:	e00b      	b.n	800569e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	1c59      	adds	r1, r3, #1
 800568e:	61f9      	str	r1, [r7, #28]
 8005690:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	09db      	lsrs	r3, r3, #7
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80056a2:	d8f0      	bhi.n	8005686 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	61fa      	str	r2, [r7, #28]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	6938      	ldr	r0, [r7, #16]
 80056ba:	f7ff fded 	bl	8005298 <_SendPacket>
  RECORD_END();
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f383 8811 	msr	BASEPRI, r3
}
 80056c4:	bf00      	nop
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	200045c0 	.word	0x200045c0

080056d0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08c      	sub	sp, #48	@ 0x30
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80056dc:	f3ef 8311 	mrs	r3, BASEPRI
 80056e0:	f04f 0120 	mov.w	r1, #32
 80056e4:	f381 8811 	msr	BASEPRI, r1
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	4825      	ldr	r0, [pc, #148]	@ (8005780 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80056ec:	f7ff fce7 	bl	80050be <_PreparePacket>
 80056f0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056fe:	e00b      	b.n	8005718 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	b2da      	uxtb	r2, r3
 8005704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005706:	1c59      	adds	r1, r3, #1
 8005708:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800570a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	09db      	lsrs	r3, r3, #7
 8005716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571a:	2b7f      	cmp	r3, #127	@ 0x7f
 800571c:	d8f0      	bhi.n	8005700 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	623b      	str	r3, [r7, #32]
 8005736:	e00b      	b.n	8005750 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	b2da      	uxtb	r2, r3
 800573c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573e:	1c59      	adds	r1, r3, #1
 8005740:	6279      	str	r1, [r7, #36]	@ 0x24
 8005742:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	09db      	lsrs	r3, r3, #7
 800574e:	623b      	str	r3, [r7, #32]
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	2b7f      	cmp	r3, #127	@ 0x7f
 8005754:	d8f0      	bhi.n	8005738 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	627a      	str	r2, [r7, #36]	@ 0x24
 800575c:	6a3a      	ldr	r2, [r7, #32]
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	6979      	ldr	r1, [r7, #20]
 800576a:	69b8      	ldr	r0, [r7, #24]
 800576c:	f7ff fd94 	bl	8005298 <_SendPacket>
  RECORD_END();
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f383 8811 	msr	BASEPRI, r3
}
 8005776:	bf00      	nop
 8005778:	3730      	adds	r7, #48	@ 0x30
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	200045c0 	.word	0x200045c0

08005784 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b08c      	sub	sp, #48	@ 0x30
 8005788:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800578a:	4b58      	ldr	r3, [pc, #352]	@ (80058ec <SEGGER_SYSVIEW_Start+0x168>)
 800578c:	2201      	movs	r2, #1
 800578e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005790:	f3ef 8311 	mrs	r3, BASEPRI
 8005794:	f04f 0120 	mov.w	r1, #32
 8005798:	f381 8811 	msr	BASEPRI, r1
 800579c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800579e:	4b53      	ldr	r3, [pc, #332]	@ (80058ec <SEGGER_SYSVIEW_Start+0x168>)
 80057a0:	785b      	ldrb	r3, [r3, #1]
 80057a2:	220a      	movs	r2, #10
 80057a4:	4952      	ldr	r1, [pc, #328]	@ (80058f0 <SEGGER_SYSVIEW_Start+0x16c>)
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fa fd1a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80057b2:	200a      	movs	r0, #10
 80057b4:	f7ff ff32 	bl	800561c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80057b8:	f3ef 8311 	mrs	r3, BASEPRI
 80057bc:	f04f 0120 	mov.w	r1, #32
 80057c0:	f381 8811 	msr	BASEPRI, r1
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	484b      	ldr	r0, [pc, #300]	@ (80058f4 <SEGGER_SYSVIEW_Start+0x170>)
 80057c8:	f7ff fc79 	bl	80050be <_PreparePacket>
 80057cc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057d6:	4b45      	ldr	r3, [pc, #276]	@ (80058ec <SEGGER_SYSVIEW_Start+0x168>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057dc:	e00b      	b.n	80057f6 <SEGGER_SYSVIEW_Start+0x72>
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e4:	1c59      	adds	r1, r3, #1
 80057e6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80057e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	09db      	lsrs	r3, r3, #7
 80057f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80057fa:	d8f0      	bhi.n	80057de <SEGGER_SYSVIEW_Start+0x5a>
 80057fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005810:	4b36      	ldr	r3, [pc, #216]	@ (80058ec <SEGGER_SYSVIEW_Start+0x168>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	623b      	str	r3, [r7, #32]
 8005816:	e00b      	b.n	8005830 <SEGGER_SYSVIEW_Start+0xac>
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	1c59      	adds	r1, r3, #1
 8005820:	6279      	str	r1, [r7, #36]	@ 0x24
 8005822:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	09db      	lsrs	r3, r3, #7
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	2b7f      	cmp	r3, #127	@ 0x7f
 8005834:	d8f0      	bhi.n	8005818 <SEGGER_SYSVIEW_Start+0x94>
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	627a      	str	r2, [r7, #36]	@ 0x24
 800583c:	6a3a      	ldr	r2, [r7, #32]
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	4b28      	ldr	r3, [pc, #160]	@ (80058ec <SEGGER_SYSVIEW_Start+0x168>)
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e00b      	b.n	800586a <SEGGER_SYSVIEW_Start+0xe6>
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	b2da      	uxtb	r2, r3
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	1c59      	adds	r1, r3, #1
 800585a:	61f9      	str	r1, [r7, #28]
 800585c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	09db      	lsrs	r3, r3, #7
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b7f      	cmp	r3, #127	@ 0x7f
 800586e:	d8f0      	bhi.n	8005852 <SEGGER_SYSVIEW_Start+0xce>
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	61fa      	str	r2, [r7, #28]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	2300      	movs	r3, #0
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	e00b      	b.n	80058a2 <SEGGER_SYSVIEW_Start+0x11e>
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	1c59      	adds	r1, r3, #1
 8005892:	6179      	str	r1, [r7, #20]
 8005894:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	09db      	lsrs	r3, r3, #7
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80058a6:	d8f0      	bhi.n	800588a <SEGGER_SYSVIEW_Start+0x106>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	617a      	str	r2, [r7, #20]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80058b8:	2218      	movs	r2, #24
 80058ba:	6839      	ldr	r1, [r7, #0]
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff fceb 	bl	8005298 <_SendPacket>
      RECORD_END();
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80058c8:	4b08      	ldr	r3, [pc, #32]	@ (80058ec <SEGGER_SYSVIEW_Start+0x168>)
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80058d0:	4b06      	ldr	r3, [pc, #24]	@ (80058ec <SEGGER_SYSVIEW_Start+0x168>)
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80058d6:	f000 f9eb 	bl	8005cb0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80058da:	f000 f9b1 	bl	8005c40 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80058de:	f000 fca7 	bl	8006230 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80058e2:	bf00      	nop
 80058e4:	3730      	adds	r7, #48	@ 0x30
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20004590 	.word	0x20004590
 80058f0:	0800656c 	.word	0x0800656c
 80058f4:	200045c0 	.word	0x200045c0

080058f8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005902:	f04f 0120 	mov.w	r1, #32
 8005906:	f381 8811 	msr	BASEPRI, r1
 800590a:	607b      	str	r3, [r7, #4]
 800590c:	480b      	ldr	r0, [pc, #44]	@ (800593c <SEGGER_SYSVIEW_Stop+0x44>)
 800590e:	f7ff fbd6 	bl	80050be <_PreparePacket>
 8005912:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005914:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <SEGGER_SYSVIEW_Stop+0x48>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800591c:	220b      	movs	r2, #11
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6838      	ldr	r0, [r7, #0]
 8005922:	f7ff fcb9 	bl	8005298 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005926:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <SEGGER_SYSVIEW_Stop+0x48>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f383 8811 	msr	BASEPRI, r3
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	200045c0 	.word	0x200045c0
 8005940:	20004590 	.word	0x20004590

08005944 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b08c      	sub	sp, #48	@ 0x30
 8005948:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800594a:	f3ef 8311 	mrs	r3, BASEPRI
 800594e:	f04f 0120 	mov.w	r1, #32
 8005952:	f381 8811 	msr	BASEPRI, r1
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	4845      	ldr	r0, [pc, #276]	@ (8005a70 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800595a:	f7ff fbb0 	bl	80050be <_PreparePacket>
 800595e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005968:	4b42      	ldr	r3, [pc, #264]	@ (8005a74 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800596e:	e00b      	b.n	8005988 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	b2da      	uxtb	r2, r3
 8005974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005976:	1c59      	adds	r1, r3, #1
 8005978:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800597a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005984:	09db      	lsrs	r3, r3, #7
 8005986:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598a:	2b7f      	cmp	r3, #127	@ 0x7f
 800598c:	d8f0      	bhi.n	8005970 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800598e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a2:	4b34      	ldr	r3, [pc, #208]	@ (8005a74 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	623b      	str	r3, [r7, #32]
 80059a8:	e00b      	b.n	80059c2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	1c59      	adds	r1, r3, #1
 80059b2:	6279      	str	r1, [r7, #36]	@ 0x24
 80059b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	09db      	lsrs	r3, r3, #7
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80059c6:	d8f0      	bhi.n	80059aa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80059ce:	6a3a      	ldr	r2, [r7, #32]
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	4b25      	ldr	r3, [pc, #148]	@ (8005a74 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	e00b      	b.n	80059fc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	1c59      	adds	r1, r3, #1
 80059ec:	61f9      	str	r1, [r7, #28]
 80059ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	09db      	lsrs	r3, r3, #7
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a00:	d8f0      	bhi.n	80059e4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	61fa      	str	r2, [r7, #28]
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	2300      	movs	r3, #0
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	e00b      	b.n	8005a34 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1c59      	adds	r1, r3, #1
 8005a24:	6179      	str	r1, [r7, #20]
 8005a26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	09db      	lsrs	r3, r3, #7
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a38:	d8f0      	bhi.n	8005a1c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	617a      	str	r2, [r7, #20]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a4a:	2218      	movs	r2, #24
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	68b8      	ldr	r0, [r7, #8]
 8005a50:	f7ff fc22 	bl	8005298 <_SendPacket>
  RECORD_END();
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a5a:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005a62:	4b04      	ldr	r3, [pc, #16]	@ (8005a74 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a66:	4798      	blx	r3
  }
}
 8005a68:	bf00      	nop
 8005a6a:	3730      	adds	r7, #48	@ 0x30
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	200045c0 	.word	0x200045c0
 8005a74:	20004590 	.word	0x20004590

08005a78 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b092      	sub	sp, #72	@ 0x48
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005a80:	f3ef 8311 	mrs	r3, BASEPRI
 8005a84:	f04f 0120 	mov.w	r1, #32
 8005a88:	f381 8811 	msr	BASEPRI, r1
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	486a      	ldr	r0, [pc, #424]	@ (8005c38 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005a90:	f7ff fb15 	bl	80050be <_PreparePacket>
 8005a94:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b66      	ldr	r3, [pc, #408]	@ (8005c3c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aaa:	e00b      	b.n	8005ac4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ab2:	1c59      	adds	r1, r3, #1
 8005ab4:	6479      	str	r1, [r7, #68]	@ 0x44
 8005ab6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac0:	09db      	lsrs	r3, r3, #7
 8005ac2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ac8:	d8f0      	bhi.n	8005aac <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ad0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ad8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ae4:	e00b      	b.n	8005afe <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aec:	1c59      	adds	r1, r3, #1
 8005aee:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005af0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afa:	09db      	lsrs	r3, r3, #7
 8005afc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b02:	d8f0      	bhi.n	8005ae6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b12:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f7ff fa95 	bl	800504c <_EncodeStr>
 8005b22:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005b24:	2209      	movs	r2, #9
 8005b26:	68f9      	ldr	r1, [r7, #12]
 8005b28:	6938      	ldr	r0, [r7, #16]
 8005b2a:	f7ff fbb5 	bl	8005298 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b40      	ldr	r3, [pc, #256]	@ (8005c3c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b42:	e00b      	b.n	8005b5c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4a:	1c59      	adds	r1, r3, #1
 8005b4c:	6379      	str	r1, [r7, #52]	@ 0x34
 8005b4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	09db      	lsrs	r3, r3, #7
 8005b5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b60:	d8f0      	bhi.n	8005b44 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b7c:	e00b      	b.n	8005b96 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b84:	1c59      	adds	r1, r3, #1
 8005b86:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b92:	09db      	lsrs	r3, r3, #7
 8005b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b9a:	d8f0      	bhi.n	8005b7e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005baa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	623b      	str	r3, [r7, #32]
 8005bb6:	e00b      	b.n	8005bd0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	1c59      	adds	r1, r3, #1
 8005bc0:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bc2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	09db      	lsrs	r3, r3, #7
 8005bce:	623b      	str	r3, [r7, #32]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bd4:	d8f0      	bhi.n	8005bb8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bdc:	6a3a      	ldr	r2, [r7, #32]
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	61bb      	str	r3, [r7, #24]
 8005bf0:	e00b      	b.n	8005c0a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	1c59      	adds	r1, r3, #1
 8005bfa:	61f9      	str	r1, [r7, #28]
 8005bfc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	09db      	lsrs	r3, r3, #7
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c0e:	d8f0      	bhi.n	8005bf2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005c20:	2215      	movs	r2, #21
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	6938      	ldr	r0, [r7, #16]
 8005c26:	f7ff fb37 	bl	8005298 <_SendPacket>
  RECORD_END();
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f383 8811 	msr	BASEPRI, r3
}
 8005c30:	bf00      	nop
 8005c32:	3748      	adds	r7, #72	@ 0x48
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	200045c0 	.word	0x200045c0
 8005c3c:	20004590 	.word	0x20004590

08005c40 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005c44:	4b07      	ldr	r3, [pc, #28]	@ (8005c64 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005c4c:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005c56:	4b03      	ldr	r3, [pc, #12]	@ (8005c64 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	4798      	blx	r3
  }
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20004590 	.word	0x20004590

08005c68 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c70:	f3ef 8311 	mrs	r3, BASEPRI
 8005c74:	f04f 0120 	mov.w	r1, #32
 8005c78:	f381 8811 	msr	BASEPRI, r1
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	480b      	ldr	r0, [pc, #44]	@ (8005cac <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005c80:	f7ff fa1d 	bl	80050be <_PreparePacket>
 8005c84:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c86:	2280      	movs	r2, #128	@ 0x80
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	6938      	ldr	r0, [r7, #16]
 8005c8c:	f7ff f9de 	bl	800504c <_EncodeStr>
 8005c90:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005c92:	220e      	movs	r2, #14
 8005c94:	68f9      	ldr	r1, [r7, #12]
 8005c96:	6938      	ldr	r0, [r7, #16]
 8005c98:	f7ff fafe 	bl	8005298 <_SendPacket>
  RECORD_END();
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f383 8811 	msr	BASEPRI, r3
}
 8005ca2:	bf00      	nop
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	200045c0 	.word	0x200045c0

08005cb0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005cb6:	4b15      	ldr	r3, [pc, #84]	@ (8005d0c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01a      	beq.n	8005cf4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005cbe:	4b13      	ldr	r3, [pc, #76]	@ (8005d0c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d015      	beq.n	8005cf4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005cc8:	4b10      	ldr	r3, [pc, #64]	@ (8005d0c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4798      	blx	r3
 8005cd0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005cd4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005cd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	000a      	movs	r2, r1
 8005ce4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4621      	mov	r1, r4
 8005cec:	200d      	movs	r0, #13
 8005cee:	f7ff fcef 	bl	80056d0 <SEGGER_SYSVIEW_RecordU32x2>
 8005cf2:	e006      	b.n	8005d02 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005cf4:	4b06      	ldr	r3, [pc, #24]	@ (8005d10 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	200c      	movs	r0, #12
 8005cfc:	f7ff fcac 	bl	8005658 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005d00:	bf00      	nop
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd90      	pop	{r4, r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20004590 	.word	0x20004590
 8005d10:	e0001004 	.word	0xe0001004

08005d14 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d20:	f04f 0120 	mov.w	r1, #32
 8005d24:	f381 8811 	msr	BASEPRI, r1
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	4817      	ldr	r0, [pc, #92]	@ (8005d88 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005d2c:	f7ff f9c7 	bl	80050be <_PreparePacket>
 8005d30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	61fb      	str	r3, [r7, #28]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	e00b      	b.n	8005d58 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	1c59      	adds	r1, r3, #1
 8005d48:	61f9      	str	r1, [r7, #28]
 8005d4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	09db      	lsrs	r3, r3, #7
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d5c:	d8f0      	bhi.n	8005d40 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	61fa      	str	r2, [r7, #28]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005d6e:	221c      	movs	r2, #28
 8005d70:	68f9      	ldr	r1, [r7, #12]
 8005d72:	6938      	ldr	r0, [r7, #16]
 8005d74:	f7ff fa90 	bl	8005298 <_SendPacket>
  RECORD_END();
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f383 8811 	msr	BASEPRI, r3
}
 8005d7e:	bf00      	nop
 8005d80:	3720      	adds	r7, #32
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	200045c0 	.word	0x200045c0

08005d8c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	@ 0x28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d96:	f3ef 8311 	mrs	r3, BASEPRI
 8005d9a:	f04f 0120 	mov.w	r1, #32
 8005d9e:	f381 8811 	msr	BASEPRI, r1
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	4824      	ldr	r0, [pc, #144]	@ (8005e38 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005da6:	f7ff f98a 	bl	80050be <_PreparePacket>
 8005daa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	623b      	str	r3, [r7, #32]
 8005db8:	e00b      	b.n	8005dd2 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	1c59      	adds	r1, r3, #1
 8005dc2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005dc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	09db      	lsrs	r3, r3, #7
 8005dd0:	623b      	str	r3, [r7, #32]
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dd6:	d8f0      	bhi.n	8005dba <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005dde:	6a3a      	ldr	r2, [r7, #32]
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e00b      	b.n	8005e0a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	1c59      	adds	r1, r3, #1
 8005dfa:	61f9      	str	r1, [r7, #28]
 8005dfc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	09db      	lsrs	r3, r3, #7
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e0e:	d8f0      	bhi.n	8005df2 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	61fa      	str	r2, [r7, #28]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005e20:	221c      	movs	r2, #28
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	6938      	ldr	r0, [r7, #16]
 8005e26:	f7ff fa37 	bl	8005298 <_SendPacket>
  RECORD_END();
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f383 8811 	msr	BASEPRI, r3
}
 8005e30:	bf00      	nop
 8005e32:	3728      	adds	r7, #40	@ 0x28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	200045c0 	.word	0x200045c0

08005e3c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e42:	f3ef 8311 	mrs	r3, BASEPRI
 8005e46:	f04f 0120 	mov.w	r1, #32
 8005e4a:	f381 8811 	msr	BASEPRI, r1
 8005e4e:	607b      	str	r3, [r7, #4]
 8005e50:	4807      	ldr	r0, [pc, #28]	@ (8005e70 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005e52:	f7ff f934 	bl	80050be <_PreparePacket>
 8005e56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005e58:	2211      	movs	r2, #17
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6838      	ldr	r0, [r7, #0]
 8005e5e:	f7ff fa1b 	bl	8005298 <_SendPacket>
  RECORD_END();
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f383 8811 	msr	BASEPRI, r3
}
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	200045c0 	.word	0x200045c0

08005e74 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e80:	f04f 0120 	mov.w	r1, #32
 8005e84:	f381 8811 	msr	BASEPRI, r1
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	4819      	ldr	r0, [pc, #100]	@ (8005ef0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005e8c:	f7ff f917 	bl	80050be <_PreparePacket>
 8005e90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e96:	4b17      	ldr	r3, [pc, #92]	@ (8005ef4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	e00b      	b.n	8005ec2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	1c59      	adds	r1, r3, #1
 8005eb2:	61f9      	str	r1, [r7, #28]
 8005eb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	09db      	lsrs	r3, r3, #7
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ec6:	d8f0      	bhi.n	8005eaa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	61fa      	str	r2, [r7, #28]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005ed8:	2208      	movs	r2, #8
 8005eda:	68f9      	ldr	r1, [r7, #12]
 8005edc:	6938      	ldr	r0, [r7, #16]
 8005ede:	f7ff f9db 	bl	8005298 <_SendPacket>
  RECORD_END();
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f383 8811 	msr	BASEPRI, r3
}
 8005ee8:	bf00      	nop
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	200045c0 	.word	0x200045c0
 8005ef4:	20004590 	.word	0x20004590

08005ef8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f00:	f3ef 8311 	mrs	r3, BASEPRI
 8005f04:	f04f 0120 	mov.w	r1, #32
 8005f08:	f381 8811 	msr	BASEPRI, r1
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	4819      	ldr	r0, [pc, #100]	@ (8005f74 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005f10:	f7ff f8d5 	bl	80050be <_PreparePacket>
 8005f14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f1a:	4b17      	ldr	r3, [pc, #92]	@ (8005f78 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	61fb      	str	r3, [r7, #28]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e00b      	b.n	8005f46 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	1c59      	adds	r1, r3, #1
 8005f36:	61f9      	str	r1, [r7, #28]
 8005f38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	09db      	lsrs	r3, r3, #7
 8005f44:	61bb      	str	r3, [r7, #24]
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f4a:	d8f0      	bhi.n	8005f2e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	61fa      	str	r2, [r7, #28]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	68f9      	ldr	r1, [r7, #12]
 8005f60:	6938      	ldr	r0, [r7, #16]
 8005f62:	f7ff f999 	bl	8005298 <_SendPacket>
  RECORD_END();
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f383 8811 	msr	BASEPRI, r3
}
 8005f6c:	bf00      	nop
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	200045c0 	.word	0x200045c0
 8005f78:	20004590 	.word	0x20004590

08005f7c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f84:	f3ef 8311 	mrs	r3, BASEPRI
 8005f88:	f04f 0120 	mov.w	r1, #32
 8005f8c:	f381 8811 	msr	BASEPRI, r1
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	4819      	ldr	r0, [pc, #100]	@ (8005ff8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005f94:	f7ff f893 	bl	80050be <_PreparePacket>
 8005f98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f9e:	4b17      	ldr	r3, [pc, #92]	@ (8005ffc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	61bb      	str	r3, [r7, #24]
 8005fb0:	e00b      	b.n	8005fca <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	1c59      	adds	r1, r3, #1
 8005fba:	61f9      	str	r1, [r7, #28]
 8005fbc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	09db      	lsrs	r3, r3, #7
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fce:	d8f0      	bhi.n	8005fb2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	61fa      	str	r2, [r7, #28]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005fe0:	2206      	movs	r2, #6
 8005fe2:	68f9      	ldr	r1, [r7, #12]
 8005fe4:	6938      	ldr	r0, [r7, #16]
 8005fe6:	f7ff f957 	bl	8005298 <_SendPacket>
  RECORD_END();
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f383 8811 	msr	BASEPRI, r3
}
 8005ff0:	bf00      	nop
 8005ff2:	3720      	adds	r7, #32
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	200045c0 	.word	0x200045c0
 8005ffc:	20004590 	.word	0x20004590

08006000 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	@ 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800600a:	f3ef 8311 	mrs	r3, BASEPRI
 800600e:	f04f 0120 	mov.w	r1, #32
 8006012:	f381 8811 	msr	BASEPRI, r1
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	4827      	ldr	r0, [pc, #156]	@ (80060b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800601a:	f7ff f850 	bl	80050be <_PreparePacket>
 800601e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006024:	4b25      	ldr	r3, [pc, #148]	@ (80060bc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	623b      	str	r3, [r7, #32]
 8006036:	e00b      	b.n	8006050 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	b2da      	uxtb	r2, r3
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	1c59      	adds	r1, r3, #1
 8006040:	6279      	str	r1, [r7, #36]	@ 0x24
 8006042:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	09db      	lsrs	r3, r3, #7
 800604e:	623b      	str	r3, [r7, #32]
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	2b7f      	cmp	r3, #127	@ 0x7f
 8006054:	d8f0      	bhi.n	8006038 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	627a      	str	r2, [r7, #36]	@ 0x24
 800605c:	6a3a      	ldr	r2, [r7, #32]
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	e00b      	b.n	8006088 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	b2da      	uxtb	r2, r3
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	1c59      	adds	r1, r3, #1
 8006078:	61f9      	str	r1, [r7, #28]
 800607a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	09db      	lsrs	r3, r3, #7
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b7f      	cmp	r3, #127	@ 0x7f
 800608c:	d8f0      	bhi.n	8006070 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	61fa      	str	r2, [r7, #28]
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800609e:	2207      	movs	r2, #7
 80060a0:	68f9      	ldr	r1, [r7, #12]
 80060a2:	6938      	ldr	r0, [r7, #16]
 80060a4:	f7ff f8f8 	bl	8005298 <_SendPacket>
  RECORD_END();
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f383 8811 	msr	BASEPRI, r3
}
 80060ae:	bf00      	nop
 80060b0:	3728      	adds	r7, #40	@ 0x28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	200045c0 	.word	0x200045c0
 80060bc:	20004590 	.word	0x20004590

080060c0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80060c8:	4b04      	ldr	r3, [pc, #16]	@ (80060dc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	1ad3      	subs	r3, r2, r3
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	20004590 	.word	0x20004590

080060e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08c      	sub	sp, #48	@ 0x30
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	4603      	mov	r3, r0
 80060e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80060ea:	4b40      	ldr	r3, [pc, #256]	@ (80061ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d077      	beq.n	80061e2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80060f2:	4b3e      	ldr	r3, [pc, #248]	@ (80061ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80060f8:	2300      	movs	r3, #0
 80060fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060fc:	e008      	b.n	8006110 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80060fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800610a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610c:	3301      	adds	r3, #1
 800610e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006114:	429a      	cmp	r2, r3
 8006116:	d3f2      	bcc.n	80060fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8006118:	e000      	b.n	800611c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800611a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800611c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d055      	beq.n	80061ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006122:	f3ef 8311 	mrs	r3, BASEPRI
 8006126:	f04f 0120 	mov.w	r1, #32
 800612a:	f381 8811 	msr	BASEPRI, r1
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	482f      	ldr	r0, [pc, #188]	@ (80061f0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006132:	f7fe ffc4 	bl	80050be <_PreparePacket>
 8006136:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	623b      	str	r3, [r7, #32]
 8006144:	e00b      	b.n	800615e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	b2da      	uxtb	r2, r3
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	1c59      	adds	r1, r3, #1
 800614e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006150:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	09db      	lsrs	r3, r3, #7
 800615c:	623b      	str	r3, [r7, #32]
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	2b7f      	cmp	r3, #127	@ 0x7f
 8006162:	d8f0      	bhi.n	8006146 <SEGGER_SYSVIEW_SendModule+0x66>
 8006164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	627a      	str	r2, [r7, #36]	@ 0x24
 800616a:	6a3a      	ldr	r2, [r7, #32]
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	e00b      	b.n	8006198 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	b2da      	uxtb	r2, r3
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	1c59      	adds	r1, r3, #1
 8006188:	61f9      	str	r1, [r7, #28]
 800618a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	09db      	lsrs	r3, r3, #7
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2b7f      	cmp	r3, #127	@ 0x7f
 800619c:	d8f0      	bhi.n	8006180 <SEGGER_SYSVIEW_SendModule+0xa0>
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	61fa      	str	r2, [r7, #28]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2280      	movs	r2, #128	@ 0x80
 80061b4:	4619      	mov	r1, r3
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7fe ff48 	bl	800504c <_EncodeStr>
 80061bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80061be:	2216      	movs	r2, #22
 80061c0:	68f9      	ldr	r1, [r7, #12]
 80061c2:	6938      	ldr	r0, [r7, #16]
 80061c4:	f7ff f868 	bl	8005298 <_SendPacket>
      RECORD_END();
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80061ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <SEGGER_SYSVIEW_SendModule+0x102>
 80061d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80061dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	4798      	blx	r3
    }
  }
}
 80061e2:	bf00      	nop
 80061e4:	3730      	adds	r7, #48	@ 0x30
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200045b8 	.word	0x200045b8
 80061f0:	200045c0 	.word	0x200045c0

080061f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80061fa:	4b0c      	ldr	r3, [pc, #48]	@ (800622c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00f      	beq.n	8006222 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006202:	4b0a      	ldr	r3, [pc, #40]	@ (800622c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f2      	bne.n	8006208 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	200045b8 	.word	0x200045b8

08006230 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006236:	f3ef 8311 	mrs	r3, BASEPRI
 800623a:	f04f 0120 	mov.w	r1, #32
 800623e:	f381 8811 	msr	BASEPRI, r1
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	4817      	ldr	r0, [pc, #92]	@ (80062a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006246:	f7fe ff3a 	bl	80050be <_PreparePacket>
 800624a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	4b14      	ldr	r3, [pc, #80]	@ (80062a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	e00b      	b.n	8006274 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	b2da      	uxtb	r2, r3
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	1c59      	adds	r1, r3, #1
 8006264:	6179      	str	r1, [r7, #20]
 8006266:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	09db      	lsrs	r3, r3, #7
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b7f      	cmp	r3, #127	@ 0x7f
 8006278:	d8f0      	bhi.n	800625c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	617a      	str	r2, [r7, #20]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800628a:	221b      	movs	r2, #27
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	68b8      	ldr	r0, [r7, #8]
 8006290:	f7ff f802 	bl	8005298 <_SendPacket>
  RECORD_END();
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f383 8811 	msr	BASEPRI, r3
}
 800629a:	bf00      	nop
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	200045c0 	.word	0x200045c0
 80062a8:	200045bc 	.word	0x200045bc

080062ac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08a      	sub	sp, #40	@ 0x28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062b4:	f3ef 8311 	mrs	r3, BASEPRI
 80062b8:	f04f 0120 	mov.w	r1, #32
 80062bc:	f381 8811 	msr	BASEPRI, r1
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	4827      	ldr	r0, [pc, #156]	@ (8006360 <SEGGER_SYSVIEW_Warn+0xb4>)
 80062c4:	f7fe fefb 	bl	80050be <_PreparePacket>
 80062c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062ca:	2280      	movs	r2, #128	@ 0x80
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	6938      	ldr	r0, [r7, #16]
 80062d0:	f7fe febc 	bl	800504c <_EncodeStr>
 80062d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062da:	2301      	movs	r3, #1
 80062dc:	623b      	str	r3, [r7, #32]
 80062de:	e00b      	b.n	80062f8 <SEGGER_SYSVIEW_Warn+0x4c>
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	1c59      	adds	r1, r3, #1
 80062e8:	6279      	str	r1, [r7, #36]	@ 0x24
 80062ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	09db      	lsrs	r3, r3, #7
 80062f6:	623b      	str	r3, [r7, #32]
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80062fc:	d8f0      	bhi.n	80062e0 <SEGGER_SYSVIEW_Warn+0x34>
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	627a      	str	r2, [r7, #36]	@ 0x24
 8006304:	6a3a      	ldr	r2, [r7, #32]
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	2300      	movs	r3, #0
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	e00b      	b.n	8006330 <SEGGER_SYSVIEW_Warn+0x84>
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	1c59      	adds	r1, r3, #1
 8006320:	61f9      	str	r1, [r7, #28]
 8006322:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	09db      	lsrs	r3, r3, #7
 800632e:	61bb      	str	r3, [r7, #24]
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	2b7f      	cmp	r3, #127	@ 0x7f
 8006334:	d8f0      	bhi.n	8006318 <SEGGER_SYSVIEW_Warn+0x6c>
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	61fa      	str	r2, [r7, #28]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006346:	221a      	movs	r2, #26
 8006348:	68f9      	ldr	r1, [r7, #12]
 800634a:	6938      	ldr	r0, [r7, #16]
 800634c:	f7fe ffa4 	bl	8005298 <_SendPacket>
  RECORD_END();
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f383 8811 	msr	BASEPRI, r3
}
 8006356:	bf00      	nop
 8006358:	3728      	adds	r7, #40	@ 0x28
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	200045c0 	.word	0x200045c0

08006364 <memcmp>:
 8006364:	b510      	push	{r4, lr}
 8006366:	3901      	subs	r1, #1
 8006368:	4402      	add	r2, r0
 800636a:	4290      	cmp	r0, r2
 800636c:	d101      	bne.n	8006372 <memcmp+0xe>
 800636e:	2000      	movs	r0, #0
 8006370:	e005      	b.n	800637e <memcmp+0x1a>
 8006372:	7803      	ldrb	r3, [r0, #0]
 8006374:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006378:	42a3      	cmp	r3, r4
 800637a:	d001      	beq.n	8006380 <memcmp+0x1c>
 800637c:	1b18      	subs	r0, r3, r4
 800637e:	bd10      	pop	{r4, pc}
 8006380:	3001      	adds	r0, #1
 8006382:	e7f2      	b.n	800636a <memcmp+0x6>

08006384 <memset>:
 8006384:	4402      	add	r2, r0
 8006386:	4603      	mov	r3, r0
 8006388:	4293      	cmp	r3, r2
 800638a:	d100      	bne.n	800638e <memset+0xa>
 800638c:	4770      	bx	lr
 800638e:	f803 1b01 	strb.w	r1, [r3], #1
 8006392:	e7f9      	b.n	8006388 <memset+0x4>

08006394 <__libc_init_array>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	4d0d      	ldr	r5, [pc, #52]	@ (80063cc <__libc_init_array+0x38>)
 8006398:	4c0d      	ldr	r4, [pc, #52]	@ (80063d0 <__libc_init_array+0x3c>)
 800639a:	1b64      	subs	r4, r4, r5
 800639c:	10a4      	asrs	r4, r4, #2
 800639e:	2600      	movs	r6, #0
 80063a0:	42a6      	cmp	r6, r4
 80063a2:	d109      	bne.n	80063b8 <__libc_init_array+0x24>
 80063a4:	4d0b      	ldr	r5, [pc, #44]	@ (80063d4 <__libc_init_array+0x40>)
 80063a6:	4c0c      	ldr	r4, [pc, #48]	@ (80063d8 <__libc_init_array+0x44>)
 80063a8:	f000 f826 	bl	80063f8 <_init>
 80063ac:	1b64      	subs	r4, r4, r5
 80063ae:	10a4      	asrs	r4, r4, #2
 80063b0:	2600      	movs	r6, #0
 80063b2:	42a6      	cmp	r6, r4
 80063b4:	d105      	bne.n	80063c2 <__libc_init_array+0x2e>
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063bc:	4798      	blx	r3
 80063be:	3601      	adds	r6, #1
 80063c0:	e7ee      	b.n	80063a0 <__libc_init_array+0xc>
 80063c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c6:	4798      	blx	r3
 80063c8:	3601      	adds	r6, #1
 80063ca:	e7f2      	b.n	80063b2 <__libc_init_array+0x1e>
 80063cc:	08006580 	.word	0x08006580
 80063d0:	08006580 	.word	0x08006580
 80063d4:	08006580 	.word	0x08006580
 80063d8:	08006584 	.word	0x08006584

080063dc <memcpy>:
 80063dc:	440a      	add	r2, r1
 80063de:	4291      	cmp	r1, r2
 80063e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80063e4:	d100      	bne.n	80063e8 <memcpy+0xc>
 80063e6:	4770      	bx	lr
 80063e8:	b510      	push	{r4, lr}
 80063ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f2:	4291      	cmp	r1, r2
 80063f4:	d1f9      	bne.n	80063ea <memcpy+0xe>
 80063f6:	bd10      	pop	{r4, pc}

080063f8 <_init>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	bf00      	nop
 80063fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fe:	bc08      	pop	{r3}
 8006400:	469e      	mov	lr, r3
 8006402:	4770      	bx	lr

08006404 <_fini>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	bf00      	nop
 8006408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640a:	bc08      	pop	{r3}
 800640c:	469e      	mov	lr, r3
 800640e:	4770      	bx	lr
