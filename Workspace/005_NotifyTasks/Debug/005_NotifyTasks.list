
005_NotifyTasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800768c  0800768c  0000868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e8  080078e8  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080078e8  080078e8  000088e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078f0  080078f0  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f0  080078f0  000088f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078f4  080078f4  000088f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080078f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046a4  20000010  08007908  00009010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200046b4  08007908  000096b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015543  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f5  00000000  00000000  0001e583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00021678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f52  00000000  00000000  00022a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a187  00000000  00000000  000239aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153ef  00000000  00000000  0003db31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac115  00000000  00000000  00052f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff035  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005390  00000000  00000000  000ff078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d8  00000000  00000000  00104408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007674 	.word	0x08007674

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08007674 	.word	0x08007674

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200030e0 	.word	0x200030e0

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000288:	f000 b988 	b.w	800059c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	468e      	mov	lr, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	4688      	mov	r8, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d962      	bls.n	8000380 <__udivmoddi4+0xdc>
 80002ba:	fab2 f682 	clz	r6, r2
 80002be:	b14e      	cbz	r6, 80002d4 <__udivmoddi4+0x30>
 80002c0:	f1c6 0320 	rsb	r3, r6, #32
 80002c4:	fa01 f806 	lsl.w	r8, r1, r6
 80002c8:	fa20 f303 	lsr.w	r3, r0, r3
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	ea43 0808 	orr.w	r8, r3, r8
 80002d2:	40b4      	lsls	r4, r6
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f fc87 	uxth.w	ip, r7
 80002dc:	fbb8 f1fe 	udiv	r1, r8, lr
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f8:	f080 80ea 	bcs.w	80004d0 <__udivmoddi4+0x22c>
 80002fc:	429a      	cmp	r2, r3
 80002fe:	f240 80e7 	bls.w	80004d0 <__udivmoddi4+0x22c>
 8000302:	3902      	subs	r1, #2
 8000304:	443b      	add	r3, r7
 8000306:	1a9a      	subs	r2, r3, r2
 8000308:	b2a3      	uxth	r3, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb00 fc0c 	mul.w	ip, r0, ip
 800031a:	459c      	cmp	ip, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x8e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000324:	f080 80d6 	bcs.w	80004d4 <__udivmoddi4+0x230>
 8000328:	459c      	cmp	ip, r3
 800032a:	f240 80d3 	bls.w	80004d4 <__udivmoddi4+0x230>
 800032e:	443b      	add	r3, r7
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000336:	eba3 030c 	sub.w	r3, r3, ip
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa2>
 800033e:	40f3      	lsrs	r3, r6
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xb6>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb0>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa2>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x14c>
 8000362:	4573      	cmp	r3, lr
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xc8>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 8105 	bhi.w	8000576 <__udivmoddi4+0x2d2>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000372:	2001      	movs	r0, #1
 8000374:	4690      	mov	r8, r2
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e5      	beq.n	8000346 <__udivmoddi4+0xa2>
 800037a:	e9c5 4800 	strd	r4, r8, [r5]
 800037e:	e7e2      	b.n	8000346 <__udivmoddi4+0xa2>
 8000380:	2a00      	cmp	r2, #0
 8000382:	f000 8090 	beq.w	80004a6 <__udivmoddi4+0x202>
 8000386:	fab2 f682 	clz	r6, r2
 800038a:	2e00      	cmp	r6, #0
 800038c:	f040 80a4 	bne.w	80004d8 <__udivmoddi4+0x234>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	0c03      	lsrs	r3, r0, #16
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	b280      	uxth	r0, r0
 800039a:	b2bc      	uxth	r4, r7
 800039c:	2101      	movs	r1, #1
 800039e:	fbb2 fcfe 	udiv	ip, r2, lr
 80003a2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003aa:	fb04 f20c 	mul.w	r2, r4, ip
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d907      	bls.n	80003c2 <__udivmoddi4+0x11e>
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b8:	d202      	bcs.n	80003c0 <__udivmoddi4+0x11c>
 80003ba:	429a      	cmp	r2, r3
 80003bc:	f200 80e0 	bhi.w	8000580 <__udivmoddi4+0x2dc>
 80003c0:	46c4      	mov	ip, r8
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003cc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003d0:	fb02 f404 	mul.w	r4, r2, r4
 80003d4:	429c      	cmp	r4, r3
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x144>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x142>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f200 80ca 	bhi.w	800057a <__udivmoddi4+0x2d6>
 80003e6:	4602      	mov	r2, r0
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x98>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa0e f401 	lsl.w	r4, lr, r1
 8000400:	fa20 f306 	lsr.w	r3, r0, r6
 8000404:	fa2e fe06 	lsr.w	lr, lr, r6
 8000408:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800040c:	4323      	orrs	r3, r4
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	fa1f fc87 	uxth.w	ip, r7
 8000416:	fbbe f0f9 	udiv	r0, lr, r9
 800041a:	0c1c      	lsrs	r4, r3, #16
 800041c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000420:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000424:	fb00 fe0c 	mul.w	lr, r0, ip
 8000428:	45a6      	cmp	lr, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d909      	bls.n	8000444 <__udivmoddi4+0x1a0>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000436:	f080 809c 	bcs.w	8000572 <__udivmoddi4+0x2ce>
 800043a:	45a6      	cmp	lr, r4
 800043c:	f240 8099 	bls.w	8000572 <__udivmoddi4+0x2ce>
 8000440:	3802      	subs	r0, #2
 8000442:	443c      	add	r4, r7
 8000444:	eba4 040e 	sub.w	r4, r4, lr
 8000448:	fa1f fe83 	uxth.w	lr, r3
 800044c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000450:	fb09 4413 	mls	r4, r9, r3, r4
 8000454:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000458:	fb03 fc0c 	mul.w	ip, r3, ip
 800045c:	45a4      	cmp	ip, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x1ce>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000466:	f080 8082 	bcs.w	800056e <__udivmoddi4+0x2ca>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d97f      	bls.n	800056e <__udivmoddi4+0x2ca>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000476:	eba4 040c 	sub.w	r4, r4, ip
 800047a:	fba0 ec02 	umull	lr, ip, r0, r2
 800047e:	4564      	cmp	r4, ip
 8000480:	4673      	mov	r3, lr
 8000482:	46e1      	mov	r9, ip
 8000484:	d362      	bcc.n	800054c <__udivmoddi4+0x2a8>
 8000486:	d05f      	beq.n	8000548 <__udivmoddi4+0x2a4>
 8000488:	b15d      	cbz	r5, 80004a2 <__udivmoddi4+0x1fe>
 800048a:	ebb8 0203 	subs.w	r2, r8, r3
 800048e:	eb64 0409 	sbc.w	r4, r4, r9
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	fa22 f301 	lsr.w	r3, r2, r1
 800049a:	431e      	orrs	r6, r3
 800049c:	40cc      	lsrs	r4, r1
 800049e:	e9c5 6400 	strd	r6, r4, [r5]
 80004a2:	2100      	movs	r1, #0
 80004a4:	e74f      	b.n	8000346 <__udivmoddi4+0xa2>
 80004a6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004aa:	0c01      	lsrs	r1, r0, #16
 80004ac:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004b0:	b280      	uxth	r0, r0
 80004b2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b6:	463b      	mov	r3, r7
 80004b8:	4638      	mov	r0, r7
 80004ba:	463c      	mov	r4, r7
 80004bc:	46b8      	mov	r8, r7
 80004be:	46be      	mov	lr, r7
 80004c0:	2620      	movs	r6, #32
 80004c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c6:	eba2 0208 	sub.w	r2, r2, r8
 80004ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ce:	e766      	b.n	800039e <__udivmoddi4+0xfa>
 80004d0:	4601      	mov	r1, r0
 80004d2:	e718      	b.n	8000306 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e72c      	b.n	8000332 <__udivmoddi4+0x8e>
 80004d8:	f1c6 0220 	rsb	r2, r6, #32
 80004dc:	fa2e f302 	lsr.w	r3, lr, r2
 80004e0:	40b7      	lsls	r7, r6
 80004e2:	40b1      	lsls	r1, r6
 80004e4:	fa20 f202 	lsr.w	r2, r0, r2
 80004e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004ec:	430a      	orrs	r2, r1
 80004ee:	fbb3 f8fe 	udiv	r8, r3, lr
 80004f2:	b2bc      	uxth	r4, r7
 80004f4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f8:	0c11      	lsrs	r1, r2, #16
 80004fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fe:	fb08 f904 	mul.w	r9, r8, r4
 8000502:	40b0      	lsls	r0, r6
 8000504:	4589      	cmp	r9, r1
 8000506:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800050a:	b280      	uxth	r0, r0
 800050c:	d93e      	bls.n	800058c <__udivmoddi4+0x2e8>
 800050e:	1879      	adds	r1, r7, r1
 8000510:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000514:	d201      	bcs.n	800051a <__udivmoddi4+0x276>
 8000516:	4589      	cmp	r9, r1
 8000518:	d81f      	bhi.n	800055a <__udivmoddi4+0x2b6>
 800051a:	eba1 0109 	sub.w	r1, r1, r9
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	fb0e 1119 	mls	r1, lr, r9, r1
 800052a:	b292      	uxth	r2, r2
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	4542      	cmp	r2, r8
 8000532:	d229      	bcs.n	8000588 <__udivmoddi4+0x2e4>
 8000534:	18ba      	adds	r2, r7, r2
 8000536:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800053a:	d2c4      	bcs.n	80004c6 <__udivmoddi4+0x222>
 800053c:	4542      	cmp	r2, r8
 800053e:	d2c2      	bcs.n	80004c6 <__udivmoddi4+0x222>
 8000540:	f1a9 0102 	sub.w	r1, r9, #2
 8000544:	443a      	add	r2, r7
 8000546:	e7be      	b.n	80004c6 <__udivmoddi4+0x222>
 8000548:	45f0      	cmp	r8, lr
 800054a:	d29d      	bcs.n	8000488 <__udivmoddi4+0x1e4>
 800054c:	ebbe 0302 	subs.w	r3, lr, r2
 8000550:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000554:	3801      	subs	r0, #1
 8000556:	46e1      	mov	r9, ip
 8000558:	e796      	b.n	8000488 <__udivmoddi4+0x1e4>
 800055a:	eba7 0909 	sub.w	r9, r7, r9
 800055e:	4449      	add	r1, r9
 8000560:	f1a8 0c02 	sub.w	ip, r8, #2
 8000564:	fbb1 f9fe 	udiv	r9, r1, lr
 8000568:	fb09 f804 	mul.w	r8, r9, r4
 800056c:	e7db      	b.n	8000526 <__udivmoddi4+0x282>
 800056e:	4673      	mov	r3, lr
 8000570:	e77f      	b.n	8000472 <__udivmoddi4+0x1ce>
 8000572:	4650      	mov	r0, sl
 8000574:	e766      	b.n	8000444 <__udivmoddi4+0x1a0>
 8000576:	4608      	mov	r0, r1
 8000578:	e6fd      	b.n	8000376 <__udivmoddi4+0xd2>
 800057a:	443b      	add	r3, r7
 800057c:	3a02      	subs	r2, #2
 800057e:	e733      	b.n	80003e8 <__udivmoddi4+0x144>
 8000580:	f1ac 0c02 	sub.w	ip, ip, #2
 8000584:	443b      	add	r3, r7
 8000586:	e71c      	b.n	80003c2 <__udivmoddi4+0x11e>
 8000588:	4649      	mov	r1, r9
 800058a:	e79c      	b.n	80004c6 <__udivmoddi4+0x222>
 800058c:	eba1 0109 	sub.w	r1, r1, r9
 8000590:	46c4      	mov	ip, r8
 8000592:	fbb1 f9fe 	udiv	r9, r1, lr
 8000596:	fb09 f804 	mul.w	r8, r9, r4
 800059a:	e7c4      	b.n	8000526 <__udivmoddi4+0x282>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fb93 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f8a5 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f901 	bl	80007b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //enable the cycle count//
  DWT_CTRL |= (1 << 0);
 80005b2:	4b3f      	ldr	r3, [pc, #252]	@ (80006b0 <main+0x110>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a3e      	ldr	r2, [pc, #248]	@ (80006b0 <main+0x110>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6013      	str	r3, [r2, #0]

  //calling the APIs to start recording
  SEGGER_SYSVIEW_Conf();
 80005be:	f004 fe81 	bl	80052c4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005c2:	f006 f98f 	bl	80068e4 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led1_handler, "Task - 1", configMINIMAL_STACK_SIZE * 2, "Executing task - 1", 3, &task1_handler);
 80005c6:	4b3b      	ldr	r3, [pc, #236]	@ (80006b4 <main+0x114>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2303      	movs	r3, #3
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	4b3a      	ldr	r3, [pc, #232]	@ (80006b8 <main+0x118>)
 80005d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005d4:	4939      	ldr	r1, [pc, #228]	@ (80006bc <main+0x11c>)
 80005d6:	483a      	ldr	r0, [pc, #232]	@ (80006c0 <main+0x120>)
 80005d8:	f002 f9ca 	bl	8002970 <xTaskCreate>
 80005dc:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d00b      	beq.n	80005fc <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e8:	f383 8811 	msr	BASEPRI, r3
 80005ec:	f3bf 8f6f 	isb	sy
 80005f0:	f3bf 8f4f 	dsb	sy
 80005f4:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <main+0x58>
  next_task_handler = task1_handler;
 80005fc:	4b2d      	ldr	r3, [pc, #180]	@ (80006b4 <main+0x114>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a30      	ldr	r2, [pc, #192]	@ (80006c4 <main+0x124>)
 8000602:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led2_handler, "Task - 2", configMINIMAL_STACK_SIZE * 2, "Executing task - 2", 2, &task2_handler);
 8000604:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <main+0x128>)
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2302      	movs	r3, #2
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	4b2f      	ldr	r3, [pc, #188]	@ (80006cc <main+0x12c>)
 800060e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000612:	492f      	ldr	r1, [pc, #188]	@ (80006d0 <main+0x130>)
 8000614:	482f      	ldr	r0, [pc, #188]	@ (80006d4 <main+0x134>)
 8000616:	f002 f9ab 	bl	8002970 <xTaskCreate>
 800061a:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d00b      	beq.n	800063a <main+0x9a>
    __asm volatile
 8000622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	60fb      	str	r3, [r7, #12]
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	e7fd      	b.n	8000636 <main+0x96>

  status = xTaskCreate(led3_handler, "Task - 3", configMINIMAL_STACK_SIZE * 2, "Executing task - 3", 1, &task3_handler);
 800063a:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <main+0x138>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2301      	movs	r3, #1
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <main+0x13c>)
 8000644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000648:	4925      	ldr	r1, [pc, #148]	@ (80006e0 <main+0x140>)
 800064a:	4826      	ldr	r0, [pc, #152]	@ (80006e4 <main+0x144>)
 800064c:	f002 f990 	bl	8002970 <xTaskCreate>
 8000650:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00b      	beq.n	8000670 <main+0xd0>
    __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	60bb      	str	r3, [r7, #8]
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <main+0xcc>

  status = xTaskCreate(btn_handler, "Button Task", configMINIMAL_STACK_SIZE * 2, "Executing button task", 4, &btn_task_handler);
 8000670:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <main+0x148>)
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2304      	movs	r3, #4
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <main+0x14c>)
 800067a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800067e:	491c      	ldr	r1, [pc, #112]	@ (80006f0 <main+0x150>)
 8000680:	481c      	ldr	r0, [pc, #112]	@ (80006f4 <main+0x154>)
 8000682:	f002 f975 	bl	8002970 <xTaskCreate>
 8000686:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d00b      	beq.n	80006a6 <main+0x106>
    __asm volatile
 800068e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000692:	f383 8811 	msr	BASEPRI, r3
 8000696:	f3bf 8f6f 	isb	sy
 800069a:	f3bf 8f4f 	dsb	sy
 800069e:	607b      	str	r3, [r7, #4]
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	e7fd      	b.n	80006a2 <main+0x102>

  //Starting the FreeRTOS Scheduler//
  vTaskStartScheduler();
 80006a6:	f002 fc17 	bl	8002ed8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <main+0x10a>
 80006ae:	bf00      	nop
 80006b0:	e0001000 	.word	0xe0001000
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	0800768c 	.word	0x0800768c
 80006bc:	080076a0 	.word	0x080076a0
 80006c0:	080008a5 	.word	0x080008a5
 80006c4:	2000003c 	.word	0x2000003c
 80006c8:	20000030 	.word	0x20000030
 80006cc:	080076ac 	.word	0x080076ac
 80006d0:	080076c0 	.word	0x080076c0
 80006d4:	0800091d 	.word	0x0800091d
 80006d8:	20000034 	.word	0x20000034
 80006dc:	080076cc 	.word	0x080076cc
 80006e0:	080076e0 	.word	0x080076e0
 80006e4:	08000995 	.word	0x08000995
 80006e8:	20000038 	.word	0x20000038
 80006ec:	080076ec 	.word	0x080076ec
 80006f0:	08007704 	.word	0x08007704
 80006f4:	08000a1d 	.word	0x08000a1d

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	@ 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	@ 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f006 ff7a 	bl	8007600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <SystemClock_Config+0xb4>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	4a21      	ldr	r2, [pc, #132]	@ (80007ac <SystemClock_Config+0xb4>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	@ 0x40
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <SystemClock_Config+0xb4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <SystemClock_Config+0xb8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <SystemClock_Config+0xb8>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <SystemClock_Config+0xb8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2310      	movs	r3, #16
 800075e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000760:	2300      	movs	r3, #0
 8000762:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fda5 	bl	80012b8 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000774:	f000 f995 	bl	8000aa2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f808 	bl	80017a8 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800079e:	f000 f980 	bl	8000aa2 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	@ 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b31      	ldr	r3, [pc, #196]	@ (8000894 <MX_GPIO_Init+0xe0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a30      	ldr	r2, [pc, #192]	@ (8000894 <MX_GPIO_Init+0xe0>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b2e      	ldr	r3, [pc, #184]	@ (8000894 <MX_GPIO_Init+0xe0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_GPIO_Init+0xe0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a29      	ldr	r2, [pc, #164]	@ (8000894 <MX_GPIO_Init+0xe0>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_GPIO_Init+0xe0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <MX_GPIO_Init+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a22      	ldr	r2, [pc, #136]	@ (8000894 <MX_GPIO_Init+0xe0>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <MX_GPIO_Init+0xe0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000824:	481c      	ldr	r0, [pc, #112]	@ (8000898 <MX_GPIO_Init+0xe4>)
 8000826:	f000 fd13 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000830:	481a      	ldr	r0, [pc, #104]	@ (800089c <MX_GPIO_Init+0xe8>)
 8000832:	f000 fd0d 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000836:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4812      	ldr	r0, [pc, #72]	@ (8000898 <MX_GPIO_Init+0xe4>)
 8000850:	f000 fb62 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000854:	2301      	movs	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000858:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085e:	2301      	movs	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_GPIO_Init+0xec>)
 800086a:	f000 fb55 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800086e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_GPIO_Init+0xe8>)
 8000888:	f000 fb46 	bl	8000f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40020800 	.word	0x40020800
 800089c:	40020400 	.word	0x40020400
 80008a0:	40020000 	.word	0x40020000

080008a4 <led1_handler>:

/* USER CODE BEGIN 4 */
static void led1_handler(void* parameters)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling the on-board LED");
 80008ac:	4816      	ldr	r0, [pc, #88]	@ (8000908 <led1_handler+0x64>)
 80008ae:	f006 fe27 	bl	8007500 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b6:	4815      	ldr	r0, [pc, #84]	@ (800090c <led1_handler+0x68>)
 80008b8:	f000 fce3 	bl	8001282 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 80008bc:	f04f 0264 	mov.w	r2, #100	@ 0x64
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e9cd 2300 	strd	r2, r3, [sp]
 80008c8:	2300      	movs	r3, #0
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	2000      	movs	r0, #0
 80008d0:	f003 f97c 	bl	8003bcc <xTaskGenericNotifyWait>
 80008d4:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d1e7      	bne.n	80008ac <led1_handler+0x8>
		{
			vTaskSuspendAll();
 80008dc:	f002 fb5c 	bl	8002f98 <vTaskSuspendAll>
			next_task_handler = task2_handler;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <led1_handler+0x6c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000914 <led1_handler+0x70>)
 80008e6:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80008e8:	f002 fb64 	bl	8002fb4 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f2:	4806      	ldr	r0, [pc, #24]	@ (800090c <led1_handler+0x68>)
 80008f4:	f000 fcac 	bl	8001250 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete the Task-1");
 80008f8:	4807      	ldr	r0, [pc, #28]	@ (8000918 <led1_handler+0x74>)
 80008fa:	f006 fe01 	bl	8007500 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 80008fe:	2000      	movs	r0, #0
 8000900:	f002 f9a4 	bl	8002c4c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling the on-board LED");
 8000904:	e7d2      	b.n	80008ac <led1_handler+0x8>
 8000906:	bf00      	nop
 8000908:	08007710 	.word	0x08007710
 800090c:	40020800 	.word	0x40020800
 8000910:	20000030 	.word	0x20000030
 8000914:	2000003c 	.word	0x2000003c
 8000918:	0800772c 	.word	0x0800772c

0800091c <led2_handler>:
		}
	}
}
static void led2_handler(void* parameters)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af02      	add	r7, sp, #8
 8000922:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling PB13 pin");
 8000924:	4816      	ldr	r0, [pc, #88]	@ (8000980 <led2_handler+0x64>)
 8000926:	f006 fdeb 	bl	8007500 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800092a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092e:	4815      	ldr	r0, [pc, #84]	@ (8000984 <led2_handler+0x68>)
 8000930:	f000 fca7 	bl	8001282 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000934:	f04f 0250 	mov.w	r2, #80	@ 0x50
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	e9cd 2300 	strd	r2, r3, [sp]
 8000940:	2300      	movs	r3, #0
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	2000      	movs	r0, #0
 8000948:	f003 f940 	bl	8003bcc <xTaskGenericNotifyWait>
 800094c:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d1e7      	bne.n	8000924 <led2_handler+0x8>
		{
			vTaskSuspendAll();
 8000954:	f002 fb20 	bl	8002f98 <vTaskSuspendAll>
			next_task_handler = task3_handler;
 8000958:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <led2_handler+0x6c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0b      	ldr	r2, [pc, #44]	@ (800098c <led2_handler+0x70>)
 800095e:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000960:	f002 fb28 	bl	8002fb4 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096a:	4806      	ldr	r0, [pc, #24]	@ (8000984 <led2_handler+0x68>)
 800096c:	f000 fc70 	bl	8001250 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete the Task-2");
 8000970:	4807      	ldr	r0, [pc, #28]	@ (8000990 <led2_handler+0x74>)
 8000972:	f006 fdc5 	bl	8007500 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000976:	2000      	movs	r0, #0
 8000978:	f002 f968 	bl	8002c4c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling PB13 pin");
 800097c:	e7d2      	b.n	8000924 <led2_handler+0x8>
 800097e:	bf00      	nop
 8000980:	08007740 	.word	0x08007740
 8000984:	40020400 	.word	0x40020400
 8000988:	20000034 	.word	0x20000034
 800098c:	2000003c 	.word	0x2000003c
 8000990:	08007754 	.word	0x08007754

08000994 <led3_handler>:
		}
	}
}

static void led3_handler(void* parameters)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af02      	add	r7, sp, #8
 800099a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling PB14 pin");
 800099c:	4819      	ldr	r0, [pc, #100]	@ (8000a04 <led3_handler+0x70>)
 800099e:	f006 fdaf 	bl	8007500 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80009a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009a6:	4818      	ldr	r0, [pc, #96]	@ (8000a08 <led3_handler+0x74>)
 80009a8:	f000 fc6b 	bl	8001282 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 80009ac:	f04f 0228 	mov.w	r2, #40	@ 0x28
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	e9cd 2300 	strd	r2, r3, [sp]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2000      	movs	r0, #0
 80009c0:	f003 f904 	bl	8003bcc <xTaskGenericNotifyWait>
 80009c4:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d1e7      	bne.n	800099c <led3_handler+0x8>
		{
			vTaskSuspendAll();
 80009cc:	f002 fae4 	bl	8002f98 <vTaskSuspendAll>
			next_task_handler = NULL;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <led3_handler+0x78>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80009d6:	f002 faed 	bl	8002fb4 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e0:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <led3_handler+0x74>)
 80009e2:	f000 fc35 	bl	8001250 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete the button Task");
 80009e6:	480a      	ldr	r0, [pc, #40]	@ (8000a10 <led3_handler+0x7c>)
 80009e8:	f006 fd8a 	bl	8007500 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(btn_task_handler);
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <led3_handler+0x80>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 f92b 	bl	8002c4c <vTaskDelete>
			SEGGER_SYSVIEW_PrintfTarget("Delete the Task-3");
 80009f6:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <led3_handler+0x84>)
 80009f8:	f006 fd82 	bl	8007500 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 80009fc:	2000      	movs	r0, #0
 80009fe:	f002 f925 	bl	8002c4c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling PB14 pin");
 8000a02:	e7cb      	b.n	800099c <led3_handler+0x8>
 8000a04:	08007768 	.word	0x08007768
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	2000003c 	.word	0x2000003c
 8000a10:	0800777c 	.word	0x0800777c
 8000a14:	20000038 	.word	0x20000038
 8000a18:	08007794 	.word	0x08007794

08000a1c <btn_handler>:
		}
	}
}

static void btn_handler(void* parameters)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	6078      	str	r0, [r7, #4]
	uint8_t read = 0, prev_read = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73bb      	strb	r3, [r7, #14]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		read = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <btn_handler+0x5c>)
 8000a30:	f000 fbf6 	bl	8001220 <HAL_GPIO_ReadPin>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	bf0c      	ite	eq
 8000a3a:	2301      	moveq	r3, #1
 8000a3c:	2300      	movne	r3, #0
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	73bb      	strb	r3, [r7, #14]
		if(read)
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d00e      	beq.n	8000a66 <btn_handler+0x4a>
		{
			if(!prev_read) //checks for short and long presses//
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10b      	bne.n	8000a66 <btn_handler+0x4a>
			{
				SEGGER_SYSVIEW_PrintfTarget("Button pressed at startup!");
 8000a4e:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <btn_handler+0x60>)
 8000a50:	f006 fd56 	bl	8007500 <SEGGER_SYSVIEW_PrintfTarget>

				xTaskNotify(next_task_handler, 0, eNoAction);
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <btn_handler+0x64>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	f003 f94d 	bl	8003d00 <xTaskGenericNotify>
			}
		}
		prev_read = read;
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000a6a:	f04f 0001 	mov.w	r0, #1
 8000a6e:	f04f 0100 	mov.w	r1, #0
 8000a72:	f002 f98d 	bl	8002d90 <vTaskDelay>
		read = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);
 8000a76:	e7d9      	b.n	8000a2c <btn_handler+0x10>
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	080077a8 	.word	0x080077a8
 8000a80:	2000003c 	.word	0x2000003c

08000a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a94:	d101      	bne.n	8000a9a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a96:	f000 f93d 	bl	8000d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa6:	b672      	cpsid	i
}
 8000aa8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aaa:	bf00      	nop
 8000aac:	e7fd      	b.n	8000aaa <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000aee:	f003 ffb1 	bl	8004a54 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	@ 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	4a33      	ldr	r2, [pc, #204]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b20:	4b31      	ldr	r3, [pc, #196]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b2c:	f107 0210 	add.w	r2, r7, #16
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f802 	bl	8001b40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b46:	f000 ffe7 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8000b4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b4c:	e004      	b.n	8000b58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b4e:	f000 ffe3 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8000b52:	4603      	mov	r3, r0
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b5a:	4a24      	ldr	r2, [pc, #144]	@ (8000bec <HAL_InitTick+0xec>)
 8000b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b60:	0c9b      	lsrs	r3, r3, #18
 8000b62:	3b01      	subs	r3, #1
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000b66:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b6c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b74:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000b76:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000b8e:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b90:	f001 f808 	bl	8001ba4 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d11b      	bne.n	8000bda <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000ba2:	4813      	ldr	r0, [pc, #76]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000ba4:	f001 f858 	bl	8001c58 <HAL_TIM_Base_Start_IT>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d111      	bne.n	8000bda <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb6:	201c      	movs	r0, #28
 8000bb8:	f000 f9a0 	bl	8000efc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d808      	bhi.n	8000bd4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	201c      	movs	r0, #28
 8000bc8:	f000 f97c 	bl	8000ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bcc:	4a09      	ldr	r2, [pc, #36]	@ (8000bf4 <HAL_InitTick+0xf4>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	e002      	b.n	8000bda <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bda:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3738      	adds	r7, #56	@ 0x38
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	20000040 	.word	0x20000040
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <NMI_Handler+0x4>

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <MemManage_Handler+0x4>

08000c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <SysTick_Handler>:
void SysTick_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c32:	f002 ffa9 	bl	8003b88 <xTaskGetSchedulerState>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d001      	beq.n	8000c40 <SysTick_Handler+0x12>
    {
        xPortSysTickHandler();
 8000c3c:	f004 f80c 	bl	8004c58 <xPortSysTickHandler>
    }
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <TIM2_IRQHandler+0x10>)
 8000c4a:	f001 f867 	bl	8001d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000040 	.word	0x20000040

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c80:	f7ff ffea 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000caa:	f006 fcb1 	bl	8007610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc77 	bl	80005a0 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cc0:	080078f8 	.word	0x080078f8
  ldr r2, =_sbss
 8000cc4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cc8:	200046b4 	.word	0x200046b4

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f8d8 	bl	8000eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f7ff fefe 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fed4 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000088 	.word	0x20000088

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000088 	.word	0x20000088

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	@ (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	@ (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	@ (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	@ 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff4c 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed6:	f7ff ff61 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	6978      	ldr	r0, [r7, #20]
 8000ee2:	f7ff ffb1 	bl	8000e48 <NVIC_EncodePriority>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff80 	bl	8000df4 <__NVIC_SetPriority>
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff54 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e159      	b.n	80011e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8148 	bne.w	80011e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d005      	beq.n	8000f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d130      	bne.n	8000fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 0201 	and.w	r2, r3, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d017      	beq.n	8001008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d123      	bne.n	800105c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69b9      	ldr	r1, [r7, #24]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80a2 	beq.w	80011e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b57      	ldr	r3, [pc, #348]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a56      	ldr	r2, [pc, #344]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b54      	ldr	r3, [pc, #336]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ba:	4a52      	ldr	r2, [pc, #328]	@ (8001204 <HAL_GPIO_Init+0x2ec>)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a49      	ldr	r2, [pc, #292]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x202>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a48      	ldr	r2, [pc, #288]	@ (800120c <HAL_GPIO_Init+0x2f4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x1fe>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a47      	ldr	r2, [pc, #284]	@ (8001210 <HAL_GPIO_Init+0x2f8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x1fa>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a46      	ldr	r2, [pc, #280]	@ (8001214 <HAL_GPIO_Init+0x2fc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x1f6>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a45      	ldr	r2, [pc, #276]	@ (8001218 <HAL_GPIO_Init+0x300>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x1f2>
 8001106:	2304      	movs	r3, #4
 8001108:	e008      	b.n	800111c <HAL_GPIO_Init+0x204>
 800110a:	2307      	movs	r3, #7
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x204>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <HAL_GPIO_Init+0x204>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <HAL_GPIO_Init+0x204>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x204>
 800111a:	2300      	movs	r3, #0
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4093      	lsls	r3, r2
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112c:	4935      	ldr	r1, [pc, #212]	@ (8001204 <HAL_GPIO_Init+0x2ec>)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113a:	4b38      	ldr	r3, [pc, #224]	@ (800121c <HAL_GPIO_Init+0x304>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115e:	4a2f      	ldr	r2, [pc, #188]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001164:	4b2d      	ldr	r3, [pc, #180]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001188:	4a24      	ldr	r2, [pc, #144]	@ (800121c <HAL_GPIO_Init+0x304>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800118e:	4b23      	ldr	r3, [pc, #140]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b2:	4a1a      	ldr	r2, [pc, #104]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011dc:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	f67f aea2 	bls.w	8000f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40013800 	.word	0x40013800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020400 	.word	0x40020400
 8001210:	40020800 	.word	0x40020800
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40021000 	.word	0x40021000
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e001      	b.n	8001242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800126c:	e003      	b.n	8001276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	041a      	lsls	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001282:	b480      	push	{r7}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001294:	887a      	ldrh	r2, [r7, #2]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	041a      	lsls	r2, r3, #16
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43d9      	mvns	r1, r3
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	400b      	ands	r3, r1
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e267      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d075      	beq.n	80013c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012d6:	4b88      	ldr	r3, [pc, #544]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d00c      	beq.n	80012fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4b85      	ldr	r3, [pc, #532]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d112      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b82      	ldr	r3, [pc, #520]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012fa:	d10b      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4b7e      	ldr	r3, [pc, #504]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d05b      	beq.n	80013c0 <HAL_RCC_OscConfig+0x108>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d157      	bne.n	80013c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e242      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x74>
 800131e:	4b76      	ldr	r3, [pc, #472]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a75      	ldr	r2, [pc, #468]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x98>
 8001336:	4b70      	ldr	r3, [pc, #448]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6f      	ldr	r2, [pc, #444]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b6d      	ldr	r3, [pc, #436]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6c      	ldr	r2, [pc, #432]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 8001350:	4b69      	ldr	r3, [pc, #420]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a68      	ldr	r2, [pc, #416]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b66      	ldr	r3, [pc, #408]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a65      	ldr	r2, [pc, #404]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fce4 	bl	8000d3c <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fce0 	bl	8000d3c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	@ 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e207      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b5b      	ldr	r3, [pc, #364]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xc0>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fcd0 	bl	8000d3c <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fccc 	bl	8000d3c <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	@ 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1f3      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b51      	ldr	r3, [pc, #324]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0xe8>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013ce:	4b4a      	ldr	r3, [pc, #296]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b47      	ldr	r3, [pc, #284]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b44      	ldr	r3, [pc, #272]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1c7      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b3b      	ldr	r3, [pc, #236]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4937      	ldr	r1, [pc, #220]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e03a      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <HAL_RCC_OscConfig+0x244>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fc85 	bl	8000d3c <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fc81 	bl	8000d3c <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e1a8      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4925      	ldr	r1, [pc, #148]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <HAL_RCC_OscConfig+0x244>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fc64 	bl	8000d3c <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fc60 	bl	8000d3c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e187      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d036      	beq.n	8001510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d016      	beq.n	80014d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <HAL_RCC_OscConfig+0x248>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fc44 	bl	8000d3c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc40 	bl	8000d3c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e167      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x200>
 80014d6:	e01b      	b.n	8001510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_RCC_OscConfig+0x248>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fc2d 	bl	8000d3c <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	e00e      	b.n	8001504 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fc29 	bl	8000d3c <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d907      	bls.n	8001504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e150      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
 80014f8:	40023800 	.word	0x40023800
 80014fc:	42470000 	.word	0x42470000
 8001500:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	4b88      	ldr	r3, [pc, #544]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ea      	bne.n	80014e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 8097 	beq.w	800164c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001522:	4b81      	ldr	r3, [pc, #516]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b7d      	ldr	r3, [pc, #500]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a7c      	ldr	r2, [pc, #496]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b7a      	ldr	r3, [pc, #488]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b77      	ldr	r3, [pc, #476]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d118      	bne.n	800158c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155a:	4b74      	ldr	r3, [pc, #464]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a73      	ldr	r2, [pc, #460]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff fbe9 	bl	8000d3c <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156e:	f7ff fbe5 	bl	8000d3c <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e10c      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	4b6a      	ldr	r3, [pc, #424]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2ea>
 8001594:	4b64      	ldr	r3, [pc, #400]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001598:	4a63      	ldr	r2, [pc, #396]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a0:	e01c      	b.n	80015dc <HAL_RCC_OscConfig+0x324>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x30c>
 80015aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0x324>
 80015c4:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c8:	4a57      	ldr	r2, [pc, #348]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d0:	4b55      	ldr	r3, [pc, #340]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d4:	4a54      	ldr	r2, [pc, #336]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f023 0304 	bic.w	r3, r3, #4
 80015da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d015      	beq.n	8001610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fbaa 	bl	8000d3c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fba6 	bl	8000d3c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0cb      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001602:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0ee      	beq.n	80015ec <HAL_RCC_OscConfig+0x334>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fb94 	bl	8000d3c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7ff fb90 	bl	8000d3c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0b5      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162e:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ee      	bne.n	8001618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001640:	4b39      	ldr	r3, [pc, #228]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	4a38      	ldr	r2, [pc, #224]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800164a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a1 	beq.w	8001798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001656:	4b34      	ldr	r3, [pc, #208]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b08      	cmp	r3, #8
 8001660:	d05c      	beq.n	800171c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d141      	bne.n	80016ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb64 	bl	8000d3c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fb60 	bl	8000d3c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e087      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	3b01      	subs	r3, #1
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b8:	061b      	lsls	r3, r3, #24
 80016ba:	491b      	ldr	r1, [pc, #108]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <HAL_RCC_OscConfig+0x478>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb39 	bl	8000d3c <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff fb35 	bl	8000d3c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e05c      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x416>
 80016ec:	e054      	b.n	8001798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <HAL_RCC_OscConfig+0x478>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb22 	bl	8000d3c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fb1e 	bl	8000d3c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e045      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x444>
 800171a:	e03d      	b.n	8001798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e038      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000
 8001730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <HAL_RCC_OscConfig+0x4ec>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d028      	beq.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d121      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d11a      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001764:	4013      	ands	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800176a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800176c:	4293      	cmp	r3, r2
 800176e:	d111      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177a:	085b      	lsrs	r3, r3, #1
 800177c:	3b01      	subs	r3, #1
 800177e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0cc      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017bc:	4b68      	ldr	r3, [pc, #416]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d90c      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b65      	ldr	r3, [pc, #404]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b63      	ldr	r3, [pc, #396]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0b8      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017fc:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a58      	ldr	r2, [pc, #352]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001806:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001814:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a52      	ldr	r2, [pc, #328]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800181e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001820:	4b50      	ldr	r3, [pc, #320]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	494d      	ldr	r1, [pc, #308]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d044      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d119      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e07f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d003      	beq.n	8001866 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001866:	4b3f      	ldr	r3, [pc, #252]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e06f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001876:	4b3b      	ldr	r3, [pc, #236]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e067      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4934      	ldr	r1, [pc, #208]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001898:	f7ff fa50 	bl	8000d3c <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a0:	f7ff fa4c 	bl	8000d3c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e04f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 020c 	and.w	r2, r3, #12
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d1eb      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c8:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d20c      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e032      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4916      	ldr	r1, [pc, #88]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	490e      	ldr	r1, [pc, #56]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800192e:	f000 f821 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	490a      	ldr	r1, [pc, #40]	@ (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	4a09      	ldr	r2, [pc, #36]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f8d6 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00
 8001964:	40023800 	.word	0x40023800
 8001968:	08007894 	.word	0x08007894
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001978:	b090      	sub	sp, #64	@ 0x40
 800197a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800198c:	4b59      	ldr	r3, [pc, #356]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x180>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d00d      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x40>
 8001998:	2b08      	cmp	r3, #8
 800199a:	f200 80a1 	bhi.w	8001ae0 <HAL_RCC_GetSysClockFreq+0x16c>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x34>
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d003      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x3a>
 80019a6:	e09b      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b53      	ldr	r3, [pc, #332]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x184>)
 80019aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019ac:	e09b      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ae:	4b53      	ldr	r3, [pc, #332]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x188>)
 80019b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019b2:	e098      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b4:	4b4f      	ldr	r3, [pc, #316]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019be:	4b4d      	ldr	r3, [pc, #308]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d028      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ca:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	2200      	movs	r2, #0
 80019d2:	623b      	str	r3, [r7, #32]
 80019d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019dc:	2100      	movs	r1, #0
 80019de:	4b47      	ldr	r3, [pc, #284]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x188>)
 80019e0:	fb03 f201 	mul.w	r2, r3, r1
 80019e4:	2300      	movs	r3, #0
 80019e6:	fb00 f303 	mul.w	r3, r0, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	4a43      	ldr	r2, [pc, #268]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x188>)
 80019ee:	fba0 1202 	umull	r1, r2, r0, r2
 80019f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019f4:	460a      	mov	r2, r1
 80019f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019fa:	4413      	add	r3, r2
 80019fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a00:	2200      	movs	r2, #0
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	61fa      	str	r2, [r7, #28]
 8001a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a0e:	f7fe fc31 	bl	8000274 <__aeabi_uldivmod>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4613      	mov	r3, r2
 8001a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a1a:	e053      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1c:	4b35      	ldr	r3, [pc, #212]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	099b      	lsrs	r3, r3, #6
 8001a22:	2200      	movs	r2, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	617a      	str	r2, [r7, #20]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a2e:	f04f 0b00 	mov.w	fp, #0
 8001a32:	4652      	mov	r2, sl
 8001a34:	465b      	mov	r3, fp
 8001a36:	f04f 0000 	mov.w	r0, #0
 8001a3a:	f04f 0100 	mov.w	r1, #0
 8001a3e:	0159      	lsls	r1, r3, #5
 8001a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a44:	0150      	lsls	r0, r2, #5
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a4e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a66:	ebb2 0408 	subs.w	r4, r2, r8
 8001a6a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	00eb      	lsls	r3, r5, #3
 8001a78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7c:	00e2      	lsls	r2, r4, #3
 8001a7e:	4614      	mov	r4, r2
 8001a80:	461d      	mov	r5, r3
 8001a82:	eb14 030a 	adds.w	r3, r4, sl
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	eb45 030b 	adc.w	r3, r5, fp
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	028b      	lsls	r3, r1, #10
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	028a      	lsls	r2, r1, #10
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	60fa      	str	r2, [r7, #12]
 8001ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ab8:	f7fe fbdc 	bl	8000274 <__aeabi_uldivmod>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ad4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3740      	adds	r7, #64	@ 0x40
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	017d7840 	.word	0x017d7840

08001b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000000 	.word	0x20000000

08001b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	0a9b      	lsrs	r3, r3, #10
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4903      	ldr	r1, [pc, #12]	@ (8001b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	080078a4 	.word	0x080078a4

08001b40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <HAL_RCC_GetClockConfig+0x60>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0207 	and.w	r2, r3, #7
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e041      	b.n	8001c3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f839 	bl	8001c42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3304      	adds	r3, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f000 f9b2 	bl	8001f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e044      	b.n	8001cfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d018      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c9a:	d013      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d0c <HAL_TIM_Base_Start_IT+0xb4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00e      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a19      	ldr	r2, [pc, #100]	@ (8001d10 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <HAL_TIM_Base_Start_IT+0xbc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d004      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d010      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce6:	e007      	b.n	8001cf8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	40014000 	.word	0x40014000

08001d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d020      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01b      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0202 	mvn.w	r2, #2
 8001d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8d2 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001d6c:	e005      	b.n	8001d7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8c4 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f8d5 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d020      	beq.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01b      	beq.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0204 	mvn.w	r2, #4
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8ac 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f89e 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8af 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d020      	beq.n	8001e18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01b      	beq.n	8001e18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0208 	mvn.w	r2, #8
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2204      	movs	r2, #4
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f886 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f878 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f889 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d020      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0210 	mvn.w	r2, #16
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2208      	movs	r2, #8
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f860 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f852 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f863 	bl	8001f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00c      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0201 	mvn.w	r2, #1
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fdfe 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8e0 	bl	800206c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d007      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f834 	bl	8001f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0220 	mvn.w	r2, #32
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8b2 	bl	8002058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a37      	ldr	r2, [pc, #220]	@ (800203c <TIM_Base_SetConfig+0xf0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00f      	beq.n	8001f84 <TIM_Base_SetConfig+0x38>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f6a:	d00b      	beq.n	8001f84 <TIM_Base_SetConfig+0x38>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a34      	ldr	r2, [pc, #208]	@ (8002040 <TIM_Base_SetConfig+0xf4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d007      	beq.n	8001f84 <TIM_Base_SetConfig+0x38>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a33      	ldr	r2, [pc, #204]	@ (8002044 <TIM_Base_SetConfig+0xf8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <TIM_Base_SetConfig+0x38>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a32      	ldr	r2, [pc, #200]	@ (8002048 <TIM_Base_SetConfig+0xfc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d108      	bne.n	8001f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a28      	ldr	r2, [pc, #160]	@ (800203c <TIM_Base_SetConfig+0xf0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01b      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa4:	d017      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a25      	ldr	r2, [pc, #148]	@ (8002040 <TIM_Base_SetConfig+0xf4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a24      	ldr	r2, [pc, #144]	@ (8002044 <TIM_Base_SetConfig+0xf8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00f      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a23      	ldr	r2, [pc, #140]	@ (8002048 <TIM_Base_SetConfig+0xfc>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00b      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a22      	ldr	r2, [pc, #136]	@ (800204c <TIM_Base_SetConfig+0x100>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a21      	ldr	r2, [pc, #132]	@ (8002050 <TIM_Base_SetConfig+0x104>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d003      	beq.n	8001fd6 <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	@ (8002054 <TIM_Base_SetConfig+0x108>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d108      	bne.n	8001fe8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a0c      	ldr	r2, [pc, #48]	@ (800203c <TIM_Base_SetConfig+0xf0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d103      	bne.n	8002016 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f043 0204 	orr.w	r2, r3, #4
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	601a      	str	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40010000 	.word	0x40010000
 8002040:	40000400 	.word	0x40000400
 8002044:	40000800 	.word	0x40000800
 8002048:	40000c00 	.word	0x40000c00
 800204c:	40014000 	.word	0x40014000
 8002050:	40014400 	.word	0x40014400
 8002054:	40014800 	.word	0x40014800

08002058 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f103 0208 	add.w	r2, r3, #8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002098:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800209c:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f103 0208 	add.w	r2, r3, #8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	611a      	str	r2, [r3, #16]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f103 0208 	add.w	r2, r3, #8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	615a      	str	r2, [r3, #20]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80020ba:	f240 1019 	movw	r0, #281	@ 0x119
 80020be:	f004 ff53 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	615a      	str	r2, [r3, #20]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80020d8:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80020dc:	f004 ff44 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	60da      	str	r2, [r3, #12]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	609a      	str	r2, [r3, #8]
    pxIndex->pxPrevious = pxNewListItem;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	60da      	str	r2, [r3, #12]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	615a      	str	r2, [r3, #20]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 8002124:	f240 101b 	movw	r0, #283	@ 0x11b
 8002128:	f004 ff1e 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	e9c7 2302 	strd	r2, r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002150:	bf08      	it	eq
 8002152:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8002156:	d103      	bne.n	8002160 <vListInsert+0x2c>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e010      	b.n	8002182 <vListInsert+0x4e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3308      	adds	r3, #8
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e002      	b.n	800216e <vListInsert+0x3a>
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800217a:	4290      	cmp	r0, r2
 800217c:	eb71 0303 	sbcs.w	r3, r1, r3
 8002180:	d2f2      	bcs.n	8002168 <vListInsert+0x34>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	60da      	str	r2, [r3, #12]
    pxNewListItem->pxPrevious = pxIterator;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	60da      	str	r2, [r3, #12]
    pxIterator->pxNext = pxNewListItem;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	615a      	str	r2, [r3, #20]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 80021ae:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 80021b2:	f004 fed9 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68d2      	ldr	r2, [r2, #12]
 80021d4:	60da      	str	r2, [r3, #12]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6892      	ldr	r2, [r2, #8]
 80021de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d103      	bne.n	80021f2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	615a      	str	r2, [r3, #20]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4619      	mov	r1, r3
 8002208:	f240 101d 	movw	r0, #285	@ 0x11d
 800220c:	f004 fee8 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002226:	2301      	movs	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <xQueueGenericReset+0x30>
    __asm volatile
 8002234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	60fb      	str	r3, [r7, #12]
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d05d      	beq.n	800230e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    if( ( pxQueue != NULL ) &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d059      	beq.n	800230e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	2100      	movs	r1, #0
 8002264:	fba3 2302 	umull	r2, r3, r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d000      	beq.n	800226e <xQueueGenericReset+0x52>
 800226c:	2101      	movs	r1, #1
 800226e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002270:	2b00      	cmp	r3, #0
 8002272:	d14c      	bne.n	800230e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002274:	f002 fc5c 	bl	8004b30 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002280:	6939      	ldr	r1, [r7, #16]
 8002282:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	441a      	add	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2200      	movs	r2, #0
 8002292:	641a      	str	r2, [r3, #64]	@ 0x40
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	3b01      	subs	r3, #1
 80022a6:	6939      	ldr	r1, [r7, #16]
 80022a8:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	441a      	add	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	22ff      	movs	r2, #255	@ 0xff
 80022b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxQueue->cTxLock = queueUNLOCKED;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	22ff      	movs	r2, #255	@ 0xff
 80022c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

            if( xNewQueue == pdFALSE )
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d114      	bne.n	80022f4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01a      	beq.n	8002308 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	3310      	adds	r3, #16
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 f9e8 	bl	80036ac <xTaskRemoveFromEventList>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d012      	beq.n	8002308 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022e2:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <xQueueGenericReset+0x128>)
 80022e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	e009      	b.n	8002308 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3310      	adds	r3, #16
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fec1 	bl	8002080 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	3328      	adds	r3, #40	@ 0x28
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff febc 	bl	8002080 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002308:	f002 fc44 	bl	8004b94 <vPortExitCritical>
 800230c:	e001      	b.n	8002312 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <xQueueGenericReset+0x114>
    __asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	60bb      	str	r3, [r7, #8]
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	4619      	mov	r1, r3
 8002334:	2096      	movs	r0, #150	@ 0x96
 8002336:	f004 fe53 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800233a:	697b      	ldr	r3, [r7, #20]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	e000ed04 	.word	0xe000ed04

08002348 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	@ 0x30
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 8002360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	623b      	str	r3, [r7, #32]
}
 8002372:	bf00      	nop
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d031      	beq.n	80023e2 <xQueueGenericCreateStatic+0x9a>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d02e      	beq.n	80023e2 <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d028      	beq.n	80023e2 <xQueueGenericCreateStatic+0x9a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d122      	bne.n	80023e2 <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800239c:	2350      	movs	r3, #80	@ 0x50
 800239e:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b50      	cmp	r3, #80	@ 0x50
 80023a4:	d00b      	beq.n	80023be <xQueueGenericCreateStatic+0x76>
    __asm volatile
 80023a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	61fb      	str	r3, [r7, #28]
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	e7fd      	b.n	80023ba <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 80023be:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023cc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80023d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f81e 	bl	800241c <prvInitialiseNewQueue>
 80023e0:	e00e      	b.n	8002400 <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10b      	bne.n	8002400 <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	61bb      	str	r3, [r7, #24]
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	4618      	mov	r0, r3
 8002404:	f004 ff86 	bl	8007314 <SEGGER_SYSVIEW_ShrinkId>
 8002408:	4603      	mov	r3, r0
 800240a:	4619      	mov	r1, r3
 800240c:	2097      	movs	r0, #151	@ 0x97
 800240e:	f004 fde7 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002414:	4618      	mov	r0, r3
 8002416:	3728      	adds	r7, #40	@ 0x28
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d103      	bne.n	8002438 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e002      	b.n	800243e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	645a      	str	r2, [r3, #68]	@ 0x44
    pxNewQueue->uxItemSize = uxItemSize;
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	649a      	str	r2, [r3, #72]	@ 0x48
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800244a:	2101      	movs	r1, #1
 800244c:	69b8      	ldr	r0, [r7, #24]
 800244e:	f7ff fee5 	bl	800221c <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08e      	sub	sp, #56	@ 0x38
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	e9c7 2300 	strd	r2, r3, [r7]
    BaseType_t xEntryTimeSet = pdFALSE;
 800246a:	2300      	movs	r3, #0
 800246c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10b      	bne.n	8002490 <xQueueReceive+0x34>
    __asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800248a:	bf00      	nop
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <xQueueReceive+0x30>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <xQueueReceive+0x42>
 8002496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <xQueueReceive+0x46>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <xQueueReceive+0x48>
 80024a2:	2300      	movs	r3, #0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10b      	bne.n	80024c0 <xQueueReceive+0x64>
    __asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024ba:	bf00      	nop
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <xQueueReceive+0x60>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024c0:	f001 fb62 	bl	8003b88 <xTaskGetSchedulerState>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <xQueueReceive+0x76>
 80024ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	d101      	bne.n	80024d6 <xQueueReceive+0x7a>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <xQueueReceive+0x7c>
 80024d6:	2300      	movs	r3, #0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <xQueueReceive+0x98>
    __asm volatile
 80024dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e0:	f383 8811 	msr	BASEPRI, r3
 80024e4:	f3bf 8f6f 	isb	sy
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	623b      	str	r3, [r7, #32]
}
 80024ee:	bf00      	nop
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <xQueueReceive+0x94>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024f4:	f002 fb1c 	bl	8004b30 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d023      	beq.n	800254c <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002508:	f000 f89c 	bl	8002644 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800250c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250e:	1e5a      	subs	r2, r3, #1
 8002510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002512:	641a      	str	r2, [r3, #64]	@ 0x40

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00f      	beq.n	800253c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800251c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251e:	3310      	adds	r3, #16
 8002520:	4618      	mov	r0, r3
 8002522:	f001 f8c3 	bl	80036ac <xTaskRemoveFromEventList>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <xQueueReceive+0xe0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800252c:	4b44      	ldr	r3, [pc, #272]	@ (8002640 <xQueueReceive+0x1e4>)
 800252e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800253c:	f002 fb2a 	bl	8004b94 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002540:	2101      	movs	r1, #1
 8002542:	20a4      	movs	r0, #164	@ 0xa4
 8002544:	f004 fd4c 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002548:	2301      	movs	r3, #1
 800254a:	e074      	b.n	8002636 <xQueueReceive+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800254c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002550:	4313      	orrs	r3, r2
 8002552:	d107      	bne.n	8002564 <xQueueReceive+0x108>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002554:	f002 fb1e 	bl	8004b94 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002558:	2100      	movs	r1, #0
 800255a:	20a4      	movs	r0, #164	@ 0xa4
 800255c:	f004 fd40 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002560:	2300      	movs	r3, #0
 8002562:	e068      	b.n	8002636 <xQueueReceive+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	4618      	mov	r0, r3
 8002570:	f001 f97e 	bl	8003870 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002574:	2301      	movs	r3, #1
 8002576:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002578:	f002 fb0c 	bl	8004b94 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800257c:	f000 fd0c 	bl	8002f98 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002580:	f002 fad6 	bl	8004b30 <vPortEnterCritical>
 8002584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002586:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800258a:	b25b      	sxtb	r3, r3
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002590:	d103      	bne.n	800259a <xQueueReceive+0x13e>
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	2200      	movs	r2, #0
 8002596:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800259a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025a6:	d103      	bne.n	80025b0 <xQueueReceive+0x154>
 80025a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80025b0:	f002 faf0 	bl	8004b94 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025b4:	463a      	mov	r2, r7
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 f971 	bl	80038a4 <xTaskCheckForTimeOut>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d125      	bne.n	8002614 <xQueueReceive+0x1b8>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025ca:	f000 f8b3 	bl	8002734 <prvIsQueueEmpty>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d019      	beq.n	8002608 <xQueueReceive+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80025da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025de:	4608      	mov	r0, r1
 80025e0:	f000 ffec 	bl	80035bc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025e6:	f000 f853 	bl	8002690 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025ea:	f000 fce3 	bl	8002fb4 <xTaskResumeAll>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f47f af7f 	bne.w	80024f4 <xQueueReceive+0x98>
                {
                    taskYIELD_WITHIN_API();
 80025f6:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <xQueueReceive+0x1e4>)
 80025f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	e775      	b.n	80024f4 <xQueueReceive+0x98>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800260a:	f000 f841 	bl	8002690 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800260e:	f000 fcd1 	bl	8002fb4 <xTaskResumeAll>
 8002612:	e76f      	b.n	80024f4 <xQueueReceive+0x98>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002616:	f000 f83b 	bl	8002690 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800261a:	f000 fccb 	bl	8002fb4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800261e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002620:	f000 f888 	bl	8002734 <prvIsQueueEmpty>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	f43f af64 	beq.w	80024f4 <xQueueReceive+0x98>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800262c:	2100      	movs	r1, #0
 800262e:	20a4      	movs	r0, #164	@ 0xa4
 8002630:	f004 fcd6 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8002634:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3738      	adds	r7, #56	@ 0x38
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	e000ed04 	.word	0xe000ed04

08002644 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002652:	2b00      	cmp	r3, #0
 8002654:	d018      	beq.n	8002688 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265e:	441a      	add	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	d303      	bcc.n	8002678 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68d9      	ldr	r1, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002680:	461a      	mov	r2, r3
 8002682:	6838      	ldr	r0, [r7, #0]
 8002684:	f004 ffe8 	bl	8007658 <memcpy>
    }
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002698:	f002 fa4a 	bl	8004b30 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80026a2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026a4:	e011      	b.n	80026ca <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3328      	adds	r3, #40	@ 0x28
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fffa 	bl	80036ac <xTaskRemoveFromEventList>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80026be:	f001 f981 	bl	80039c4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	dce9      	bgt.n	80026a6 <prvUnlockQueue+0x16>
 80026d2:	e000      	b.n	80026d6 <prvUnlockQueue+0x46>
                    break;
 80026d4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	22ff      	movs	r2, #255	@ 0xff
 80026da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    }
    taskEXIT_CRITICAL();
 80026de:	f002 fa59 	bl	8004b94 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026e2:	f002 fa25 	bl	8004b30 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80026ec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026ee:	e011      	b.n	8002714 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d012      	beq.n	800271e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3310      	adds	r3, #16
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 ffd5 	bl	80036ac <xTaskRemoveFromEventList>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002708:	f001 f95c 	bl	80039c4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800270c:	7bbb      	ldrb	r3, [r7, #14]
 800270e:	3b01      	subs	r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002718:	2b00      	cmp	r3, #0
 800271a:	dce9      	bgt.n	80026f0 <prvUnlockQueue+0x60>
 800271c:	e000      	b.n	8002720 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800271e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	22ff      	movs	r2, #255	@ 0xff
 8002724:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    }
    taskEXIT_CRITICAL();
 8002728:	f002 fa34 	bl	8004b94 <vPortExitCritical>
}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800273c:	f002 f9f8 	bl	8004b30 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002748:	2301      	movs	r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e001      	b.n	8002752 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002752:	f002 fa1f 	bl	8004b94 <vPortExitCritical>

    return xReturn;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	e9c7 2300 	strd	r2, r3, [r7]
        Queue_t * const pxQueue = xQueue;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002770:	f002 f9de 	bl	8004b30 <vPortEnterCritical>
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800277a:	b25b      	sxtb	r3, r3
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002780:	d103      	bne.n	800278a <vQueueWaitForMessageRestricted+0x2a>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002790:	b25b      	sxtb	r3, r3
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002796:	d103      	bne.n	80027a0 <vQueueWaitForMessageRestricted+0x40>
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80027a0:	f002 f9f8 	bl	8004b94 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <vQueueWaitForMessageRestricted+0x60>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027ba:	4608      	mov	r0, r1
 80027bc:	f000 ff28 	bl	8003610 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027c0:	6978      	ldr	r0, [r7, #20]
 80027c2:	f7ff ff65 	bl	8002690 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 80027c6:	20b9      	movs	r0, #185	@ 0xb9
 80027c8:	f004 fbce 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80027cc:	bf00      	nop
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08e      	sub	sp, #56	@ 0x38
 80027d8:	af04      	add	r7, sp, #16
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 80027e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <prvCreateStaticTask+0x2c>
    __asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	623b      	str	r3, [r7, #32]
}
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8002800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <prvCreateStaticTask+0x4a>
    __asm volatile
 8002806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800280a:	f383 8811 	msr	BASEPRI, r3
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	61fb      	str	r3, [r7, #28]
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	e7fd      	b.n	800281a <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800281e:	2360      	movs	r3, #96	@ 0x60
 8002820:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b60      	cmp	r3, #96	@ 0x60
 8002826:	d00b      	beq.n	8002840 <prvCreateStaticTask+0x6c>
    __asm volatile
 8002828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	61bb      	str	r3, [r7, #24]
}
 800283a:	bf00      	nop
 800283c:	bf00      	nop
 800283e:	e7fd      	b.n	800283c <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8002840:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01f      	beq.n	8002888 <prvCreateStaticTask+0xb4>
 8002848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01c      	beq.n	8002888 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 800284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002852:	2260      	movs	r2, #96	@ 0x60
 8002854:	2100      	movs	r1, #0
 8002856:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002858:	f004 fed2 	bl	8007600 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002860:	63da      	str	r2, [r3, #60]	@ 0x3c

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	2202      	movs	r2, #2
 8002866:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800286a:	2300      	movs	r3, #0
 800286c:	9303      	str	r3, [sp, #12]
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f89d 	bl	80029c0 <prvInitialiseNewTask>
 8002886:	e001      	b.n	800288c <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800288e:	4618      	mov	r0, r3
 8002890:	3728      	adds	r7, #40	@ 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8002896:	b580      	push	{r7, lr}
 8002898:	b08a      	sub	sp, #40	@ 0x28
 800289a:	af04      	add	r7, sp, #16
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	9303      	str	r3, [sp, #12]
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f7ff ff87 	bl	80027d4 <prvCreateStaticTask>
 80028c6:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f000 f908 	bl	8002ae4 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 fd1c 	bl	8007314 <SEGGER_SYSVIEW_ShrinkId>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	20bf      	movs	r0, #191	@ 0xbf
 80028e2:	f004 fb7d 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80028e6:	693b      	ldr	r3, [r7, #16]
    }
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	@ 0x28
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fa44 	bl	8004d90 <pvPortMalloc>
 8002908:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002910:	2060      	movs	r0, #96	@ 0x60
 8002912:	f002 fa3d 	bl	8004d90 <pvPortMalloc>
 8002916:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800291e:	2260      	movs	r2, #96	@ 0x60
 8002920:	2100      	movs	r1, #0
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f004 fe6c 	bl	8007600 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800292e:	e005      	b.n	800293c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002930:	6938      	ldr	r0, [r7, #16]
 8002932:	f002 fb5f 	bl	8004ff4 <vPortFree>
 8002936:	e001      	b.n	800293c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d011      	beq.n	8002966 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800294a:	2300      	movs	r3, #0
 800294c:	9303      	str	r3, [sp, #12]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	9302      	str	r3, [sp, #8]
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f82d 	bl	80029c0 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002966:	697b      	ldr	r3, [r7, #20]
    }
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff ffaf 	bl	80028f0 <prvCreateTask>
 8002992:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800299a:	6938      	ldr	r0, [r7, #16]
 800299c:	f000 f8a2 	bl	8002ae4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80029a0:	2301      	movs	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	e002      	b.n	80029ac <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029aa:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	4619      	mov	r1, r3
 80029b0:	20c2      	movs	r0, #194	@ 0xc2
 80029b2:	f004 fb15 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80029b6:	697b      	ldr	r3, [r7, #20]
    }
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80029c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029c4:	b088      	sub	sp, #32
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80029d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029da:	3b01      	subs	r3, #1
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f023 0307 	bic.w	r3, r3, #7
 80029e8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <prvInitialiseNewTask+0x4c>
    __asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	617b      	str	r3, [r7, #20]
}
 8002a06:	bf00      	nop
 8002a08:	bf00      	nop
 8002a0a:	e7fd      	b.n	8002a08 <prvInitialiseNewTask+0x48>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01e      	beq.n	8002a50 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	e012      	b.n	8002a3e <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	7819      	ldrb	r1, [r3, #0]
 8002a20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	3340      	adds	r3, #64	@ 0x40
 8002a28:	460a      	mov	r2, r1
 8002a2a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	2b0f      	cmp	r3, #15
 8002a42:	d9e9      	bls.n	8002a18 <prvInitialiseNewTask+0x58>
 8002a44:	e000      	b.n	8002a48 <prvInitialiseNewTask+0x88>
            {
                break;
 8002a46:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d90b      	bls.n	8002a6e <prvInitialiseNewTask+0xae>
    __asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	613b      	str	r3, [r7, #16]
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	e7fd      	b.n	8002a6a <prvInitialiseNewTask+0xaa>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d901      	bls.n	8002a78 <prvInitialiseNewTask+0xb8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a74:	2304      	movs	r3, #4
 8002a76:	63bb      	str	r3, [r7, #56]	@ 0x38
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a7c:	639a      	str	r2, [r3, #56]	@ 0x38
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a82:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a86:	3308      	adds	r3, #8
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fb1e 	bl	80020ca <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a90:	3320      	adds	r3, #32
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fb19 	bl	80020ca <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a9c:	619a      	str	r2, [r3, #24]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	461c      	mov	r4, r3
 8002aa4:	4615      	mov	r5, r2
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f1d4 0805 	rsbs	r8, r4, #5
 8002aac:	eb63 0905 	sbc.w	r9, r3, r5
 8002ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ab2:	e9c3 8908 	strd	r8, r9, [r3, #32]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ab8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	68f9      	ldr	r1, [r7, #12]
 8002ac0:	69b8      	ldr	r0, [r7, #24]
 8002ac2:	f001 fe49 	bl	8004758 <pxPortInitialiseStack>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aca:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ad6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ad8:	bf00      	nop
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002ae4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002ae4:	b5b0      	push	{r4, r5, r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002aec:	f002 f820 	bl	8004b30 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002af0:	4b4f      	ldr	r3, [pc, #316]	@ (8002c30 <prvAddNewTaskToReadyList+0x14c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	4a4e      	ldr	r2, [pc, #312]	@ (8002c30 <prvAddNewTaskToReadyList+0x14c>)
 8002af8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002afa:	4b4e      	ldr	r3, [pc, #312]	@ (8002c34 <prvAddNewTaskToReadyList+0x150>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002b02:	4a4c      	ldr	r2, [pc, #304]	@ (8002c34 <prvAddNewTaskToReadyList+0x150>)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b08:	4b49      	ldr	r3, [pc, #292]	@ (8002c30 <prvAddNewTaskToReadyList+0x14c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d110      	bne.n	8002b32 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002b10:	f000 ff7c 	bl	8003a0c <prvInitialiseTaskLists>
 8002b14:	e00d      	b.n	8002b32 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002b16:	4b48      	ldr	r3, [pc, #288]	@ (8002c38 <prvAddNewTaskToReadyList+0x154>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b1e:	4b45      	ldr	r3, [pc, #276]	@ (8002c34 <prvAddNewTaskToReadyList+0x150>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d802      	bhi.n	8002b32 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002b2c:	4a41      	ldr	r2, [pc, #260]	@ (8002c34 <prvAddNewTaskToReadyList+0x150>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002b32:	4b42      	ldr	r3, [pc, #264]	@ (8002c3c <prvAddNewTaskToReadyList+0x158>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	4a40      	ldr	r2, [pc, #256]	@ (8002c3c <prvAddNewTaskToReadyList+0x158>)
 8002b3a:	6013      	str	r3, [r2, #0]
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d016      	beq.n	8002b70 <prvAddNewTaskToReadyList+0x8c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f004 fabf 	bl	80070c8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5a:	461d      	mov	r5, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461c      	mov	r4, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b66:	1ae3      	subs	r3, r4, r3
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	462b      	mov	r3, r5
 8002b6c:	f002 fc66 	bl	800543c <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 fb2c 	bl	80071d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b7c:	4b30      	ldr	r3, [pc, #192]	@ (8002c40 <prvAddNewTaskToReadyList+0x15c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d903      	bls.n	8002b8c <prvAddNewTaskToReadyList+0xa8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b88:	4a2d      	ldr	r2, [pc, #180]	@ (8002c40 <prvAddNewTaskToReadyList+0x15c>)
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b90:	492c      	ldr	r1, [pc, #176]	@ (8002c44 <prvAddNewTaskToReadyList+0x160>)
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	615a      	str	r2, [r3, #20]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	3208      	adds	r2, #8
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f103 0208 	add.w	r2, r3, #8
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c44 <prvAddNewTaskToReadyList+0x160>)
 8002bd2:	441a      	add	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	61da      	str	r2, [r3, #28]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bdc:	4919      	ldr	r1, [pc, #100]	@ (8002c44 <prvAddNewTaskToReadyList+0x160>)
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bee:	1c59      	adds	r1, r3, #1
 8002bf0:	4814      	ldr	r0, [pc, #80]	@ (8002c44 <prvAddNewTaskToReadyList+0x160>)
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4403      	add	r3, r0
 8002bfc:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002bfe:	f001 ffc9 	bl	8004b94 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002c02:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <prvAddNewTaskToReadyList+0x154>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00e      	beq.n	8002c28 <prvAddNewTaskToReadyList+0x144>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <prvAddNewTaskToReadyList+0x150>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d207      	bcs.n	8002c28 <prvAddNewTaskToReadyList+0x144>
 8002c18:	4b0b      	ldr	r3, [pc, #44]	@ (8002c48 <prvAddNewTaskToReadyList+0x164>)
 8002c1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c30:	20000190 	.word	0x20000190
 8002c34:	2000008c 	.word	0x2000008c
 8002c38:	200001a4 	.word	0x200001a4
 8002c3c:	200001b8 	.word	0x200001b8
 8002c40:	200001a0 	.word	0x200001a0
 8002c44:	20000090 	.word	0x20000090
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8002c58:	f001 ff6a 	bl	8004b30 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <vTaskDelete+0x1c>
 8002c62:	4b43      	ldr	r3, [pc, #268]	@ (8002d70 <vTaskDelete+0x124>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	e000      	b.n	8002c6a <vTaskDelete+0x1e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	3308      	adds	r3, #8
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff faa4 	bl	80021be <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <vTaskDelete+0x3c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	3320      	adds	r3, #32
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fa9b 	bl	80021be <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002c88:	4b3a      	ldr	r3, [pc, #232]	@ (8002d74 <vTaskDelete+0x128>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	4a39      	ldr	r2, [pc, #228]	@ (8002d74 <vTaskDelete+0x128>)
 8002c90:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8002c92:	4b37      	ldr	r3, [pc, #220]	@ (8002d70 <vTaskDelete+0x124>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d101      	bne.n	8002ca0 <vTaskDelete+0x54>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <vTaskDelete+0x56>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8002ca4:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <vTaskDelete+0x12c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01d      	beq.n	8002ce8 <vTaskDelete+0x9c>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01a      	beq.n	8002ce8 <vTaskDelete+0x9c>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4830      	ldr	r0, [pc, #192]	@ (8002d7c <vTaskDelete+0x130>)
 8002cba:	f7ff fa15 	bl	80020e8 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002cbe:	4b30      	ldr	r3, [pc, #192]	@ (8002d80 <vTaskDelete+0x134>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d80 <vTaskDelete+0x134>)
 8002cc6:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f004 fb22 	bl	8007314 <SEGGER_SYSVIEW_ShrinkId>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	20c3      	movs	r0, #195	@ 0xc3
 8002cd6:	f003 fd6f 	bl	80067b8 <SEGGER_SYSVIEW_RecordU32>
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f002 fc15 	bl	800550c <SYSVIEW_DeleteTask>

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e013      	b.n	8002d10 <vTaskDelete+0xc4>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002ce8:	4b26      	ldr	r3, [pc, #152]	@ (8002d84 <vTaskDelete+0x138>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	4a25      	ldr	r2, [pc, #148]	@ (8002d84 <vTaskDelete+0x138>)
 8002cf0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f004 fb0d 	bl	8007314 <SEGGER_SYSVIEW_ShrinkId>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	20c3      	movs	r0, #195	@ 0xc3
 8002d00:	f003 fd5a 	bl	80067b8 <SEGGER_SYSVIEW_RecordU32>
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f002 fc00 	bl	800550c <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002d0c:	f000 ff1c 	bl	8003b48 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002d10:	f001 ff40 	bl	8004b94 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d002      	beq.n	8002d20 <vTaskDelete+0xd4>
        {
            prvDeleteTCB( pxTCB );
 8002d1a:	6938      	ldr	r0, [r7, #16]
 8002d1c:	f000 fee4 	bl	8003ae8 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8002d20:	4b15      	ldr	r3, [pc, #84]	@ (8002d78 <vTaskDelete+0x12c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01c      	beq.n	8002d62 <vTaskDelete+0x116>
            {
                if( pxTCB == pxCurrentTCB )
 8002d28:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <vTaskDelete+0x124>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d117      	bne.n	8002d62 <vTaskDelete+0x116>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8002d32:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <vTaskDelete+0x13c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <vTaskDelete+0x106>
    __asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	60bb      	str	r3, [r7, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	e7fd      	b.n	8002d4e <vTaskDelete+0x102>
                    taskYIELD_WITHIN_API();
 8002d52:	4b0e      	ldr	r3, [pc, #56]	@ (8002d8c <vTaskDelete+0x140>)
 8002d54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	f3bf 8f6f 	isb	sy
                }
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
 8002d62:	20c3      	movs	r0, #195	@ 0xc3
 8002d64:	f004 f900 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	2000008c 	.word	0x2000008c
 8002d74:	200001b8 	.word	0x200001b8
 8002d78:	200001a4 	.word	0x200001a4
 8002d7c:	20000158 	.word	0x20000158
 8002d80:	20000170 	.word	0x20000170
 8002d84:	20000190 	.word	0x20000190
 8002d88:	200001cc 	.word	0x200001cc
 8002d8c:	e000ed04 	.word	0xe000ed04

08002d90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	e9c7 0100 	strd	r0, r1, [r7]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	d019      	beq.n	8002dda <vTaskDelay+0x4a>
        {
            vTaskSuspendAll();
 8002da6:	f000 f8f7 	bl	8002f98 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002daa:	4b15      	ldr	r3, [pc, #84]	@ (8002e00 <vTaskDelay+0x70>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d00b      	beq.n	8002dca <vTaskDelay+0x3a>
    __asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	60bb      	str	r3, [r7, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	e7fd      	b.n	8002dc6 <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002dca:	2200      	movs	r2, #0
 8002dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dd0:	f001 f8cc 	bl	8003f6c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002dd4:	f000 f8ee 	bl	8002fb4 <xTaskResumeAll>
 8002dd8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <vTaskDelay+0x60>
        {
            taskYIELD_WITHIN_API();
 8002de0:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <vTaskDelay+0x74>)
 8002de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8002df0:	20c5      	movs	r0, #197	@ 0xc5
 8002df2:	f004 f8b9 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200001cc 	.word	0x200001cc
 8002e04:	e000ed04 	.word	0xe000ed04

08002e08 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b090      	sub	sp, #64	@ 0x40
 8002e0c:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002e16:	2300      	movs	r3, #0
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1a:	e013      	b.n	8002e44 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ecc <prvCreateIdleTasks+0xc4>)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	4413      	add	r3, r2
 8002e22:	7819      	ldrb	r1, [r3, #0]
 8002e24:	f107 0210 	add.w	r2, r7, #16
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	4413      	add	r3, r2
 8002e2c:	460a      	mov	r2, r1
 8002e2e:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002e30:	f107 0210 	add.w	r2, r7, #16
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	4413      	add	r3, r2
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	3301      	adds	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	dde8      	ble.n	8002e1c <prvCreateIdleTasks+0x14>
 8002e4a:	e000      	b.n	8002e4e <prvCreateIdleTasks+0x46>
        {
            break;
 8002e4c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e52:	e031      	b.n	8002eb8 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002e54:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed0 <prvCreateIdleTasks+0xc8>)
 8002e56:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8002e60:	1d3a      	adds	r2, r7, #4
 8002e62:	f107 0108 	add.w	r1, r7, #8
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 f914 	bl	8004098 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	f107 0110 	add.w	r1, r7, #16
 8002e7a:	9202      	str	r2, [sp, #8]
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2300      	movs	r3, #0
 8002e84:	4602      	mov	r2, r0
 8002e86:	6a38      	ldr	r0, [r7, #32]
 8002e88:	f7ff fd05 	bl	8002896 <xTaskCreateStatic>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4911      	ldr	r1, [pc, #68]	@ (8002ed4 <prvCreateIdleTasks+0xcc>)
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002e96:	4a0f      	ldr	r2, [pc, #60]	@ (8002ed4 <prvCreateIdleTasks+0xcc>)
 8002e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea6:	e001      	b.n	8002eac <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	ddca      	ble.n	8002e54 <prvCreateIdleTasks+0x4c>
 8002ebe:	e000      	b.n	8002ec2 <prvCreateIdleTasks+0xba>
        {
            break;
 8002ec0:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3730      	adds	r7, #48	@ 0x30
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	080077c4 	.word	0x080077c4
 8002ed0:	080039dd 	.word	0x080039dd
 8002ed4:	200001c8 	.word	0x200001c8

08002ed8 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002ede:	f7ff ff93 	bl	8002e08 <prvCreateIdleTasks>
 8002ee2:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d102      	bne.n	8002ef0 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002eea:	f001 f909 	bl	8004100 <xTimerCreateTimerTask>
 8002eee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d12b      	bne.n	8002f4e <vTaskStartScheduler+0x76>
    __asm volatile
 8002ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	60bb      	str	r3, [r7, #8]
}
 8002f08:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f0a:	491d      	ldr	r1, [pc, #116]	@ (8002f80 <vTaskStartScheduler+0xa8>)
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f14:	e9c1 2300 	strd	r2, r3, [r1]
        xSchedulerRunning = pdTRUE;
 8002f18:	4b1a      	ldr	r3, [pc, #104]	@ (8002f84 <vTaskStartScheduler+0xac>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f1e:	491a      	ldr	r1, [pc, #104]	@ (8002f88 <vTaskStartScheduler+0xb0>)
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9c1 2300 	strd	r2, r3, [r1]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f2c:	4b17      	ldr	r3, [pc, #92]	@ (8002f8c <vTaskStartScheduler+0xb4>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b17      	ldr	r3, [pc, #92]	@ (8002f90 <vTaskStartScheduler+0xb8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d102      	bne.n	8002f3e <vTaskStartScheduler+0x66>
 8002f38:	f004 f8aa 	bl	8007090 <SEGGER_SYSVIEW_OnIdle>
 8002f3c:	e004      	b.n	8002f48 <vTaskStartScheduler+0x70>
 8002f3e:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <vTaskStartScheduler+0xb8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 f902 	bl	800714c <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002f48:	f001 fc94 	bl	8004874 <xPortStartScheduler>
 8002f4c:	e00f      	b.n	8002f6e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f54:	d10b      	bne.n	8002f6e <vTaskStartScheduler+0x96>
    __asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	607b      	str	r3, [r7, #4]
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	e7fd      	b.n	8002f6a <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f6e:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <vTaskStartScheduler+0xbc>)
 8002f70:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002f72:	20cd      	movs	r0, #205	@ 0xcd
 8002f74:	f003 fff8 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	200001c0 	.word	0x200001c0
 8002f84:	200001a4 	.word	0x200001a4
 8002f88:	20000198 	.word	0x20000198
 8002f8c:	200001c8 	.word	0x200001c8
 8002f90:	2000008c 	.word	0x2000008c
 8002f94:	080078ac 	.word	0x080078ac

08002f98 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002f9c:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <vTaskSuspendAll+0x18>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	4a03      	ldr	r2, [pc, #12]	@ (8002fb0 <vTaskSuspendAll+0x18>)
 8002fa4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002fa6:	20cf      	movs	r0, #207	@ 0xcf
 8002fa8:	f003 ffde 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200001cc 	.word	0x200001cc

08002fb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fb4:	b5b0      	push	{r4, r5, r7, lr}
 8002fb6:	b08a      	sub	sp, #40	@ 0x28
 8002fb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xAlreadyYielded = pdFALSE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002fc2:	f001 fdb5 	bl	8004b30 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002fca:	4b81      	ldr	r3, [pc, #516]	@ (80031d0 <xTaskResumeAll+0x21c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <xTaskResumeAll+0x36>
    __asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	607b      	str	r3, [r7, #4]
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	e7fd      	b.n	8002fe6 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002fea:	4b79      	ldr	r3, [pc, #484]	@ (80031d0 <xTaskResumeAll+0x21c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	4a77      	ldr	r2, [pc, #476]	@ (80031d0 <xTaskResumeAll+0x21c>)
 8002ff2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002ff4:	4b76      	ldr	r3, [pc, #472]	@ (80031d0 <xTaskResumeAll+0x21c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f040 80dc 	bne.w	80031b6 <xTaskResumeAll+0x202>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ffe:	4b75      	ldr	r3, [pc, #468]	@ (80031d4 <xTaskResumeAll+0x220>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80d7 	beq.w	80031b6 <xTaskResumeAll+0x202>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003008:	e094      	b.n	8003134 <xTaskResumeAll+0x180>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800300a:	4b73      	ldr	r3, [pc, #460]	@ (80031d8 <xTaskResumeAll+0x224>)
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800301e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003028:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	3320      	adds	r3, #32
 8003034:	429a      	cmp	r2, r3
 8003036:	d103      	bne.n	8003040 <xTaskResumeAll+0x8c>
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	2200      	movs	r2, #0
 8003044:	635a      	str	r2, [r3, #52]	@ 0x34
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305c:	6952      	ldr	r2, [r2, #20]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003066:	6912      	ldr	r2, [r2, #16]
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	3308      	adds	r3, #8
 8003072:	429a      	cmp	r2, r3
 8003074:	d103      	bne.n	800307e <xTaskResumeAll+0xca>
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	2200      	movs	r2, #0
 8003082:	61da      	str	r2, [r3, #28]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1e5a      	subs	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	4618      	mov	r0, r3
 8003092:	f004 f89d 	bl	80071d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800309a:	4b50      	ldr	r3, [pc, #320]	@ (80031dc <xTaskResumeAll+0x228>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d903      	bls.n	80030aa <xTaskResumeAll+0xf6>
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a6:	4a4d      	ldr	r2, [pc, #308]	@ (80031dc <xTaskResumeAll+0x228>)
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ae:	494c      	ldr	r1, [pc, #304]	@ (80031e0 <xTaskResumeAll+0x22c>)
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3304      	adds	r3, #4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	611a      	str	r2, [r3, #16]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	615a      	str	r2, [r3, #20]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d4:	3208      	adds	r2, #8
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	f103 0208 	add.w	r2, r3, #8
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4a3c      	ldr	r2, [pc, #240]	@ (80031e0 <xTaskResumeAll+0x22c>)
 80030f0:	441a      	add	r2, r3
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	61da      	str	r2, [r3, #28]
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030fa:	4939      	ldr	r1, [pc, #228]	@ (80031e0 <xTaskResumeAll+0x22c>)
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800310c:	1c59      	adds	r1, r3, #1
 800310e:	4834      	ldr	r0, [pc, #208]	@ (80031e0 <xTaskResumeAll+0x22c>)
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4403      	add	r3, r0
 800311a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003120:	4b30      	ldr	r3, [pc, #192]	@ (80031e4 <xTaskResumeAll+0x230>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003126:	429a      	cmp	r2, r3
 8003128:	d904      	bls.n	8003134 <xTaskResumeAll+0x180>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800312a:	4a2f      	ldr	r2, [pc, #188]	@ (80031e8 <xTaskResumeAll+0x234>)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2101      	movs	r1, #1
 8003130:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003134:	4b28      	ldr	r3, [pc, #160]	@ (80031d8 <xTaskResumeAll+0x224>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f47f af66 	bne.w	800300a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <xTaskResumeAll+0x194>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003144:	f000 fd00 	bl	8003b48 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003148:	4b28      	ldr	r3, [pc, #160]	@ (80031ec <xTaskResumeAll+0x238>)
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	e9c7 2306 	strd	r2, r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	d01b      	beq.n	8003192 <xTaskResumeAll+0x1de>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800315a:	f000 f891 	bl	8003280 <xTaskIncrementTick>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d004      	beq.n	800316e <xTaskResumeAll+0x1ba>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003164:	4a20      	ldr	r2, [pc, #128]	@ (80031e8 <xTaskResumeAll+0x234>)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2101      	movs	r1, #1
 800316a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800316e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003172:	1e54      	subs	r4, r2, #1
 8003174:	f143 35ff 	adc.w	r5, r3, #4294967295	@ 0xffffffff
 8003178:	e9c7 4506 	strd	r4, r5, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800317c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	d1ea      	bne.n	800315a <xTaskResumeAll+0x1a6>

                            xPendedTicks = 0;
 8003184:	4919      	ldr	r1, [pc, #100]	@ (80031ec <xTaskResumeAll+0x238>)
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9c1 2300 	strd	r2, r3, [r1]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003192:	4a15      	ldr	r2, [pc, #84]	@ (80031e8 <xTaskResumeAll+0x234>)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <xTaskResumeAll+0x202>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800319e:	2301      	movs	r3, #1
 80031a0:	623b      	str	r3, [r7, #32]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80031a2:	4b10      	ldr	r3, [pc, #64]	@ (80031e4 <xTaskResumeAll+0x230>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <xTaskResumeAll+0x23c>)
 80031a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80031b6:	f001 fced 	bl	8004b94 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	4619      	mov	r1, r3
 80031be:	20d0      	movs	r0, #208	@ 0xd0
 80031c0:	f003 ff0e 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 80031c4:	6a3b      	ldr	r3, [r7, #32]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3728      	adds	r7, #40	@ 0x28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bdb0      	pop	{r4, r5, r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200001cc 	.word	0x200001cc
 80031d4:	20000190 	.word	0x20000190
 80031d8:	20000140 	.word	0x20000140
 80031dc:	200001a0 	.word	0x200001a0
 80031e0:	20000090 	.word	0x20000090
 80031e4:	2000008c 	.word	0x2000008c
 80031e8:	200001b0 	.word	0x200001b0
 80031ec:	200001a8 	.word	0x200001a8
 80031f0:	e000ed04 	.word	0xe000ed04

080031f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
 80031fa:	f001 fc99 	bl	8004b30 <vPortEnterCritical>
    {
        xTicks = xTickCount;
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <xTaskGetTickCount+0x30>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	e9c7 2300 	strd	r2, r3, [r7]
    }
    portTICK_TYPE_EXIT_CRITICAL();
 8003208:	f001 fcc4 	bl	8004b94 <vPortExitCritical>

    traceRETURN_xTaskGetTickCount( xTicks );
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4619      	mov	r1, r3
 8003210:	20d1      	movs	r0, #209	@ 0xd1
 8003212:	f003 fee5 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003216:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000198 	.word	0x20000198

08003228 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800322e:	f001 fd6d 	bl	8004d0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8003232:	f3ef 8211 	mrs	r2, BASEPRI
 8003236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	60ba      	str	r2, [r7, #8]
 8003248:	607b      	str	r3, [r7, #4]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 800324a:	68bb      	ldr	r3, [r7, #8]

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800324c:	61fb      	str	r3, [r7, #28]
    {
        xReturn = xTickCount;
 800324e:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <xTaskGetTickCountFromISR+0x54>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8003262:	bf00      	nop
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4619      	mov	r1, r3
 8003268:	20d2      	movs	r0, #210	@ 0xd2
 800326a:	f003 feb9 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800326e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000198 	.word	0x20000198

08003280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003280:	b5b0      	push	{r4, r5, r7, lr}
 8003282:	b08c      	sub	sp, #48	@ 0x30
 8003284:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003286:	2300      	movs	r3, #0
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800328a:	4b8a      	ldr	r3, [pc, #552]	@ (80034b4 <xTaskIncrementTick+0x234>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 80fd 	bne.w	800348e <xTaskIncrementTick+0x20e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003294:	4b88      	ldr	r3, [pc, #544]	@ (80034b8 <xTaskIncrementTick+0x238>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	1c54      	adds	r4, r2, #1
 800329c:	f143 0500 	adc.w	r5, r3, #0
 80032a0:	e9c7 4508 	strd	r4, r5, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032a4:	4984      	ldr	r1, [pc, #528]	@ (80034b8 <xTaskIncrementTick+0x238>)
 80032a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032aa:	e9c1 2300 	strd	r2, r3, [r1]

        if( xConstTickCount == ( TickType_t ) 0U )
 80032ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	d121      	bne.n	80032fa <xTaskIncrementTick+0x7a>
        {
            taskSWITCH_DELAYED_LISTS();
 80032b6:	4b81      	ldr	r3, [pc, #516]	@ (80034bc <xTaskIncrementTick+0x23c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <xTaskIncrementTick+0x58>
    __asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	603b      	str	r3, [r7, #0]
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <xTaskIncrementTick+0x54>
 80032d8:	4b78      	ldr	r3, [pc, #480]	@ (80034bc <xTaskIncrementTick+0x23c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	4b78      	ldr	r3, [pc, #480]	@ (80034c0 <xTaskIncrementTick+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a76      	ldr	r2, [pc, #472]	@ (80034bc <xTaskIncrementTick+0x23c>)
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4a76      	ldr	r2, [pc, #472]	@ (80034c0 <xTaskIncrementTick+0x240>)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b75      	ldr	r3, [pc, #468]	@ (80034c4 <xTaskIncrementTick+0x244>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	4a74      	ldr	r2, [pc, #464]	@ (80034c4 <xTaskIncrementTick+0x244>)
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	f000 fc27 	bl	8003b48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80032fa:	4b73      	ldr	r3, [pc, #460]	@ (80034c8 <xTaskIncrementTick+0x248>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003304:	4290      	cmp	r0, r2
 8003306:	eb71 0303 	sbcs.w	r3, r1, r3
 800330a:	f0c0 80b9 	bcc.w	8003480 <xTaskIncrementTick+0x200>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800330e:	4b6b      	ldr	r3, [pc, #428]	@ (80034bc <xTaskIncrementTick+0x23c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <xTaskIncrementTick+0xa8>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003318:	496b      	ldr	r1, [pc, #428]	@ (80034c8 <xTaskIncrementTick+0x248>)
 800331a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800331e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003322:	e9c1 2300 	strd	r2, r3, [r1]
                    break;
 8003326:	e0ab      	b.n	8003480 <xTaskIncrementTick+0x200>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003328:	4b64      	ldr	r3, [pc, #400]	@ (80034bc <xTaskIncrementTick+0x23c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003338:	e9c7 2304 	strd	r2, r3, [r7, #16]

                    if( xConstTickCount < xItemValue )
 800333c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003340:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003344:	4290      	cmp	r0, r2
 8003346:	eb71 0303 	sbcs.w	r3, r1, r3
 800334a:	d205      	bcs.n	8003358 <xTaskIncrementTick+0xd8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800334c:	495e      	ldr	r1, [pc, #376]	@ (80034c8 <xTaskIncrementTick+0x248>)
 800334e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003352:	e9c1 2300 	strd	r2, r3, [r1]
                        break;
 8003356:	e093      	b.n	8003480 <xTaskIncrementTick+0x200>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	6952      	ldr	r2, [r2, #20]
 8003366:	60da      	str	r2, [r3, #12]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	6912      	ldr	r2, [r2, #16]
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	3308      	adds	r3, #8
 800337a:	429a      	cmp	r2, r3
 800337c:	d103      	bne.n	8003386 <xTaskIncrementTick+0x106>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2200      	movs	r2, #0
 800338a:	61da      	str	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	1e5a      	subs	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01e      	beq.n	80033dc <xTaskIncrementTick+0x15c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	3320      	adds	r3, #32
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d103      	bne.n	80033cc <xTaskIncrementTick+0x14c>
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2200      	movs	r2, #0
 80033d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1e5a      	subs	r2, r3, #1
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4618      	mov	r0, r3
 80033e0:	f003 fef6 	bl	80071d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033e8:	4b38      	ldr	r3, [pc, #224]	@ (80034cc <xTaskIncrementTick+0x24c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d903      	bls.n	80033f8 <xTaskIncrementTick+0x178>
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f4:	4a35      	ldr	r2, [pc, #212]	@ (80034cc <xTaskIncrementTick+0x24c>)
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033fc:	4934      	ldr	r1, [pc, #208]	@ (80034d0 <xTaskIncrementTick+0x250>)
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	440b      	add	r3, r1
 8003408:	3304      	adds	r3, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	607b      	str	r3, [r7, #4]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	611a      	str	r2, [r3, #16]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	615a      	str	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	3208      	adds	r2, #8
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f103 0208 	add.w	r2, r3, #8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	60da      	str	r2, [r3, #12]
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4a24      	ldr	r2, [pc, #144]	@ (80034d0 <xTaskIncrementTick+0x250>)
 800343e:	441a      	add	r2, r3
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	61da      	str	r2, [r3, #28]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003448:	4921      	ldr	r1, [pc, #132]	@ (80034d0 <xTaskIncrementTick+0x250>)
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	440b      	add	r3, r1
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	481c      	ldr	r0, [pc, #112]	@ (80034d0 <xTaskIncrementTick+0x250>)
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4403      	add	r3, r0
 8003468:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800346e:	4b19      	ldr	r3, [pc, #100]	@ (80034d4 <xTaskIncrementTick+0x254>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003474:	429a      	cmp	r2, r3
 8003476:	f67f af4a 	bls.w	800330e <xTaskIncrementTick+0x8e>
                            {
                                xSwitchRequired = pdTRUE;
 800347a:	2301      	movs	r3, #1
 800347c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800347e:	e746      	b.n	800330e <xTaskIncrementTick+0x8e>
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003480:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <xTaskIncrementTick+0x258>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00b      	beq.n	80034a0 <xTaskIncrementTick+0x220>
                {
                    xSwitchRequired = pdTRUE;
 8003488:	2301      	movs	r3, #1
 800348a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800348c:	e008      	b.n	80034a0 <xTaskIncrementTick+0x220>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800348e:	4b13      	ldr	r3, [pc, #76]	@ (80034dc <xTaskIncrementTick+0x25c>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	1c50      	adds	r0, r2, #1
 8003496:	f143 0100 	adc.w	r1, r3, #0
 800349a:	4b10      	ldr	r3, [pc, #64]	@ (80034dc <xTaskIncrementTick+0x25c>)
 800349c:	e9c3 0100 	strd	r0, r1, [r3]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80034a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a2:	4619      	mov	r1, r3
 80034a4:	20db      	movs	r0, #219	@ 0xdb
 80034a6:	f003 fd9b 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80034aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3730      	adds	r7, #48	@ 0x30
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bdb0      	pop	{r4, r5, r7, pc}
 80034b4:	200001cc 	.word	0x200001cc
 80034b8:	20000198 	.word	0x20000198
 80034bc:	20000138 	.word	0x20000138
 80034c0:	2000013c 	.word	0x2000013c
 80034c4:	200001b4 	.word	0x200001b4
 80034c8:	200001c0 	.word	0x200001c0
 80034cc:	200001a0 	.word	0x200001a0
 80034d0:	20000090 	.word	0x20000090
 80034d4:	2000008c 	.word	0x2000008c
 80034d8:	200001b0 	.word	0x200001b0
 80034dc:	200001a8 	.word	0x200001a8

080034e0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80034e6:	4b2f      	ldr	r3, [pc, #188]	@ (80035a4 <vTaskSwitchContext+0xc4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80034ee:	4b2e      	ldr	r3, [pc, #184]	@ (80035a8 <vTaskSwitchContext+0xc8>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80034f4:	e051      	b.n	800359a <vTaskSwitchContext+0xba>
            xYieldPendings[ 0 ] = pdFALSE;
 80034f6:	4b2c      	ldr	r3, [pc, #176]	@ (80035a8 <vTaskSwitchContext+0xc8>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80034fc:	4b2b      	ldr	r3, [pc, #172]	@ (80035ac <vTaskSwitchContext+0xcc>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	e011      	b.n	8003528 <vTaskSwitchContext+0x48>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10b      	bne.n	8003522 <vTaskSwitchContext+0x42>
    __asm volatile
 800350a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	607b      	str	r3, [r7, #4]
}
 800351c:	bf00      	nop
 800351e:	bf00      	nop
 8003520:	e7fd      	b.n	800351e <vTaskSwitchContext+0x3e>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3b01      	subs	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	4921      	ldr	r1, [pc, #132]	@ (80035b0 <vTaskSwitchContext+0xd0>)
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0e3      	beq.n	8003504 <vTaskSwitchContext+0x24>
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4a1a      	ldr	r2, [pc, #104]	@ (80035b0 <vTaskSwitchContext+0xd0>)
 8003548:	4413      	add	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	3308      	adds	r3, #8
 800355e:	429a      	cmp	r2, r3
 8003560:	d103      	bne.n	800356a <vTaskSwitchContext+0x8a>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	4a10      	ldr	r2, [pc, #64]	@ (80035b4 <vTaskSwitchContext+0xd4>)
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4a0d      	ldr	r2, [pc, #52]	@ (80035ac <vTaskSwitchContext+0xcc>)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800357a:	4b0f      	ldr	r3, [pc, #60]	@ (80035b8 <vTaskSwitchContext+0xd8>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <vTaskSwitchContext+0xd4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d102      	bne.n	800358c <vTaskSwitchContext+0xac>
 8003586:	f003 fd83 	bl	8007090 <SEGGER_SYSVIEW_OnIdle>
 800358a:	e004      	b.n	8003596 <vTaskSwitchContext+0xb6>
 800358c:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <vTaskSwitchContext+0xd4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f003 fddb 	bl	800714c <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003596:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <vTaskSwitchContext+0xd4>)
 8003598:	681b      	ldr	r3, [r3, #0]
    }
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200001cc 	.word	0x200001cc
 80035a8:	200001b0 	.word	0x200001b0
 80035ac:	200001a0 	.word	0x200001a0
 80035b0:	20000090 	.word	0x20000090
 80035b4:	2000008c 	.word	0x2000008c
 80035b8:	200001c8 	.word	0x200001c8

080035bc <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	e9c7 2300 	strd	r2, r3, [r7]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <vTaskPlaceOnEventList+0x2a>
    __asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	617b      	str	r3, [r7, #20]
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	e7fd      	b.n	80035e2 <vTaskPlaceOnEventList+0x26>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035e6:	4b09      	ldr	r3, [pc, #36]	@ (800360c <vTaskPlaceOnEventList+0x50>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3320      	adds	r3, #32
 80035ec:	4619      	mov	r1, r3
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7fe fda0 	bl	8002134 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035f4:	2201      	movs	r2, #1
 80035f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035fa:	f000 fcb7 	bl	8003f6c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80035fe:	20e1      	movs	r0, #225	@ 0xe1
 8003600:	f003 fcb2 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003604:	bf00      	nop
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	2000008c 	.word	0x2000008c

08003610 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	e9c7 2300 	strd	r2, r3, [r7]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	613b      	str	r3, [r7, #16]
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	e7fd      	b.n	8003636 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <vTaskPlaceOnEventListRestricted+0x98>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28
 8003648:	4b17      	ldr	r3, [pc, #92]	@ (80036a8 <vTaskPlaceOnEventListRestricted+0x98>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	68d2      	ldr	r2, [r2, #12]
 8003650:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003652:	4b15      	ldr	r3, [pc, #84]	@ (80036a8 <vTaskPlaceOnEventListRestricted+0x98>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	3220      	adds	r2, #32
 800365c:	609a      	str	r2, [r3, #8]
 800365e:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <vTaskPlaceOnEventListRestricted+0x98>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f103 0220 	add.w	r2, r3, #32
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	4b0f      	ldr	r3, [pc, #60]	@ (80036a8 <vTaskPlaceOnEventListRestricted+0x98>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	635a      	str	r2, [r3, #52]	@ 0x34
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <vTaskPlaceOnEventListRestricted+0x7e>
        {
            xTicksToWait = portMAX_DELAY;
 8003682:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800368a:	e9c7 2300 	strd	r2, r3, [r7]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800368e:	6a3a      	ldr	r2, [r7, #32]
 8003690:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003694:	f000 fc6a 	bl	8003f6c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003698:	20e3      	movs	r0, #227	@ 0xe3
 800369a:	f003 fc65 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	2000008c 	.word	0x2000008c

080036ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	@ 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10b      	bne.n	80036da <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	60fb      	str	r3, [r7, #12]
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	e7fd      	b.n	80036d6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e4:	6a3a      	ldr	r2, [r7, #32]
 80036e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	6a3a      	ldr	r2, [r7, #32]
 80036f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	3320      	adds	r3, #32
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d103      	bne.n	8003708 <xTaskRemoveFromEventList+0x5c>
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	2200      	movs	r2, #0
 800370c:	635a      	str	r2, [r3, #52]	@ 0x34
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	1e5a      	subs	r2, r3, #1
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003718:	4b4f      	ldr	r3, [pc, #316]	@ (8003858 <xTaskRemoveFromEventList+0x1ac>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d166      	bne.n	80037ee <xTaskRemoveFromEventList+0x142>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	6a3a      	ldr	r2, [r7, #32]
 800372c:	6952      	ldr	r2, [r2, #20]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	6912      	ldr	r2, [r2, #16]
 8003738:	609a      	str	r2, [r3, #8]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	3308      	adds	r3, #8
 8003742:	429a      	cmp	r2, r3
 8003744:	d103      	bne.n	800374e <xTaskRemoveFromEventList+0xa2>
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	2200      	movs	r2, #0
 8003752:	61da      	str	r2, [r3, #28]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	1e5a      	subs	r2, r3, #1
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	4618      	mov	r0, r3
 8003762:	f003 fd35 	bl	80071d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800376a:	4b3c      	ldr	r3, [pc, #240]	@ (800385c <xTaskRemoveFromEventList+0x1b0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d903      	bls.n	800377a <xTaskRemoveFromEventList+0xce>
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003776:	4a39      	ldr	r2, [pc, #228]	@ (800385c <xTaskRemoveFromEventList+0x1b0>)
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800377e:	4938      	ldr	r1, [pc, #224]	@ (8003860 <xTaskRemoveFromEventList+0x1b4>)
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	440b      	add	r3, r1
 800378a:	3304      	adds	r3, #4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	611a      	str	r2, [r3, #16]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	615a      	str	r2, [r3, #20]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	6a3a      	ldr	r2, [r7, #32]
 80037a4:	3208      	adds	r2, #8
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	f103 0208 	add.w	r2, r3, #8
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4a28      	ldr	r2, [pc, #160]	@ (8003860 <xTaskRemoveFromEventList+0x1b4>)
 80037c0:	441a      	add	r2, r3
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	61da      	str	r2, [r3, #28]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ca:	4925      	ldr	r1, [pc, #148]	@ (8003860 <xTaskRemoveFromEventList+0x1b4>)
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	440b      	add	r3, r1
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037dc:	1c59      	adds	r1, r3, #1
 80037de:	4820      	ldr	r0, [pc, #128]	@ (8003860 <xTaskRemoveFromEventList+0x1b4>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4403      	add	r3, r0
 80037ea:	6019      	str	r1, [r3, #0]
 80037ec:	e01b      	b.n	8003826 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003864 <xTaskRemoveFromEventList+0x1b8>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	6a3a      	ldr	r2, [r7, #32]
 8003808:	3220      	adds	r2, #32
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f103 0220 	add.w	r2, r3, #32
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	4a12      	ldr	r2, [pc, #72]	@ (8003864 <xTaskRemoveFromEventList+0x1b8>)
 800381a:	635a      	str	r2, [r3, #52]	@ 0x34
 800381c:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <xTaskRemoveFromEventList+0x1b8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3301      	adds	r3, #1
 8003822:	4a10      	ldr	r2, [pc, #64]	@ (8003864 <xTaskRemoveFromEventList+0x1b8>)
 8003824:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800382a:	4b0f      	ldr	r3, [pc, #60]	@ (8003868 <xTaskRemoveFromEventList+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003830:	429a      	cmp	r2, r3
 8003832:	d905      	bls.n	8003840 <xTaskRemoveFromEventList+0x194>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003834:	2301      	movs	r3, #1
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003838:	4b0c      	ldr	r3, [pc, #48]	@ (800386c <xTaskRemoveFromEventList+0x1c0>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e001      	b.n	8003844 <xTaskRemoveFromEventList+0x198>
        }
        else
        {
            xReturn = pdFALSE;
 8003840:	2300      	movs	r3, #0
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	4619      	mov	r1, r3
 8003848:	20e4      	movs	r0, #228	@ 0xe4
 800384a:	f003 fbc9 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003850:	4618      	mov	r0, r3
 8003852:	3728      	adds	r7, #40	@ 0x28
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200001cc 	.word	0x200001cc
 800385c:	200001a0 	.word	0x200001a0
 8003860:	20000090 	.word	0x20000090
 8003864:	20000140 	.word	0x20000140
 8003868:	2000008c 	.word	0x2000008c
 800386c:	200001b0 	.word	0x200001b0

08003870 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003878:	4b08      	ldr	r3, [pc, #32]	@ (800389c <vTaskInternalSetTimeOutState+0x2c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003880:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <vTaskInternalSetTimeOutState+0x30>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	e9c1 2302 	strd	r2, r3, [r1, #8]

    traceRETURN_vTaskInternalSetTimeOutState();
 800388c:	20e7      	movs	r0, #231	@ 0xe7
 800388e:	f003 fb6b 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200001b4 	.word	0x200001b4
 80038a0:	20000198 	.word	0x20000198

080038a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038a8:	b08a      	sub	sp, #40	@ 0x28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <xTaskCheckForTimeOut+0x2a>
    __asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	60fb      	str	r3, [r7, #12]
}
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	e7fd      	b.n	80038ca <xTaskCheckForTimeOut+0x26>
    configASSERT( pxTicksToWait );
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <xTaskCheckForTimeOut+0x48>
    __asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	60bb      	str	r3, [r7, #8]
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <xTaskCheckForTimeOut+0x44>

    taskENTER_CRITICAL();
 80038ec:	f001 f920 	bl	8004b30 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80038f0:	4b32      	ldr	r3, [pc, #200]	@ (80039bc <xTaskCheckForTimeOut+0x118>)
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003900:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003904:	ebb0 0802 	subs.w	r8, r0, r2
 8003908:	eb61 0903 	sbc.w	r9, r1, r3
 800390c:	e9c7 8904 	strd	r8, r9, [r7, #16]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800391a:	bf08      	it	eq
 800391c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8003920:	d102      	bne.n	8003928 <xTaskCheckForTimeOut+0x84>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003922:	2300      	movs	r3, #0
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
 8003926:	e03b      	b.n	80039a0 <xTaskCheckForTimeOut+0xfc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b24      	ldr	r3, [pc, #144]	@ (80039c0 <xTaskCheckForTimeOut+0x11c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d012      	beq.n	800395a <xTaskCheckForTimeOut+0xb6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800393a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800393e:	4290      	cmp	r0, r2
 8003940:	eb71 0303 	sbcs.w	r3, r1, r3
 8003944:	d309      	bcc.n	800395a <xTaskCheckForTimeOut+0xb6>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003946:	2301      	movs	r3, #1
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
            *pxTicksToWait = ( TickType_t ) 0;
 800394a:	6839      	ldr	r1, [r7, #0]
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9c1 2300 	strd	r2, r3, [r1]
 8003958:	e022      	b.n	80039a0 <xTaskCheckForTimeOut+0xfc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003964:	4290      	cmp	r0, r2
 8003966:	eb71 0303 	sbcs.w	r3, r1, r3
 800396a:	d210      	bcs.n	800398e <xTaskCheckForTimeOut+0xea>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003972:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003976:	1a84      	subs	r4, r0, r2
 8003978:	eb61 0503 	sbc.w	r5, r1, r3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	e9c3 4500 	strd	r4, r5, [r3]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff74 	bl	8003870 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
 800398c:	e008      	b.n	80039a0 <xTaskCheckForTimeOut+0xfc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800398e:	6839      	ldr	r1, [r7, #0]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9c1 2300 	strd	r2, r3, [r1]
            xReturn = pdTRUE;
 800399c:	2301      	movs	r3, #1
 800399e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    taskEXIT_CRITICAL();
 80039a0:	f001 f8f8 	bl	8004b94 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	4619      	mov	r1, r3
 80039a8:	20e8      	movs	r0, #232	@ 0xe8
 80039aa:	f003 fb19 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	@ 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039ba:	bf00      	nop
 80039bc:	20000198 	.word	0x20000198
 80039c0:	200001b4 	.word	0x200001b4

080039c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80039c8:	4b03      	ldr	r3, [pc, #12]	@ (80039d8 <vTaskMissedYield+0x14>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 80039ce:	20e9      	movs	r0, #233	@ 0xe9
 80039d0:	f003 faca 	bl	8006f68 <SEGGER_SYSVIEW_RecordEndCall>
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	200001b0 	.word	0x200001b0

080039dc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039e4:	f000 f852 	bl	8003a8c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80039e8:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <prvIdleTask+0x28>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d9f9      	bls.n	80039e4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80039f0:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <prvIdleTask+0x2c>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a00:	e7f0      	b.n	80039e4 <prvIdleTask+0x8>
 8003a02:	bf00      	nop
 8003a04:	20000090 	.word	0x20000090
 8003a08:	e000ed04 	.word	0xe000ed04

08003a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	e00c      	b.n	8003a32 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4413      	add	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4a12      	ldr	r2, [pc, #72]	@ (8003a6c <prvInitialiseTaskLists+0x60>)
 8003a24:	4413      	add	r3, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fb2a 	bl	8002080 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d9ef      	bls.n	8003a18 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a38:	480d      	ldr	r0, [pc, #52]	@ (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a3a:	f7fe fb21 	bl	8002080 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a3e:	480d      	ldr	r0, [pc, #52]	@ (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a40:	f7fe fb1e 	bl	8002080 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a44:	480c      	ldr	r0, [pc, #48]	@ (8003a78 <prvInitialiseTaskLists+0x6c>)
 8003a46:	f7fe fb1b 	bl	8002080 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003a4a:	480c      	ldr	r0, [pc, #48]	@ (8003a7c <prvInitialiseTaskLists+0x70>)
 8003a4c:	f7fe fb18 	bl	8002080 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003a50:	480b      	ldr	r0, [pc, #44]	@ (8003a80 <prvInitialiseTaskLists+0x74>)
 8003a52:	f7fe fb15 	bl	8002080 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a56:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <prvInitialiseTaskLists+0x78>)
 8003a58:	4a05      	ldr	r2, [pc, #20]	@ (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a5a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <prvInitialiseTaskLists+0x7c>)
 8003a5e:	4a05      	ldr	r2, [pc, #20]	@ (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000090 	.word	0x20000090
 8003a70:	20000108 	.word	0x20000108
 8003a74:	20000120 	.word	0x20000120
 8003a78:	20000140 	.word	0x20000140
 8003a7c:	20000158 	.word	0x20000158
 8003a80:	20000178 	.word	0x20000178
 8003a84:	20000138 	.word	0x20000138
 8003a88:	2000013c 	.word	0x2000013c

08003a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a92:	e019      	b.n	8003ac8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003a94:	f001 f84c 	bl	8004b30 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a98:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <prvCheckTasksWaitingTermination+0x50>)
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fb8a 	bl	80021be <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003ab2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003abc:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003abe:	f001 f869 	bl	8004b94 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f810 	bl	8003ae8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ac8:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e1      	bne.n	8003a94 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000158 	.word	0x20000158
 8003ae0:	20000190 	.word	0x20000190
 8003ae4:	20000170 	.word	0x20000170

08003ae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d108      	bne.n	8003b0c <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 fa78 	bl	8004ff4 <vPortFree>
                vPortFree( pxTCB );
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f001 fa75 	bl	8004ff4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b0a:	e019      	b.n	8003b40 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d103      	bne.n	8003b1e <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f001 fa6c 	bl	8004ff4 <vPortFree>
    }
 8003b1c:	e010      	b.n	8003b40 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d00b      	beq.n	8003b40 <prvDeleteTCB+0x58>
    __asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	60fb      	str	r3, [r7, #12]
}
 8003b3a:	bf00      	nop
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <prvDeleteTCB+0x54>
    }
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <prvResetNextTaskUnblockTime+0x38>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <prvResetNextTaskUnblockTime+0x1e>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b56:	490b      	ldr	r1, [pc, #44]	@ (8003b84 <prvResetNextTaskUnblockTime+0x3c>)
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b60:	e9c1 2300 	strd	r2, r3, [r1]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b64:	e007      	b.n	8003b76 <prvResetNextTaskUnblockTime+0x2e>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b66:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <prvResetNextTaskUnblockTime+0x38>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	4904      	ldr	r1, [pc, #16]	@ (8003b84 <prvResetNextTaskUnblockTime+0x3c>)
 8003b72:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20000138 	.word	0x20000138
 8003b84:	200001c0 	.word	0x200001c0

08003b88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <xTaskGetSchedulerState+0x3c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b96:	2301      	movs	r3, #1
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	e008      	b.n	8003bae <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc8 <xTaskGetSchedulerState+0x40>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	e001      	b.n	8003bae <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	20f5      	movs	r0, #245	@ 0xf5
 8003bb4:	f003 fa14 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003bb8:	687b      	ldr	r3, [r7, #4]
    }
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200001a4 	.word	0x200001a4
 8003bc8:	200001cc 	.word	0x200001cc

08003bcc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <xTaskGenericNotifyWait+0x30>
    __asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	613b      	str	r3, [r7, #16]
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8003bfc:	f7ff f9cc 	bl	8002f98 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8003c00:	f000 ff96 	bl	8004b30 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8003c04:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf8 <xTaskGenericNotifyWait+0x12c>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	335c      	adds	r3, #92	@ 0x5c
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d019      	beq.n	8003c4a <xTaskGenericNotifyWait+0x7e>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8003c16:	4b38      	ldr	r3, [pc, #224]	@ (8003cf8 <xTaskGenericNotifyWait+0x12c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	3216      	adds	r2, #22
 8003c1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	43d2      	mvns	r2, r2
 8003c26:	4011      	ands	r1, r2
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	3216      	adds	r2, #22
 8003c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8003c30:	4b31      	ldr	r3, [pc, #196]	@ (8003cf8 <xTaskGenericNotifyWait+0x12c>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	335c      	adds	r3, #92	@ 0x5c
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8003c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c42:	4313      	orrs	r3, r2
 8003c44:	d001      	beq.n	8003c4a <xTaskGenericNotifyWait+0x7e>
                    {
                        xShouldBlock = pdTRUE;
 8003c46:	2301      	movs	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003c4a:	f000 ffa3 	bl	8004b94 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d104      	bne.n	8003c5e <xTaskGenericNotifyWait+0x92>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c54:	2201      	movs	r2, #1
 8003c56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c5a:	f000 f987 	bl	8003f6c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003c5e:	f7ff f9a9 	bl	8002fb4 <xTaskResumeAll>
 8003c62:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10a      	bne.n	8003c80 <xTaskGenericNotifyWait+0xb4>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d107      	bne.n	8003c80 <xTaskGenericNotifyWait+0xb4>
        {
            taskYIELD_WITHIN_API();
 8003c70:	4b22      	ldr	r3, [pc, #136]	@ (8003cfc <xTaskGenericNotifyWait+0x130>)
 8003c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8003c80:	f000 ff56 	bl	8004b30 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <xTaskGenericNotifyWait+0xce>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf8 <xTaskGenericNotifyWait+0x12c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	3216      	adds	r2, #22
 8003c92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8003c9a:	4b17      	ldr	r3, [pc, #92]	@ (8003cf8 <xTaskGenericNotifyWait+0x12c>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	335c      	adds	r3, #92	@ 0x5c
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d002      	beq.n	8003cb2 <xTaskGenericNotifyWait+0xe6>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	e00e      	b.n	8003cd0 <xTaskGenericNotifyWait+0x104>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	@ (8003cf8 <xTaskGenericNotifyWait+0x12c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	3216      	adds	r2, #22
 8003cba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	43d2      	mvns	r2, r2
 8003cc2:	4011      	ands	r1, r2
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	3216      	adds	r2, #22
 8003cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8003cd0:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <xTaskGenericNotifyWait+0x12c>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	335c      	adds	r3, #92	@ 0x5c
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003cde:	f000 ff59 	bl	8004b94 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003cea:	f003 f979 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003cee:	69fb      	ldr	r3, [r7, #28]
    }
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3720      	adds	r7, #32
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	2000008c 	.word	0x2000008c
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08e      	sub	sp, #56	@ 0x38
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00b      	beq.n	8003d30 <xTaskGenericNotify+0x30>
    __asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	623b      	str	r3, [r7, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <xTaskGenericNotify+0x4e>
    __asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	61fb      	str	r3, [r7, #28]
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	e7fd      	b.n	8003d4a <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8003d52:	f000 feed 	bl	8004b30 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d006      	beq.n	8003d6a <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	3216      	adds	r2, #22
 8003d62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d68:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4413      	add	r3, r2
 8003d70:	335c      	adds	r3, #92	@ 0x5c
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	335c      	adds	r3, #92	@ 0x5c
 8003d80:	2202      	movs	r2, #2
 8003d82:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d83b      	bhi.n	8003e02 <xTaskGenericNotify+0x102>
 8003d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <xTaskGenericNotify+0x90>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003e25 	.word	0x08003e25
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003dc1 	.word	0x08003dc1
 8003d9c:	08003dd9 	.word	0x08003dd9
 8003da0:	08003de7 	.word	0x08003de7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	3216      	adds	r2, #22
 8003daa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	ea42 0103 	orr.w	r1, r2, r3
 8003db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	3216      	adds	r2, #22
 8003dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003dbe:	e034      	b.n	8003e2a <xTaskGenericNotify+0x12a>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	3216      	adds	r2, #22
 8003dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dca:	1c59      	adds	r1, r3, #1
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	3216      	adds	r2, #22
 8003dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003dd6:	e028      	b.n	8003e2a <xTaskGenericNotify+0x12a>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	3216      	adds	r2, #22
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003de4:	e021      	b.n	8003e2a <xTaskGenericNotify+0x12a>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003de6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d006      	beq.n	8003dfc <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	3216      	adds	r2, #22
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003dfa:	e016      	b.n	8003e2a <xTaskGenericNotify+0x12a>
                        xReturn = pdFAIL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8003e00:	e013      	b.n	8003e2a <xTaskGenericNotify+0x12a>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003e02:	4b55      	ldr	r3, [pc, #340]	@ (8003f58 <xTaskGenericNotify+0x258>)
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	d00d      	beq.n	8003e28 <xTaskGenericNotify+0x128>
    __asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	61bb      	str	r3, [r7, #24]
}
 8003e1e:	bf00      	nop
 8003e20:	bf00      	nop
 8003e22:	e7fd      	b.n	8003e20 <xTaskGenericNotify+0x120>
                    break;
 8003e24:	bf00      	nop
 8003e26:	e000      	b.n	8003e2a <xTaskGenericNotify+0x12a>

                    break;
 8003e28:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	f040 8085 	bne.w	8003f3e <xTaskGenericNotify+0x23e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e40:	6952      	ldr	r2, [r2, #20]
 8003e42:	60da      	str	r2, [r3, #12]
 8003e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e4a:	6912      	ldr	r2, [r2, #16]
 8003e4c:	609a      	str	r2, [r3, #8]
 8003e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e54:	3308      	adds	r3, #8
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d103      	bne.n	8003e62 <xTaskGenericNotify+0x162>
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	2200      	movs	r2, #0
 8003e66:	61da      	str	r2, [r3, #28]
 8003e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e70:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	4618      	mov	r0, r3
 8003e76:	f003 f9ab 	bl	80071d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e7e:	4b37      	ldr	r3, [pc, #220]	@ (8003f5c <xTaskGenericNotify+0x25c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d903      	bls.n	8003e8e <xTaskGenericNotify+0x18e>
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8a:	4a34      	ldr	r2, [pc, #208]	@ (8003f5c <xTaskGenericNotify+0x25c>)
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e92:	4933      	ldr	r1, [pc, #204]	@ (8003f60 <xTaskGenericNotify+0x260>)
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea8:	611a      	str	r2, [r3, #16]
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb0:	615a      	str	r2, [r3, #20]
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb8:	3208      	adds	r2, #8
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	f103 0208 	add.w	r2, r3, #8
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4a23      	ldr	r2, [pc, #140]	@ (8003f60 <xTaskGenericNotify+0x260>)
 8003ed4:	441a      	add	r2, r3
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	61da      	str	r2, [r3, #28]
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ede:	4920      	ldr	r1, [pc, #128]	@ (8003f60 <xTaskGenericNotify+0x260>)
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	440b      	add	r3, r1
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ef0:	1c59      	adds	r1, r3, #1
 8003ef2:	481b      	ldr	r0, [pc, #108]	@ (8003f60 <xTaskGenericNotify+0x260>)
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4403      	add	r3, r0
 8003efe:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00b      	beq.n	8003f20 <xTaskGenericNotify+0x220>
    __asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	617b      	str	r3, [r7, #20]
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	e7fd      	b.n	8003f1c <xTaskGenericNotify+0x21c>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8003f20:	4b10      	ldr	r3, [pc, #64]	@ (8003f64 <xTaskGenericNotify+0x264>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d207      	bcs.n	8003f3e <xTaskGenericNotify+0x23e>
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f68 <xTaskGenericNotify+0x268>)
 8003f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f3e:	f000 fe29 	bl	8004b94 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );
 8003f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f44:	4619      	mov	r1, r3
 8003f46:	f240 1001 	movw	r0, #257	@ 0x101
 8003f4a:	f003 f849 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8003f50:	4618      	mov	r0, r3
 8003f52:	3738      	adds	r7, #56	@ 0x38
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000198 	.word	0x20000198
 8003f5c:	200001a0 	.word	0x200001a0
 8003f60:	20000090 	.word	0x20000090
 8003f64:	2000008c 	.word	0x2000008c
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003f6c:	b5b0      	push	{r4, r5, r7, lr}
 8003f6e:	b08c      	sub	sp, #48	@ 0x30
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003f78:	4b41      	ldr	r3, [pc, #260]	@ (8004080 <prvAddCurrentTaskToDelayedList+0x114>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003f82:	4b40      	ldr	r3, [pc, #256]	@ (8004084 <prvAddCurrentTaskToDelayedList+0x118>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003f88:	4b3f      	ldr	r3, [pc, #252]	@ (8004088 <prvAddCurrentTaskToDelayedList+0x11c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	623b      	str	r3, [r7, #32]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800408c <prvAddCurrentTaskToDelayedList+0x120>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3308      	adds	r3, #8
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe f912 	bl	80021be <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fa2:	bf08      	it	eq
 8003fa4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8003fa8:	d125      	bne.n	8003ff6 <prvAddCurrentTaskToDelayedList+0x8a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d022      	beq.n	8003ff6 <prvAddCurrentTaskToDelayedList+0x8a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fb0:	4b37      	ldr	r3, [pc, #220]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x124>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	4b35      	ldr	r3, [pc, #212]	@ (800408c <prvAddCurrentTaskToDelayedList+0x120>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	611a      	str	r2, [r3, #16]
 8003fbe:	4b33      	ldr	r3, [pc, #204]	@ (800408c <prvAddCurrentTaskToDelayedList+0x120>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	68d2      	ldr	r2, [r2, #12]
 8003fc6:	615a      	str	r2, [r3, #20]
 8003fc8:	4b30      	ldr	r3, [pc, #192]	@ (800408c <prvAddCurrentTaskToDelayedList+0x120>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	3208      	adds	r2, #8
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800408c <prvAddCurrentTaskToDelayedList+0x120>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f103 0208 	add.w	r2, r3, #8
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800408c <prvAddCurrentTaskToDelayedList+0x120>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x124>)
 8003fe6:	61da      	str	r2, [r3, #28]
 8003fe8:	4b29      	ldr	r3, [pc, #164]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x124>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	4a28      	ldr	r2, [pc, #160]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x124>)
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ff4:	e03f      	b.n	8004076 <prvAddCurrentTaskToDelayedList+0x10a>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003ff6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ffa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ffe:	1884      	adds	r4, r0, r2
 8004000:	eb41 0503 	adc.w	r5, r1, r3
 8004004:	e9c7 4504 	strd	r4, r5, [r7, #16]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004008:	4b20      	ldr	r3, [pc, #128]	@ (800408c <prvAddCurrentTaskToDelayedList+0x120>)
 800400a:	6819      	ldr	r1, [r3, #0]
 800400c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004010:	e9c1 2302 	strd	r2, r3, [r1, #8]
            if( xTimeToWake < xConstTickCount )
 8004014:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004018:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800401c:	4290      	cmp	r0, r2
 800401e:	eb71 0303 	sbcs.w	r3, r1, r3
 8004022:	d20d      	bcs.n	8004040 <prvAddCurrentTaskToDelayedList+0xd4>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004024:	4b19      	ldr	r3, [pc, #100]	@ (800408c <prvAddCurrentTaskToDelayedList+0x120>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2104      	movs	r1, #4
 800402a:	4618      	mov	r0, r3
 800402c:	f003 f912 	bl	8007254 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004030:	4b16      	ldr	r3, [pc, #88]	@ (800408c <prvAddCurrentTaskToDelayedList+0x120>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	4619      	mov	r1, r3
 8004038:	6a38      	ldr	r0, [r7, #32]
 800403a:	f7fe f87b 	bl	8002134 <vListInsert>
}
 800403e:	e01a      	b.n	8004076 <prvAddCurrentTaskToDelayedList+0x10a>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004040:	4b12      	ldr	r3, [pc, #72]	@ (800408c <prvAddCurrentTaskToDelayedList+0x120>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2104      	movs	r1, #4
 8004046:	4618      	mov	r0, r3
 8004048:	f003 f904 	bl	8007254 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800404c:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <prvAddCurrentTaskToDelayedList+0x120>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	4619      	mov	r1, r3
 8004054:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004056:	f7fe f86d 	bl	8002134 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800405a:	4b0e      	ldr	r3, [pc, #56]	@ (8004094 <prvAddCurrentTaskToDelayedList+0x128>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004064:	4290      	cmp	r0, r2
 8004066:	eb71 0303 	sbcs.w	r3, r1, r3
 800406a:	d204      	bcs.n	8004076 <prvAddCurrentTaskToDelayedList+0x10a>
                    xNextTaskUnblockTime = xTimeToWake;
 800406c:	4909      	ldr	r1, [pc, #36]	@ (8004094 <prvAddCurrentTaskToDelayedList+0x128>)
 800406e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004072:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004076:	bf00      	nop
 8004078:	3730      	adds	r7, #48	@ 0x30
 800407a:	46bd      	mov	sp, r7
 800407c:	bdb0      	pop	{r4, r5, r7, pc}
 800407e:	bf00      	nop
 8004080:	20000198 	.word	0x20000198
 8004084:	20000138 	.word	0x20000138
 8004088:	2000013c 	.word	0x2000013c
 800408c:	2000008c 	.word	0x2000008c
 8004090:	20000178 	.word	0x20000178
 8004094:	200001c0 	.word	0x200001c0

08004098 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a07      	ldr	r2, [pc, #28]	@ (80040c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80040a8:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4a06      	ldr	r2, [pc, #24]	@ (80040c8 <vApplicationGetIdleTaskMemory+0x30>)
 80040ae:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2280      	movs	r2, #128	@ 0x80
 80040b4:	601a      	str	r2, [r3, #0]
    }
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	200001d0 	.word	0x200001d0
 80040c8:	20000230 	.word	0x20000230

080040cc <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a07      	ldr	r2, [pc, #28]	@ (80040f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80040dc:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4a06      	ldr	r2, [pc, #24]	@ (80040fc <vApplicationGetTimerTaskMemory+0x30>)
 80040e2:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2280      	movs	r2, #128	@ 0x80
 80040e8:	601a      	str	r2, [r3, #0]
    }
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000430 	.word	0x20000430
 80040fc:	20000490 	.word	0x20000490

08004100 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	@ 0x28
 8004104:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800410a:	f000 faf1 	bl	80046f0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800410e:	4b20      	ldr	r3, [pc, #128]	@ (8004190 <xTimerCreateTimerTask+0x90>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d021      	beq.n	800415a <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 800411e:	1d3a      	adds	r2, r7, #4
 8004120:	f107 0108 	add.w	r1, r7, #8
 8004124:	f107 030c 	add.w	r3, r7, #12
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ffcf 	bl	80040cc <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	9202      	str	r2, [sp, #8]
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	2304      	movs	r3, #4
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2300      	movs	r3, #0
 800413e:	460a      	mov	r2, r1
 8004140:	4914      	ldr	r1, [pc, #80]	@ (8004194 <xTimerCreateTimerTask+0x94>)
 8004142:	4815      	ldr	r0, [pc, #84]	@ (8004198 <xTimerCreateTimerTask+0x98>)
 8004144:	f7fe fba7 	bl	8002896 <xTaskCreateStatic>
 8004148:	4603      	mov	r3, r0
 800414a:	4a14      	ldr	r2, [pc, #80]	@ (800419c <xTimerCreateTimerTask+0x9c>)
 800414c:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800414e:	4b13      	ldr	r3, [pc, #76]	@ (800419c <xTimerCreateTimerTask+0x9c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8004156:	2301      	movs	r3, #1
 8004158:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <xTimerCreateTimerTask+0x78>
    __asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	613b      	str	r3, [r7, #16]
}
 8004172:	bf00      	nop
 8004174:	bf00      	nop
 8004176:	e7fd      	b.n	8004174 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	4619      	mov	r1, r3
 800417c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004180:	f002 ff2e 	bl	8006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004184:	697b      	ldr	r3, [r7, #20]
    }
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	200006c8 	.word	0x200006c8
 8004194:	080077cc 	.word	0x080077cc
 8004198:	08004279 	.word	0x08004279
 800419c:	200006cc 	.word	0x200006cc

080041a0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80041a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041a4:	b088      	sub	sp, #32
 80041a6:	af04      	add	r7, sp, #16
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	e9c7 2300 	strd	r2, r3, [r7]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80041ae:	e00d      	b.n	80041cc <prvReloadTimer+0x2c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041ba:	1884      	adds	r4, r0, r2
 80041bc:	eb41 0503 	adc.w	r5, r1, r3
 80041c0:	e9c7 4500 	strd	r4, r5, [r7]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80041d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041d6:	eb10 0802 	adds.w	r8, r0, r2
 80041da:	eb41 0903 	adc.w	r9, r1, r3
 80041de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041ea:	e9cd 2300 	strd	r2, r3, [sp]
 80041ee:	4642      	mov	r2, r8
 80041f0:	464b      	mov	r3, r9
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f906 	bl	8004404 <prvInsertTimerInActiveList>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1d8      	bne.n	80041b0 <prvReloadTimer+0x10>
        }
    }
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800420c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af02      	add	r7, sp, #8
 8004212:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004216:	e9c7 2300 	strd	r2, r3, [r7]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800421a:	4b16      	ldr	r3, [pc, #88]	@ (8004274 <prvProcessExpiredTimer+0x68>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3308      	adds	r3, #8
 8004228:	4618      	mov	r0, r3
 800422a:	f7fd ffc8 	bl	80021be <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d009      	beq.n	8004250 <prvProcessExpiredTimer+0x44>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800423c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004240:	e9cd 2300 	strd	r2, r3, [sp]
 8004244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004248:	6978      	ldr	r0, [r7, #20]
 800424a:	f7ff ffa9 	bl	80041a0 <prvReloadTimer>
 800424e:	e008      	b.n	8004262 <prvProcessExpiredTimer+0x56>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	b2da      	uxtb	r2, r3
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004266:	6978      	ldr	r0, [r7, #20]
 8004268:	4798      	blx	r3
    }
 800426a:	bf00      	nop
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	200006c0 	.word	0x200006c0

08004278 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004280:	f107 030c 	add.w	r3, r7, #12
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f869 	bl	800435c <prvGetNextExpireTime>
 800428a:	e9c7 0104 	strd	r0, r1, [r7, #16]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	461a      	mov	r2, r3
 8004292:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004296:	f000 f805 	bl	80042a4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800429a:	f000 f909 	bl	80044b0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800429e:	bf00      	nop
 80042a0:	e7ee      	b.n	8004280 <prvTimerTask+0x8>
	...

080042a4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80042a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a6:	b08b      	sub	sp, #44	@ 0x2c
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80042b0:	f7fe fe72 	bl	8002f98 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 f87b 	bl	80043b4 <prvSampleTimeNow>
 80042be:	e9c7 0106 	strd	r0, r1, [r7, #24]

            if( xTimerListsWereSwitched == pdFALSE )
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d13d      	bne.n	8004344 <prvProcessTimerOrBlockTask+0xa0>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d110      	bne.n	80042f0 <prvProcessTimerOrBlockTask+0x4c>
 80042ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042d6:	4290      	cmp	r0, r2
 80042d8:	eb71 0303 	sbcs.w	r3, r1, r3
 80042dc:	d308      	bcc.n	80042f0 <prvProcessTimerOrBlockTask+0x4c>
                {
                    ( void ) xTaskResumeAll();
 80042de:	f7fe fe69 	bl	8002fb4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042ea:	f7ff ff8f 	bl	800420c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80042ee:	e02b      	b.n	8004348 <prvProcessTimerOrBlockTask+0xa4>
                    if( xListWasEmpty != pdFALSE )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <prvProcessTimerOrBlockTask+0x64>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042f6:	4b16      	ldr	r3, [pc, #88]	@ (8004350 <prvProcessTimerOrBlockTask+0xac>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <prvProcessTimerOrBlockTask+0x60>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <prvProcessTimerOrBlockTask+0x62>
 8004304:	2300      	movs	r3, #0
 8004306:	607b      	str	r3, [r7, #4]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004308:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <prvProcessTimerOrBlockTask+0xb0>)
 800430a:	681e      	ldr	r6, [r3, #0]
 800430c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004314:	1a84      	subs	r4, r0, r2
 8004316:	eb61 0503 	sbc.w	r5, r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	4622      	mov	r2, r4
 8004320:	462b      	mov	r3, r5
 8004322:	4630      	mov	r0, r6
 8004324:	f7fe fa1c 	bl	8002760 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004328:	f7fe fe44 	bl	8002fb4 <xTaskResumeAll>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <prvProcessTimerOrBlockTask+0xa4>
                        taskYIELD_WITHIN_API();
 8004332:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <prvProcessTimerOrBlockTask+0xb4>)
 8004334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	f3bf 8f6f 	isb	sy
    }
 8004342:	e001      	b.n	8004348 <prvProcessTimerOrBlockTask+0xa4>
                ( void ) xTaskResumeAll();
 8004344:	f7fe fe36 	bl	8002fb4 <xTaskResumeAll>
    }
 8004348:	bf00      	nop
 800434a:	3724      	adds	r7, #36	@ 0x24
 800434c:	46bd      	mov	sp, r7
 800434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004350:	200006c4 	.word	0x200006c4
 8004354:	200006c8 	.word	0x200006c8
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004364:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <prvGetNextExpireTime+0x54>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <prvGetNextExpireTime+0x16>
 800436e:	2201      	movs	r2, #1
 8004370:	e000      	b.n	8004374 <prvGetNextExpireTime+0x18>
 8004372:	2200      	movs	r2, #0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d107      	bne.n	8004390 <prvGetNextExpireTime+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <prvGetNextExpireTime+0x54>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800438e:	e005      	b.n	800439c <prvGetNextExpireTime+0x40>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	e9c7 2302 	strd	r2, r3, [r7, #8]
        }

        return xNextExpireTime;
 800439c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	200006c0 	.word	0x200006c0

080043b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80043bc:	f7fe ff1a 	bl	80031f4 <xTaskGetTickCount>
 80043c0:	e9c7 0102 	strd	r0, r1, [r7, #8]

        if( xTimeNow < xLastTime )
 80043c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004400 <prvSampleTimeNow+0x4c>)
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043ce:	4290      	cmp	r0, r2
 80043d0:	eb71 0303 	sbcs.w	r3, r1, r3
 80043d4:	d205      	bcs.n	80043e2 <prvSampleTimeNow+0x2e>
        {
            prvSwitchTimerLists();
 80043d6:	f000 f961 	bl	800469c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e002      	b.n	80043e8 <prvSampleTimeNow+0x34>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80043e8:	4905      	ldr	r1, [pc, #20]	@ (8004400 <prvSampleTimeNow+0x4c>)
 80043ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043ee:	e9c1 2300 	strd	r2, r3, [r1]

        return xTimeNow;
 80043f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	200006d0 	.word	0x200006d0

08004404 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004404:	b5b0      	push	{r4, r5, r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	e9c7 2300 	strd	r2, r3, [r7]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004414:	68f9      	ldr	r1, [r7, #12]
 8004416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800441a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	619a      	str	r2, [r3, #24]

        if( xNextExpiryTime <= xTimeNow )
 8004424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004428:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800442c:	4290      	cmp	r0, r2
 800442e:	eb71 0303 	sbcs.w	r3, r1, r3
 8004432:	d319      	bcc.n	8004468 <prvInsertTimerInActiveList+0x64>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004434:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004438:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800443c:	1a84      	subs	r4, r0, r2
 800443e:	eb61 0503 	sbc.w	r5, r1, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004448:	4294      	cmp	r4, r2
 800444a:	eb75 0303 	sbcs.w	r3, r5, r3
 800444e:	d302      	bcc.n	8004456 <prvInsertTimerInActiveList+0x52>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004450:	2301      	movs	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e023      	b.n	800449e <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004456:	4b14      	ldr	r3, [pc, #80]	@ (80044a8 <prvInsertTimerInActiveList+0xa4>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3308      	adds	r3, #8
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f7fd fe67 	bl	8002134 <vListInsert>
 8004466:	e01a      	b.n	800449e <prvInsertTimerInActiveList+0x9a>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004468:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800446c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004470:	4290      	cmp	r0, r2
 8004472:	eb71 0303 	sbcs.w	r3, r1, r3
 8004476:	d20a      	bcs.n	800448e <prvInsertTimerInActiveList+0x8a>
 8004478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800447c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004480:	4290      	cmp	r0, r2
 8004482:	eb71 0303 	sbcs.w	r3, r1, r3
 8004486:	d302      	bcc.n	800448e <prvInsertTimerInActiveList+0x8a>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004488:	2301      	movs	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e007      	b.n	800449e <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800448e:	4b07      	ldr	r3, [pc, #28]	@ (80044ac <prvInsertTimerInActiveList+0xa8>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3308      	adds	r3, #8
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f7fd fe4b 	bl	8002134 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800449e:	697b      	ldr	r3, [r7, #20]
    }
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bdb0      	pop	{r4, r5, r7, pc}
 80044a8:	200006c4 	.word	0x200006c4
 80044ac:	200006c0 	.word	0x200006c0

080044b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80044b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b4:	b092      	sub	sp, #72	@ 0x48
 80044b6:	af04      	add	r7, sp, #16
        DaemonTaskMessage_t xMessage = { 0 };
 80044b8:	f107 0308 	add.w	r3, r7, #8
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	611a      	str	r2, [r3, #16]
 80044c8:	615a      	str	r2, [r3, #20]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80044ca:	e0d0      	b.n	800466e <prvProcessReceivedCommands+0x1be>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f2c0 80cd 	blt.w	800466e <prvProcessReceivedCommands+0x1be>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	637b      	str	r3, [r7, #52]	@ 0x34

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80044d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <prvProcessReceivedCommands+0x3a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e2:	3308      	adds	r3, #8
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fd fe6a 	bl	80021be <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044ea:	1d3b      	adds	r3, r7, #4
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff61 	bl	80043b4 <prvSampleTimeNow>
 80044f2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

                switch( xMessage.xMessageID )
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	f200 80b4 	bhi.w	8004668 <prvProcessReceivedCommands+0x1b8>
 8004500:	a201      	add	r2, pc, #4	@ (adr r2, 8004508 <prvProcessReceivedCommands+0x58>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	0800452d 	.word	0x0800452d
 800450c:	0800452d 	.word	0x0800452d
 8004510:	080045bf 	.word	0x080045bf
 8004514:	080045d3 	.word	0x080045d3
 8004518:	0800463f 	.word	0x0800463f
 800451c:	0800452d 	.word	0x0800452d
 8004520:	0800452d 	.word	0x0800452d
 8004524:	080045bf 	.word	0x080045bf
 8004528:	080045d3 	.word	0x080045d3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800452c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	b2da      	uxtb	r2, r3
 8004538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800453e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004544:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004548:	1884      	adds	r4, r0, r2
 800454a:	eb41 0503 	adc.w	r5, r1, r3
 800454e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004552:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800455a:	e9cd 2300 	strd	r2, r3, [sp]
 800455e:	4622      	mov	r2, r4
 8004560:	462b      	mov	r3, r5
 8004562:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004564:	f7ff ff4e 	bl	8004404 <prvInsertTimerInActiveList>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d07e      	beq.n	800466c <prvProcessReceivedCommands+0x1bc>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800456e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004570:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d012      	beq.n	80045a2 <prvProcessReceivedCommands+0xf2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800457c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004582:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004586:	eb10 0802 	adds.w	r8, r0, r2
 800458a:	eb41 0903 	adc.w	r9, r1, r3
 800458e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004592:	e9cd 2300 	strd	r2, r3, [sp]
 8004596:	4642      	mov	r2, r8
 8004598:	464b      	mov	r3, r9
 800459a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800459c:	f7ff fe00 	bl	80041a0 <prvReloadTimer>
 80045a0:	e008      	b.n	80045b4 <prvProcessReceivedCommands+0x104>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80045a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80045ba:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80045bc:	e056      	b.n	800466c <prvProcessReceivedCommands+0x1bc>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80045be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 80045d0:	e04d      	b.n	800466e <prvProcessReceivedCommands+0x1be>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80045d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045e8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80045ea:	e9c1 2308 	strd	r2, r3, [r1, #32]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	d10b      	bne.n	8004610 <prvProcessReceivedCommands+0x160>
    __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800460a:	bf00      	nop
 800460c:	bf00      	nop
 800460e:	e7fd      	b.n	800460c <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004612:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004616:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800461a:	eb10 0a02 	adds.w	sl, r0, r2
 800461e:	eb41 0b03 	adc.w	fp, r1, r3
 8004622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800462a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800462e:	e9cd 2300 	strd	r2, r3, [sp]
 8004632:	4652      	mov	r2, sl
 8004634:	465b      	mov	r3, fp
 8004636:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004638:	f7ff fee4 	bl	8004404 <prvInsertTimerInActiveList>
                        break;
 800463c:	e017      	b.n	800466e <prvProcessReceivedCommands+0x1be>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800463e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004640:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <prvProcessReceivedCommands+0x1a4>
                            {
                                vPortFree( pxTimer );
 800464c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800464e:	f000 fcd1 	bl	8004ff4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004652:	e00c      	b.n	800466e <prvProcessReceivedCommands+0x1be>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004656:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004662:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                        break;
 8004666:	e002      	b.n	800466e <prvProcessReceivedCommands+0x1be>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004668:	bf00      	nop
 800466a:	e000      	b.n	800466e <prvProcessReceivedCommands+0x1be>
                        break;
 800466c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800466e:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <prvProcessReceivedCommands+0x1e8>)
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	f107 0108 	add.w	r1, r7, #8
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	f7fd feed 	bl	800245c <xQueueReceive>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	f47f af21 	bne.w	80044cc <prvProcessReceivedCommands+0x1c>
                }
            }
        }
    }
 800468a:	bf00      	nop
 800468c:	bf00      	nop
 800468e:	3738      	adds	r7, #56	@ 0x38
 8004690:	46bd      	mov	sp, r7
 8004692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004696:	bf00      	nop
 8004698:	200006c8 	.word	0x200006c8

0800469c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046a2:	e00e      	b.n	80046c2 <prvSwitchTimerLists+0x26>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046a4:	4b10      	ldr	r3, [pc, #64]	@ (80046e8 <prvSwitchTimerLists+0x4c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	e9c7 2300 	strd	r2, r3, [r7]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80046b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046be:	f7ff fda5 	bl	800420c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046c2:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <prvSwitchTimerLists+0x4c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1eb      	bne.n	80046a4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80046cc:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <prvSwitchTimerLists+0x4c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60fb      	str	r3, [r7, #12]
        pxCurrentTimerList = pxOverflowTimerList;
 80046d2:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <prvSwitchTimerLists+0x50>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <prvSwitchTimerLists+0x4c>)
 80046d8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80046da:	4a04      	ldr	r2, [pc, #16]	@ (80046ec <prvSwitchTimerLists+0x50>)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6013      	str	r3, [r2, #0]
    }
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	200006c0 	.word	0x200006c0
 80046ec:	200006c4 	.word	0x200006c4

080046f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80046f6:	f000 fa1b 	bl	8004b30 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80046fa:	4b10      	ldr	r3, [pc, #64]	@ (800473c <prvCheckForValidListAndQueue+0x4c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d116      	bne.n	8004730 <prvCheckForValidListAndQueue+0x40>
            {
                vListInitialise( &xActiveTimerList1 );
 8004702:	480f      	ldr	r0, [pc, #60]	@ (8004740 <prvCheckForValidListAndQueue+0x50>)
 8004704:	f7fd fcbc 	bl	8002080 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004708:	480e      	ldr	r0, [pc, #56]	@ (8004744 <prvCheckForValidListAndQueue+0x54>)
 800470a:	f7fd fcb9 	bl	8002080 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800470e:	4b0e      	ldr	r3, [pc, #56]	@ (8004748 <prvCheckForValidListAndQueue+0x58>)
 8004710:	4a0b      	ldr	r2, [pc, #44]	@ (8004740 <prvCheckForValidListAndQueue+0x50>)
 8004712:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004714:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <prvCheckForValidListAndQueue+0x5c>)
 8004716:	4a0b      	ldr	r2, [pc, #44]	@ (8004744 <prvCheckForValidListAndQueue+0x54>)
 8004718:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800471a:	2300      	movs	r3, #0
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <prvCheckForValidListAndQueue+0x60>)
 8004720:	4a0c      	ldr	r2, [pc, #48]	@ (8004754 <prvCheckForValidListAndQueue+0x64>)
 8004722:	2118      	movs	r1, #24
 8004724:	200a      	movs	r0, #10
 8004726:	f7fd fe0f 	bl	8002348 <xQueueGenericCreateStatic>
 800472a:	4603      	mov	r3, r0
 800472c:	4a03      	ldr	r2, [pc, #12]	@ (800473c <prvCheckForValidListAndQueue+0x4c>)
 800472e:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004730:	f000 fa30 	bl	8004b94 <vPortExitCritical>
    }
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	200006c8 	.word	0x200006c8
 8004740:	20000690 	.word	0x20000690
 8004744:	200006a8 	.word	0x200006a8
 8004748:	200006c0 	.word	0x200006c0
 800474c:	200006c4 	.word	0x200006c4
 8004750:	200007c8 	.word	0x200007c8
 8004754:	200006d8 	.word	0x200006d8

08004758 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3b04      	subs	r3, #4
 8004768:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004770:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3b04      	subs	r3, #4
 8004776:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f023 0201 	bic.w	r2, r3, #1
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3b04      	subs	r3, #4
 8004786:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004788:	4a0c      	ldr	r2, [pc, #48]	@ (80047bc <pxPortInitialiseStack+0x64>)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3b14      	subs	r3, #20
 8004792:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3b04      	subs	r3, #4
 800479e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f06f 0202 	mvn.w	r2, #2
 80047a6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3b20      	subs	r3, #32
 80047ac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80047ae:	68fb      	ldr	r3, [r7, #12]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	080047c1 	.word	0x080047c1

080047c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80047ca:	4b13      	ldr	r3, [pc, #76]	@ (8004818 <prvTaskExitError+0x58>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047d2:	d00b      	beq.n	80047ec <prvTaskExitError+0x2c>
    __asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	e7fd      	b.n	80047e8 <prvTaskExitError+0x28>
    __asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	60bb      	str	r3, [r7, #8]
}
 80047fe:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004800:	bf00      	nop
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0fc      	beq.n	8004802 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004808:	bf00      	nop
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	2000000c 	.word	0x2000000c
 800481c:	00000000 	.word	0x00000000

08004820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004820:	4b07      	ldr	r3, [pc, #28]	@ (8004840 <pxCurrentTCBConst2>)
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	6808      	ldr	r0, [r1, #0]
 8004826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482a:	f380 8809 	msr	PSP, r0
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f380 8811 	msr	BASEPRI, r0
 800483a:	4770      	bx	lr
 800483c:	f3af 8000 	nop.w

08004840 <pxCurrentTCBConst2>:
 8004840:	2000008c 	.word	0x2000008c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop

08004848 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004848:	4808      	ldr	r0, [pc, #32]	@ (800486c <prvPortStartFirstTask+0x24>)
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	6800      	ldr	r0, [r0, #0]
 800484e:	f380 8808 	msr	MSP, r0
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f380 8814 	msr	CONTROL, r0
 800485a:	b662      	cpsie	i
 800485c:	b661      	cpsie	f
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	df00      	svc	0
 8004868:	bf00      	nop
 800486a:	0000      	.short	0x0000
 800486c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004870:	bf00      	nop
 8004872:	bf00      	nop

08004874 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08c      	sub	sp, #48	@ 0x30
 8004878:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800487a:	4b69      	ldr	r3, [pc, #420]	@ (8004a20 <xPortStartScheduler+0x1ac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a69      	ldr	r2, [pc, #420]	@ (8004a24 <xPortStartScheduler+0x1b0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d10b      	bne.n	800489c <xPortStartScheduler+0x28>
    __asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	623b      	str	r3, [r7, #32]
}
 8004896:	bf00      	nop
 8004898:	bf00      	nop
 800489a:	e7fd      	b.n	8004898 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800489c:	4b60      	ldr	r3, [pc, #384]	@ (8004a20 <xPortStartScheduler+0x1ac>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a61      	ldr	r2, [pc, #388]	@ (8004a28 <xPortStartScheduler+0x1b4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d10b      	bne.n	80048be <xPortStartScheduler+0x4a>
    __asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	e7fd      	b.n	80048ba <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80048be:	4b5b      	ldr	r3, [pc, #364]	@ (8004a2c <xPortStartScheduler+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80048c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c6:	332c      	adds	r3, #44	@ 0x2c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a59      	ldr	r2, [pc, #356]	@ (8004a30 <xPortStartScheduler+0x1bc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00b      	beq.n	80048e8 <xPortStartScheduler+0x74>
    __asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	61fb      	str	r3, [r7, #28]
}
 80048e2:	bf00      	nop
 80048e4:	bf00      	nop
 80048e6:	e7fd      	b.n	80048e4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80048e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ea:	3338      	adds	r3, #56	@ 0x38
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a51      	ldr	r2, [pc, #324]	@ (8004a34 <xPortStartScheduler+0x1c0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00b      	beq.n	800490c <xPortStartScheduler+0x98>
    __asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	61bb      	str	r3, [r7, #24]
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004910:	4b49      	ldr	r3, [pc, #292]	@ (8004a38 <xPortStartScheduler+0x1c4>)
 8004912:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800491c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491e:	22ff      	movs	r2, #255	@ 0xff
 8004920:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004932:	b2da      	uxtb	r2, r3
 8004934:	4b41      	ldr	r3, [pc, #260]	@ (8004a3c <xPortStartScheduler+0x1c8>)
 8004936:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004938:	4b40      	ldr	r3, [pc, #256]	@ (8004a3c <xPortStartScheduler+0x1c8>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10b      	bne.n	8004958 <xPortStartScheduler+0xe4>
    __asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	617b      	str	r3, [r7, #20]
}
 8004952:	bf00      	nop
 8004954:	bf00      	nop
 8004956:	e7fd      	b.n	8004954 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004962:	2b00      	cmp	r3, #0
 8004964:	d013      	beq.n	800498e <xPortStartScheduler+0x11a>
    __asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	613b      	str	r3, [r7, #16]
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	e7fd      	b.n	800497a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3301      	adds	r3, #1
 8004982:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	b2db      	uxtb	r3, r3
 800498c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004996:	2b80      	cmp	r3, #128	@ 0x80
 8004998:	d0f1      	beq.n	800497e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b08      	cmp	r3, #8
 800499e:	d103      	bne.n	80049a8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80049a0:	4b27      	ldr	r3, [pc, #156]	@ (8004a40 <xPortStartScheduler+0x1cc>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e004      	b.n	80049b2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f1c3 0307 	rsb	r3, r3, #7
 80049ae:	4a24      	ldr	r2, [pc, #144]	@ (8004a40 <xPortStartScheduler+0x1cc>)
 80049b0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049b2:	4b23      	ldr	r3, [pc, #140]	@ (8004a40 <xPortStartScheduler+0x1cc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	4a21      	ldr	r2, [pc, #132]	@ (8004a40 <xPortStartScheduler+0x1cc>)
 80049ba:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049bc:	4b20      	ldr	r3, [pc, #128]	@ (8004a40 <xPortStartScheduler+0x1cc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a40 <xPortStartScheduler+0x1cc>)
 80049c6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80049d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a44 <xPortStartScheduler+0x1d0>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a44 <xPortStartScheduler+0x1d0>)
 80049d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049da:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80049dc:	4b19      	ldr	r3, [pc, #100]	@ (8004a44 <xPortStartScheduler+0x1d0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a18      	ldr	r2, [pc, #96]	@ (8004a44 <xPortStartScheduler+0x1d0>)
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049e6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80049e8:	4b17      	ldr	r3, [pc, #92]	@ (8004a48 <xPortStartScheduler+0x1d4>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80049ee:	f000 f95d 	bl	8004cac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80049f2:	4b16      	ldr	r3, [pc, #88]	@ (8004a4c <xPortStartScheduler+0x1d8>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80049f8:	f000 f97c 	bl	8004cf4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049fc:	4b14      	ldr	r3, [pc, #80]	@ (8004a50 <xPortStartScheduler+0x1dc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a13      	ldr	r2, [pc, #76]	@ (8004a50 <xPortStartScheduler+0x1dc>)
 8004a02:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004a06:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004a08:	f7ff ff1e 	bl	8004848 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004a0c:	f7fe fd68 	bl	80034e0 <vTaskSwitchContext>
    prvTaskExitError();
 8004a10:	f7ff fed6 	bl	80047c0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3730      	adds	r7, #48	@ 0x30
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	e000ed00 	.word	0xe000ed00
 8004a24:	410fc271 	.word	0x410fc271
 8004a28:	410fc270 	.word	0x410fc270
 8004a2c:	e000ed08 	.word	0xe000ed08
 8004a30:	08004821 	.word	0x08004821
 8004a34:	08004bf1 	.word	0x08004bf1
 8004a38:	e000e400 	.word	0xe000e400
 8004a3c:	20000818 	.word	0x20000818
 8004a40:	2000081c 	.word	0x2000081c
 8004a44:	e000ed20 	.word	0xe000ed20
 8004a48:	e000ed1c 	.word	0xe000ed1c
 8004a4c:	2000000c 	.word	0x2000000c
 8004a50:	e000ef34 	.word	0xe000ef34

08004a54 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b18 <vInitPrioGroupValue+0xc4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b1c <vInitPrioGroupValue+0xc8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d10b      	bne.n	8004a7c <vInitPrioGroupValue+0x28>
    __asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	60fb      	str	r3, [r7, #12]
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a7c:	4b26      	ldr	r3, [pc, #152]	@ (8004b18 <vInitPrioGroupValue+0xc4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a27      	ldr	r2, [pc, #156]	@ (8004b20 <vInitPrioGroupValue+0xcc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10b      	bne.n	8004a9e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	613b      	str	r3, [r7, #16]
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	e7fd      	b.n	8004a9a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a9e:	4b21      	ldr	r3, [pc, #132]	@ (8004b24 <vInitPrioGroupValue+0xd0>)
 8004aa0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	22ff      	movs	r2, #255	@ 0xff
 8004aae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4b19      	ldr	r3, [pc, #100]	@ (8004b28 <vInitPrioGroupValue+0xd4>)
 8004ac4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ac6:	4b19      	ldr	r3, [pc, #100]	@ (8004b2c <vInitPrioGroupValue+0xd8>)
 8004ac8:	2207      	movs	r2, #7
 8004aca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004acc:	e009      	b.n	8004ae2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004ace:	4b17      	ldr	r3, [pc, #92]	@ (8004b2c <vInitPrioGroupValue+0xd8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	4a15      	ldr	r2, [pc, #84]	@ (8004b2c <vInitPrioGroupValue+0xd8>)
 8004ad6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aea:	2b80      	cmp	r3, #128	@ 0x80
 8004aec:	d0ef      	beq.n	8004ace <vInitPrioGroupValue+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004aee:	4b0f      	ldr	r3, [pc, #60]	@ (8004b2c <vInitPrioGroupValue+0xd8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b2c <vInitPrioGroupValue+0xd8>)
 8004af6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004af8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b2c <vInitPrioGroupValue+0xd8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b00:	4a0a      	ldr	r2, [pc, #40]	@ (8004b2c <vInitPrioGroupValue+0xd8>)
 8004b02:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	e000ed00 	.word	0xe000ed00
 8004b1c:	410fc271 	.word	0x410fc271
 8004b20:	410fc270 	.word	0x410fc270
 8004b24:	e000e400 	.word	0xe000e400
 8004b28:	20000818 	.word	0x20000818
 8004b2c:	2000081c 	.word	0x2000081c

08004b30 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
    __asm volatile
 8004b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	607b      	str	r3, [r7, #4]
}
 8004b48:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004b4a:	4b10      	ldr	r3, [pc, #64]	@ (8004b8c <vPortEnterCritical+0x5c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	4a0e      	ldr	r2, [pc, #56]	@ (8004b8c <vPortEnterCritical+0x5c>)
 8004b52:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004b54:	4b0d      	ldr	r3, [pc, #52]	@ (8004b8c <vPortEnterCritical+0x5c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d110      	bne.n	8004b7e <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <vPortEnterCritical+0x60>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <vPortEnterCritical+0x4e>
    __asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	603b      	str	r3, [r7, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	bf00      	nop
 8004b7c:	e7fd      	b.n	8004b7a <vPortEnterCritical+0x4a>
    }
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	2000000c 	.word	0x2000000c
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004b9a:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <vPortExitCritical+0x50>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10b      	bne.n	8004bba <vPortExitCritical+0x26>
    __asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	607b      	str	r3, [r7, #4]
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	e7fd      	b.n	8004bb6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004bba:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <vPortExitCritical+0x50>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	4a08      	ldr	r2, [pc, #32]	@ (8004be4 <vPortExitCritical+0x50>)
 8004bc2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004bc4:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <vPortExitCritical+0x50>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <vPortExitCritical+0x44>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f383 8811 	msr	BASEPRI, r3
}
 8004bd6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	2000000c 	.word	0x2000000c
	...

08004bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004bf0:	f3ef 8009 	mrs	r0, PSP
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	4b15      	ldr	r3, [pc, #84]	@ (8004c50 <pxCurrentTCBConst>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	f01e 0f10 	tst.w	lr, #16
 8004c00:	bf08      	it	eq
 8004c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0a:	6010      	str	r0, [r2, #0]
 8004c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c14:	f380 8811 	msr	BASEPRI, r0
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f7fe fc5e 	bl	80034e0 <vTaskSwitchContext>
 8004c24:	f04f 0000 	mov.w	r0, #0
 8004c28:	f380 8811 	msr	BASEPRI, r0
 8004c2c:	bc09      	pop	{r0, r3}
 8004c2e:	6819      	ldr	r1, [r3, #0]
 8004c30:	6808      	ldr	r0, [r1, #0]
 8004c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c36:	f01e 0f10 	tst.w	lr, #16
 8004c3a:	bf08      	it	eq
 8004c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c40:	f380 8809 	msr	PSP, r0
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	f3af 8000 	nop.w

08004c50 <pxCurrentTCBConst>:
 8004c50:	2000008c 	.word	0x2000008c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop

08004c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
    __asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	607b      	str	r3, [r7, #4]
}
 8004c70:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004c72:	f002 f8ff 	bl	8006e74 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004c76:	f7fe fb03 	bl	8003280 <xTaskIncrementTick>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d006      	beq.n	8004c8e <xPortSysTickHandler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004c80:	f002 f956 	bl	8006f30 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c84:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <xPortSysTickHandler+0x50>)
 8004c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e001      	b.n	8004c92 <xPortSysTickHandler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8004c8e:	f002 f933 	bl	8006ef8 <SEGGER_SYSVIEW_RecordExitISR>
 8004c92:	2300      	movs	r3, #0
 8004c94:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f383 8811 	msr	BASEPRI, r3
}
 8004c9c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce4 <vPortSetupTimerInterrupt+0x38>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <vPortSetupTimerInterrupt+0x3c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8004cec <vPortSetupTimerInterrupt+0x40>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	4a09      	ldr	r2, [pc, #36]	@ (8004cf0 <vPortSetupTimerInterrupt+0x44>)
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cce:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	e000e010 	.word	0xe000e010
 8004ce4:	e000e018 	.word	0xe000e018
 8004ce8:	20000000 	.word	0x20000000
 8004cec:	51eb851f 	.word	0x51eb851f
 8004cf0:	e000e014 	.word	0xe000e014

08004cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004d04 <vPortEnableVFP+0x10>
 8004cf8:	6801      	ldr	r1, [r0, #0]
 8004cfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004cfe:	6001      	str	r1, [r0, #0]
 8004d00:	4770      	bx	lr
 8004d02:	0000      	.short	0x0000
 8004d04:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop

08004d0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004d12:	f3ef 8305 	mrs	r3, IPSR
 8004d16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b0f      	cmp	r3, #15
 8004d1c:	d915      	bls.n	8004d4a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d1e:	4a18      	ldr	r2, [pc, #96]	@ (8004d80 <vPortValidateInterruptPriority+0x74>)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d28:	4b16      	ldr	r3, [pc, #88]	@ (8004d84 <vPortValidateInterruptPriority+0x78>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	7afa      	ldrb	r2, [r7, #11]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d20b      	bcs.n	8004d4a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	607b      	str	r3, [r7, #4]
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	e7fd      	b.n	8004d46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d88 <vPortValidateInterruptPriority+0x7c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d52:	4b0e      	ldr	r3, [pc, #56]	@ (8004d8c <vPortValidateInterruptPriority+0x80>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d90b      	bls.n	8004d72 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	603b      	str	r3, [r7, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <vPortValidateInterruptPriority+0x62>
    }
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e3f0 	.word	0xe000e3f0
 8004d84:	20000818 	.word	0x20000818
 8004d88:	e000ed0c 	.word	0xe000ed0c
 8004d8c:	2000081c 	.word	0x2000081c

08004d90 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08e      	sub	sp, #56	@ 0x38
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d022      	beq.n	8004de8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004da2:	2308      	movs	r3, #8
 8004da4:	43db      	mvns	r3, r3
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d81b      	bhi.n	8004de4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8004dac:	2208      	movs	r2, #8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4413      	add	r3, r2
 8004db2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d014      	beq.n	8004de8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	f1c3 0308 	rsb	r3, r3, #8
 8004dc8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d804      	bhi.n	8004dde <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	4413      	add	r3, r2
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	e004      	b.n	8004de8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
 8004de2:	e001      	b.n	8004de8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004de8:	f7fe f8d6 	bl	8002f98 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004dec:	4b7a      	ldr	r3, [pc, #488]	@ (8004fd8 <pvPortMalloc+0x248>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004df4:	f000 f984 	bl	8005100 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f2c0 80d3 	blt.w	8004fa6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80cf 	beq.w	8004fa6 <pvPortMalloc+0x216>
 8004e08:	4b74      	ldr	r3, [pc, #464]	@ (8004fdc <pvPortMalloc+0x24c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	f200 80c9 	bhi.w	8004fa6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004e14:	4b72      	ldr	r3, [pc, #456]	@ (8004fe0 <pvPortMalloc+0x250>)
 8004e16:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004e18:	4b71      	ldr	r3, [pc, #452]	@ (8004fe0 <pvPortMalloc+0x250>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e20:	4a70      	ldr	r2, [pc, #448]	@ (8004fe4 <pvPortMalloc+0x254>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d305      	bcc.n	8004e32 <pvPortMalloc+0xa2>
 8004e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e28:	4a6f      	ldr	r2, [pc, #444]	@ (8004fe8 <pvPortMalloc+0x258>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d801      	bhi.n	8004e32 <pvPortMalloc+0xa2>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <pvPortMalloc+0xa4>
 8004e32:	2300      	movs	r3, #0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d129      	bne.n	8004e8c <pvPortMalloc+0xfc>
    __asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	623b      	str	r3, [r7, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	e7fd      	b.n	8004e4c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e52:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5c:	4a61      	ldr	r2, [pc, #388]	@ (8004fe4 <pvPortMalloc+0x254>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d305      	bcc.n	8004e6e <pvPortMalloc+0xde>
 8004e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e64:	4a60      	ldr	r2, [pc, #384]	@ (8004fe8 <pvPortMalloc+0x258>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d801      	bhi.n	8004e6e <pvPortMalloc+0xde>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <pvPortMalloc+0xe0>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <pvPortMalloc+0xfc>
    __asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	61fb      	str	r3, [r7, #28]
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	e7fd      	b.n	8004e88 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d903      	bls.n	8004e9e <pvPortMalloc+0x10e>
 8004e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1d8      	bne.n	8004e50 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8004fd8 <pvPortMalloc+0x248>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d07e      	beq.n	8004fa6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2208      	movs	r2, #8
 8004eae:	4413      	add	r3, r2
 8004eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8004fe4 <pvPortMalloc+0x254>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d305      	bcc.n	8004ec6 <pvPortMalloc+0x136>
 8004eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8004fe8 <pvPortMalloc+0x258>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d801      	bhi.n	8004ec6 <pvPortMalloc+0x136>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <pvPortMalloc+0x138>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10b      	bne.n	8004ee4 <pvPortMalloc+0x154>
    __asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	61bb      	str	r3, [r7, #24]
}
 8004ede:	bf00      	nop
 8004ee0:	bf00      	nop
 8004ee2:	e7fd      	b.n	8004ee0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8004eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d90b      	bls.n	8004f0e <pvPortMalloc+0x17e>
    __asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	617b      	str	r3, [r7, #20]
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	e7fd      	b.n	8004f0a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	1ad2      	subs	r2, r2, r3
 8004f16:	2308      	movs	r3, #8
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d924      	bls.n	8004f68 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4413      	add	r3, r2
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <pvPortMalloc+0x1b8>
    __asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	613b      	str	r3, [r7, #16]
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	1ad2      	subs	r2, r2, r3
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f66:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f68:	4b1c      	ldr	r3, [pc, #112]	@ (8004fdc <pvPortMalloc+0x24c>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	4a1a      	ldr	r2, [pc, #104]	@ (8004fdc <pvPortMalloc+0x24c>)
 8004f74:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f76:	4b19      	ldr	r3, [pc, #100]	@ (8004fdc <pvPortMalloc+0x24c>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fec <pvPortMalloc+0x25c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d203      	bcs.n	8004f8a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f82:	4b16      	ldr	r3, [pc, #88]	@ (8004fdc <pvPortMalloc+0x24c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a19      	ldr	r2, [pc, #100]	@ (8004fec <pvPortMalloc+0x25c>)
 8004f88:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f94:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f9c:	4b14      	ldr	r3, [pc, #80]	@ (8004ff0 <pvPortMalloc+0x260>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	4a13      	ldr	r2, [pc, #76]	@ (8004ff0 <pvPortMalloc+0x260>)
 8004fa4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004fa6:	f7fe f805 	bl	8002fb4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00b      	beq.n	8004fcc <pvPortMalloc+0x23c>
    __asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	60fb      	str	r3, [r7, #12]
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	e7fd      	b.n	8004fc8 <pvPortMalloc+0x238>
    return pvReturn;
 8004fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3738      	adds	r7, #56	@ 0x38
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20003028 	.word	0x20003028
 8004fdc:	2000302c 	.word	0x2000302c
 8004fe0:	20003020 	.word	0x20003020
 8004fe4:	20000820 	.word	0x20000820
 8004fe8:	2000301f 	.word	0x2000301f
 8004fec:	20003030 	.word	0x20003030
 8004ff0:	20003034 	.word	0x20003034

08004ff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d070      	beq.n	80050e8 <vPortFree+0xf4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005006:	2308      	movs	r3, #8
 8005008:	425b      	negs	r3, r3
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	4a36      	ldr	r2, [pc, #216]	@ (80050f0 <vPortFree+0xfc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d305      	bcc.n	8005028 <vPortFree+0x34>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	4a35      	ldr	r2, [pc, #212]	@ (80050f4 <vPortFree+0x100>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d801      	bhi.n	8005028 <vPortFree+0x34>
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <vPortFree+0x36>
 8005028:	2300      	movs	r3, #0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10b      	bne.n	8005046 <vPortFree+0x52>
    __asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	617b      	str	r3, [r7, #20]
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	e7fd      	b.n	8005042 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	db0b      	blt.n	8005066 <vPortFree+0x72>
    __asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	613b      	str	r3, [r7, #16]
}
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	e7fd      	b.n	8005062 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <vPortFree+0x92>
    __asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	60fb      	str	r3, [r7, #12]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	da2c      	bge.n	80050e8 <vPortFree+0xf4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d128      	bne.n	80050e8 <vPortFree+0xf4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	605a      	str	r2, [r3, #4]
                #if ( configHEAP_CLEAR_MEMORY_ON_FREE == 1 )
                {
                    /* Check for underflow as this can occur if xBlockSize is
                     * overwritten in a heap block. */
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2208      	movs	r2, #8
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d30a      	bcc.n	80050c2 <vPortFree+0xce>
                    {
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
 80050ac:	2208      	movs	r2, #8
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	1898      	adds	r0, r3, r2
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2208      	movs	r2, #8
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	461a      	mov	r2, r3
 80050bc:	2100      	movs	r1, #0
 80050be:	f002 fa9f 	bl	8007600 <memset>
                    }
                }
                #endif

                vTaskSuspendAll();
 80050c2:	f7fd ff69 	bl	8002f98 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <vPortFree+0x104>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4413      	add	r3, r2
 80050d0:	4a09      	ldr	r2, [pc, #36]	@ (80050f8 <vPortFree+0x104>)
 80050d2:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050d4:	69b8      	ldr	r0, [r7, #24]
 80050d6:	f000 f86d 	bl	80051b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80050da:	4b08      	ldr	r3, [pc, #32]	@ (80050fc <vPortFree+0x108>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3301      	adds	r3, #1
 80050e0:	4a06      	ldr	r2, [pc, #24]	@ (80050fc <vPortFree+0x108>)
 80050e2:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80050e4:	f7fd ff66 	bl	8002fb4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80050e8:	bf00      	nop
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20000820 	.word	0x20000820
 80050f4:	2000301f 	.word	0x2000301f
 80050f8:	2000302c 	.word	0x2000302c
 80050fc:	20003038 	.word	0x20003038

08005100 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005106:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800510a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800510c:	4b24      	ldr	r3, [pc, #144]	@ (80051a0 <prvHeapInit+0xa0>)
 800510e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3307      	adds	r3, #7
 800511e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0307 	bic.w	r3, r3, #7
 8005126:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	4a1c      	ldr	r2, [pc, #112]	@ (80051a0 <prvHeapInit+0xa0>)
 8005130:	4413      	add	r3, r2
 8005132:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4a1b      	ldr	r2, [pc, #108]	@ (80051a4 <prvHeapInit+0xa4>)
 8005138:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800513a:	4b1a      	ldr	r3, [pc, #104]	@ (80051a4 <prvHeapInit+0xa4>)
 800513c:	2200      	movs	r2, #0
 800513e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4413      	add	r3, r2
 8005146:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005148:	2208      	movs	r2, #8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f023 0307 	bic.w	r3, r3, #7
 8005156:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a13      	ldr	r2, [pc, #76]	@ (80051a8 <prvHeapInit+0xa8>)
 800515c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800515e:	4b12      	ldr	r3, [pc, #72]	@ (80051a8 <prvHeapInit+0xa8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8005166:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <prvHeapInit+0xa8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	1ad2      	subs	r2, r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800517c:	4b0a      	ldr	r3, [pc, #40]	@ (80051a8 <prvHeapInit+0xa8>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4a08      	ldr	r2, [pc, #32]	@ (80051ac <prvHeapInit+0xac>)
 800518a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4a07      	ldr	r2, [pc, #28]	@ (80051b0 <prvHeapInit+0xb0>)
 8005192:	6013      	str	r3, [r2, #0]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	20000820 	.word	0x20000820
 80051a4:	20003020 	.word	0x20003020
 80051a8:	20003028 	.word	0x20003028
 80051ac:	20003030 	.word	0x20003030
 80051b0:	2000302c 	.word	0x2000302c

080051b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80051bc:	4b36      	ldr	r3, [pc, #216]	@ (8005298 <prvInsertBlockIntoFreeList+0xe4>)
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	e002      	b.n	80051c8 <prvInsertBlockIntoFreeList+0x14>
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d8f7      	bhi.n	80051c2 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	4a30      	ldr	r2, [pc, #192]	@ (8005298 <prvInsertBlockIntoFreeList+0xe4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d018      	beq.n	800520c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4a2f      	ldr	r2, [pc, #188]	@ (800529c <prvInsertBlockIntoFreeList+0xe8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d305      	bcc.n	80051ee <prvInsertBlockIntoFreeList+0x3a>
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	4a2e      	ldr	r2, [pc, #184]	@ (80052a0 <prvInsertBlockIntoFreeList+0xec>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d801      	bhi.n	80051ee <prvInsertBlockIntoFreeList+0x3a>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <prvInsertBlockIntoFreeList+0x3c>
 80051ee:	2300      	movs	r3, #0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60fb      	str	r3, [r7, #12]
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4413      	add	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	429a      	cmp	r2, r3
 800521c:	d108      	bne.n	8005230 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	441a      	add	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	441a      	add	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d118      	bne.n	8005276 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	4b16      	ldr	r3, [pc, #88]	@ (80052a4 <prvInsertBlockIntoFreeList+0xf0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d00d      	beq.n	800526c <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	441a      	add	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e008      	b.n	800527e <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800526c:	4b0d      	ldr	r3, [pc, #52]	@ (80052a4 <prvInsertBlockIntoFreeList+0xf0>)
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e003      	b.n	800527e <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	429a      	cmp	r2, r3
 8005284:	d002      	beq.n	800528c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800528c:	bf00      	nop
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20003020 	.word	0x20003020
 800529c:	20000820 	.word	0x20000820
 80052a0:	2000301f 	.word	0x2000301f
 80052a4:	20003028 	.word	0x20003028

080052a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80052ac:	4803      	ldr	r0, [pc, #12]	@ (80052bc <_cbSendSystemDesc+0x14>)
 80052ae:	f001 fd8b 	bl	8006dc8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80052b2:	4803      	ldr	r0, [pc, #12]	@ (80052c0 <_cbSendSystemDesc+0x18>)
 80052b4:	f001 fd88 	bl	8006dc8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80052b8:	bf00      	nop
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	080077d4 	.word	0x080077d4
 80052c0:	08007810 	.word	0x08007810

080052c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80052c8:	4b06      	ldr	r3, [pc, #24]	@ (80052e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	4b05      	ldr	r3, [pc, #20]	@ (80052e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	4b05      	ldr	r3, [pc, #20]	@ (80052e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80052d2:	4a06      	ldr	r2, [pc, #24]	@ (80052ec <SEGGER_SYSVIEW_Conf+0x28>)
 80052d4:	f001 f9fe 	bl	80066d4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80052d8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80052dc:	f001 fa3e 	bl	800675c <SEGGER_SYSVIEW_SetRAMBase>
}
 80052e0:	bf00      	nop
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20000000 	.word	0x20000000
 80052e8:	080052a9 	.word	0x080052a9
 80052ec:	080078b0 	.word	0x080078b0

080052f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	e033      	b.n	8005364 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80052fc:	491e      	ldr	r1, [pc, #120]	@ (8005378 <_cbSendTaskList+0x88>)
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	6818      	ldr	r0, [r3, #0]
 800530c:	491a      	ldr	r1, [pc, #104]	@ (8005378 <_cbSendTaskList+0x88>)
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	3304      	adds	r3, #4
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	4c16      	ldr	r4, [pc, #88]	@ (8005378 <_cbSendTaskList+0x88>)
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4423      	add	r3, r4
 800532c:	3308      	adds	r3, #8
 800532e:	681c      	ldr	r4, [r3, #0]
 8005330:	4d11      	ldr	r5, [pc, #68]	@ (8005378 <_cbSendTaskList+0x88>)
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	442b      	add	r3, r5
 800533e:	330c      	adds	r3, #12
 8005340:	681d      	ldr	r5, [r3, #0]
 8005342:	4e0d      	ldr	r6, [pc, #52]	@ (8005378 <_cbSendTaskList+0x88>)
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4433      	add	r3, r6
 8005350:	3310      	adds	r3, #16
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	462b      	mov	r3, r5
 8005358:	4622      	mov	r2, r4
 800535a:	f000 f993 	bl	8005684 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3301      	adds	r3, #1
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	4b05      	ldr	r3, [pc, #20]	@ (800537c <_cbSendTaskList+0x8c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	429a      	cmp	r2, r3
 800536c:	d3c6      	bcc.n	80052fc <_cbSendTaskList+0xc>
  }
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005378:	2000303c 	.word	0x2000303c
 800537c:	200030dc 	.word	0x200030dc

08005380 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005384:	b086      	sub	sp, #24
 8005386:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005388:	f7fd ff4e 	bl	8003228 <xTaskGetTickCountFromISR>
 800538c:	e9c7 0104 	strd	r0, r1, [r7, #16]
  Time *= portTICK_PERIOD_MS;
 8005390:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005394:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005398:	f04f 0000 	mov.w	r0, #0
 800539c:	f04f 0100 	mov.w	r1, #0
 80053a0:	0099      	lsls	r1, r3, #2
 80053a2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80053a6:	0090      	lsls	r0, r2, #2
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	eb12 0801 	adds.w	r8, r2, r1
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	eb43 0901 	adc.w	r9, r3, r1
 80053b8:	eb18 0308 	adds.w	r3, r8, r8
 80053bc:	603b      	str	r3, [r7, #0]
 80053be:	eb49 0309 	adc.w	r3, r9, r9
 80053c2:	607b      	str	r3, [r7, #4]
 80053c4:	e9d7 8900 	ldrd	r8, r9, [r7]
 80053c8:	e9c7 8904 	strd	r8, r9, [r7, #16]
  Time *= 1000;
 80053cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	f04f 0800 	mov.w	r8, #0
 80053d8:	f04f 0900 	mov.w	r9, #0
 80053dc:	ea4f 1943 	mov.w	r9, r3, lsl #5
 80053e0:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 80053e4:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80053e8:	4642      	mov	r2, r8
 80053ea:	464b      	mov	r3, r9
 80053ec:	1a14      	subs	r4, r2, r0
 80053ee:	eb63 0501 	sbc.w	r5, r3, r1
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	00ab      	lsls	r3, r5, #2
 80053fc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005400:	00a2      	lsls	r2, r4, #2
 8005402:	4614      	mov	r4, r2
 8005404:	461d      	mov	r5, r3
 8005406:	eb14 0a00 	adds.w	sl, r4, r0
 800540a:	eb45 0b01 	adc.w	fp, r5, r1
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800541a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800541e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005422:	4692      	mov	sl, r2
 8005424:	469b      	mov	fp, r3
 8005426:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  return Time;
 800542a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800542e:	4610      	mov	r0, r2
 8005430:	4619      	mov	r1, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800543c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800544a:	2205      	movs	r2, #5
 800544c:	492b      	ldr	r1, [pc, #172]	@ (80054fc <SYSVIEW_AddTask+0xc0>)
 800544e:	68b8      	ldr	r0, [r7, #8]
 8005450:	f002 f8c6 	bl	80075e0 <memcmp>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d04b      	beq.n	80054f2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800545a:	4b29      	ldr	r3, [pc, #164]	@ (8005500 <SYSVIEW_AddTask+0xc4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b07      	cmp	r3, #7
 8005460:	d903      	bls.n	800546a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005462:	4828      	ldr	r0, [pc, #160]	@ (8005504 <SYSVIEW_AddTask+0xc8>)
 8005464:	f002 f860 	bl	8007528 <SEGGER_SYSVIEW_Warn>
    return;
 8005468:	e044      	b.n	80054f4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800546a:	4b25      	ldr	r3, [pc, #148]	@ (8005500 <SYSVIEW_AddTask+0xc4>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4926      	ldr	r1, [pc, #152]	@ (8005508 <SYSVIEW_AddTask+0xcc>)
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800547e:	4b20      	ldr	r3, [pc, #128]	@ (8005500 <SYSVIEW_AddTask+0xc4>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4921      	ldr	r1, [pc, #132]	@ (8005508 <SYSVIEW_AddTask+0xcc>)
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	3304      	adds	r3, #4
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005494:	4b1a      	ldr	r3, [pc, #104]	@ (8005500 <SYSVIEW_AddTask+0xc4>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	491b      	ldr	r1, [pc, #108]	@ (8005508 <SYSVIEW_AddTask+0xcc>)
 800549a:	4613      	mov	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	3308      	adds	r3, #8
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80054aa:	4b15      	ldr	r3, [pc, #84]	@ (8005500 <SYSVIEW_AddTask+0xc4>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4916      	ldr	r1, [pc, #88]	@ (8005508 <SYSVIEW_AddTask+0xcc>)
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	330c      	adds	r3, #12
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80054c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005500 <SYSVIEW_AddTask+0xc4>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4910      	ldr	r1, [pc, #64]	@ (8005508 <SYSVIEW_AddTask+0xcc>)
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	3310      	adds	r3, #16
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80054d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005500 <SYSVIEW_AddTask+0xc4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3301      	adds	r3, #1
 80054dc:	4a08      	ldr	r2, [pc, #32]	@ (8005500 <SYSVIEW_AddTask+0xc4>)
 80054de:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f8ca 	bl	8005684 <SYSVIEW_SendTaskInfo>
 80054f0:	e000      	b.n	80054f4 <SYSVIEW_AddTask+0xb8>
    return;
 80054f2:	bf00      	nop

}
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	08007820 	.word	0x08007820
 8005500:	200030dc 	.word	0x200030dc
 8005504:	08007828 	.word	0x08007828
 8005508:	2000303c 	.word	0x2000303c

0800550c <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8005514:	4b59      	ldr	r3, [pc, #356]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80ab 	beq.w	8005674 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e00d      	b.n	8005540 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8005524:	4956      	ldr	r1, [pc, #344]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	429a      	cmp	r2, r3
 8005538:	d008      	beq.n	800554c <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	4b4e      	ldr	r3, [pc, #312]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	429a      	cmp	r2, r3
 8005548:	d3ec      	bcc.n	8005524 <SYSVIEW_DeleteTask+0x18>
 800554a:	e000      	b.n	800554e <SYSVIEW_DeleteTask+0x42>
      break;
 800554c:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800554e:	4b4b      	ldr	r3, [pc, #300]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3b01      	subs	r3, #1
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	429a      	cmp	r2, r3
 8005558:	d111      	bne.n	800557e <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4a46      	ldr	r2, [pc, #280]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 8005566:	4413      	add	r3, r2
 8005568:	2214      	movs	r2, #20
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f002 f847 	bl	8007600 <memset>
    _NumTasks--;
 8005572:	4b42      	ldr	r3, [pc, #264]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3b01      	subs	r3, #1
 8005578:	4a40      	ldr	r2, [pc, #256]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e07b      	b.n	8005676 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800557e:	4b3f      	ldr	r3, [pc, #252]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	429a      	cmp	r2, r3
 8005586:	d276      	bcs.n	8005676 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005588:	4b3c      	ldr	r3, [pc, #240]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	493c      	ldr	r1, [pc, #240]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	6819      	ldr	r1, [r3, #0]
 800559c:	4838      	ldr	r0, [pc, #224]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4403      	add	r3, r0
 80055aa:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80055ac:	4b33      	ldr	r3, [pc, #204]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	1e5a      	subs	r2, r3, #1
 80055b2:	4933      	ldr	r1, [pc, #204]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	3304      	adds	r3, #4
 80055c0:	6819      	ldr	r1, [r3, #0]
 80055c2:	482f      	ldr	r0, [pc, #188]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4403      	add	r3, r0
 80055d0:	3304      	adds	r3, #4
 80055d2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80055d4:	4b29      	ldr	r3, [pc, #164]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	1e5a      	subs	r2, r3, #1
 80055da:	4929      	ldr	r1, [pc, #164]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	3308      	adds	r3, #8
 80055e8:	6819      	ldr	r1, [r3, #0]
 80055ea:	4825      	ldr	r0, [pc, #148]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4403      	add	r3, r0
 80055f8:	3308      	adds	r3, #8
 80055fa:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80055fc:	4b1f      	ldr	r3, [pc, #124]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	1e5a      	subs	r2, r3, #1
 8005602:	491f      	ldr	r1, [pc, #124]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	330c      	adds	r3, #12
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	481b      	ldr	r0, [pc, #108]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4403      	add	r3, r0
 8005620:	330c      	adds	r3, #12
 8005622:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005624:	4b15      	ldr	r3, [pc, #84]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	1e5a      	subs	r2, r3, #1
 800562a:	4915      	ldr	r1, [pc, #84]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	3310      	adds	r3, #16
 8005638:	6819      	ldr	r1, [r3, #0]
 800563a:	4811      	ldr	r0, [pc, #68]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4403      	add	r3, r0
 8005648:	3310      	adds	r3, #16
 800564a:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	1e5a      	subs	r2, r3, #1
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4a09      	ldr	r2, [pc, #36]	@ (8005680 <SYSVIEW_DeleteTask+0x174>)
 800565c:	4413      	add	r3, r2
 800565e:	2214      	movs	r2, #20
 8005660:	2100      	movs	r1, #0
 8005662:	4618      	mov	r0, r3
 8005664:	f001 ffcc 	bl	8007600 <memset>
    _NumTasks--;
 8005668:	4b04      	ldr	r3, [pc, #16]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3b01      	subs	r3, #1
 800566e:	4a03      	ldr	r2, [pc, #12]	@ (800567c <SYSVIEW_DeleteTask+0x170>)
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e000      	b.n	8005676 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005674:	bf00      	nop
  }
}
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	200030dc 	.word	0x200030dc
 8005680:	2000303c 	.word	0x2000303c

08005684 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	@ 0x28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005692:	f107 0310 	add.w	r3, r7, #16
 8005696:	2218      	movs	r2, #24
 8005698:	2100      	movs	r1, #0
 800569a:	4618      	mov	r0, r3
 800569c:	f001 ffb0 	bl	8007600 <memset>
  TaskInfo.TaskID     = TaskID;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80056b4:	f107 0310 	add.w	r3, r7, #16
 80056b8:	4618      	mov	r0, r3
 80056ba:	f001 fa8d 	bl	8006bd8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80056be:	bf00      	nop
 80056c0:	3728      	adds	r7, #40	@ 0x28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80056ce:	4b26      	ldr	r3, [pc, #152]	@ (8005768 <_DoInit+0xa0>)
 80056d0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80056d2:	22a8      	movs	r2, #168	@ 0xa8
 80056d4:	2100      	movs	r1, #0
 80056d6:	6838      	ldr	r0, [r7, #0]
 80056d8:	f001 ff92 	bl	8007600 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2203      	movs	r2, #3
 80056e0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2203      	movs	r2, #3
 80056e6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	4a20      	ldr	r2, [pc, #128]	@ (800576c <_DoInit+0xa4>)
 80056ec:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005770 <_DoInit+0xa8>)
 80056f2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056fa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2200      	movs	r2, #0
 8005700:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2200      	movs	r2, #0
 8005706:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	4a16      	ldr	r2, [pc, #88]	@ (800576c <_DoInit+0xa4>)
 8005712:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	4a17      	ldr	r2, [pc, #92]	@ (8005774 <_DoInit+0xac>)
 8005718:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2210      	movs	r2, #16
 800571e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2200      	movs	r2, #0
 800572a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005732:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	e00c      	b.n	8005756 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f1c3 030f 	rsb	r3, r3, #15
 8005742:	4a0d      	ldr	r2, [pc, #52]	@ (8005778 <_DoInit+0xb0>)
 8005744:	5cd1      	ldrb	r1, [r2, r3]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	460a      	mov	r2, r1
 800574e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3301      	adds	r3, #1
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b0f      	cmp	r3, #15
 800575a:	d9ef      	bls.n	800573c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800575c:	f3bf 8f5f 	dmb	sy
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	200030e0 	.word	0x200030e0
 800576c:	08007878 	.word	0x08007878
 8005770:	20003188 	.word	0x20003188
 8005774:	20003588 	.word	0x20003588
 8005778:	080078b8 	.word	0x080078b8

0800577c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b08c      	sub	sp, #48	@ 0x30
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005788:	4b3e      	ldr	r3, [pc, #248]	@ (8005884 <SEGGER_RTT_ReadNoLock+0x108>)
 800578a:	623b      	str	r3, [r7, #32]
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b53      	cmp	r3, #83	@ 0x53
 8005794:	d001      	beq.n	800579a <SEGGER_RTT_ReadNoLock+0x1e>
 8005796:	f7ff ff97 	bl	80056c8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4613      	mov	r3, r2
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	4413      	add	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	3360      	adds	r3, #96	@ 0x60
 80057a6:	4a37      	ldr	r2, [pc, #220]	@ (8005884 <SEGGER_RTT_ReadNoLock+0x108>)
 80057a8:	4413      	add	r3, r2
 80057aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80057bc:	2300      	movs	r3, #0
 80057be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80057c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d92b      	bls.n	8005820 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4293      	cmp	r3, r2
 80057d8:	bf28      	it	cs
 80057da:	4613      	movcs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	4413      	add	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	6939      	ldr	r1, [r7, #16]
 80057ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057ee:	f001 ff33 	bl	8007658 <memcpy>
    NumBytesRead += NumBytesRem;
 80057f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	4413      	add	r3, r2
 80057f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80057fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800580a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	4413      	add	r3, r2
 8005810:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005818:	429a      	cmp	r2, r3
 800581a:	d101      	bne.n	8005820 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800581c:	2300      	movs	r3, #0
 800581e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4293      	cmp	r3, r2
 800582e:	bf28      	it	cs
 8005830:	4613      	movcs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d019      	beq.n	800586e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005840:	4413      	add	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	6939      	ldr	r1, [r7, #16]
 8005848:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800584a:	f001 ff05 	bl	8007658 <memcpy>
    NumBytesRead += NumBytesRem;
 800584e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	4413      	add	r3, r2
 8005854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	4413      	add	r3, r2
 800585c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800586e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005878:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800587a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800587c:	4618      	mov	r0, r3
 800587e:	3730      	adds	r7, #48	@ 0x30
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	200030e0 	.word	0x200030e0

08005888 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005896:	4b3d      	ldr	r3, [pc, #244]	@ (800598c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b53      	cmp	r3, #83	@ 0x53
 80058a2:	d001      	beq.n	80058a8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80058a4:	f7ff ff10 	bl	80056c8 <_DoInit>
  SEGGER_RTT_LOCK();
 80058a8:	f3ef 8311 	mrs	r3, BASEPRI
 80058ac:	f04f 0120 	mov.w	r1, #32
 80058b0:	f381 8811 	msr	BASEPRI, r1
 80058b4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058b6:	4b35      	ldr	r3, [pc, #212]	@ (800598c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80058b8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80058be:	6939      	ldr	r1, [r7, #16]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	4613      	mov	r3, r2
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	4413      	add	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	440b      	add	r3, r1
 80058ce:	3304      	adds	r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	3301      	adds	r3, #1
 80058da:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	dbeb      	blt.n	80058be <SEGGER_RTT_AllocUpBuffer+0x36>
 80058e6:	e000      	b.n	80058ea <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80058e8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	da3f      	bge.n	8005974 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80058f4:	6939      	ldr	r1, [r7, #16]
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	4613      	mov	r3, r2
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	4413      	add	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	440b      	add	r3, r1
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005908:	6939      	ldr	r1, [r7, #16]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	4613      	mov	r3, r2
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	4413      	add	r3, r2
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	440b      	add	r3, r1
 8005918:	3304      	adds	r3, #4
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800591e:	6939      	ldr	r1, [r7, #16]
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	4613      	mov	r3, r2
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	4413      	add	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	440b      	add	r3, r1
 800592c:	3320      	adds	r3, #32
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005932:	6939      	ldr	r1, [r7, #16]
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	4613      	mov	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4413      	add	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	440b      	add	r3, r1
 8005940:	3328      	adds	r3, #40	@ 0x28
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005946:	6939      	ldr	r1, [r7, #16]
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	4613      	mov	r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	4413      	add	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	440b      	add	r3, r1
 8005954:	3324      	adds	r3, #36	@ 0x24
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800595a:	6939      	ldr	r1, [r7, #16]
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	4613      	mov	r3, r2
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	4413      	add	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	440b      	add	r3, r1
 8005968:	332c      	adds	r3, #44	@ 0x2c
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800596e:	f3bf 8f5f 	dmb	sy
 8005972:	e002      	b.n	800597a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005978:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005980:	69fb      	ldr	r3, [r7, #28]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3720      	adds	r7, #32
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200030e0 	.word	0x200030e0

08005990 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	@ 0x28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800599e:	4b21      	ldr	r3, [pc, #132]	@ (8005a24 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80059a0:	623b      	str	r3, [r7, #32]
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b53      	cmp	r3, #83	@ 0x53
 80059aa:	d001      	beq.n	80059b0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80059ac:	f7ff fe8c 	bl	80056c8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a24 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80059b2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d82c      	bhi.n	8005a14 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80059ba:	f3ef 8311 	mrs	r3, BASEPRI
 80059be:	f04f 0120 	mov.w	r1, #32
 80059c2:	f381 8811 	msr	BASEPRI, r1
 80059c6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4613      	mov	r3, r2
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	4413      	add	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	3360      	adds	r3, #96	@ 0x60
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00e      	beq.n	80059fe <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2200      	movs	r2, #0
 80059fc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a02:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a04:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a12:	e002      	b.n	8005a1a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005a14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a18:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3728      	adds	r7, #40	@ 0x28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	200030e0 	.word	0x200030e0

08005a28 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d105      	bne.n	8005a46 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	60fa      	str	r2, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	e022      	b.n	8005a8c <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	60fa      	str	r2, [r7, #12]
 8005a50:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b80      	cmp	r3, #128	@ 0x80
 8005a56:	d90a      	bls.n	8005a6e <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005a58:	2380      	movs	r3, #128	@ 0x80
 8005a5a:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005a5c:	e007      	b.n	8005a6e <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	1c53      	adds	r3, r2, #1
 8005a62:	60bb      	str	r3, [r7, #8]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1c59      	adds	r1, r3, #1
 8005a68:	60f9      	str	r1, [r7, #12]
 8005a6a:	7812      	ldrb	r2, [r2, #0]
 8005a6c:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	1e5a      	subs	r2, r3, #1
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <_EncodeStr+0x58>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1ee      	bne.n	8005a5e <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3307      	adds	r3, #7
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005aba:	4b34      	ldr	r3, [pc, #208]	@ (8005b8c <_HandleIncomingPacket+0xd8>)
 8005abc:	7e1b      	ldrb	r3, [r3, #24]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	1cfb      	adds	r3, r7, #3
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f7ff fe59 	bl	800577c <SEGGER_RTT_ReadNoLock>
 8005aca:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d057      	beq.n	8005b82 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	2b80      	cmp	r3, #128	@ 0x80
 8005ad6:	d031      	beq.n	8005b3c <_HandleIncomingPacket+0x88>
 8005ad8:	2b80      	cmp	r3, #128	@ 0x80
 8005ada:	dc40      	bgt.n	8005b5e <_HandleIncomingPacket+0xaa>
 8005adc:	2b07      	cmp	r3, #7
 8005ade:	dc15      	bgt.n	8005b0c <_HandleIncomingPacket+0x58>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dd3c      	ble.n	8005b5e <_HandleIncomingPacket+0xaa>
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	2b06      	cmp	r3, #6
 8005ae8:	d839      	bhi.n	8005b5e <_HandleIncomingPacket+0xaa>
 8005aea:	a201      	add	r2, pc, #4	@ (adr r2, 8005af0 <_HandleIncomingPacket+0x3c>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b13 	.word	0x08005b13
 8005af4:	08005b19 	.word	0x08005b19
 8005af8:	08005b1f 	.word	0x08005b1f
 8005afc:	08005b25 	.word	0x08005b25
 8005b00:	08005b2b 	.word	0x08005b2b
 8005b04:	08005b31 	.word	0x08005b31
 8005b08:	08005b37 	.word	0x08005b37
 8005b0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b0e:	d033      	beq.n	8005b78 <_HandleIncomingPacket+0xc4>
 8005b10:	e025      	b.n	8005b5e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005b12:	f000 fee7 	bl	80068e4 <SEGGER_SYSVIEW_Start>
      break;
 8005b16:	e034      	b.n	8005b82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005b18:	f000 ff9e 	bl	8006a58 <SEGGER_SYSVIEW_Stop>
      break;
 8005b1c:	e031      	b.n	8005b82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005b1e:	f001 f977 	bl	8006e10 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005b22:	e02e      	b.n	8005b82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005b24:	f001 f93c 	bl	8006da0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005b28:	e02b      	b.n	8005b82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005b2a:	f000 ffbb 	bl	8006aa4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005b2e:	e028      	b.n	8005b82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005b30:	f001 fca8 	bl	8007484 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005b34:	e025      	b.n	8005b82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005b36:	f001 fc87 	bl	8007448 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005b3a:	e022      	b.n	8005b82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b3c:	4b13      	ldr	r3, [pc, #76]	@ (8005b8c <_HandleIncomingPacket+0xd8>)
 8005b3e:	7e1b      	ldrb	r3, [r3, #24]
 8005b40:	4618      	mov	r0, r3
 8005b42:	1cfb      	adds	r3, r7, #3
 8005b44:	2201      	movs	r2, #1
 8005b46:	4619      	mov	r1, r3
 8005b48:	f7ff fe18 	bl	800577c <SEGGER_RTT_ReadNoLock>
 8005b4c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d013      	beq.n	8005b7c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 fbec 	bl	8007334 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005b5c:	e00e      	b.n	8005b7c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	b25b      	sxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	da0c      	bge.n	8005b80 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b66:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <_HandleIncomingPacket+0xd8>)
 8005b68:	7e1b      	ldrb	r3, [r3, #24]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	1cfb      	adds	r3, r7, #3
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4619      	mov	r1, r3
 8005b72:	f7ff fe03 	bl	800577c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005b76:	e003      	b.n	8005b80 <_HandleIncomingPacket+0xcc>
      break;
 8005b78:	bf00      	nop
 8005b7a:	e002      	b.n	8005b82 <_HandleIncomingPacket+0xce>
      break;
 8005b7c:	bf00      	nop
 8005b7e:	e000      	b.n	8005b82 <_HandleIncomingPacket+0xce>
      break;
 8005b80:	bf00      	nop
    }
  }
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	200045a0 	.word	0x200045a0

08005b90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08c      	sub	sp, #48	@ 0x30
 8005b94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005b96:	2301      	movs	r3, #1
 8005b98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005b9a:	1d3b      	adds	r3, r7, #4
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ba4:	4b31      	ldr	r3, [pc, #196]	@ (8005c6c <_TrySendOverflowPacket+0xdc>)
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005baa:	e00b      	b.n	8005bc4 <_TrySendOverflowPacket+0x34>
 8005bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb2:	1c59      	adds	r1, r3, #1
 8005bb4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005bb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc0:	09db      	lsrs	r3, r3, #7
 8005bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bc8:	d8f0      	bhi.n	8005bac <_TrySendOverflowPacket+0x1c>
 8005bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005bda:	4b25      	ldr	r3, [pc, #148]	@ (8005c70 <_TrySendOverflowPacket+0xe0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005be0:	4b22      	ldr	r3, [pc, #136]	@ (8005c6c <_TrySendOverflowPacket+0xdc>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	e00b      	b.n	8005c0c <_TrySendOverflowPacket+0x7c>
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	09db      	lsrs	r3, r3, #7
 8005c0a:	623b      	str	r3, [r7, #32]
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c10:	d8f0      	bhi.n	8005bf4 <_TrySendOverflowPacket+0x64>
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c18:	6a3a      	ldr	r2, [r7, #32]
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005c22:	4b12      	ldr	r3, [pc, #72]	@ (8005c6c <_TrySendOverflowPacket+0xdc>)
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	4618      	mov	r0, r3
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	461a      	mov	r2, r3
 8005c30:	1d3b      	adds	r3, r7, #4
 8005c32:	4619      	mov	r1, r3
 8005c34:	f7fa fad4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d009      	beq.n	8005c56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005c42:	4a0a      	ldr	r2, [pc, #40]	@ (8005c6c <_TrySendOverflowPacket+0xdc>)
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005c48:	4b08      	ldr	r3, [pc, #32]	@ (8005c6c <_TrySendOverflowPacket+0xdc>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	4b06      	ldr	r3, [pc, #24]	@ (8005c6c <_TrySendOverflowPacket+0xdc>)
 8005c52:	701a      	strb	r2, [r3, #0]
 8005c54:	e004      	b.n	8005c60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005c56:	4b05      	ldr	r3, [pc, #20]	@ (8005c6c <_TrySendOverflowPacket+0xdc>)
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	4a03      	ldr	r2, [pc, #12]	@ (8005c6c <_TrySendOverflowPacket+0xdc>)
 8005c5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005c60:	693b      	ldr	r3, [r7, #16]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3730      	adds	r7, #48	@ 0x30
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200045a0 	.word	0x200045a0
 8005c70:	e0001004 	.word	0xe0001004

08005c74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	@ 0x28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005c80:	4b98      	ldr	r3, [pc, #608]	@ (8005ee4 <_SendPacket+0x270>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d010      	beq.n	8005caa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005c88:	4b96      	ldr	r3, [pc, #600]	@ (8005ee4 <_SendPacket+0x270>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 812d 	beq.w	8005eec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005c92:	4b94      	ldr	r3, [pc, #592]	@ (8005ee4 <_SendPacket+0x270>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d109      	bne.n	8005cae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005c9a:	f7ff ff79 	bl	8005b90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005c9e:	4b91      	ldr	r3, [pc, #580]	@ (8005ee4 <_SendPacket+0x270>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	f040 8124 	bne.w	8005ef0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005ca8:	e001      	b.n	8005cae <_SendPacket+0x3a>
    goto Send;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <_SendPacket+0x3c>
Send:
 8005cae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b1f      	cmp	r3, #31
 8005cb4:	d809      	bhi.n	8005cca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8005ee4 <_SendPacket+0x270>)
 8005cb8:	69da      	ldr	r2, [r3, #28]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f040 8115 	bne.w	8005ef4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b17      	cmp	r3, #23
 8005cce:	d807      	bhi.n	8005ce0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e0c4      	b.n	8005e6a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cec:	d912      	bls.n	8005d14 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	09da      	lsrs	r2, r3, #7
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	3a01      	subs	r2, #1
 8005d06:	60fa      	str	r2, [r7, #12]
 8005d08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	e006      	b.n	8005d22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b7e      	cmp	r3, #126	@ 0x7e
 8005d26:	d807      	bhi.n	8005d38 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e098      	b.n	8005e6a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d3e:	d212      	bcs.n	8005d66 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	09da      	lsrs	r2, r3, #7
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	3a01      	subs	r2, #1
 8005d58:	60fa      	str	r2, [r7, #12]
 8005d5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	e081      	b.n	8005e6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d6c:	d21d      	bcs.n	8005daa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	0b9a      	lsrs	r2, r3, #14
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	09db      	lsrs	r3, r3, #7
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	3a01      	subs	r2, #1
 8005d88:	60fa      	str	r2, [r7, #12]
 8005d8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	3a01      	subs	r2, #1
 8005d9c:	60fa      	str	r2, [r7, #12]
 8005d9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	e05f      	b.n	8005e6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005db0:	d228      	bcs.n	8005e04 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	0d5a      	lsrs	r2, r3, #21
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	0b9b      	lsrs	r3, r3, #14
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	3a01      	subs	r2, #1
 8005dcc:	60fa      	str	r2, [r7, #12]
 8005dce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	09db      	lsrs	r3, r3, #7
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	3a01      	subs	r2, #1
 8005de2:	60fa      	str	r2, [r7, #12]
 8005de4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	3a01      	subs	r2, #1
 8005df6:	60fa      	str	r2, [r7, #12]
 8005df8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	e032      	b.n	8005e6a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	0f1a      	lsrs	r2, r3, #28
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	0d5b      	lsrs	r3, r3, #21
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	3a01      	subs	r2, #1
 8005e1e:	60fa      	str	r2, [r7, #12]
 8005e20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	0b9b      	lsrs	r3, r3, #14
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	3a01      	subs	r2, #1
 8005e34:	60fa      	str	r2, [r7, #12]
 8005e36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	09db      	lsrs	r3, r3, #7
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	3a01      	subs	r2, #1
 8005e4a:	60fa      	str	r2, [r7, #12]
 8005e4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	3a01      	subs	r2, #1
 8005e5e:	60fa      	str	r2, [r7, #12]
 8005e60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ee8 <_SendPacket+0x274>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005e70:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee4 <_SendPacket+0x270>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	623b      	str	r3, [r7, #32]
 8005e82:	e00b      	b.n	8005e9c <_SendPacket+0x228>
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8a:	1c59      	adds	r1, r3, #1
 8005e8c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	09db      	lsrs	r3, r3, #7
 8005e9a:	623b      	str	r3, [r7, #32]
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ea0:	d8f0      	bhi.n	8005e84 <_SendPacket+0x210>
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ea8:	6a3a      	ldr	r2, [r7, #32]
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee4 <_SendPacket+0x270>)
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68f9      	ldr	r1, [r7, #12]
 8005ec2:	f7fa f98d 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ec6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005ece:	4a05      	ldr	r2, [pc, #20]	@ (8005ee4 <_SendPacket+0x270>)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	60d3      	str	r3, [r2, #12]
 8005ed4:	e00f      	b.n	8005ef6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005ed6:	4b03      	ldr	r3, [pc, #12]	@ (8005ee4 <_SendPacket+0x270>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	3301      	adds	r3, #1
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	4b01      	ldr	r3, [pc, #4]	@ (8005ee4 <_SendPacket+0x270>)
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	e008      	b.n	8005ef6 <_SendPacket+0x282>
 8005ee4:	200045a0 	.word	0x200045a0
 8005ee8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005eec:	bf00      	nop
 8005eee:	e002      	b.n	8005ef6 <_SendPacket+0x282>
      goto SendDone;
 8005ef0:	bf00      	nop
 8005ef2:	e000      	b.n	8005ef6 <_SendPacket+0x282>
      goto SendDone;
 8005ef4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ef6:	4b14      	ldr	r3, [pc, #80]	@ (8005f48 <_SendPacket+0x2d4>)
 8005ef8:	7e1b      	ldrb	r3, [r3, #24]
 8005efa:	4619      	mov	r1, r3
 8005efc:	4a13      	ldr	r2, [pc, #76]	@ (8005f4c <_SendPacket+0x2d8>)
 8005efe:	460b      	mov	r3, r1
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	440b      	add	r3, r1
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4413      	add	r3, r2
 8005f08:	336c      	adds	r3, #108	@ 0x6c
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f48 <_SendPacket+0x2d4>)
 8005f0e:	7e1b      	ldrb	r3, [r3, #24]
 8005f10:	4618      	mov	r0, r3
 8005f12:	490e      	ldr	r1, [pc, #56]	@ (8005f4c <_SendPacket+0x2d8>)
 8005f14:	4603      	mov	r3, r0
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	4403      	add	r3, r0
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	440b      	add	r3, r1
 8005f1e:	3370      	adds	r3, #112	@ 0x70
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d00b      	beq.n	8005f3e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005f26:	4b08      	ldr	r3, [pc, #32]	@ (8005f48 <_SendPacket+0x2d4>)
 8005f28:	789b      	ldrb	r3, [r3, #2]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d107      	bne.n	8005f3e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005f2e:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <_SendPacket+0x2d4>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005f34:	f7ff fdbe 	bl	8005ab4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005f38:	4b03      	ldr	r3, [pc, #12]	@ (8005f48 <_SendPacket+0x2d4>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005f3e:	bf00      	nop
 8005f40:	3728      	adds	r7, #40	@ 0x28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	200045a0 	.word	0x200045a0
 8005f4c:	200030e0 	.word	0x200030e0

08005f50 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	@ 0x28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	3301      	adds	r3, #1
 8005f66:	2b80      	cmp	r3, #128	@ 0x80
 8005f68:	d80a      	bhi.n	8005f80 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	1c59      	adds	r1, r3, #1
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6051      	str	r1, [r2, #4]
 8005f74:	78fa      	ldrb	r2, [r7, #3]
 8005f76:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b80      	cmp	r3, #128	@ 0x80
 8005f86:	d15a      	bne.n	800603e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	623b      	str	r3, [r7, #32]
 8005fa8:	e00b      	b.n	8005fc2 <_StoreChar+0x72>
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	1c59      	adds	r1, r3, #1
 8005fb2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005fb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	09db      	lsrs	r3, r3, #7
 8005fc0:	623b      	str	r3, [r7, #32]
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fc6:	d8f0      	bhi.n	8005faa <_StoreChar+0x5a>
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fce:	6a3a      	ldr	r2, [r7, #32]
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	61fb      	str	r3, [r7, #28]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	e00b      	b.n	8005ffa <_StoreChar+0xaa>
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	1c59      	adds	r1, r3, #1
 8005fea:	61f9      	str	r1, [r7, #28]
 8005fec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	09db      	lsrs	r3, r3, #7
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ffe:	d8f0      	bhi.n	8005fe2 <_StoreChar+0x92>
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	61fa      	str	r2, [r7, #28]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	221a      	movs	r2, #26
 8006016:	6939      	ldr	r1, [r7, #16]
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff fe2b 	bl	8005c74 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff fd39 	bl	8005a9a <_PreparePacket>
 8006028:	4602      	mov	r2, r0
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	611a      	str	r2, [r3, #16]
  }
}
 800603e:	bf00      	nop
 8006040:	3728      	adds	r7, #40	@ 0x28
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	@ 0x28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800605a:	2301      	movs	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800605e:	2301      	movs	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006062:	e007      	b.n	8006074 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	623b      	str	r3, [r7, #32]
    Width++;
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	3301      	adds	r3, #1
 8006072:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006074:	6a3a      	ldr	r2, [r7, #32]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	429a      	cmp	r2, r3
 800607a:	d2f3      	bcs.n	8006064 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	429a      	cmp	r2, r3
 8006082:	d901      	bls.n	8006088 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d000      	beq.n	8006094 <_PrintUnsigned+0x4c>
 8006092:	e01f      	b.n	80060d4 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01c      	beq.n	80060d4 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800609a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <_PrintUnsigned+0x68>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <_PrintUnsigned+0x68>
        c = '0';
 80060aa:	2330      	movs	r3, #48	@ 0x30
 80060ac:	76fb      	strb	r3, [r7, #27]
 80060ae:	e001      	b.n	80060b4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80060b0:	2320      	movs	r3, #32
 80060b2:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060b4:	e007      	b.n	80060c6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 80060b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b8:	3b01      	subs	r3, #1
 80060ba:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80060bc:	7efb      	ldrb	r3, [r7, #27]
 80060be:	4619      	mov	r1, r3
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7ff ff45 	bl	8005f50 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <_PrintUnsigned+0x8c>
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d3f0      	bcc.n	80060b6 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d903      	bls.n	80060e2 <_PrintUnsigned+0x9a>
      NumDigits--;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	3b01      	subs	r3, #1
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	e009      	b.n	80060f6 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ea:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d200      	bcs.n	80060f6 <_PrintUnsigned+0xae>
        break;
 80060f4:	e005      	b.n	8006102 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	fb02 f303 	mul.w	r3, r2, r3
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006100:	e7e8      	b.n	80060d4 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	fbb2 f3f3 	udiv	r3, r2, r3
 800610a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006110:	fb02 f303 	mul.w	r3, r2, r3
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800611a:	4a15      	ldr	r2, [pc, #84]	@ (8006170 <_PrintUnsigned+0x128>)
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	4619      	mov	r1, r3
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f7ff ff13 	bl	8005f50 <_StoreChar>
    Digit /= Base;
 800612a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e3      	bne.n	8006102 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800613a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d011      	beq.n	8006168 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00e      	beq.n	8006168 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800614a:	e006      	b.n	800615a <_PrintUnsigned+0x112>
        FieldWidth--;
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	3b01      	subs	r3, #1
 8006150:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8006152:	2120      	movs	r1, #32
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff fefb 	bl	8005f50 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <_PrintUnsigned+0x120>
 8006160:	69fa      	ldr	r2, [r7, #28]
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	429a      	cmp	r2, r3
 8006166:	d3f1      	bcc.n	800614c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006168:	bf00      	nop
 800616a:	3728      	adds	r7, #40	@ 0x28
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	080078d8 	.word	0x080078d8

08006174 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af02      	add	r7, sp, #8
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	bfb8      	it	lt
 8006188:	425b      	neglt	r3, r3
 800618a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800618c:	2301      	movs	r3, #1
 800618e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006190:	e007      	b.n	80061a2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	fb92 f3f3 	sdiv	r3, r2, r3
 800619a:	613b      	str	r3, [r7, #16]
    Width++;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	3301      	adds	r3, #1
 80061a0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	daf3      	bge.n	8006192 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d901      	bls.n	80061b6 <_PrintInt+0x42>
    Width = NumDigits;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <_PrintInt+0x5e>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	db04      	blt.n	80061cc <_PrintInt+0x58>
 80061c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <_PrintInt+0x5e>
    FieldWidth--;
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <_PrintInt+0x6e>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d016      	beq.n	8006210 <_PrintInt+0x9c>
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d111      	bne.n	8006210 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00e      	beq.n	8006210 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061f2:	e006      	b.n	8006202 <_PrintInt+0x8e>
        FieldWidth--;
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80061fa:	2120      	movs	r1, #32
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff fea7 	bl	8005f50 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <_PrintInt+0x9c>
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	429a      	cmp	r2, r3
 800620e:	d3f1      	bcc.n	80061f4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	da07      	bge.n	8006226 <_PrintInt+0xb2>
    v = -v;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	425b      	negs	r3, r3
 800621a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800621c:	212d      	movs	r1, #45	@ 0x2d
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f7ff fe96 	bl	8005f50 <_StoreChar>
 8006224:	e008      	b.n	8006238 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006230:	212b      	movs	r1, #43	@ 0x2b
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff fe8c 	bl	8005f50 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d019      	beq.n	8006276 <_PrintInt+0x102>
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d114      	bne.n	8006276 <_PrintInt+0x102>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d111      	bne.n	8006276 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00e      	beq.n	8006276 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006258:	e006      	b.n	8006268 <_PrintInt+0xf4>
        FieldWidth--;
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	3b01      	subs	r3, #1
 800625e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006260:	2130      	movs	r1, #48	@ 0x30
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff fe74 	bl	8005f50 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <_PrintInt+0x102>
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	429a      	cmp	r2, r3
 8006274:	d3f1      	bcc.n	800625a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fedf 	bl	8006048 <_PrintUnsigned>
}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b098      	sub	sp, #96	@ 0x60
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062a0:	f3ef 8311 	mrs	r3, BASEPRI
 80062a4:	f04f 0120 	mov.w	r1, #32
 80062a8:	f381 8811 	msr	BASEPRI, r1
 80062ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ae:	48b7      	ldr	r0, [pc, #732]	@ (800658c <_VPrintTarget+0x2f8>)
 80062b0:	f7ff fbf3 	bl	8005a9a <_PreparePacket>
 80062b4:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80062b6:	4bb5      	ldr	r3, [pc, #724]	@ (800658c <_VPrintTarget+0x2f8>)
 80062b8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80062ba:	2300      	movs	r3, #0
 80062bc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	3301      	adds	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80062da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 81a8 	beq.w	8006634 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80062e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062e8:	2b25      	cmp	r3, #37	@ 0x25
 80062ea:	f040 8195 	bne.w	8006618 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80062ee:	2300      	movs	r3, #0
 80062f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80062f2:	2301      	movs	r3, #1
 80062f4:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80062fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006302:	3b23      	subs	r3, #35	@ 0x23
 8006304:	2b0d      	cmp	r3, #13
 8006306:	d83f      	bhi.n	8006388 <_VPrintTarget+0xf4>
 8006308:	a201      	add	r2, pc, #4	@ (adr r2, 8006310 <_VPrintTarget+0x7c>)
 800630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630e:	bf00      	nop
 8006310:	08006379 	.word	0x08006379
 8006314:	08006389 	.word	0x08006389
 8006318:	08006389 	.word	0x08006389
 800631c:	08006389 	.word	0x08006389
 8006320:	08006389 	.word	0x08006389
 8006324:	08006389 	.word	0x08006389
 8006328:	08006389 	.word	0x08006389
 800632c:	08006389 	.word	0x08006389
 8006330:	08006369 	.word	0x08006369
 8006334:	08006389 	.word	0x08006389
 8006338:	08006349 	.word	0x08006349
 800633c:	08006389 	.word	0x08006389
 8006340:	08006389 	.word	0x08006389
 8006344:	08006359 	.word	0x08006359
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	3301      	adds	r3, #1
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	e01a      	b.n	800638e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800635a:	f043 0302 	orr.w	r3, r3, #2
 800635e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3301      	adds	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e012      	b.n	800638e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800636a:	f043 0304 	orr.w	r3, r3, #4
 800636e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3301      	adds	r3, #1
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	e00a      	b.n	800638e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800637a:	f043 0308 	orr.w	r3, r3, #8
 800637e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	e002      	b.n	800638e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006388:	2300      	movs	r3, #0
 800638a:	653b      	str	r3, [r7, #80]	@ 0x50
 800638c:	bf00      	nop
        }
      } while (v);
 800638e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1b0      	bne.n	80062f6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006394:	2300      	movs	r3, #0
 8006396:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80063a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80063a6:	d912      	bls.n	80063ce <_VPrintTarget+0x13a>
 80063a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063ac:	2b39      	cmp	r3, #57	@ 0x39
 80063ae:	d80e      	bhi.n	80063ce <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80063b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	461a      	mov	r2, r3
 80063c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063c6:	4413      	add	r3, r2
 80063c8:	3b30      	subs	r3, #48	@ 0x30
 80063ca:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80063cc:	e7e4      	b.n	8006398 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80063ce:	2300      	movs	r3, #0
 80063d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80063da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063de:	2b2e      	cmp	r3, #46	@ 0x2e
 80063e0:	d11d      	bne.n	800641e <_VPrintTarget+0x18a>
        sFormat++;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3301      	adds	r3, #1
 80063e6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80063f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80063f6:	d912      	bls.n	800641e <_VPrintTarget+0x18a>
 80063f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063fc:	2b39      	cmp	r3, #57	@ 0x39
 80063fe:	d80e      	bhi.n	800641e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006406:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	461a      	mov	r2, r3
 8006412:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006416:	4413      	add	r3, r2
 8006418:	3b30      	subs	r3, #48	@ 0x30
 800641a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 800641c:	e7e4      	b.n	80063e8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006426:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800642a:	2b6c      	cmp	r3, #108	@ 0x6c
 800642c:	d003      	beq.n	8006436 <_VPrintTarget+0x1a2>
 800642e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006432:	2b68      	cmp	r3, #104	@ 0x68
 8006434:	d107      	bne.n	8006446 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3301      	adds	r3, #1
 8006442:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006444:	e7ef      	b.n	8006426 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006446:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800644a:	2b25      	cmp	r3, #37	@ 0x25
 800644c:	f000 80d8 	beq.w	8006600 <_VPrintTarget+0x36c>
 8006450:	2b25      	cmp	r3, #37	@ 0x25
 8006452:	f2c0 80dc 	blt.w	800660e <_VPrintTarget+0x37a>
 8006456:	2b78      	cmp	r3, #120	@ 0x78
 8006458:	f300 80d9 	bgt.w	800660e <_VPrintTarget+0x37a>
 800645c:	2b58      	cmp	r3, #88	@ 0x58
 800645e:	f2c0 80d6 	blt.w	800660e <_VPrintTarget+0x37a>
 8006462:	3b58      	subs	r3, #88	@ 0x58
 8006464:	2b20      	cmp	r3, #32
 8006466:	f200 80d2 	bhi.w	800660e <_VPrintTarget+0x37a>
 800646a:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <_VPrintTarget+0x1dc>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	08006567 	.word	0x08006567
 8006474:	0800660f 	.word	0x0800660f
 8006478:	0800660f 	.word	0x0800660f
 800647c:	0800660f 	.word	0x0800660f
 8006480:	0800660f 	.word	0x0800660f
 8006484:	0800660f 	.word	0x0800660f
 8006488:	0800660f 	.word	0x0800660f
 800648c:	0800660f 	.word	0x0800660f
 8006490:	0800660f 	.word	0x0800660f
 8006494:	0800660f 	.word	0x0800660f
 8006498:	0800660f 	.word	0x0800660f
 800649c:	080064f5 	.word	0x080064f5
 80064a0:	0800651b 	.word	0x0800651b
 80064a4:	0800660f 	.word	0x0800660f
 80064a8:	0800660f 	.word	0x0800660f
 80064ac:	0800660f 	.word	0x0800660f
 80064b0:	0800660f 	.word	0x0800660f
 80064b4:	0800660f 	.word	0x0800660f
 80064b8:	0800660f 	.word	0x0800660f
 80064bc:	0800660f 	.word	0x0800660f
 80064c0:	0800660f 	.word	0x0800660f
 80064c4:	0800660f 	.word	0x0800660f
 80064c8:	0800660f 	.word	0x0800660f
 80064cc:	0800660f 	.word	0x0800660f
 80064d0:	080065db 	.word	0x080065db
 80064d4:	0800660f 	.word	0x0800660f
 80064d8:	0800660f 	.word	0x0800660f
 80064dc:	08006591 	.word	0x08006591
 80064e0:	0800660f 	.word	0x0800660f
 80064e4:	08006541 	.word	0x08006541
 80064e8:	0800660f 	.word	0x0800660f
 80064ec:	0800660f 	.word	0x0800660f
 80064f0:	08006567 	.word	0x08006567
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	1d19      	adds	r1, r3, #4
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6011      	str	r1, [r2, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8006508:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800650c:	f107 0310 	add.w	r3, r7, #16
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff fd1c 	bl	8005f50 <_StoreChar>
        break;
 8006518:	e07a      	b.n	8006610 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	1d19      	adds	r1, r3, #4
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6011      	str	r1, [r2, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006528:	f107 0010 	add.w	r0, r7, #16
 800652c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006536:	220a      	movs	r2, #10
 8006538:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800653a:	f7ff fe1b 	bl	8006174 <_PrintInt>
        break;
 800653e:	e067      	b.n	8006610 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	1d19      	adds	r1, r3, #4
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6011      	str	r1, [r2, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800654e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006550:	f107 0010 	add.w	r0, r7, #16
 8006554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800655e:	220a      	movs	r2, #10
 8006560:	f7ff fd72 	bl	8006048 <_PrintUnsigned>
        break;
 8006564:	e054      	b.n	8006610 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	1d19      	adds	r1, r3, #4
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6011      	str	r1, [r2, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006574:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006576:	f107 0010 	add.w	r0, r7, #16
 800657a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006584:	2210      	movs	r2, #16
 8006586:	f7ff fd5f 	bl	8006048 <_PrintUnsigned>
        break;
 800658a:	e041      	b.n	8006610 <_VPrintTarget+0x37c>
 800658c:	200045d0 	.word	0x200045d0
      case 's':
        s = va_arg(*pParamList, const char*);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	1d19      	adds	r1, r3, #4
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6011      	str	r1, [r2, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 800659e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <_VPrintTarget+0x314>
          s = "(null)";
 80065a4:	4b4a      	ldr	r3, [pc, #296]	@ (80066d0 <_VPrintTarget+0x43c>)
 80065a6:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 80065a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 80065b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b2:	3301      	adds	r3, #1
 80065b4:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 80065b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00b      	beq.n	80065d6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80065be:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80065c2:	f107 0310 	add.w	r3, r7, #16
 80065c6:	4611      	mov	r1, r2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fcc1 	bl	8005f50 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80065d2:	d9e9      	bls.n	80065a8 <_VPrintTarget+0x314>
        break;
 80065d4:	e01c      	b.n	8006610 <_VPrintTarget+0x37c>
            break;
 80065d6:	bf00      	nop
        break;
 80065d8:	e01a      	b.n	8006610 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	1d19      	adds	r1, r3, #4
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6011      	str	r1, [r2, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80065e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065ea:	f107 0010 	add.w	r0, r7, #16
 80065ee:	2300      	movs	r3, #0
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	2308      	movs	r3, #8
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	2308      	movs	r3, #8
 80065f8:	2210      	movs	r2, #16
 80065fa:	f7ff fd25 	bl	8006048 <_PrintUnsigned>
        break;
 80065fe:	e007      	b.n	8006610 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006600:	f107 0310 	add.w	r3, r7, #16
 8006604:	2125      	movs	r1, #37	@ 0x25
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fca2 	bl	8005f50 <_StoreChar>
        break;
 800660c:	e000      	b.n	8006610 <_VPrintTarget+0x37c>
      default:
        break;
 800660e:	bf00      	nop
      }
      sFormat++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3301      	adds	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	e007      	b.n	8006628 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006618:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800661c:	f107 0310 	add.w	r3, r7, #16
 8006620:	4611      	mov	r1, r2
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fc94 	bl	8005f50 <_StoreChar>
    }
  } while (*sFormat);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	f47f ae4d 	bne.w	80062cc <_VPrintTarget+0x38>
 8006632:	e000      	b.n	8006636 <_VPrintTarget+0x3a2>
      break;
 8006634:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d041      	beq.n	80066c0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800663c:	6a3a      	ldr	r2, [r7, #32]
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800664c:	e00b      	b.n	8006666 <_VPrintTarget+0x3d2>
 800664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006650:	b2da      	uxtb	r2, r3
 8006652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006654:	1c59      	adds	r1, r3, #1
 8006656:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006658:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006662:	09db      	lsrs	r3, r3, #7
 8006664:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006668:	2b7f      	cmp	r3, #127	@ 0x7f
 800666a:	d8f0      	bhi.n	800664e <_VPrintTarget+0x3ba>
 800666c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006672:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006674:	b2d2      	uxtb	r2, r2
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006680:	2300      	movs	r3, #0
 8006682:	633b      	str	r3, [r7, #48]	@ 0x30
 8006684:	e00b      	b.n	800669e <_VPrintTarget+0x40a>
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	b2da      	uxtb	r2, r3
 800668a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668c:	1c59      	adds	r1, r3, #1
 800668e:	6379      	str	r1, [r7, #52]	@ 0x34
 8006690:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669a:	09db      	lsrs	r3, r3, #7
 800669c:	633b      	str	r3, [r7, #48]	@ 0x30
 800669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80066a2:	d8f0      	bhi.n	8006686 <_VPrintTarget+0x3f2>
 80066a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80066aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ac:	b2d2      	uxtb	r2, r2
 80066ae:	701a      	strb	r2, [r3, #0]
 80066b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	6979      	ldr	r1, [r7, #20]
 80066b8:	221a      	movs	r2, #26
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff fada 	bl	8005c74 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80066c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80066c6:	bf00      	nop
 80066c8:	3758      	adds	r7, #88	@ 0x58
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	08007884 	.word	0x08007884

080066d4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af02      	add	r7, sp, #8
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066e2:	2300      	movs	r3, #0
 80066e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80066e8:	4917      	ldr	r1, [pc, #92]	@ (8006748 <SEGGER_SYSVIEW_Init+0x74>)
 80066ea:	4818      	ldr	r0, [pc, #96]	@ (800674c <SEGGER_SYSVIEW_Init+0x78>)
 80066ec:	f7ff f8cc 	bl	8005888 <SEGGER_RTT_AllocUpBuffer>
 80066f0:	4603      	mov	r3, r0
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	4b16      	ldr	r3, [pc, #88]	@ (8006750 <SEGGER_SYSVIEW_Init+0x7c>)
 80066f6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80066f8:	4b15      	ldr	r3, [pc, #84]	@ (8006750 <SEGGER_SYSVIEW_Init+0x7c>)
 80066fa:	785a      	ldrb	r2, [r3, #1]
 80066fc:	4b14      	ldr	r3, [pc, #80]	@ (8006750 <SEGGER_SYSVIEW_Init+0x7c>)
 80066fe:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006700:	4b13      	ldr	r3, [pc, #76]	@ (8006750 <SEGGER_SYSVIEW_Init+0x7c>)
 8006702:	7e1b      	ldrb	r3, [r3, #24]
 8006704:	4618      	mov	r0, r3
 8006706:	2300      	movs	r3, #0
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	2308      	movs	r3, #8
 800670c:	4a11      	ldr	r2, [pc, #68]	@ (8006754 <SEGGER_SYSVIEW_Init+0x80>)
 800670e:	490f      	ldr	r1, [pc, #60]	@ (800674c <SEGGER_SYSVIEW_Init+0x78>)
 8006710:	f7ff f93e 	bl	8005990 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006714:	4b0e      	ldr	r3, [pc, #56]	@ (8006750 <SEGGER_SYSVIEW_Init+0x7c>)
 8006716:	2200      	movs	r2, #0
 8006718:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800671a:	4b0f      	ldr	r3, [pc, #60]	@ (8006758 <SEGGER_SYSVIEW_Init+0x84>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a0c      	ldr	r2, [pc, #48]	@ (8006750 <SEGGER_SYSVIEW_Init+0x7c>)
 8006720:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006722:	4a0b      	ldr	r2, [pc, #44]	@ (8006750 <SEGGER_SYSVIEW_Init+0x7c>)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006728:	4a09      	ldr	r2, [pc, #36]	@ (8006750 <SEGGER_SYSVIEW_Init+0x7c>)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800672e:	4a08      	ldr	r2, [pc, #32]	@ (8006750 <SEGGER_SYSVIEW_Init+0x7c>)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006734:	4a06      	ldr	r2, [pc, #24]	@ (8006750 <SEGGER_SYSVIEW_Init+0x7c>)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800673a:	4b05      	ldr	r3, [pc, #20]	@ (8006750 <SEGGER_SYSVIEW_Init+0x7c>)
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006740:	bf00      	nop
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20003598 	.word	0x20003598
 800674c:	0800788c 	.word	0x0800788c
 8006750:	200045a0 	.word	0x200045a0
 8006754:	20004598 	.word	0x20004598
 8006758:	e0001004 	.word	0xe0001004

0800675c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006764:	4a04      	ldr	r2, [pc, #16]	@ (8006778 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6113      	str	r3, [r2, #16]
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	200045a0 	.word	0x200045a0

0800677c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006784:	f3ef 8311 	mrs	r3, BASEPRI
 8006788:	f04f 0120 	mov.w	r1, #32
 800678c:	f381 8811 	msr	BASEPRI, r1
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	4808      	ldr	r0, [pc, #32]	@ (80067b4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006794:	f7ff f981 	bl	8005a9a <_PreparePacket>
 8006798:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	68b9      	ldr	r1, [r7, #8]
 800679e:	68b8      	ldr	r0, [r7, #8]
 80067a0:	f7ff fa68 	bl	8005c74 <_SendPacket>
  RECORD_END();
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f383 8811 	msr	BASEPRI, r3
}
 80067aa:	bf00      	nop
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	200045d0 	.word	0x200045d0

080067b8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067c2:	f3ef 8311 	mrs	r3, BASEPRI
 80067c6:	f04f 0120 	mov.w	r1, #32
 80067ca:	f381 8811 	msr	BASEPRI, r1
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	4816      	ldr	r0, [pc, #88]	@ (800682c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80067d2:	f7ff f962 	bl	8005a9a <_PreparePacket>
 80067d6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	e00b      	b.n	80067fe <SEGGER_SYSVIEW_RecordU32+0x46>
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	1c59      	adds	r1, r3, #1
 80067ee:	61f9      	str	r1, [r7, #28]
 80067f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	09db      	lsrs	r3, r3, #7
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	2b7f      	cmp	r3, #127	@ 0x7f
 8006802:	d8f0      	bhi.n	80067e6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	61fa      	str	r2, [r7, #28]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	6938      	ldr	r0, [r7, #16]
 800681a:	f7ff fa2b 	bl	8005c74 <_SendPacket>
  RECORD_END();
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f383 8811 	msr	BASEPRI, r3
}
 8006824:	bf00      	nop
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	200045d0 	.word	0x200045d0

08006830 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	@ 0x30
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800683c:	f3ef 8311 	mrs	r3, BASEPRI
 8006840:	f04f 0120 	mov.w	r1, #32
 8006844:	f381 8811 	msr	BASEPRI, r1
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	4825      	ldr	r0, [pc, #148]	@ (80068e0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800684c:	f7ff f925 	bl	8005a9a <_PreparePacket>
 8006850:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800685e:	e00b      	b.n	8006878 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006862:	b2da      	uxtb	r2, r3
 8006864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006866:	1c59      	adds	r1, r3, #1
 8006868:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800686a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006874:	09db      	lsrs	r3, r3, #7
 8006876:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687a:	2b7f      	cmp	r3, #127	@ 0x7f
 800687c:	d8f0      	bhi.n	8006860 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800687e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006884:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	627b      	str	r3, [r7, #36]	@ 0x24
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	623b      	str	r3, [r7, #32]
 8006896:	e00b      	b.n	80068b0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	b2da      	uxtb	r2, r3
 800689c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689e:	1c59      	adds	r1, r3, #1
 80068a0:	6279      	str	r1, [r7, #36]	@ 0x24
 80068a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	09db      	lsrs	r3, r3, #7
 80068ae:	623b      	str	r3, [r7, #32]
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80068b4:	d8f0      	bhi.n	8006898 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80068bc:	6a3a      	ldr	r2, [r7, #32]
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	6979      	ldr	r1, [r7, #20]
 80068ca:	69b8      	ldr	r0, [r7, #24]
 80068cc:	f7ff f9d2 	bl	8005c74 <_SendPacket>
  RECORD_END();
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f383 8811 	msr	BASEPRI, r3
}
 80068d6:	bf00      	nop
 80068d8:	3730      	adds	r7, #48	@ 0x30
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	200045d0 	.word	0x200045d0

080068e4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08c      	sub	sp, #48	@ 0x30
 80068e8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80068ea:	4b58      	ldr	r3, [pc, #352]	@ (8006a4c <SEGGER_SYSVIEW_Start+0x168>)
 80068ec:	2201      	movs	r2, #1
 80068ee:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80068f0:	f3ef 8311 	mrs	r3, BASEPRI
 80068f4:	f04f 0120 	mov.w	r1, #32
 80068f8:	f381 8811 	msr	BASEPRI, r1
 80068fc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80068fe:	4b53      	ldr	r3, [pc, #332]	@ (8006a4c <SEGGER_SYSVIEW_Start+0x168>)
 8006900:	785b      	ldrb	r3, [r3, #1]
 8006902:	220a      	movs	r2, #10
 8006904:	4952      	ldr	r1, [pc, #328]	@ (8006a50 <SEGGER_SYSVIEW_Start+0x16c>)
 8006906:	4618      	mov	r0, r3
 8006908:	f7f9 fc6a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006912:	200a      	movs	r0, #10
 8006914:	f7ff ff32 	bl	800677c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006918:	f3ef 8311 	mrs	r3, BASEPRI
 800691c:	f04f 0120 	mov.w	r1, #32
 8006920:	f381 8811 	msr	BASEPRI, r1
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	484b      	ldr	r0, [pc, #300]	@ (8006a54 <SEGGER_SYSVIEW_Start+0x170>)
 8006928:	f7ff f8b7 	bl	8005a9a <_PreparePacket>
 800692c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006936:	4b45      	ldr	r3, [pc, #276]	@ (8006a4c <SEGGER_SYSVIEW_Start+0x168>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800693c:	e00b      	b.n	8006956 <SEGGER_SYSVIEW_Start+0x72>
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	b2da      	uxtb	r2, r3
 8006942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006944:	1c59      	adds	r1, r3, #1
 8006946:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006948:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	09db      	lsrs	r3, r3, #7
 8006954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006958:	2b7f      	cmp	r3, #127	@ 0x7f
 800695a:	d8f0      	bhi.n	800693e <SEGGER_SYSVIEW_Start+0x5a>
 800695c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006962:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	701a      	strb	r2, [r3, #0]
 8006968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006970:	4b36      	ldr	r3, [pc, #216]	@ (8006a4c <SEGGER_SYSVIEW_Start+0x168>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	623b      	str	r3, [r7, #32]
 8006976:	e00b      	b.n	8006990 <SEGGER_SYSVIEW_Start+0xac>
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	1c59      	adds	r1, r3, #1
 8006980:	6279      	str	r1, [r7, #36]	@ 0x24
 8006982:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	09db      	lsrs	r3, r3, #7
 800698e:	623b      	str	r3, [r7, #32]
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	2b7f      	cmp	r3, #127	@ 0x7f
 8006994:	d8f0      	bhi.n	8006978 <SEGGER_SYSVIEW_Start+0x94>
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	627a      	str	r2, [r7, #36]	@ 0x24
 800699c:	6a3a      	ldr	r2, [r7, #32]
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	4b28      	ldr	r3, [pc, #160]	@ (8006a4c <SEGGER_SYSVIEW_Start+0x168>)
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	e00b      	b.n	80069ca <SEGGER_SYSVIEW_Start+0xe6>
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	1c59      	adds	r1, r3, #1
 80069ba:	61f9      	str	r1, [r7, #28]
 80069bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	09db      	lsrs	r3, r3, #7
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80069ce:	d8f0      	bhi.n	80069b2 <SEGGER_SYSVIEW_Start+0xce>
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	61fa      	str	r2, [r7, #28]
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	2300      	movs	r3, #0
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	e00b      	b.n	8006a02 <SEGGER_SYSVIEW_Start+0x11e>
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	6179      	str	r1, [r7, #20]
 80069f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	09db      	lsrs	r3, r3, #7
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a06:	d8f0      	bhi.n	80069ea <SEGGER_SYSVIEW_Start+0x106>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	617a      	str	r2, [r7, #20]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a18:	2218      	movs	r2, #24
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff f929 	bl	8005c74 <_SendPacket>
      RECORD_END();
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a28:	4b08      	ldr	r3, [pc, #32]	@ (8006a4c <SEGGER_SYSVIEW_Start+0x168>)
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006a30:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <SEGGER_SYSVIEW_Start+0x168>)
 8006a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a34:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006a36:	f000 f9eb 	bl	8006e10 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006a3a:	f000 f9b1 	bl	8006da0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006a3e:	f000 fd21 	bl	8007484 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006a42:	bf00      	nop
 8006a44:	3730      	adds	r7, #48	@ 0x30
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	200045a0 	.word	0x200045a0
 8006a50:	080078cc 	.word	0x080078cc
 8006a54:	200045d0 	.word	0x200045d0

08006a58 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a62:	f04f 0120 	mov.w	r1, #32
 8006a66:	f381 8811 	msr	BASEPRI, r1
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	480b      	ldr	r0, [pc, #44]	@ (8006a9c <SEGGER_SYSVIEW_Stop+0x44>)
 8006a6e:	f7ff f814 	bl	8005a9a <_PreparePacket>
 8006a72:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006a74:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d007      	beq.n	8006a8c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006a7c:	220b      	movs	r2, #11
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6838      	ldr	r0, [r7, #0]
 8006a82:	f7ff f8f7 	bl	8005c74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006a86:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f383 8811 	msr	BASEPRI, r3
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	200045d0 	.word	0x200045d0
 8006aa0:	200045a0 	.word	0x200045a0

08006aa4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	@ 0x30
 8006aa8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8006aae:	f04f 0120 	mov.w	r1, #32
 8006ab2:	f381 8811 	msr	BASEPRI, r1
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	4845      	ldr	r0, [pc, #276]	@ (8006bd0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006aba:	f7fe ffee 	bl	8005a9a <_PreparePacket>
 8006abe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ac8:	4b42      	ldr	r3, [pc, #264]	@ (8006bd4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ace:	e00b      	b.n	8006ae8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad6:	1c59      	adds	r1, r3, #1
 8006ad8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ada:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae4:	09db      	lsrs	r3, r3, #7
 8006ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aea:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aec:	d8f0      	bhi.n	8006ad0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006af4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b02:	4b34      	ldr	r3, [pc, #208]	@ (8006bd4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	623b      	str	r3, [r7, #32]
 8006b08:	e00b      	b.n	8006b22 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	1c59      	adds	r1, r3, #1
 8006b12:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	09db      	lsrs	r3, r3, #7
 8006b20:	623b      	str	r3, [r7, #32]
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b26:	d8f0      	bhi.n	8006b0a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b2e:	6a3a      	ldr	r2, [r7, #32]
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	61fb      	str	r3, [r7, #28]
 8006b3c:	4b25      	ldr	r3, [pc, #148]	@ (8006bd4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	e00b      	b.n	8006b5c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	1c59      	adds	r1, r3, #1
 8006b4c:	61f9      	str	r1, [r7, #28]
 8006b4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	09db      	lsrs	r3, r3, #7
 8006b5a:	61bb      	str	r3, [r7, #24]
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b60:	d8f0      	bhi.n	8006b44 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	61fa      	str	r2, [r7, #28]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	2300      	movs	r3, #0
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	e00b      	b.n	8006b94 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1c59      	adds	r1, r3, #1
 8006b84:	6179      	str	r1, [r7, #20]
 8006b86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	09db      	lsrs	r3, r3, #7
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b98:	d8f0      	bhi.n	8006b7c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	617a      	str	r2, [r7, #20]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006baa:	2218      	movs	r2, #24
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	68b8      	ldr	r0, [r7, #8]
 8006bb0:	f7ff f860 	bl	8005c74 <_SendPacket>
  RECORD_END();
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006bba:	4b06      	ldr	r3, [pc, #24]	@ (8006bd4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006bc2:	4b04      	ldr	r3, [pc, #16]	@ (8006bd4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc6:	4798      	blx	r3
  }
}
 8006bc8:	bf00      	nop
 8006bca:	3730      	adds	r7, #48	@ 0x30
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	200045d0 	.word	0x200045d0
 8006bd4:	200045a0 	.word	0x200045a0

08006bd8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b092      	sub	sp, #72	@ 0x48
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006be0:	f3ef 8311 	mrs	r3, BASEPRI
 8006be4:	f04f 0120 	mov.w	r1, #32
 8006be8:	f381 8811 	msr	BASEPRI, r1
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	486a      	ldr	r0, [pc, #424]	@ (8006d98 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006bf0:	f7fe ff53 	bl	8005a9a <_PreparePacket>
 8006bf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b66      	ldr	r3, [pc, #408]	@ (8006d9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c0a:	e00b      	b.n	8006c24 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c12:	1c59      	adds	r1, r3, #1
 8006c14:	6479      	str	r1, [r7, #68]	@ 0x44
 8006c16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c20:	09db      	lsrs	r3, r3, #7
 8006c22:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c26:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c28:	d8f0      	bhi.n	8006c0c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c44:	e00b      	b.n	8006c5e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c4c:	1c59      	adds	r1, r3, #1
 8006c4e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006c50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5a:	09db      	lsrs	r3, r3, #7
 8006c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c60:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c62:	d8f0      	bhi.n	8006c46 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c6c:	b2d2      	uxtb	r2, r2
 8006c6e:	701a      	strb	r2, [r3, #0]
 8006c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c72:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f7fe fed3 	bl	8005a28 <_EncodeStr>
 8006c82:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006c84:	2209      	movs	r2, #9
 8006c86:	68f9      	ldr	r1, [r7, #12]
 8006c88:	6938      	ldr	r0, [r7, #16]
 8006c8a:	f7fe fff3 	bl	8005c74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4b40      	ldr	r3, [pc, #256]	@ (8006d9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ca2:	e00b      	b.n	8006cbc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006caa:	1c59      	adds	r1, r3, #1
 8006cac:	6379      	str	r1, [r7, #52]	@ 0x34
 8006cae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb8:	09db      	lsrs	r3, r3, #7
 8006cba:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cc0:	d8f0      	bhi.n	8006ca4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	637a      	str	r2, [r7, #52]	@ 0x34
 8006cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cdc:	e00b      	b.n	8006cf6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce4:	1c59      	adds	r1, r3, #1
 8006ce6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ce8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf2:	09db      	lsrs	r3, r3, #7
 8006cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cfa:	d8f0      	bhi.n	8006cde <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	623b      	str	r3, [r7, #32]
 8006d16:	e00b      	b.n	8006d30 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	1c59      	adds	r1, r3, #1
 8006d20:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	701a      	strb	r2, [r3, #0]
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	09db      	lsrs	r3, r3, #7
 8006d2e:	623b      	str	r3, [r7, #32]
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d34:	d8f0      	bhi.n	8006d18 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d3c:	6a3a      	ldr	r2, [r7, #32]
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	61fb      	str	r3, [r7, #28]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	e00b      	b.n	8006d6a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	1c59      	adds	r1, r3, #1
 8006d5a:	61f9      	str	r1, [r7, #28]
 8006d5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	701a      	strb	r2, [r3, #0]
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	09db      	lsrs	r3, r3, #7
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d6e:	d8f0      	bhi.n	8006d52 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	61fa      	str	r2, [r7, #28]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006d80:	2215      	movs	r2, #21
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	6938      	ldr	r0, [r7, #16]
 8006d86:	f7fe ff75 	bl	8005c74 <_SendPacket>
  RECORD_END();
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f383 8811 	msr	BASEPRI, r3
}
 8006d90:	bf00      	nop
 8006d92:	3748      	adds	r7, #72	@ 0x48
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	200045d0 	.word	0x200045d0
 8006d9c:	200045a0 	.word	0x200045a0

08006da0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006da4:	4b07      	ldr	r3, [pc, #28]	@ (8006dc4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d008      	beq.n	8006dbe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006dac:	4b05      	ldr	r3, [pc, #20]	@ (8006dc4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006db6:	4b03      	ldr	r3, [pc, #12]	@ (8006dc4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4798      	blx	r3
  }
}
 8006dbe:	bf00      	nop
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	200045a0 	.word	0x200045a0

08006dc8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8006dd4:	f04f 0120 	mov.w	r1, #32
 8006dd8:	f381 8811 	msr	BASEPRI, r1
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	480b      	ldr	r0, [pc, #44]	@ (8006e0c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006de0:	f7fe fe5b 	bl	8005a9a <_PreparePacket>
 8006de4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006de6:	2280      	movs	r2, #128	@ 0x80
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	6938      	ldr	r0, [r7, #16]
 8006dec:	f7fe fe1c 	bl	8005a28 <_EncodeStr>
 8006df0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006df2:	220e      	movs	r2, #14
 8006df4:	68f9      	ldr	r1, [r7, #12]
 8006df6:	6938      	ldr	r0, [r7, #16]
 8006df8:	f7fe ff3c 	bl	8005c74 <_SendPacket>
  RECORD_END();
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f383 8811 	msr	BASEPRI, r3
}
 8006e02:	bf00      	nop
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200045d0 	.word	0x200045d0

08006e10 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006e10:	b590      	push	{r4, r7, lr}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006e16:	4b15      	ldr	r3, [pc, #84]	@ (8006e6c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d01a      	beq.n	8006e54 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006e1e:	4b13      	ldr	r3, [pc, #76]	@ (8006e6c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d015      	beq.n	8006e54 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006e28:	4b10      	ldr	r3, [pc, #64]	@ (8006e6c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4798      	blx	r3
 8006e30:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e34:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006e36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e3a:	f04f 0200 	mov.w	r2, #0
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	000a      	movs	r2, r1
 8006e44:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e46:	4613      	mov	r3, r2
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	200d      	movs	r0, #13
 8006e4e:	f7ff fcef 	bl	8006830 <SEGGER_SYSVIEW_RecordU32x2>
 8006e52:	e006      	b.n	8006e62 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006e54:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	200c      	movs	r0, #12
 8006e5c:	f7ff fcac 	bl	80067b8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd90      	pop	{r4, r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	200045a0 	.word	0x200045a0
 8006e70:	e0001004 	.word	0xe0001004

08006e74 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7e:	f04f 0120 	mov.w	r1, #32
 8006e82:	f381 8811 	msr	BASEPRI, r1
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	4819      	ldr	r0, [pc, #100]	@ (8006ef0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006e8a:	f7fe fe06 	bl	8005a9a <_PreparePacket>
 8006e8e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006e94:	4b17      	ldr	r3, [pc, #92]	@ (8006ef4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	613b      	str	r3, [r7, #16]
 8006ea6:	e00b      	b.n	8006ec0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	1c59      	adds	r1, r3, #1
 8006eb0:	6179      	str	r1, [r7, #20]
 8006eb2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	09db      	lsrs	r3, r3, #7
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ec4:	d8f0      	bhi.n	8006ea8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	617a      	str	r2, [r7, #20]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	68b8      	ldr	r0, [r7, #8]
 8006edc:	f7fe feca 	bl	8005c74 <_SendPacket>
  RECORD_END();
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f383 8811 	msr	BASEPRI, r3
}
 8006ee6:	bf00      	nop
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	200045d0 	.word	0x200045d0
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006efe:	f3ef 8311 	mrs	r3, BASEPRI
 8006f02:	f04f 0120 	mov.w	r1, #32
 8006f06:	f381 8811 	msr	BASEPRI, r1
 8006f0a:	607b      	str	r3, [r7, #4]
 8006f0c:	4807      	ldr	r0, [pc, #28]	@ (8006f2c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006f0e:	f7fe fdc4 	bl	8005a9a <_PreparePacket>
 8006f12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006f14:	2203      	movs	r2, #3
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6838      	ldr	r0, [r7, #0]
 8006f1a:	f7fe feab 	bl	8005c74 <_SendPacket>
  RECORD_END();
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f383 8811 	msr	BASEPRI, r3
}
 8006f24:	bf00      	nop
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200045d0 	.word	0x200045d0

08006f30 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f36:	f3ef 8311 	mrs	r3, BASEPRI
 8006f3a:	f04f 0120 	mov.w	r1, #32
 8006f3e:	f381 8811 	msr	BASEPRI, r1
 8006f42:	607b      	str	r3, [r7, #4]
 8006f44:	4807      	ldr	r0, [pc, #28]	@ (8006f64 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006f46:	f7fe fda8 	bl	8005a9a <_PreparePacket>
 8006f4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006f4c:	2212      	movs	r2, #18
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6838      	ldr	r0, [r7, #0]
 8006f52:	f7fe fe8f 	bl	8005c74 <_SendPacket>
  RECORD_END();
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f383 8811 	msr	BASEPRI, r3
}
 8006f5c:	bf00      	nop
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	200045d0 	.word	0x200045d0

08006f68 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f70:	f3ef 8311 	mrs	r3, BASEPRI
 8006f74:	f04f 0120 	mov.w	r1, #32
 8006f78:	f381 8811 	msr	BASEPRI, r1
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	4817      	ldr	r0, [pc, #92]	@ (8006fdc <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006f80:	f7fe fd8b 	bl	8005a9a <_PreparePacket>
 8006f84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	e00b      	b.n	8006fac <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	1c59      	adds	r1, r3, #1
 8006f9c:	61f9      	str	r1, [r7, #28]
 8006f9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	09db      	lsrs	r3, r3, #7
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fb0:	d8f0      	bhi.n	8006f94 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	61fa      	str	r2, [r7, #28]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006fc2:	221c      	movs	r2, #28
 8006fc4:	68f9      	ldr	r1, [r7, #12]
 8006fc6:	6938      	ldr	r0, [r7, #16]
 8006fc8:	f7fe fe54 	bl	8005c74 <_SendPacket>
  RECORD_END();
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f383 8811 	msr	BASEPRI, r3
}
 8006fd2:	bf00      	nop
 8006fd4:	3720      	adds	r7, #32
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	200045d0 	.word	0x200045d0

08006fe0 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08a      	sub	sp, #40	@ 0x28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006fea:	f3ef 8311 	mrs	r3, BASEPRI
 8006fee:	f04f 0120 	mov.w	r1, #32
 8006ff2:	f381 8811 	msr	BASEPRI, r1
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	4824      	ldr	r0, [pc, #144]	@ (800708c <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006ffa:	f7fe fd4e 	bl	8005a9a <_PreparePacket>
 8006ffe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	627b      	str	r3, [r7, #36]	@ 0x24
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	623b      	str	r3, [r7, #32]
 800700c:	e00b      	b.n	8007026 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007014:	1c59      	adds	r1, r3, #1
 8007016:	6279      	str	r1, [r7, #36]	@ 0x24
 8007018:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	09db      	lsrs	r3, r3, #7
 8007024:	623b      	str	r3, [r7, #32]
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	2b7f      	cmp	r3, #127	@ 0x7f
 800702a:	d8f0      	bhi.n	800700e <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	627a      	str	r2, [r7, #36]	@ 0x24
 8007032:	6a3a      	ldr	r2, [r7, #32]
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	61bb      	str	r3, [r7, #24]
 8007044:	e00b      	b.n	800705e <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	b2da      	uxtb	r2, r3
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	1c59      	adds	r1, r3, #1
 800704e:	61f9      	str	r1, [r7, #28]
 8007050:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	09db      	lsrs	r3, r3, #7
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	2b7f      	cmp	r3, #127	@ 0x7f
 8007062:	d8f0      	bhi.n	8007046 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	61fa      	str	r2, [r7, #28]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8007074:	221c      	movs	r2, #28
 8007076:	68f9      	ldr	r1, [r7, #12]
 8007078:	6938      	ldr	r0, [r7, #16]
 800707a:	f7fe fdfb 	bl	8005c74 <_SendPacket>
  RECORD_END();
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f383 8811 	msr	BASEPRI, r3
}
 8007084:	bf00      	nop
 8007086:	3728      	adds	r7, #40	@ 0x28
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	200045d0 	.word	0x200045d0

08007090 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007096:	f3ef 8311 	mrs	r3, BASEPRI
 800709a:	f04f 0120 	mov.w	r1, #32
 800709e:	f381 8811 	msr	BASEPRI, r1
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	4807      	ldr	r0, [pc, #28]	@ (80070c4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80070a6:	f7fe fcf8 	bl	8005a9a <_PreparePacket>
 80070aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80070ac:	2211      	movs	r2, #17
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6838      	ldr	r0, [r7, #0]
 80070b2:	f7fe fddf 	bl	8005c74 <_SendPacket>
  RECORD_END();
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f383 8811 	msr	BASEPRI, r3
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	200045d0 	.word	0x200045d0

080070c8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070d0:	f3ef 8311 	mrs	r3, BASEPRI
 80070d4:	f04f 0120 	mov.w	r1, #32
 80070d8:	f381 8811 	msr	BASEPRI, r1
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	4819      	ldr	r0, [pc, #100]	@ (8007144 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80070e0:	f7fe fcdb 	bl	8005a9a <_PreparePacket>
 80070e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80070ea:	4b17      	ldr	r3, [pc, #92]	@ (8007148 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	61fb      	str	r3, [r7, #28]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e00b      	b.n	8007116 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	b2da      	uxtb	r2, r3
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	1c59      	adds	r1, r3, #1
 8007106:	61f9      	str	r1, [r7, #28]
 8007108:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	09db      	lsrs	r3, r3, #7
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b7f      	cmp	r3, #127	@ 0x7f
 800711a:	d8f0      	bhi.n	80070fe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	61fa      	str	r2, [r7, #28]
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800712c:	2208      	movs	r2, #8
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	6938      	ldr	r0, [r7, #16]
 8007132:	f7fe fd9f 	bl	8005c74 <_SendPacket>
  RECORD_END();
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f383 8811 	msr	BASEPRI, r3
}
 800713c:	bf00      	nop
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	200045d0 	.word	0x200045d0
 8007148:	200045a0 	.word	0x200045a0

0800714c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007154:	f3ef 8311 	mrs	r3, BASEPRI
 8007158:	f04f 0120 	mov.w	r1, #32
 800715c:	f381 8811 	msr	BASEPRI, r1
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	4819      	ldr	r0, [pc, #100]	@ (80071c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007164:	f7fe fc99 	bl	8005a9a <_PreparePacket>
 8007168:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800716e:	4b17      	ldr	r3, [pc, #92]	@ (80071cc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	61bb      	str	r3, [r7, #24]
 8007180:	e00b      	b.n	800719a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	b2da      	uxtb	r2, r3
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	1c59      	adds	r1, r3, #1
 800718a:	61f9      	str	r1, [r7, #28]
 800718c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	09db      	lsrs	r3, r3, #7
 8007198:	61bb      	str	r3, [r7, #24]
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b7f      	cmp	r3, #127	@ 0x7f
 800719e:	d8f0      	bhi.n	8007182 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	61fa      	str	r2, [r7, #28]
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	701a      	strb	r2, [r3, #0]
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80071b0:	2204      	movs	r2, #4
 80071b2:	68f9      	ldr	r1, [r7, #12]
 80071b4:	6938      	ldr	r0, [r7, #16]
 80071b6:	f7fe fd5d 	bl	8005c74 <_SendPacket>
  RECORD_END();
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f383 8811 	msr	BASEPRI, r3
}
 80071c0:	bf00      	nop
 80071c2:	3720      	adds	r7, #32
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	200045d0 	.word	0x200045d0
 80071cc:	200045a0 	.word	0x200045a0

080071d0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071d8:	f3ef 8311 	mrs	r3, BASEPRI
 80071dc:	f04f 0120 	mov.w	r1, #32
 80071e0:	f381 8811 	msr	BASEPRI, r1
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	4819      	ldr	r0, [pc, #100]	@ (800724c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80071e8:	f7fe fc57 	bl	8005a9a <_PreparePacket>
 80071ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071f2:	4b17      	ldr	r3, [pc, #92]	@ (8007250 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	e00b      	b.n	800721e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	b2da      	uxtb	r2, r3
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	1c59      	adds	r1, r3, #1
 800720e:	61f9      	str	r1, [r7, #28]
 8007210:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	09db      	lsrs	r3, r3, #7
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b7f      	cmp	r3, #127	@ 0x7f
 8007222:	d8f0      	bhi.n	8007206 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	61fa      	str	r2, [r7, #28]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007234:	2206      	movs	r2, #6
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	6938      	ldr	r0, [r7, #16]
 800723a:	f7fe fd1b 	bl	8005c74 <_SendPacket>
  RECORD_END();
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f383 8811 	msr	BASEPRI, r3
}
 8007244:	bf00      	nop
 8007246:	3720      	adds	r7, #32
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	200045d0 	.word	0x200045d0
 8007250:	200045a0 	.word	0x200045a0

08007254 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007254:	b580      	push	{r7, lr}
 8007256:	b08a      	sub	sp, #40	@ 0x28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800725e:	f3ef 8311 	mrs	r3, BASEPRI
 8007262:	f04f 0120 	mov.w	r1, #32
 8007266:	f381 8811 	msr	BASEPRI, r1
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	4827      	ldr	r0, [pc, #156]	@ (800730c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800726e:	f7fe fc14 	bl	8005a9a <_PreparePacket>
 8007272:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007278:	4b25      	ldr	r3, [pc, #148]	@ (8007310 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	627b      	str	r3, [r7, #36]	@ 0x24
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	623b      	str	r3, [r7, #32]
 800728a:	e00b      	b.n	80072a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	b2da      	uxtb	r2, r3
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	1c59      	adds	r1, r3, #1
 8007294:	6279      	str	r1, [r7, #36]	@ 0x24
 8007296:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800729a:	b2d2      	uxtb	r2, r2
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	09db      	lsrs	r3, r3, #7
 80072a2:	623b      	str	r3, [r7, #32]
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80072a8:	d8f0      	bhi.n	800728c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80072b0:	6a3a      	ldr	r2, [r7, #32]
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	61fb      	str	r3, [r7, #28]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	e00b      	b.n	80072dc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	1c59      	adds	r1, r3, #1
 80072cc:	61f9      	str	r1, [r7, #28]
 80072ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	09db      	lsrs	r3, r3, #7
 80072da:	61bb      	str	r3, [r7, #24]
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b7f      	cmp	r3, #127	@ 0x7f
 80072e0:	d8f0      	bhi.n	80072c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	61fa      	str	r2, [r7, #28]
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80072f2:	2207      	movs	r2, #7
 80072f4:	68f9      	ldr	r1, [r7, #12]
 80072f6:	6938      	ldr	r0, [r7, #16]
 80072f8:	f7fe fcbc 	bl	8005c74 <_SendPacket>
  RECORD_END();
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f383 8811 	msr	BASEPRI, r3
}
 8007302:	bf00      	nop
 8007304:	3728      	adds	r7, #40	@ 0x28
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	200045d0 	.word	0x200045d0
 8007310:	200045a0 	.word	0x200045a0

08007314 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800731c:	4b04      	ldr	r3, [pc, #16]	@ (8007330 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	1ad3      	subs	r3, r2, r3
}
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	200045a0 	.word	0x200045a0

08007334 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007334:	b580      	push	{r7, lr}
 8007336:	b08c      	sub	sp, #48	@ 0x30
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800733e:	4b40      	ldr	r3, [pc, #256]	@ (8007440 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d077      	beq.n	8007436 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007346:	4b3e      	ldr	r3, [pc, #248]	@ (8007440 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800734c:	2300      	movs	r3, #0
 800734e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007350:	e008      	b.n	8007364 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735a:	2b00      	cmp	r3, #0
 800735c:	d007      	beq.n	800736e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800735e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007360:	3301      	adds	r3, #1
 8007362:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007368:	429a      	cmp	r2, r3
 800736a:	d3f2      	bcc.n	8007352 <SEGGER_SYSVIEW_SendModule+0x1e>
 800736c:	e000      	b.n	8007370 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800736e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d055      	beq.n	8007422 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007376:	f3ef 8311 	mrs	r3, BASEPRI
 800737a:	f04f 0120 	mov.w	r1, #32
 800737e:	f381 8811 	msr	BASEPRI, r1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	482f      	ldr	r0, [pc, #188]	@ (8007444 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007386:	f7fe fb88 	bl	8005a9a <_PreparePacket>
 800738a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	623b      	str	r3, [r7, #32]
 8007398:	e00b      	b.n	80073b2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	b2da      	uxtb	r2, r3
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	1c59      	adds	r1, r3, #1
 80073a2:	6279      	str	r1, [r7, #36]	@ 0x24
 80073a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073a8:	b2d2      	uxtb	r2, r2
 80073aa:	701a      	strb	r2, [r3, #0]
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	09db      	lsrs	r3, r3, #7
 80073b0:	623b      	str	r3, [r7, #32]
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80073b6:	d8f0      	bhi.n	800739a <SEGGER_SYSVIEW_SendModule+0x66>
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80073be:	6a3a      	ldr	r2, [r7, #32]
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]
 80073c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	61bb      	str	r3, [r7, #24]
 80073d2:	e00b      	b.n	80073ec <SEGGER_SYSVIEW_SendModule+0xb8>
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	1c59      	adds	r1, r3, #1
 80073dc:	61f9      	str	r1, [r7, #28]
 80073de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073e2:	b2d2      	uxtb	r2, r2
 80073e4:	701a      	strb	r2, [r3, #0]
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	09db      	lsrs	r3, r3, #7
 80073ea:	61bb      	str	r3, [r7, #24]
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80073f0:	d8f0      	bhi.n	80073d4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	61fa      	str	r2, [r7, #28]
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	b2d2      	uxtb	r2, r2
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2280      	movs	r2, #128	@ 0x80
 8007408:	4619      	mov	r1, r3
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7fe fb0c 	bl	8005a28 <_EncodeStr>
 8007410:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007412:	2216      	movs	r2, #22
 8007414:	68f9      	ldr	r1, [r7, #12]
 8007416:	6938      	ldr	r0, [r7, #16]
 8007418:	f7fe fc2c 	bl	8005c74 <_SendPacket>
      RECORD_END();
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d006      	beq.n	8007436 <SEGGER_SYSVIEW_SendModule+0x102>
 8007428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	4798      	blx	r3
    }
  }
}
 8007436:	bf00      	nop
 8007438:	3730      	adds	r7, #48	@ 0x30
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	200045c8 	.word	0x200045c8
 8007444:	200045d0 	.word	0x200045d0

08007448 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800744e:	4b0c      	ldr	r3, [pc, #48]	@ (8007480 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00f      	beq.n	8007476 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007456:	4b0a      	ldr	r3, [pc, #40]	@ (8007480 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1f2      	bne.n	800745c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	200045c8 	.word	0x200045c8

08007484 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800748a:	f3ef 8311 	mrs	r3, BASEPRI
 800748e:	f04f 0120 	mov.w	r1, #32
 8007492:	f381 8811 	msr	BASEPRI, r1
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	4817      	ldr	r0, [pc, #92]	@ (80074f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800749a:	f7fe fafe 	bl	8005a9a <_PreparePacket>
 800749e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	4b14      	ldr	r3, [pc, #80]	@ (80074fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	613b      	str	r3, [r7, #16]
 80074ae:	e00b      	b.n	80074c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	1c59      	adds	r1, r3, #1
 80074b8:	6179      	str	r1, [r7, #20]
 80074ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	09db      	lsrs	r3, r3, #7
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80074cc:	d8f0      	bhi.n	80074b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	617a      	str	r2, [r7, #20]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80074de:	221b      	movs	r2, #27
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	68b8      	ldr	r0, [r7, #8]
 80074e4:	f7fe fbc6 	bl	8005c74 <_SendPacket>
  RECORD_END();
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f383 8811 	msr	BASEPRI, r3
}
 80074ee:	bf00      	nop
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	200045d0 	.word	0x200045d0
 80074fc:	200045cc 	.word	0x200045cc

08007500 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007500:	b40f      	push	{r0, r1, r2, r3}
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007508:	f107 0314 	add.w	r3, r7, #20
 800750c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800750e:	1d3b      	adds	r3, r7, #4
 8007510:	461a      	mov	r2, r3
 8007512:	2100      	movs	r1, #0
 8007514:	6938      	ldr	r0, [r7, #16]
 8007516:	f7fe febd 	bl	8006294 <_VPrintTarget>
  va_end(ParamList);
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007524:	b004      	add	sp, #16
 8007526:	4770      	bx	lr

08007528 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	@ 0x28
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007530:	f3ef 8311 	mrs	r3, BASEPRI
 8007534:	f04f 0120 	mov.w	r1, #32
 8007538:	f381 8811 	msr	BASEPRI, r1
 800753c:	617b      	str	r3, [r7, #20]
 800753e:	4827      	ldr	r0, [pc, #156]	@ (80075dc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007540:	f7fe faab 	bl	8005a9a <_PreparePacket>
 8007544:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007546:	2280      	movs	r2, #128	@ 0x80
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	6938      	ldr	r0, [r7, #16]
 800754c:	f7fe fa6c 	bl	8005a28 <_EncodeStr>
 8007550:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	627b      	str	r3, [r7, #36]	@ 0x24
 8007556:	2301      	movs	r3, #1
 8007558:	623b      	str	r3, [r7, #32]
 800755a:	e00b      	b.n	8007574 <SEGGER_SYSVIEW_Warn+0x4c>
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	b2da      	uxtb	r2, r3
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	1c59      	adds	r1, r3, #1
 8007564:	6279      	str	r1, [r7, #36]	@ 0x24
 8007566:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	09db      	lsrs	r3, r3, #7
 8007572:	623b      	str	r3, [r7, #32]
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	2b7f      	cmp	r3, #127	@ 0x7f
 8007578:	d8f0      	bhi.n	800755c <SEGGER_SYSVIEW_Warn+0x34>
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007580:	6a3a      	ldr	r2, [r7, #32]
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	2300      	movs	r3, #0
 8007590:	61bb      	str	r3, [r7, #24]
 8007592:	e00b      	b.n	80075ac <SEGGER_SYSVIEW_Warn+0x84>
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	b2da      	uxtb	r2, r3
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	1c59      	adds	r1, r3, #1
 800759c:	61f9      	str	r1, [r7, #28]
 800759e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	09db      	lsrs	r3, r3, #7
 80075aa:	61bb      	str	r3, [r7, #24]
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80075b0:	d8f0      	bhi.n	8007594 <SEGGER_SYSVIEW_Warn+0x6c>
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	61fa      	str	r2, [r7, #28]
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80075c2:	221a      	movs	r2, #26
 80075c4:	68f9      	ldr	r1, [r7, #12]
 80075c6:	6938      	ldr	r0, [r7, #16]
 80075c8:	f7fe fb54 	bl	8005c74 <_SendPacket>
  RECORD_END();
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f383 8811 	msr	BASEPRI, r3
}
 80075d2:	bf00      	nop
 80075d4:	3728      	adds	r7, #40	@ 0x28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	200045d0 	.word	0x200045d0

080075e0 <memcmp>:
 80075e0:	b510      	push	{r4, lr}
 80075e2:	3901      	subs	r1, #1
 80075e4:	4402      	add	r2, r0
 80075e6:	4290      	cmp	r0, r2
 80075e8:	d101      	bne.n	80075ee <memcmp+0xe>
 80075ea:	2000      	movs	r0, #0
 80075ec:	e005      	b.n	80075fa <memcmp+0x1a>
 80075ee:	7803      	ldrb	r3, [r0, #0]
 80075f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	d001      	beq.n	80075fc <memcmp+0x1c>
 80075f8:	1b18      	subs	r0, r3, r4
 80075fa:	bd10      	pop	{r4, pc}
 80075fc:	3001      	adds	r0, #1
 80075fe:	e7f2      	b.n	80075e6 <memcmp+0x6>

08007600 <memset>:
 8007600:	4402      	add	r2, r0
 8007602:	4603      	mov	r3, r0
 8007604:	4293      	cmp	r3, r2
 8007606:	d100      	bne.n	800760a <memset+0xa>
 8007608:	4770      	bx	lr
 800760a:	f803 1b01 	strb.w	r1, [r3], #1
 800760e:	e7f9      	b.n	8007604 <memset+0x4>

08007610 <__libc_init_array>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	4d0d      	ldr	r5, [pc, #52]	@ (8007648 <__libc_init_array+0x38>)
 8007614:	4c0d      	ldr	r4, [pc, #52]	@ (800764c <__libc_init_array+0x3c>)
 8007616:	1b64      	subs	r4, r4, r5
 8007618:	10a4      	asrs	r4, r4, #2
 800761a:	2600      	movs	r6, #0
 800761c:	42a6      	cmp	r6, r4
 800761e:	d109      	bne.n	8007634 <__libc_init_array+0x24>
 8007620:	4d0b      	ldr	r5, [pc, #44]	@ (8007650 <__libc_init_array+0x40>)
 8007622:	4c0c      	ldr	r4, [pc, #48]	@ (8007654 <__libc_init_array+0x44>)
 8007624:	f000 f826 	bl	8007674 <_init>
 8007628:	1b64      	subs	r4, r4, r5
 800762a:	10a4      	asrs	r4, r4, #2
 800762c:	2600      	movs	r6, #0
 800762e:	42a6      	cmp	r6, r4
 8007630:	d105      	bne.n	800763e <__libc_init_array+0x2e>
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	f855 3b04 	ldr.w	r3, [r5], #4
 8007638:	4798      	blx	r3
 800763a:	3601      	adds	r6, #1
 800763c:	e7ee      	b.n	800761c <__libc_init_array+0xc>
 800763e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007642:	4798      	blx	r3
 8007644:	3601      	adds	r6, #1
 8007646:	e7f2      	b.n	800762e <__libc_init_array+0x1e>
 8007648:	080078f0 	.word	0x080078f0
 800764c:	080078f0 	.word	0x080078f0
 8007650:	080078f0 	.word	0x080078f0
 8007654:	080078f4 	.word	0x080078f4

08007658 <memcpy>:
 8007658:	440a      	add	r2, r1
 800765a:	4291      	cmp	r1, r2
 800765c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007660:	d100      	bne.n	8007664 <memcpy+0xc>
 8007662:	4770      	bx	lr
 8007664:	b510      	push	{r4, lr}
 8007666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800766a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800766e:	4291      	cmp	r1, r2
 8007670:	d1f9      	bne.n	8007666 <memcpy+0xe>
 8007672:	bd10      	pop	{r4, pc}

08007674 <_init>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	bf00      	nop
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr

08007680 <_fini>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	bf00      	nop
 8007684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007686:	bc08      	pop	{r3}
 8007688:	469e      	mov	lr, r3
 800768a:	4770      	bx	lr
